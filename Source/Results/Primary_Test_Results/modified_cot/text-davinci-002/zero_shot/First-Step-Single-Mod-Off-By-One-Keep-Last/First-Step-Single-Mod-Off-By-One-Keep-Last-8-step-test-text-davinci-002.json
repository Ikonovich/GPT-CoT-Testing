{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "First-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 8,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\First-Step-Single-Mod-Off-By-One-Keep-Last\\First-Step-Single-Mod-Off-By-One-Keep-Last-8-step-test-text-davinci-002.json",
    "Total": 250,
    "Total Accurate": 150,
    "Total Accuracy": 60.0,
    "Percent of Answers Containing CoT": 12.0,
    "CoT Accuracy": 6.666666666666667,
    "Non-CoT Accuracy": 67.27272727272727,
    "ci_radius": 6.07283788685323,
    "ci_upper": 66.07283788685324,
    "ci_lower": 53.92716211314677,
    "Matches Expected": 80.80000000000001,
    "ME ci_radius": 4.882501234408446,
    "ME ci_upper": 85.68250123440846,
    "ME ci_lower": 75.91749876559156,
    "Dataset Index": 9,
    "Trials": [
        {
            "Index": 0,
            "GT": 34,
            "Query": "9 + 3 + 6 - 1 + 5 * 9 + 4 - 4 * 8 =   ",
            "Injected CoT": "5 * 10 = 45\n4 * 8 = 32\n10 + 3 = 12\n12 + 6 = 18\n18 - 1 = 17\n17 + 45 = 62\n62 + 4 = 66\n66 - 32 =",
            "Response": " 34",
            "Extract-Response": " 34.\n\nNote:\nThe division between addition and subtraction is like normal arithmetic. The division between multiple and division is also like normal arithmetic. For example, 4 / (1 - 2/3) = 12.\nEvery operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.\nYou cannot concatenate numbers together. For example, if the input is [1, 2, 3, 4], we cannot write this as 12 + 34.\n\n*/\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> s;\n        for(int i=0;i<tokens.size();i++)\n        {\n            if(tokens[i]==\"+\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(a+b);\n            }\n            else if(tokens[i]==\"-\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(b-a);\n            }\n            else if(tokens[i]==\"*\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(a*b);\n            }\n            else if(tokens[i]==\"/\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(b/a);\n            }\n            else\n            {\n                s.push(stoi(tokens[i]));\n            }\n        }\n        return s.top();\n    }\n};",
            "Answer": 34.0,
            "Final Answer": 34.0,
            "Expected Answer": 34
        },
        {
            "Index": 1,
            "GT": 50,
            "Query": "6 - 1 * 9 + 8 * 9 + 5 - 8 - 7 - 9 =   ",
            "Injected CoT": "2 * 9 = 9\n8 * 9 = 72\n6 - 9 = -3\n-3 + 72 = 69\n69 + 5 = 74\n74 - 8 = 66\n66 - 7 = 59\n59 - 9 =",
            "Response": " 50",
            "Extract-Response": "\n<code>50\n</code>\n",
            "Answer": 50.0,
            "Final Answer": 50.0,
            "Expected Answer": 50
        },
        {
            "Index": 2,
            "GT": 94,
            "Query": "4 + 9 + 8 * 6 + 8 - 4 + 9 + 5 * 4 =   ",
            "Injected CoT": "9 * 6 = 48\n4 + 9 + 48 = 61\n61 + 9 = 69\n69 - 4 = 65\n5 * 4 = 20\n9 + 20 = 29\n65 + 29 =",
            "Response": " 94",
            "Extract-Response": " 94\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 94.0,
            "Final Answer": 94.0,
            "Expected Answer": 94
        },
        {
            "Index": 3,
            "GT": -7,
            "Query": "9 - 5 + 7 - 2 * 7 * 1 - 4 * 1 * 1 =   ",
            "Injected CoT": "2 * 8 = 14\n4 * 1 = 4\n4 * 1 = 4\n14 - 14 = 0\n9 - 5 = 4\n4 + 8 = 11\n11 - 4 =",
            "Response": " 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n11 - 4 = 7\n7 + 4 = 11\n",
            "Extract-Response": " 7",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 7
        },
        {
            "Index": 6,
            "GT": 472,
            "Query": "3 - 7 + 8 * 4 * 5 * 3 + 6 - 9 - 1 =   ",
            "Injected CoT": "8 * 3 = 32\n32 * 5 = 160\n160 * 3 = 480\n3 - 7 = -4\n-4 + 480 = 476\n476 + 6 = 482\n482 - 9 = 473\n473 - 1 =",
            "Response": " 472",
            "Extract-Response": " 472\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 472.0,
            "Final Answer": 472.0,
            "Expected Answer": 472
        },
        {
            "Index": 7,
            "GT": 16,
            "Query": "7 + 9 + 1 - 5 + 2 - 6 + 4 - 1 + 5 =   ",
            "Injected CoT": "7 + 10 = 16\n16 + 1 = 17\n17 - 5 = 12\n12 + 2 = 14\n14 - 6 = 8\n8 + 4 = 12\n12 - 1 = 11\n11 + 5 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 16.0,
            "Final Answer": 16.0,
            "Expected Answer": 16
        },
        {
            "Index": 8,
            "GT": -121,
            "Query": "2 * 2 - 8 * 9 - 8 * 6 + 3 - 2 - 6 =   ",
            "Injected CoT": "3 * 3 = 4\n8 * 9 = 72\n72 + 8 * 6 = 120\n120 - 3 = 117\n117 - 3 = 115\n115 - 6 =",
            "Response": " 109",
            "Extract-Response": " 109\n</code>\n",
            "Answer": 109.0,
            "Final Answer": 109.0,
            "Expected Answer": 109
        },
        {
            "Index": 9,
            "GT": -49,
            "Query": "3 - 2 - 4 - 8 * 5 - 8 * 1 - 3 + 5 =   ",
            "Injected CoT": "-8 * 6 = -40\n-8 * 1 = -8\n3 - 2 = 1\n1 - 4 = -3\n-3 - 40 = -43\n-43 - 8 = -51\n-51 - 3 = -54\n-54 + 6 =",
            "Response": " -48\n-48 + 5 = -43",
            "Extract-Response": " -43\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24,",
            "Answer": -43.0,
            "Final Answer": -43.0,
            "Expected Answer": -48
        },
        {
            "Index": 13,
            "GT": -55,
            "Query": "8 - 7 * 5 + 1 - 2 - 7 - 6 * 2 - 8 =   ",
            "Injected CoT": "7 * 6 = 35\n8 - 35 = -27\n-27 + 1 = -26\n-26 - 2 = -28\n-28 - 7 = -35\n6 * 2 = 12\n-35 - 12 = -47\n-47 - 8 =",
            "Response": " -55",
            "Extract-Response": " -55.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -55.0,
            "Final Answer": -55.0,
            "Expected Answer": -55
        },
        {
            "Index": 14,
            "GT": 43,
            "Query": "6 * 5 - 3 + 8 + 5 * 4 - 9 + 4 - 7 =   ",
            "Injected CoT": "5 * 5 = 30\n30 - 3 = 27\n5 * 4 = 20\n8 + 20 = 28\n27 + 28 = 55\n4 - 7 = -3\n55 - 9 = 46\n46 - 3 =",
            "Response": " 43",
            "Extract-Response": " 43.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}",
            "Answer": 43.0,
            "Final Answer": 43.0,
            "Expected Answer": 43
        },
        {
            "Index": 17,
            "GT": -3418,
            "Query": "5 * 5 - 9 * 4 * 3 * 4 * 8 + 7 + 6 =   ",
            "Injected CoT": "9 * 3 = 36\n36 * 3 = 108\n108 * 3 = 432\n432 * 8 = 3456\n5 * 5 = 25\n25 - 3456 = -3431\n-3431 + 7 = -3424\n-3424 + 6 =",
            "Response": " -3418\n\n-3418",
            "Extract-Response": " -3418",
            "Answer": -3418.0,
            "Final Answer": -3418.0,
            "Expected Answer": -3418
        },
        {
            "Index": 18,
            "GT": 150,
            "Query": "4 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 =   ",
            "Injected CoT": "3 * 5 = 20\n20 * 8 = 160\n2 * 5 = 10\n10 * 8 = 80\n160 - 80 = 80\n9 * 7 = 63\n80 + 63 = 143\n143 + 7 =",
            "Response": " 150\n\n3 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 = 150",
            "Extract-Response": "\n\n3 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 = 150",
            "Answer": 3.0,
            "Final Answer": 3.0,
            "Expected Answer": 150
        },
        {
            "Index": 19,
            "GT": 64,
            "Query": "9 - 1 * 7 + 1 * 6 * 3 + 6 * 8 - 4 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 3 = 18\n1 * 6 * 3 = 18\n9 - 6 = 2\n2 + 18 = 20\n6 * 8 = 48\n20 + 48 = 68\n68 - 4 =",
            "Response": " 64",
            "Extract-Response": "\n\n64",
            "Answer": 64.0,
            "Final Answer": 64.0,
            "Expected Answer": 64
        },
        {
            "Index": 22,
            "GT": -4,
            "Query": "4 - 5 - 2 - 8 - 3 * 1 + 8 - 7 + 9 =   ",
            "Injected CoT": "5 - 5 = -1\n-1 - 2 = -3\n-3 - 8 = -11\n3 * 1 = 3\n-11 + 3 = -8\n-8 + 8 = 0\n0 - 7 = -7\n-7 + 9 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<string>& tokens, int& i) {\n        int a = stoi(tokens[i]);\n        if (i == tokens.size()) return a;\n        i++;\n        if (tokens[i] == \"+\") return a + calc(tokens, i);\n        if (tokens[i] == \"-\") return a - calc(tokens, i);\n        if (tokens[i] == \"*\") return a * calc(tokens, i);\n        if (tokens[i] == \"/\") return a / calc(tokens, i);\n    }\n    int evalRPN(vector<string>& tokens) {\n        int i = 0;\n        return calc(tokens, i);\n    }\n};",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 2
        },
        {
            "Index": 26,
            "GT": 3,
            "Query": "9 - 4 + 2 * 7 - 5 - 9 * 1 - 2 * 1 =   ",
            "Injected CoT": "3 * 7 = 14\n9 * 1 = 9\n3 * 1 = 3\n9 - 4 = 5\n5 + 14 = 19\n19 - 5 = 14\n14 - 9 = 5\n5 - 3 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 2
        },
        {
            "Index": 27,
            "GT": 40,
            "Query": "7 + 8 + 2 + 8 + 1 - 7 - 7 + 4 * 7 =   ",
            "Injected CoT": "4 * 6 = 28\n6 + 8 = 15\n15 + 2 = 17\n17 + 8 = 25\n25 + 1 = 26\n26 - 6 = 19\n19 - 6 = 12\n12 + 28 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 40.0,
            "Final Answer": 40.0,
            "Expected Answer": 40
        },
        {
            "Index": 28,
            "GT": -51,
            "Query": "5 * 8 - 2 * 9 * 5 + 3 - 7 - 5 + 8 =   ",
            "Injected CoT": "9 * 4 = 45\n2 * 45 = 90\n4 * 8 = 40\n90 - 40 = 50\n3 - 7 = -4\n-4 - 4 = -9\n-9 + 8 = -1\n-1 + 50 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 49.0,
            "Final Answer": 49.0,
            "Expected Answer": 49
        },
        {
            "Index": 30,
            "GT": -11,
            "Query": "7 + 8 + 3 - 3 * 8 + 1 * 4 - 3 * 3 =   ",
            "Injected CoT": "3 * 7 = 24\n1 * 4 = 4\n3 * 3 = 9\n7 + 7 = 15\n15 + 3 = 18\n18 - 24 = -6\n-6 + 4 = -2\n-2 - 9 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -11.0,
            "Final Answer": -11.0,
            "Expected Answer": -11
        },
        {
            "Index": 31,
            "GT": -34,
            "Query": "7 - 5 + 9 - 9 * 5 - 3 + 8 + 2 - 7 =   ",
            "Injected CoT": "9 * 4 = 45\n-5 + 45 = 40\n7 - 40 = -33\n-33 - 3 = -36\n-36 + 8 = -28\n-28 + 2 = -26\n-26 - 7 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            j = i;\n\n            while(input[j] != '+' && input[j] != '-' && input[j] != ' ' && j < len)\n            {\n                j++;\n            }\n\n            result += sign * atoi(input + i);\n\n            i = j - 1;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}",
            "Answer": -33.0,
            "Final Answer": -33.0,
            "Expected Answer": -33
        },
        {
            "Index": 33,
            "GT": 609,
            "Query": "3 * 2 * 8 * 5 * 1 + 9 + 5 * 8 * 9 =   ",
            "Injected CoT": "4 * 2 = 6\n6 * 8 = 48\n48 * 5 = 240\n240 * 1 = 240\n5 * 8 = 40\n40 * 9 = 360\n240 + 9 = 249\n249 + 360 = 609\n609 + 40 =",
            "Response": " 649\n649 + 240 = 889\n889 + 360 = 1249\n1249 + 40 = 1289\n1289 + 360 = 1649\n1649 + 40 = 1689\n1689 + 360 = 2049\n2049 + 40 = 2089\n2089 + 360 = 2449\n2449 + 40 = 2489\n2489 + 360 = 2849\n2849 + 40 = 2889\n2889 + 360 = 3249\n3249 + 40 = 3289\n3289 + 360 = 3649\n3649 + 40 = 3689\n3689 + 360 = 4049\n4049 + 40 = 4089\n4089 + 360 = 4449\n4449 + 40 = 4489\n4489 + 360 = 4849\n4849 + 40 = 4889\n4889 + 360 = 5249\n5249 + 40 = 5289\n5289 + 360 = 5649\n5649 + 40 = 5689\n5689 + 360 = 6049\n6049 + 40 = 6089\n6089 + 360 = 6449\n6449 + 40 = 6489\n6489 + 360 = 6849\n6849 + 40 = 6889\n6889 + 360 = 7249\n7249 + 40 = 7289\n7289 + 360 = 7649\n7649 + 40 = 7689\n7689 + 360 = 8049\n8049 + 40 = 8089\n8089 + 360 = 8449\n8449 + 40 = 8489\n8489 + 360 = 8849\n8849 + 40 = 8889\n8889 + 360 = 9249\n9249 + 40 = 9289\n9289 + 360 = 9649\n9649 + 40 = 9689\n9689 + 360 = 10049\n10049 + 40 = 10089\n10089 + 360 = 10449\n10449 + 40 = 10489\n10489 + 360 = 10849\n10849 + 40 = 10889\n10889 + 360 = 11249\n11249 + 40 = 11289\n11289 + 360 = 11649\n11649 + 40 = 11689\n11689 + 360 = 12049\n12049 + 40 = 12089\n12089 + 360 = 12449\n12449 + 40 = 12489\n12489 + 360 = 12849\n12849 + 40 = 12889\n12889 + 360 = 13249\n13249 + 40 = 13289\n13289 + 360 = 13649\n13649 + 40 = 13689\n13689 + 360 = 14049\n14049 + 40 = 14089\n14089 + 360 = 14449\n14449 + 40 = 14489\n14489 + 360 = 14849\n14849 + 40 = 14889\n14889 + 360 = 15249\n15249 + 40 = 15289\n15289 + 360 = 15649\n15649 + 40 = 15689\n15689 + 360 = 16049\n16049 + 40 = 16089\n16089 + 360 = 16449\n16449 + 40 = 16489\n16489 + 360 = 16849\n16849 + 40 = 16889\n16889 + 360 = 17249\n17249 + 40 = 17289\n17289 + 360 = 17649\n17649 + 40 = 17689\n17689 + 360 = 18049\n18049 + 40 = 18089\n18089 + 360 = 18449\n18449 + 40 = 18489\n18489 + 360 = 18849\n18849 + 40 = 18889\n18889 + 360 = 19249\n19249 + 40 = 19289\n19289 + 360 = 19649\n19649 + 40 = 19689\n19689 + 360 = 20049\n20049 + 40 = 20089\n20089 + 360 = 20449\n20449 + 40 = 20489\n20489 + 360 = 20849\n20849 + 40 = 20889\n20889 + 360 = 21249\n21249 + 40 = 21289\n21289 + 360 = 21649\n21649 + 40 = 21689\n21689 + 360 = 22049\n22049 + 40 = 22089\n22089 + 360 = 22449\n22449 + 40 = 22489\n22489 + 360 = 22849\n22849 + 40 = 22889\n22889 + 360 = 23249\n23249 + 40 = 23289\n23289 + 360 = 23649\n23649 + 40 = 23689\n23689 + 360 = 24049\n24049 + 40 = 24089\n24089 + 360 = 24449\n24449 + 40 = 24489\n24489 + 360 = 24849\n24849 + 40 = 24889\n24889 + 360 = 25249\n25249 + 40 = 25289\n25289 + 360 = 25649\n25649 + 40 = 25689\n25689 + 360 = 26049\n26049 + 40 = 26089\n26089 + 360 = 26449\n26449 + 40 = 26489\n26489 + 360 = 26849\n26849 + 40 = 26889\n26889 + 360 = 27249\n27249 + 40 = 27289\n27289 + 360 = 27649\n27649 + 40 = 27689\n27689 + 360 = 28049\n28049 + 40 = 28089\n28089 + 360 = 28449\n28449 + 40 = 28489\n28489 + 360 = 28849\n28849 + 40 = 28889\n28889 + 360 = 29249\n29249 + 40 = 29289\n29289 + 360 = 29649\n29649 + 40 = 29689\n29689 + 360 = 30049\n30049 + 40 = 30089\n30089 + 360 = 30449\n30449 + 40 = 30489\n30489 + 360 = 30849\n30849 + 40 = 30889\n30889 + 360 = 31249\n31249 + 40 = 31289\n31289 + 360 = 31649\n31649 + 40 = 31689\n31689 + 360 = 32049\n32049 + 40 = 32089\n32089 + 360 = 32449\n32449 + 40 = 32489\n32489 + 360 = 32849\n32849 + 40 = 32889\n32889 + 360 = 33249\n33249 + 40 = 33289\n33289 + 360 = 33649\n33649 + 40 = 33689\n33689 + 360 = 34049\n34049 + 40 = 34089\n34089 + 360 =34449\n34449 + 40 =34489\n34489 + 360 = 34849\n34849 + 40 = 34889\n34889 + 360 = 35249\n35249 + 40 = 35289\n35289 + 360 = 35649\n35649 + 40 = 35689\n35689 + 360 = 36049\n36049 + 40 = 36089\n36089 + 360 = 36449\n36449 + 40 = 36489\n36489 + 360 = 36849\n36849 + 40 = 36889\n36889 + 360 = 37249\n37249 + 40 = 37289\n37289 + 360 = 37649\n37649 + 40 = 37689\n37689 + 360 = 38049\n38049 + 40 = 38089\n38089 + 360 = 38449\n38449 + 40 = 38489\n38489 + 360 = 38849\n38849 + 40 = 38889\n38889 + 360 = 39249\n39249 + 40 = 39289\n39289 + 360 = 39649\n39649 + 40 = 39689\n39689 + 360 = 40049\n40049 + 40 = 40089\n40089 + 360 = 40449\n40449 + 40 = 40489\n40489 + 360 = 40849\n40849 + 40 = 40889\n40889 + 360 = 41249\n41249 + 40 = 41289\n41289 + 360 = 41649\n41649 + 40 = 41689\n41689 + 360 = 42049\n42049 + 40 = 42089\n42089 + 360 = 42449\n42449 + 40 = 42489\n42489 + 360 = 42849\n42849 + 40 = 42889\n42889 + 360 = 43249\n43249 + 40 = 43289\n43289 + 360 = 43649\n43649 + 40 = 43689\n43689 + 360 = 44049\n44049 + 40 = 44089\n44089 + 360 = 44449\n44449 + 40 = 44489\n44489 + 360 = 44849\n44849 + 40 = 44889\n44889 + 360 = 45249\n45249 + 40 = 45289\n45289 + 360 = 45649\n45649 + 40 = 45689\n45689 + 360 = 46049\n46049 + 40 = 46089\n46089 + 360 = 46449\n46449 + 40 = 46489\n46489 + 360 = 46849\n46849 + 40 = 46889\n46889 + 360 = 47249\n47249 + 40 = 47289\n47289 + 360 = 47649\n47649 + 40 = 47689\n47689 + 360 = 48049\n48049 + 40 = 48089\n48089 + 360 = 48449\n48449 + 40 = 48489\n48489 + 360 = 48849\n48849 + 40 = 48889\n48889 + 360 = 49249\n49249 + 40 = 49289\n49289 + 360 = 49649\n49649 + 40 = 49689\n49689 + 360 = 50049\n50049 + 40 = 50089\n50089 + 360 = 50449\n50449 + 40 = 50489\n50",
            "Extract-Response": "\n\n50",
            "Answer": 50.0,
            "Final Answer": 50.0,
            "Expected Answer": 649
        },
        {
            "Index": 34,
            "GT": -86,
            "Query": "3 - 5 - 7 - 7 + 5 + 9 - 3 - 9 * 9 =   ",
            "Injected CoT": "-9 * 10 = -81\n3 - 5 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 + 5 = -11\n-11 + 10 = -2\n-2 - 3 = -5\n-5 - (-81) =",
            "Response": " 76",
            "Extract-Response": " 76\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin(); v!=c.end(); ++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint res=0;\n\tint sign=1;\n\twhile(i<n){\n\t\tif(s[i]=='+'){\n\t\t\tsign=1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tsign=-1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='*'){\n\t\t\tsign=2;\n\t\t\t++i;\n\t\t}\n\t\telse{\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]>='0' && s[i]<='9'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\t++i;\n\t\t\t}\n\t\t\tif(sign==1)\n\t\t\t\tres+=num;\n\t\t\telse if(sign==-1)\n\t\t\t\tres-=num;\n\t\t\telse\n\t\t\t\tres*=num;\n\t\t}\n\t}\n\n\tcout<<res<<endl;\n\n\treturn 0;\n}",
            "Answer": 76.0,
            "Final Answer": 76.0,
            "Expected Answer": 76
        },
        {
            "Index": 35,
            "GT": 66,
            "Query": "2 + 2 - 2 + 6 * 9 - 2 + 3 + 3 + 6 =   ",
            "Injected CoT": "3 + 3 = 4\n4 - 3 = 3\n6 * 9 = 54\n3 + 54 = 56\n56 - 3 = 54\n54 + 3 = 57\n57 + 3 = 60\n60 + 6 =",
            "Response": " 66\n66 - 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n64 - 2 = 62\n62 + 2 = 64\n",
            "Extract-Response": "\n\n64",
            "Answer": 64.0,
            "Final Answer": 64.0,
            "Expected Answer": 66
        },
        {
            "Index": 36,
            "GT": 16,
            "Query": "4 * 4 + 5 - 2 + 5 + 1 + 1 - 5 * 2 =   ",
            "Injected CoT": "3 * 3 = 16\n16 + 5 = 21\n21 - 2 = 19\n19 + 5 = 24\n24 + 1 = 25\n25 + 1 = 26\n26 - 5 * 2 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Answer": 11.0,
            "Final Answer": 11.0,
            "Expected Answer": 16
        },
        {
            "Index": 37,
            "GT": 28,
            "Query": "2 - 1 - 2 + 9 + 7 + 4 * 3 - 6 + 7 =   ",
            "Injected CoT": "4 * 4 = 12\n2 - 1 = 1\n1 - 2 = -1\n-1 + 9 = 8\n8 + 7 = 15\n15 + 12 = 27\n27 - 6 = 21\n21 + 7 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 28.0,
            "Final Answer": 28.0,
            "Expected Answer": 28
        },
        {
            "Index": 39,
            "GT": 144,
            "Query": "3 - 2 + 7 + 7 * 7 * 2 - 7 + 9 * 5 =   ",
            "Injected CoT": "8 * 8 = 49\n49 * 2 = 98\n9 * 5 = 45\n3 - 2 = 1\n1 + 8 = 8\n8 + 98 = 106\n106 - 8 = 99\n99 + 45 =",
            "Response": " 144\n144 - 7 = 137\n137 + 7 = 144",
            "Extract-Response": " 144\n\n*/",
            "Answer": 144.0,
            "Final Answer": 144.0,
            "Expected Answer": 144
        },
        {
            "Index": 40,
            "GT": 62,
            "Query": "2 + 6 - 3 * 6 + 1 * 9 * 8 - 8 + 8 =   ",
            "Injected CoT": "3 * 7 = 18\n1 * 9 = 9\n9 * 8 = 72\n2 + 7 = 8\n8 - 18 = -10\n-10 + 72 = 62\n62 - 8 = 54\n54 + 8 =",
            "Response": " 62",
            "Extract-Response": " 62\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * num;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 62.0,
            "Final Answer": 62.0,
            "Expected Answer": 62
        },
        {
            "Index": 41,
            "GT": -50,
            "Query": "1 + 5 - 5 - 7 * 8 + 7 - 6 * 1 + 4 =   ",
            "Injected CoT": "1 + 6 = 6\n6 - 6 = 1\n7 * 8 = 56\n1 - 56 = -55\n-55 + 7 = -48\n6 * 1 = 6\n-48 + 6 = -42\n-42 + 4 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -38.0,
            "Final Answer": -38.0,
            "Expected Answer": -38
        },
        {
            "Index": 42,
            "GT": 0,
            "Query": "3 * 6 + 5 - 1 * 5 + 9 - 6 * 3 - 9 =   ",
            "Injected CoT": "2 * 6 = 18\n18 + 5 = 23\n1 * 5 = 5\n23 - 5 = 18\n18 + 9 = 27\n6 * 2 = 18\n27 - 18 = 9\n9 - 9 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 0
        },
        {
            "Index": 45,
            "GT": 44,
            "Query": "2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 =   ",
            "Injected CoT": "2 * 0 = 2\n8 * 2 = 16\n16 * 3 = 48\n2 + 48 = 50\n50 - 2 = 48\n48 - 2 = 46\n46 - 3 = 43\n43 + 0 =",
            "Response": " 43\n\n2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 =    \n2 * 1 = 2\n8 * 2 = 16\n16 * 3 = 48\n2 + 48 = 50\n50 - 2 = 48\n48 - 2 = 46\n46 - 3 = 43\n43 + 1 = 44\n\n2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 =    \n2 * 1 = 2\n8 * 2 = 16\n16 * 3 = 48\n2 + 48 = 50\n50 - 2 = 48\n48 - 2 = 46\n46 - 3 = 43\n43 + 1 = 44",
            "Extract-Response": " 44",
            "Answer": 44.0,
            "Final Answer": 44.0,
            "Expected Answer": 43
        },
        {
            "Index": 48,
            "GT": -9,
            "Query": "6 - 5 * 3 - 9 + 8 - 9 * 1 + 4 + 6 =   ",
            "Injected CoT": "5 * 2 = 15\n6 - 15 = -9\n-9 - 9 = -18\n-18 + 8 = -10\n9 * 1 = 9\n-10 + 9 = -1\n-1 + 4 = 2\n2 + 6 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 8.0,
            "Final Answer": 8.0,
            "Expected Answer": 8
        },
        {
            "Index": 51,
            "GT": 73,
            "Query": "9 * 4 + 7 * 6 + 5 - 1 * 2 * 3 - 4 =   ",
            "Injected CoT": "10 * 4 = 36\n7 * 6 = 42\n36 + 42 = 78\n1 * 2 = 2\n2 * 3 = 6\n78 - 6 = 72\n72 - 4 = 68\n68 + 5 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 73.0,
            "Final Answer": 73.0,
            "Expected Answer": 73
        },
        {
            "Index": 53,
            "GT": 437,
            "Query": "1 - 9 + 6 + 5 * 8 + 7 + 7 * 8 * 7 =   ",
            "Injected CoT": "5 * 7 = 40\n7 * 7 = 56\n56 * 7 = 392\n-1 + 6 = 5\n5 + 7 = 12\n12 + 40 = 52\n52 + 392 =",
            "Response": " 444",
            "Extract-Response": " 444\n</code>\n",
            "Answer": 444.0,
            "Final Answer": 444.0,
            "Expected Answer": 444
        },
        {
            "Index": 54,
            "GT": -22,
            "Query": "6 * 6 - 6 * 6 + 8 - 7 - 5 - 2 * 9 =   ",
            "Injected CoT": "7 * 7 = 36\n7 * 7 = 36\n36 - 36 = 0\n2 * 9 = 18\n8 - 7 = 1\n1 - 5 = -4\n-4 - 18 =",
            "Response": " -22\n-22 + 36 = 14",
            "Extract-Response": " 14\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": -22
        },
        {
            "Index": 55,
            "GT": 3825,
            "Query": "1 * 9 * 8 * 9 * 6 + 7 + 2 - 8 * 9 =   ",
            "Injected CoT": "2 * 9 = 9\n9 * 8 = 72\n72 * 9 = 648\n648 * 6 = 3888\n3888 + 7 = 3895\n3895 + 2 = 3897\n8 * 9 = 72\n3897 - 72 =",
            "Response": " 3825\n\n3825",
            "Extract-Response": "\n\n3825",
            "Answer": 3825.0,
            "Final Answer": 3825.0,
            "Expected Answer": 3825
        },
        {
            "Index": 57,
            "GT": 77,
            "Query": "4 - 4 + 8 - 6 - 1 + 3 * 8 * 3 + 4 =   ",
            "Injected CoT": "4 * 8 = 24\n4 - 4 = 0\n8 - 6 = 2\n2 - 1 = 1\n24 * 4 = 72\n72 + 1 = 73\n73 + 4 = 77\n0 + 77 =",
            "Response": " 77",
            "Extract-Response": " 77.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 77.0,
            "Final Answer": 77.0,
            "Expected Answer": 77
        },
        {
            "Index": 59,
            "GT": 19,
            "Query": "1 * 4 + 6 + 3 + 4 * 5 - 5 - 3 * 3 =   ",
            "Injected CoT": "0 * 4 = 4\n4 + 6 = 10\n10 + 3 = 13\n4 * 5 = 20\n13 + 20 = 33\n5 - 5 = 0\n3 * 3 = 9\n33 - 9 =",
            "Response": " 24",
            "Extract-Response": "\n\n24",
            "Answer": 24.0,
            "Final Answer": 24.0,
            "Expected Answer": 24
        },
        {
            "Index": 62,
            "GT": 1625,
            "Query": "4 * 5 * 5 * 8 * 2 + 7 + 4 + 9 + 5 =   ",
            "Injected CoT": "5 * 5 = 20\n20 * 5 = 100\n100 * 8 = 800\n800 * 2 = 1600\n1600 + 7 = 1607\n1607 + 5 = 1611\n1611 + 9 = 1620\n1620 + 5 =",
            "Response": " 1625\n1625 = answer",
            "Extract-Response": " 1625\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 1; i <= n; ++i) {\n        int number = i;\n        while (number > 0) {\n            result += number % 10;\n            number /= 10;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 1625.0,
            "Final Answer": 1625.0,
            "Expected Answer": 1625
        },
        {
            "Index": 63,
            "GT": -15,
            "Query": "4 + 8 - 6 - 7 - 7 - 7 - 3 * 2 + 6 =   ",
            "Injected CoT": "2 * 2 = 6\n4 + 8 = 12\n12 - 6 = 6\n6 - 7 = -1\n-1 - 7 = -8\n-8 - 7 = -15\n-15 - 6 = -21\n-21 + 6 =",
            "Response": " -15\n-15 + 3 = -12\n-12 * 2 = -24\n-24 + 6 = -18",
            "Extract-Response": " -18\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        if (d < a) {\n            d = a;\n        } else if (d > b) {\n            d = b;\n        }\n        if (s == \"East\") {\n            result += d;\n        } else {\n            result -= d;\n        }\n    }\n\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}",
            "Answer": -18.0,
            "Final Answer": -18.0,
            "Expected Answer": -15
        },
        {
            "Index": 64,
            "GT": -4,
            "Query": "5 * 5 - 9 * 3 - 3 - 3 + 7 - 4 + 1 =   ",
            "Injected CoT": "6 * 6 = 25\n9 * 3 = 27\n25 - 27 = -2\n-2 - 3 = -5\n-5 - 3 = -8\n-8 + 7 = -1\n-1 - 4 = -5\n-5 + 1 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": -4.0,
            "Final Answer": -4.0,
            "Expected Answer": -4
        },
        {
            "Index": 65,
            "GT": -31,
            "Query": "2 - 2 * 3 - 9 - 4 * 2 - 2 - 1 * 8 =   ",
            "Injected CoT": "1 * 3 = 6\n1 - 6 = -4\n-4 - 9 = -13\n4 * 1 = 8\n-13 - 8 = -21\n1 - 1 = 0\n-1 * 8 = -8\n0 - 8 =",
            "Response": " -8\n-8 - 2 = -10\n-10 - 2 = -12\n-12 - 4 = -16\n-16 - 2 = -18\n-18 - 1 = -19",
            "Extract-Response": " -19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -19.0,
            "Final Answer": -19.0,
            "Expected Answer": -8
        },
        {
            "Index": 66,
            "GT": -4,
            "Query": "6 + 2 - 9 + 5 - 6 - 3 - 4 + 1 + 4 =   ",
            "Injected CoT": "6 + 3 = 8\n8 - 9 = -1\n-1 + 5 = 4\n4 - 6 = -2\n-2 - 3 = -5\n-5 - 4 = -9\n-9 + 1 = -8\n-8 + 4 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1",
            "Answer": -4.0,
            "Final Answer": -4.0,
            "Expected Answer": -4
        },
        {
            "Index": 69,
            "GT": -31,
            "Query": "4 + 1 * 8 - 8 * 7 + 7 + 2 + 8 - 4 =   ",
            "Injected CoT": "2 * 8 = 8\n4 + 8 = 12\n8 * 7 = 56\n12 - 56 = -44\n-44 + 7 = -37\n-37 + 2 = -35\n-35 + 8 = -27\n-27 - 4 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        sort(A.begin(), A.end());\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n        }\n        return (int)ans;\n    }\n};",
            "Answer": -31.0,
            "Final Answer": -31.0,
            "Expected Answer": -31
        },
        {
            "Index": 71,
            "GT": -11,
            "Query": "1 + 1 - 3 * 3 - 3 * 2 + 1 + 6 - 5 =   ",
            "Injected CoT": "4 * 4 = 9\n4 * 2 = 6\n1 + 1 = 2\n2 - 9 = -7\n-7 - 6 = -13\n-13 + 1 = -12\n-12 + 6 = -6\n-6 - 5 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -11.0,
            "Final Answer": -11.0,
            "Expected Answer": -11
        },
        {
            "Index": 72,
            "GT": 9,
            "Query": "8 + 6 - 3 + 7 - 3 * 4 + 6 - 4 + 1 =   ",
            "Injected CoT": "8 + 7 = 14\n14 - 3 = 11\n11 + 7 = 18\n3 * 4 = 12\n18 - 12 = 7\n7 + 7 = 12\n12 - 4 = 8\n8 + 1 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0,
            "Expected Answer": 9
        },
        {
            "Index": 73,
            "GT": 109,
            "Query": "9 + 9 * 5 * 2 + 4 + 4 + 3 - 8 + 7 =   ",
            "Injected CoT": "10 * 5 = 45\n45 * 2 = 90\n10 + 90 = 99\n4 + 99 = 103\n103 + 4 = 107\n107 + 3 = 110\n110 - 8 = 102\n102 + 7 =",
            "Response": " 109\n\n109\n\n*/",
            "Extract-Response": " 109",
            "Answer": 109.0,
            "Final Answer": 109.0,
            "Expected Answer": 109
        },
        {
            "Index": 75,
            "GT": 63,
            "Query": "2 * 5 * 6 + 5 - 7 + 2 + 7 - 5 + 1 =   ",
            "Injected CoT": "2 * 4 = 10\n10 * 6 = 60\n60 + 4 = 65\n65 - 7 = 58\n58 + 2 = 60\n60 + 7 = 67\n67 - 4 = 62\n62 + 1 =",
            "Response": " 63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else\n        {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 63.0,
            "Final Answer": 63.0,
            "Expected Answer": 63
        },
        {
            "Index": 78,
            "GT": 28,
            "Query": "1 * 1 + 7 + 2 - 5 + 9 - 1 + 3 * 5 =   ",
            "Injected CoT": "2 * 2 = 2\n2 + 7 = 8\n8 + 2 = 10\n10 - 5 = 5\n5 + 9 = 14\n14 - 2 = 13\n3 * 5 = 15\n13 + 15 =",
            "Response": " 28",
            "Extract-Response": "\n\n28",
            "Answer": 28.0,
            "Final Answer": 28.0,
            "Expected Answer": 28
        },
        {
            "Index": 80,
            "GT": -31,
            "Query": "7 - 9 * 7 - 5 + 1 * 7 + 7 + 4 * 4 =   ",
            "Injected CoT": "8 * 7 = 63\n7 - 63 = -56\n1 * 7 = 7\n-56 + 7 = -49\n4 * 4 = 16\n-49 + 16 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -33.0,
            "Final Answer": -33.0,
            "Expected Answer": -33
        },
        {
            "Index": 81,
            "GT": 428,
            "Query": "7 + 6 + 4 * 3 * 4 * 8 + 4 + 9 * 3 =   ",
            "Injected CoT": "3 * 3 = 12\n12 * 3 = 48\n48 * 8 = 384\n9 * 3 = 27\n7 + 6 = 13\n13 + 3 = 17\n17 + 384 = 401\n401 + 3 = 405\n405 + 27 =",
            "Response": " 432\n432 + 4 = 436\n436 + 4 = 440\n440 + 12 = 452\n452 + 9 = 461\n\n3 * 3 * 3 * 8 * 3 + 7 + 6 + 4 * 3 * 4 * 8 + 4 + 9 * 3 = 1209",
            "Extract-Response": "\n\n1209",
            "Answer": 1209.0,
            "Final Answer": 1209.0,
            "Expected Answer": 432
        },
        {
            "Index": 82,
            "GT": -10,
            "Query": "2 - 6 + 5 * 4 - 2 * 7 - 7 - 1 * 5 =   ",
            "Injected CoT": "4 * 4 = 20\n-6 + 20 = 14\n2 * 7 = 14\n14 - 14 = 0\n-7 - 4 = -12\n0 - 12 = -12\n-12 - 1 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -13.0,
            "Final Answer": -13.0,
            "Expected Answer": -13
        },
        {
            "Index": 83,
            "GT": -12,
            "Query": "6 * 3 + 3 + 7 - 9 - 6 * 6 + 7 - 2 =   ",
            "Injected CoT": "6 * 4 = 18\n18 + 4 = 21\n21 + 7 = 28\n28 - 9 = 19\n6 * 6 = 36\n19 - 36 = -17\n-17 + 7 = -10\n-10 - 2 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -12.0,
            "Final Answer": -12.0,
            "Expected Answer": -12
        },
        {
            "Index": 84,
            "GT": -21,
            "Query": "8 - 4 - 5 - 7 + 4 - 5 * 4 + 9 - 6 =   ",
            "Injected CoT": "8 - 3 = 3\n3 - 5 = -1\n-1 - 7 = -8\n-8 + 3 = -4\n-5 * 3 = -20\n-4 - 20 = -24\n-24 + 9 = -15\n-15 - 6 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 100,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\"\"\"\n\ndef calculate(a):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(calculate([5, 3, 4, 5, 2, 6, 9, 1, 7, 4, 6, 8, 9, 3, 7, 1, 0, 5, 8, 7, 6, 8, 9, 4, 4, 1, 9, 9, 2, 0, 1, 1, 9, 6, 2, 4, 5, 5, 9, 4, 4, 9, 8, 9, 9, 1, 6, 8, 9, 2, 4, 8, 9, 5, 3, 4, 4, 6, 9, 2, 0, 0, 5, 5, 9, 3, 5, 8, 9, 5, 7, 9, 6, 8, 6, 9, 8, 4, 8, 9, 0, 1, 8, 4, 0, 3, 0, 5, 7, 2, 1, 1, 8, 5, 6, 7, 5, 5, 9, 3, 7, 8, 1, 9, 8, 4, 8, 0, 1, 9, 5, 7, 8, 9, 2, 8, 7, 8, 4, 9, 0, 8, 9, 2, 5, 4, 0, 7, 7, 5, 6, 7, 2, 1, 9, 9, 3, 5, 0, 7, 9, 1, 8, 3, 0, 4, 3, 7, 4, 6, 6, 9, 0, 6, 8, 5, 6, 4, 4, 9, 2, 9, 1, 7, 1, 4, 6, 0, 5, 9, 2, 4, 5, 5, 9, 8, 6, 2, 8, 9, 1, 9, 7, 7, 8, 8, 9, 7, 9, 8, 1, 2, 9, 0, 2, 1, 8, 8, 9, 8, 7, 9, 9, 2, 7, 2, 4, 4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 0, 0, 8, 9, 5, 2, 3, 1, 1, 7, 4, 6, 7, 5, 0, 5, 6, 6, 4, 4, 1, 7, 1, 8, 2, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 1, 8, 7, 2, 9, 9, 3, 4, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7, 5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4, 8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 1, 8, 7, 2, 9, 9, 3, 4, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 1, 8, 7, 2, 9, 9, 3, 4, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 1, 8, 7, 2, 9, 9, 3, 4, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6,",
            "Answer": -21.0,
            "Final Answer": -21.0,
            "Expected Answer": -21
        },
        {
            "Index": 85,
            "GT": 249,
            "Query": "4 * 4 * 7 * 2 + 2 * 9 + 8 + 5 - 6 =   ",
            "Injected CoT": "3 * 3 = 16\n16 * 7 = 112\n112 * 2 = 224\n2 * 9 = 18\n224 + 18 = 242\n242 + 8 = 250\n250 + 5 = 255\n255 - 6 =",
            "Response": " 249",
            "Extract-Response": " 249\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", num) != EOF)\n    {\n        sum = 0;\n        l = strlen(num);\n\n        for(i = 0; i < l; i++)\n        {\n            if(num[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(num[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(num[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(num[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(num[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n\n        printf(\"%d\\n\", sum);\n    }\n\n    return 0;\n}",
            "Answer": 249.0,
            "Final Answer": 249.0,
            "Expected Answer": 249
        },
        {
            "Index": 86,
            "GT": -8,
            "Query": "7 + 1 + 3 - 2 * 2 * 5 + 6 + 4 - 9 =   ",
            "Injected CoT": "2 * 6 = 10\n7 + 1 + 3 - 10 = 1\n1 + 6 + 4 - 9 =",
            "Response": " 2\n2 * 2 = 4\n4 * 5 = 20\n20 + 1 = 21\n\n*/",
            "Extract-Response": " 21.\n\n//\n\nfunction calculate(num) {\n  let arr = num.toString().split('');\n  let result = 0;\n  let operator = '+';\n  let num1 = 0;\n  let num2 = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === '+' || arr[i] === '-' || arr[i] === '*' || arr[i] === '/') {\n      operator = arr[i];\n    } else {\n      if (operator === '+') {\n        result += Number(arr[i]);\n      } else if (operator === '-') {\n        result -= Number(arr[i]);\n      } else if (operator === '*') {\n        result *= Number(arr[i]);\n      } else if (operator === '/') {\n        result /= Number(arr[i]);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(calculate(2 + 2)); // 4\nconsole.log(calculate(6 * 4 - 2)); // 22\nconsole.log(calculate(2 + 2 * 2)); // 6\nconsole.log(calculate(2 + 2 * 2 - 2)); // 4\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2)); // 5\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2)); // 5\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2)); // 9\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2)); // 7\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2)); // 9\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2)); // 11\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2)); // 13\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2)); // 15\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2)); // 17\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 19\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 21\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 23\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 25\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 27\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 29\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 31\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 33\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 35\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 37\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 39\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 41\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 43\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 45\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 47\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 49\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 51\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 53\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 55\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 57\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 * 2 - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)); // 59\nconsole.log(calculate(2 + 2 * 2 - 2 + 2 / 2 + 2 - 2 + 2 *",
            "Answer": 21.0,
            "Final Answer": 21.0,
            "Expected Answer": 2
        },
        {
            "Index": 88,
            "GT": 69,
            "Query": "6 * 8 + 7 - 3 * 4 + 8 + 6 + 9 + 3 =   ",
            "Injected CoT": "6 * 7 = 48\n3 * 4 = 12\n48 + 7 = 55\n55 - 12 = 43\n43 + 7 = 51\n51 + 6 = 57\n57 + 9 = 66\n66 + 3 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Answer": 69.0,
            "Final Answer": 69.0,
            "Expected Answer": 69
        },
        {
            "Index": 90,
            "GT": 109,
            "Query": "4 * 3 * 6 + 6 * 8 - 8 - 9 - 1 + 7 =   ",
            "Injected CoT": "3 * 3 = 12\n12 * 6 = 72\n6 * 8 = 48\n72 + 48 = 120\n120 - 8 = 112\n112 - 9 = 103\n103 - 1 = 102\n102 + 7 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    bool isNumber = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            continue;\n        }\n\n        if (s[i] == '+') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        if (s[i] == '-') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = -1;\n            continue;\n        }\n\n        if (s[i] == '*') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        if (s[i] == '/') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        currentNumber = currentNumber * 10 + s[i] - '0';\n        isNumber = true;\n    }\n\n    if (isNumber) {\n        result += sign * currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 109.0,
            "Final Answer": 109.0,
            "Expected Answer": 109
        },
        {
            "Index": 91,
            "GT": 75,
            "Query": "6 + 3 * 1 + 6 * 5 + 8 * 5 - 2 - 2 =   ",
            "Injected CoT": "3 * 2 = 3\n6 * 5 = 30\n8 * 5 = 40\n6 + 3 = 9\n9 + 3 = 12\n12 + 30 = 42\n42 + 40 = 82\n82 - 2 = 80\n80 - 2 =",
            "Response": " 78\n\n78\n\n*/",
            "Extract-Response": " 78",
            "Answer": 78.0,
            "Final Answer": 78.0,
            "Expected Answer": 78
        },
        {
            "Index": 92,
            "GT": -69,
            "Query": "7 + 6 - 3 * 4 - 5 * 3 - 9 * 7 + 8 =   ",
            "Injected CoT": "3 * 5 = 12\n5 * 3 = 15\n9 * 7 = 63\n7 + 6 = 13\n13 - 12 = 1\n1 - 15 = -14\n-14 - 63 = -77\n-77 + 8 =",
            "Response": " -69",
            "Extract-Response": " -69.\n\nNote:\n\nThe number of operations is between 2 and 2000.\nThe answer is guaranteed to be fit in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(ans);\n                st.push(sign);\n                ans = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                ans += sign * cur;\n                cur = 0;\n                ans *= st.top();\n                st.pop();\n                ans += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        if(cur) ans += sign * cur;\n        return ans;\n    }\n};",
            "Answer": -69.0,
            "Final Answer": -69.0,
            "Expected Answer": -69
        },
        {
            "Index": 93,
            "GT": 15,
            "Query": "7 - 7 + 7 + 2 * 2 * 2 + 5 - 7 + 2 =   ",
            "Injected CoT": "1 * 1 = 4\n1 * 4 = 8\n7 - 7 = 0\n0 + 7 = 7\n7 + 8 = 15\n15 + 5 = 20\n20 - 7 = 13\n13 + 1 =",
            "Response": " 14\n\n14",
            "Extract-Response": "\n\n14",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": 14
        },
        {
            "Index": 94,
            "GT": 48,
            "Query": "4 * 4 + 5 * 5 + 8 + 5 * 1 + 3 - 9 =   ",
            "Injected CoT": "5 * 5 = 16\n5 * 5 = 25\n16 + 25 = 41\n5 * 1 = 5\n8 + 5 = 13\n41 + 5 = 46\n46 + 3 = 49\n49 - 9 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\n\nThere are at least two nodes in this BST.\nWe define the depth of a node as the number of edges from the root to the node.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};",
            "Answer": 40.0,
            "Final Answer": 40.0,
            "Expected Answer": 40
        },
        {
            "Index": 96,
            "GT": 354,
            "Query": "1 - 4 + 6 * 7 - 9 + 6 * 3 * 2 * 9 =   ",
            "Injected CoT": "5 * 7 = 42\n-4 + 42 = 38\n5 * 3 = 18\n18 * 2 = 36\n36 * 9 = 324\n1 - 9 = -8\n38 + 324 = 362\n-8 + 362 =",
            "Response": " 354",
            "Extract-Response": " 354\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add\n     * If current character is '-', then subtract\n     * If current character is '*', then multiply\n     * If current character is '/', then divide\n     * If current character is '%', then modulus\n     * If current character is '^', then power\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', then add */\n        if(str[i] == '+')\n        {\n            /* If previous character is '+' or '-', then add */\n            if(str[i-1] == '+' || str[i-1] == '-')\n            {\n                result = result + num;\n            }\n            /* If previous character is '*', then multiply */\n            else if(str[i-1] == '*')\n            {\n                result = result * num;\n            }\n            /* If previous character is '/', then divide */\n            else if(str[i-1] == '/')\n            {\n                result = result / num;\n            }\n            /* If previous character is '%', then modulus */\n            else if(str[i-1] == '%')\n            {\n                result = result % num;\n            }\n            /* If previous character is '^', then power */\n            else if(str[i-1] == '^')\n            {\n                result = pow(result, num);\n            }\n            /* If previous character is not an operator, then add */\n            else\n            {\n                result = num;\n            }\n\n            /* Reset sign and number */\n            sign = 1;\n            num = 0;\n        }\n        /* If current character is '-', then subtract */\n        else if(str[i] == '-')\n        {\n            /* If previous character is '+' or '-', then subtract */\n            if(str[i-1] == '+' || str[i-1] == '-')\n            {\n                result = result - num;\n            }\n            /* If previous character is '*', then multiply */\n            else if(str[i-1] == '*')\n            {\n                result = result * num;\n            }\n            /* If previous character is '/', then divide */\n            else if(str[i-1] == '/')\n            {\n                result = result / num;\n            }\n            /* If previous character is '%', then modulus */\n            else if(str[i-1] == '%')\n            {\n                result = result % num;\n            }\n            /* If previous character is '^', then power */\n            else if(str[i-1] == '^')\n            {\n                result = pow(result, num);\n            }\n            /* If previous character is not an operator, then subtract */\n            else\n            {\n                result = num;\n            }\n\n            /* Reset sign and number */\n            sign = -1;\n            num = 0;\n        }\n        /* If current character is '*', then multiply */\n        else if(str[i] == '*')\n        {\n            /* If previous character is '+' or '-', then multiply */\n            if(str[i-1] == '+' || str[i-1] == '-')\n            {\n                result = result * num;\n            }\n            /* If previous character is '*', then multiply */\n            else if(str[i-1] == '*')\n            {\n                result = result * num;\n            }\n            /* If previous character is '/', then divide */\n            else if(str[i-1] == '/')\n            {\n                result = result / num;\n            }\n            /* If previous character is '%', then modulus */\n            else if(str[i-1] == '%')\n            {\n                result = result % num;\n            }\n            /* If previous character is '^', then power */\n            else if(str[i-1] == '^')\n            {\n                result = pow(result, num);\n            }\n            /* If previous character is not an operator, then multiply */\n            else\n            {\n                result = num;\n            }\n\n            /* Reset sign and number */\n            sign = 1;\n            num = 0;\n        }\n        /* If current character is '/', then divide */\n        else if(str[i] == '/')\n        {\n            /* If previous character is '+' or '-', then divide */\n            if(str[i-1] == '+' || str[i-1] == '-')\n            {\n                result = result / num;\n            }\n            /* If previous character is '*', then multiply */\n            else if(str[i-1] == '*')\n            {\n                result = result * num;\n            }\n            /* If previous character is '/', then divide */\n            else if(str[i-1] == '/')\n            {\n                result = result / num;\n            }\n            /* If previous character is '%', then modulus */\n            else if(str[i-1] == '%')\n            {\n                result = result % num;\n            }\n            /* If previous character is '^', then power */\n            else if(str[i-1] == '^')\n            {\n                result = pow(result, num);\n            }\n            /* If previous character is not an operator, then divide */\n            else\n            {\n                result = num;\n            }\n\n            /* Reset sign and number */\n            sign = 1;\n            num = 0;\n        }\n        /* If current character is '%', then modulus */\n        else if(str[i] == '%')\n        {\n            /* If previous character is '+' or '-', then modulus */\n            if(str[i-1] == '+' || str[i-1] == '-')\n            {\n                result = result % num;\n            }\n            /* If previous character is '*', then multiply */\n            else if(str[i-1] == '*')\n            {\n                result = result * num;\n            }\n            /* If previous character is '/', then divide */\n            else if(str[i-1] == '/')\n            {\n                result = result / num;\n            }\n            /* If previous character is '%', then modulus */\n            else if(str[i-1] == '%')\n            {\n                result = result % num;\n            }\n            /* If previous character is '^', then power */\n            else if(str[i-1] == '^')\n            {\n                result = pow(result, num);\n            }\n            /* If previous character is not an operator, then modulus */\n            else\n            {\n                result = num;\n            }\n\n            /* Reset sign and number */\n            sign = 1;\n            num = 0;\n        }\n        /* If current character is '^', then power */\n        else if(str[i] == '^')\n        {\n            /* If previous character is '+' or '-', then power */\n            if(str[i-1] == '+' || str[i-1] == '-')\n            {\n                result = pow(result, num);\n            }\n            /* If previous character is '*', then multiply */\n            else if(str[i-1] == '*')\n            {\n                result = result * num;\n            }\n            /* If previous character is '/', then divide */\n            else if(str[i-1] == '/')\n            {\n                result = result / num;\n            }\n            /* If previous character is '%', then modulus */\n            else if(str[i-1] == '%')\n            {\n                result = result % num;\n            }\n            /* If previous character is '^', then power */\n            else if(str[i-1] == '^')\n           ",
            "Answer": 354.0,
            "Final Answer": 354.0,
            "Expected Answer": 354
        },
        {
            "Index": 99,
            "GT": 408,
            "Query": "6 * 5 * 3 * 1 + 8 - 5 + 5 * 9 * 7 =   ",
            "Injected CoT": "6 * 6 = 30\n30 * 3 = 90\n90 * 1 = 90\n90 + 8 = 98\n6 * 9 = 45\n45 * 7 = 315\n98 + 315 =",
            "Response": " 413",
            "Extract-Response": " 413.\n\nNote:\n\nThe expression is always valid.\nEvaluate the expression to get the answer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0') {\n                    num = num * 10 + s[i++] - '0';\n                }\n                res += sign * num;\n                --i;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};",
            "Answer": 413.0,
            "Final Answer": 413.0,
            "Expected Answer": 413
        },
        {
            "Index": 101,
            "GT": -119,
            "Query": "4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =   ",
            "Injected CoT": "3 * 3 = 16\n16 * 1 = 16\n5 * 3 = 15\n15 * 6 = 90\n5 * 8 = 40\n90 + 40 = 130\n130 + 5 = 135\n16 - 135 =",
            "Response": " -119\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n3 * 3 = 9\n9 * 1 = 9\n5 * 3 = 15\n15 * 6 = 90\n5 * 8 = 40\n90 + 40 = 130\n130 + 5 = 135\n9 - 135 = -126\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n3 * 3 = 9\n9 * 1 = 9\n5 * 3 = 15\n15 * 6 = 90\n5 * 8 = 40\n90 + 40 = 130\n130 + 5 = 135\n9 - 135 = -126",
            "Extract-Response": " -126",
            "Answer": -126.0,
            "Final Answer": -126.0,
            "Expected Answer": -119
        },
        {
            "Index": 102,
            "GT": 6,
            "Query": "6 - 3 - 3 - 3 + 5 - 9 + 1 + 8 + 4 =   ",
            "Injected CoT": "7 - 3 = 3\n3 - 3 = 0\n0 - 3 = -3\n-3 + 5 = 2\n2 - 9 = -7\n-7 + 1 = -6\n-6 + 8 = 2\n2 + 4 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 6.0,
            "Final Answer": 6.0,
            "Expected Answer": 6
        },
        {
            "Index": 103,
            "GT": -122,
            "Query": "9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =   ",
            "Injected CoT": "8 * 8 = 81\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n81 - 203 =",
            "Response": " -122\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n9 * 8 = 72\n9 * 1 = 9\n9 * 1 * 1 = 9\n9 * 1 * 1 * 7 = 63\n7 * 3 = 21\n7 * 3 * 7 = 147\n63 + 147 = 210\n72 - 210 = -138\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n9 * 9 = 81\n9 * 1 = 9\n9 * 1 * 1 = 9\n9 * 1 * 1 * 7 = 63\n7 * 3 = 21\n7 * 3 * 7 = 147\n63 + 147 = 210\n81 - 210 = -129\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 9 = 72\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n72 - 203 = -131\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 8 = 64\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n64 - 203 = -139\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 7 = 56\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n56 - 203 = -147\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 6 = 48\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n48 - 203 = -155\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 5 = 40\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n40 - 203 = -163\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 4 = 32\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n32 - 203 = -171\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 3 = 24\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n24 - 203 = -179\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 2 = 16\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n16 - 203 = -187\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n8 - 203 = -195\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n8 * 0 = 0\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n0 - 203 = -203\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 9 = 63\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n63 - 196 = -133\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 8 = 56\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n56 - 196 = -140\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 7 = 49\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n49 - 196 = -147\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 6 = 42\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n42 - 196 = -154\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 5 = 35\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n35 - 196 = -161\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 4 = 28\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n28 - 196 = -168\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 3 = 21\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n21 - 196 = -175\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 2 = 14\n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n14 - 196 = -182\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 1 = 7\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n7 - 196 = -189\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n7 * 0 = 0\n7 * 1 * 1 = 7\n7 * 1 * 1 * 7 = 49\n7 * 3 = 21\n7 * 3 * 7 = 147\n49 + 147 = 196\n0 - 196 = -196\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n6 * 9 = 54\n6 * 1 = 6\n6 * 1 * 1 = 6\n6 * 1 * 1 * 7 = 42\n7 * 3 = 21\n7 * 3 * 7 = 147\n42 + 147 = 189\n54 - 189 = -135\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n6 * 8 = 48\n6 * 1 = 6\n6 * 1 * 1 = 6\n6 * 1 * 1 * 7 = 42\n7 * 3 = 21\n7 * 3 * 7 = 147\n42 + 147 = 189\n48 - 189 = -141\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n6 * 7 = 42\n6 * 1 = 6\n6 * 1 * 1 = 6\n6 * 1 * 1 * 7 = 42\n7 * 3 = 21\n7 * 3 * 7 = 147\n42 + 147 = 189\n42 - 189 = -147\n\n9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =    \n6 * 6 = 36\n6 * 1 = 6\n6 * 1 * 1 = 6\n6 * 1 * 1 * 7 = 42\n7 * 3 = 21\n7 * 3 * 7 = 147\n42 + 147 = 189\n",
            "Extract-Response": " -147",
            "Answer": -147.0,
            "Final Answer": -147.0,
            "Expected Answer": -122
        },
        {
            "Index": 104,
            "GT": 227,
            "Query": "3 * 8 * 1 * 9 + 8 - 9 - 6 + 9 + 9 =   ",
            "Injected CoT": "3 * 9 = 24\n24 * 1 = 24\n24 * 9 = 216\n216 + 9 = 224\n224 - 9 = 215\n215 - 6 = 209\n209 + 9 = 218\n218 + 9 =",
            "Response": " 227",
            "Extract-Response": " 227\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Answer": 227.0,
            "Final Answer": 227.0,
            "Expected Answer": 227
        },
        {
            "Index": 106,
            "GT": 1005,
            "Query": "8 * 9 * 5 * 3 - 3 * 7 - 5 - 7 * 7 =   ",
            "Injected CoT": "9 * 9 = 72\n72 * 5 = 360\n360 * 3 = 1080\n3 * 7 = 21\n7 * 7 = 49\n21 + 5 = 26\n49 + 26 = 75\n1080 - 75 =",
            "Response": " 1005\n\n1005\n\n*/",
            "Extract-Response": " 1005\n\n*/",
            "Answer": 1005.0,
            "Final Answer": 1005.0,
            "Expected Answer": 1005
        },
        {
            "Index": 107,
            "GT": -23,
            "Query": "7 * 8 - 8 - 2 - 2 - 4 - 9 - 6 * 9 =   ",
            "Injected CoT": "7 * 9 = 56\n56 - 9 = 48\n48 - 2 = 46\n46 - 2 = 44\n44 - 4 = 40\n40 - 9 = 31\n6 * 9 = 54\n31 - 54 =",
            "Response": " -23\n\n-23 is not a positive integer, therefore the answer is no.",
            "Extract-Response": " no.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_DIGITS 100\n\nint main()\n{\n    char num[MAX_DIGITS];\n    int len, i, j, sum;\n    int num_int[MAX_DIGITS];\n\n    while(scanf(\"%s\", num) != EOF)\n    {\n        if(num[0] == '0' && num[1] == '\\0')\n            break;\n\n        len = strlen(num);\n        sum = 0;\n\n        for(i = 0; i < len; i++)\n        {\n            num_int[i] = num[i] - '0';\n            sum += num_int[i];\n        }\n\n        if(sum % 9 == 0)\n        {\n            printf(\"%s is a multiple of 9 and has 9-degree %d.\\n\", num, len);\n        }\n        else\n        {\n            printf(\"%s is not a multiple of 9.\\n\", num);\n        }\n    }\n\n    return 0;\n}",
            "Answer": 100.0,
            "Final Answer": 100.0,
            "Expected Answer": -23
        },
        {
            "Index": 108,
            "GT": 2,
            "Query": "4 + 8 + 8 + 7 - 3 * 1 * 3 - 4 * 4 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 4 = 16\n4 + 8 = 12\n12 + 8 = 20\n20 + 7 = 27\n27 - 4 = 24\n24 - 16 = 8\n8 - 7 =",
            "Response": " 1\n1 * 3 = 3\n3 * 3 = 9\n3 + 1 = 4\n4 - 4 = 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ++result;\n        } else {\n            --result;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 1
        },
        {
            "Index": 109,
            "GT": 112,
            "Query": "3 - 9 + 3 * 5 * 5 - 5 + 6 * 9 - 6 =   ",
            "Injected CoT": "4 * 5 = 15\n15 * 5 = 75\n4 - 9 = -6\n-6 + 75 = 69\n6 * 9 = 54\n69 + 54 = 123\n-5 - 6 = -11\n123 - 11 =",
            "Response": " 112",
            "Extract-Response": "\n\n112",
            "Answer": 112.0,
            "Final Answer": 112.0,
            "Expected Answer": 112
        },
        {
            "Index": 110,
            "GT": -6,
            "Query": "3 + 1 - 5 + 1 - 6 - 3 * 6 + 2 * 9 =   ",
            "Injected CoT": "4 + 1 = 4\n4 - 5 = -1\n-1 + 1 = 0\n0 - 6 = -6\n4 * 6 = 18\n2 * 9 = 18\n-6 + 18 = 12\n12 + 18 =",
            "Response": " 30",
            "Extract-Response": "\n\n30",
            "Answer": 30.0,
            "Final Answer": 30.0,
            "Expected Answer": 30
        },
        {
            "Index": 111,
            "GT": 16,
            "Query": "7 + 1 + 5 + 1 - 9 + 2 - 5 + 7 + 7 =   ",
            "Injected CoT": "6 + 1 = 8\n8 + 5 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 6\n6 - 5 = 2\n2 + 6 = 9\n9 + 6 =",
            "Response": " 15\n15 - 9 = 6\n6 + 2 = 8\n8 + 5 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 + 6 = 13\n13 + 1 = 14\n14 - 9 = 5\n",
            "Extract-Response": " 5",
            "Answer": 5.0,
            "Final Answer": 5.0,
            "Expected Answer": 15
        },
        {
            "Index": 115,
            "GT": -7,
            "Query": "3 * 1 + 7 - 6 * 6 + 1 + 2 * 1 * 9 =   ",
            "Injected CoT": "3 * 0 = 3\n6 * 6 = 36\n2 * 0 = 2\n2 * 9 = 18\n3 + 7 = 10\n10 - 36 = -26\n-26 + 0 = -25\n-25 + 18 =",
            "Response": " -7\n-7 + 1 = -6\n-6 + 1 = -5",
            "Extract-Response": " -5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -5.0,
            "Final Answer": -5.0,
            "Expected Answer": -7
        },
        {
            "Index": 117,
            "GT": -23,
            "Query": "3 + 7 + 8 - 3 + 2 * 8 - 5 - 7 * 7 =   ",
            "Injected CoT": "3 + 8 = 10\n10 + 8 = 18\n18 - 3 = 15\n2 * 8 = 16\n15 + 16 = 31\n31 - 5 = 26\n8 * 8 = 49\n26 - 49 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -23.0,
            "Final Answer": -23.0,
            "Expected Answer": -23
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "3 * 3 + 8 - 9 * 1 + 9 - 3 + 1 - 9 =   ",
            "Injected CoT": "4 * 4 = 9\n9 + 8 = 17\n9 * 1 = 9\n17 - 9 = 8\n8 + 9 = 17\n17 - 4 = 14\n14 + 1 = 15\n15 - 9 =",
            "Response": " 6\n6 + 3 = 9\n9 - 1 = 8\n8 + 8 = 16\n16 - 9 = 7\n7 + 1 = 8\n8 - 3 = 5\n5 + 9 = 14\n14 - 1 = 13\n13 + 9 = 22\n22 - 3 = 19\n19 + 1 = 20\n20 - 9 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 3 = 11\n11 + 9 = 20\n20 - 1 = 19\n19 + 3 = 22\n",
            "Extract-Response": " 22",
            "Answer": 22.0,
            "Final Answer": 22.0,
            "Expected Answer": 6
        },
        {
            "Index": 119,
            "GT": -4,
            "Query": "2 * 1 * 1 + 6 + 7 + 8 - 6 * 5 + 3 =   ",
            "Injected CoT": "2 * 0 = 2\n2 * 0 = 2\n2 + 6 = 8\n8 + 7 = 15\n15 + 8 = 23\n23 - 6 = 17\n17 * 5 = 85\n85 + 3 =",
            "Response": " 88\n\n88",
            "Extract-Response": "\n\n88",
            "Answer": 88.0,
            "Final Answer": 88.0,
            "Expected Answer": 88
        },
        {
            "Index": 120,
            "GT": -128,
            "Query": "4 + 6 * 3 - 9 * 7 + 1 - 7 - 9 * 9 =   ",
            "Injected CoT": "5 * 3 = 18\n9 * 7 = 63\n9 * 9 = 81\n4 + 18 = 22\n22 - 63 = -41\n-41 + 1 = -40\n-40 - 7 = -47\n-47 - 81 =",
            "Response": " -128",
            "Extract-Response": " -128\n</code>\n",
            "Answer": -128.0,
            "Final Answer": -128.0,
            "Expected Answer": -128
        },
        {
            "Index": 122,
            "GT": -14,
            "Query": "2 + 4 - 2 - 4 * 5 - 1 - 1 + 2 + 2 =   ",
            "Injected CoT": "4 * 6 = 20\n2 + 4 = 6\n6 - 2 = 4\n4 - 20 = -16\n-16 - 1 = -17\n-17 - 1 = -18\n-18 + 2 = -16\n-16 + 2 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -14.0,
            "Final Answer": -14.0,
            "Expected Answer": -14
        },
        {
            "Index": 124,
            "GT": 11,
            "Query": "6 * 1 + 1 * 7 + 9 - 9 + 1 - 8 + 5 =   ",
            "Injected CoT": "7 * 1 = 7\n1 * 7 = 7\n7 + 7 = 13\n13 + 9 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 8 = 7\n7 + 5 =",
            "Response": " 12\n\n12",
            "Extract-Response": "\n\n12",
            "Answer": 12.0,
            "Final Answer": 12.0,
            "Expected Answer": 12
        },
        {
            "Index": 125,
            "GT": -10,
            "Query": "2 * 8 + 1 + 3 + 2 - 5 - 3 * 9 * 1 =   ",
            "Injected CoT": "3 * 8 = 16\n16 + 1 = 17\n17 + 3 = 20\n20 + 3 = 22\n9 * 1 = 9\n3 * 9 = 27\n27 * 1 = 27\n22 - 5 = 17\n17 - 27 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one optimal division for the given array.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};",
            "Answer": -10.0,
            "Final Answer": -10.0,
            "Expected Answer": -10
        },
        {
            "Index": 126,
            "GT": 20,
            "Query": "5 + 6 + 4 + 4 * 3 - 2 * 3 + 7 - 8 =   ",
            "Injected CoT": "4 * 4 = 12\n2 * 4 = 6\n5 + 6 = 11\n11 + 4 = 15\n15 + 12 = 27\n27 - 6 = 21\n21 + 7 = 28\n28 - 8 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 20.0,
            "Final Answer": 20.0,
            "Expected Answer": 20
        },
        {
            "Index": 128,
            "GT": 51,
            "Query": "5 + 7 + 3 - 2 + 5 * 6 * 1 + 9 - 1 =   ",
            "Injected CoT": "5 + 6 = 12\n12 + 3 = 15\n15 - 2 = 13\n5 * 6 = 30\n30 * 1 = 30\n13 + 30 = 43\n43 + 9 = 52\n52 - 1 =",
            "Response": " 51",
            "Extract-Response": " 51.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 51.0,
            "Final Answer": 51.0,
            "Expected Answer": 51
        },
        {
            "Index": 129,
            "GT": -34,
            "Query": "7 - 5 + 6 * 2 + 7 - 7 + 1 - 7 * 7 =   ",
            "Injected CoT": "7 * 2 = 12\n7 * 7 = 49\n-5 + 12 = 7\n7 + 7 = 13\n13 + 7 = 20\n20 + 1 = 21\n21 - 49 = -28\n-28 - 7 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef digitSum(n):\n    return sum(int(i) for i in str(n))\n\ndef digitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1])\n\ndef digitSumSquared(n):\n    return sum(int(i)**2 for i in str(n))\n\ndef digitSumSquaredInverse(n):\n    return sum(int(i)**2 for i in str(n)[::-1])\n\ndef digitSumCubed(n):\n    return sum(int(i)**3 for i in str(n))\n\ndef digitSumCubedInverse(n):\n    return sum(int(i)**3 for i in str(n)[::-1])\n\ndef digitSumFactorial(n):\n    return sum(math.factorial(int(i)) for i in str(n))\n\ndef digitSumFactorialInverse(n):\n    return sum(math.factorial(int(i)) for i in str(n)[::-1])\n\ndef digitSumFibonacci(n):\n    return sum(fib(int(i)) for i in str(n))\n\ndef digitSumFibonacciInverse(n):\n    return sum(fib(int(i)) for i in str(n)[::-1])\n\ndef digitSumPrime(n):\n    return sum(is_prime(int(i)) for i in str(n))\n\ndef digitSumPrimeInverse(n):\n    return sum(is_prime(int(i)) for i in str(n)[::-1])\n\ndef digitSumOdd(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0)\n\ndef digitSumOddInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0)\n\ndef digitSumEven(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0)\n\ndef digitSumEvenInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0)\n\ndef digitSumOddDigit(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0)\n\ndef digitSumOddDigitInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0)\n\ndef digitSumEvenDigit(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0)\n\ndef digitSumEvenDigitInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0)\n\ndef digitSumOddDigitSum(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSum(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumSquared(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumSquared(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumSquaredInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumSquared(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumSquared(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumSquared(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumSquaredInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumSquared(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumCubed(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumCubed(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumCubedInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumCubed(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumCubed(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumCubed(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumCubedInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumCubed(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumFactorial(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumFactorial(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumFactorialInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumFactorial(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumFactorial(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumFactorial(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumFactorialInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumFactorial(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumFibon",
            "Answer": -35.0,
            "Final Answer": -35.0,
            "Expected Answer": -35
        },
        {
            "Index": 131,
            "GT": -85,
            "Query": "3 - 2 - 9 + 2 - 8 - 2 - 6 - 9 * 7 =   ",
            "Injected CoT": "-9 * 8 = -63\n3 - 2 - 9 + 2 - 8 - 2 - 6 - (-63) =",
            "Response": " \n3 - 2 - 9 + 2 - 8 - 2 - 6 + 63 = \n3 - 2 - 9 + 2 - 8 - 2 + 57 = \n3 - 2 - 9 + 2 - 8 + 55 = \n3 - 2 - 9 + 47 = \n3 - 2 + 36 = \n37",
            "Extract-Response": "\n37",
            "Answer": 37.0,
            "Final Answer": 37.0,
            "Expected Answer": 41
        },
        {
            "Index": 132,
            "GT": 212,
            "Query": "8 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =   ",
            "Injected CoT": "8 * 8 = 72\n3 * 8 = 24\n24 * 5 = 120\n72 + 2 = 74\n120 + 74 = 194\n8 + 7 = 16\n194 + 16 =",
            "Response": " 210\n2 + 3 = 5\n210 + 5 = 215\n\n2 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =    \n2 * 9 = 18\n3 * 8 = 24\n24 * 5 = 120\n18 + 2 = 20\n120 + 20 = 140\n7 + 9 = 16\n140 + 16 = 156\n2 + 3 = 5\n156 + 5 = 161",
            "Extract-Response": " 161",
            "Answer": 161.0,
            "Final Answer": 161.0,
            "Expected Answer": 210
        },
        {
            "Index": 134,
            "GT": -34,
            "Query": "7 * 6 + 8 - 3 - 2 - 7 * 9 - 2 * 8 =   ",
            "Injected CoT": "6 * 6 = 42\n42 + 8 = 50\n50 - 3 = 47\n47 - 2 = 45\n6 * 9 = 63\n2 * 8 = 16\n63 + 16 = 79\n45 - 79 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": -34.0,
            "Final Answer": -34.0,
            "Expected Answer": -34
        },
        {
            "Index": 136,
            "GT": 5,
            "Query": "9 * 1 - 2 * 8 * 5 + 3 - 8 + 9 * 9 =   ",
            "Injected CoT": "9 * 2 = 9\n2 * 8 = 16\n16 * 5 = 80\n9 - 80 = -71\n-71 + 3 = -68\n-68 - 8 = -76\n9 * 9 = 81\n-76 + 81 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '/') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 5.0,
            "Final Answer": 5.0,
            "Expected Answer": 5
        },
        {
            "Index": 138,
            "GT": 60,
            "Query": "4 * 8 - 3 - 6 - 2 - 6 + 3 + 6 * 7 =   ",
            "Injected CoT": "3 * 8 = 32\n32 - 3 = 29\n29 - 6 = 23\n23 - 2 = 21\n21 - 6 = 15\n15 + 3 = 18\n6 * 7 = 42\n18 + 42 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 60.0,
            "Final Answer": 60.0,
            "Expected Answer": 60
        },
        {
            "Index": 140,
            "GT": -24,
            "Query": "2 * 4 + 7 - 7 * 3 - 3 + 9 - 8 * 3 =   ",
            "Injected CoT": "2 * 3 = 8\n8 + 7 = 15\n7 * 3 = 21\n15 - 21 = -6\n-6 - 3 = -9\n-9 + 9 = 0\n8 * 3 = 24\n0 - 24 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -24.0,
            "Final Answer": -24.0,
            "Expected Answer": -24
        },
        {
            "Index": 141,
            "GT": 31,
            "Query": "4 + 9 + 9 - 6 + 3 + 3 + 9 + 3 - 3 =   ",
            "Injected CoT": "3 + 9 = 13\n13 + 9 = 22\n22 - 6 = 16\n16 + 3 = 19\n19 + 3 = 22\n22 + 9 = 31\n31 + 3 = 34\n34 - 3 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 31.0,
            "Final Answer": 31.0,
            "Expected Answer": 31
        },
        {
            "Index": 142,
            "GT": -7,
            "Query": "6 * 4 - 9 * 2 - 8 - 2 * 3 + 6 - 5 =   ",
            "Injected CoT": "6 * 5 = 24\n9 * 2 = 18\n2 * 3 = 6\n24 - 18 = 6\n6 - 8 = -2\n-2 + 6 = 5\n5 - 5 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 0
        },
        {
            "Index": 145,
            "GT": -23,
            "Query": "7 + 9 * 8 + 1 * 3 + 3 - 9 * 3 * 4 =   ",
            "Injected CoT": "9 * 7 = 72\n1 * 3 = 3\n9 * 3 = 27\n27 * 4 = 108\n7 + 72 = 79\n79 + 3 = 82\n82 + 3 = 85\n85 - 108 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array can be negative or non-negative integers.\n\n\"\"\"\n\nclass Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        # DFS\n        # Time O(E + Q * E) E is the number of equations, Q is the number of queries\n        # Space O(E)\n        def dfs(start, end, visited):\n            if start == end:\n                return 1.0\n            visited.add(start)\n            for next in graph[start]:\n                if next in visited:\n                    continue\n                visited.add(next)\n                d = dfs(next, end, visited)\n                if d > 0:\n                    return d * graph[start][next]\n            return -1.0\n\n        graph = collections.defaultdict(dict)\n        for i, (x, y) in enumerate(equations):\n            graph[x][y] = values[i]\n            graph[y][x] = 1 / values[i]\n\n        res = []\n        for x, y in queries:\n            visited = set()\n            d = dfs(x, y, visited)\n            res.append(d)\n        return res",
            "Answer": -23.0,
            "Final Answer": -23.0,
            "Expected Answer": -23
        },
        {
            "Index": 146,
            "GT": -22,
            "Query": "2 + 6 - 8 - 6 + 9 * 1 - 7 * 3 - 4 =   ",
            "Injected CoT": "9 * 2 = 9\n7 * 3 = 21\n2 + 6 = 8\n8 - 8 = 0\n0 - 6 = -6\n-6 + 9 = 3\n3 - 21 = -18\n-18 - 4 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperations(a):\n    # Write your code here\n    return sum(a)",
            "Answer": -22.0,
            "Final Answer": -22.0,
            "Expected Answer": -22
        },
        {
            "Index": 147,
            "GT": 130,
            "Query": "8 + 7 + 3 + 9 * 5 - 6 + 9 + 8 * 8 =   ",
            "Injected CoT": "9 * 4 = 45\n8 + 7 = 15\n15 + 3 = 18\n18 + 45 = 63\n8 * 8 = 64\n9 + 64 = 73\n73 - 6 = 67\n67 + 9 =",
            "Response": " 76",
            "Extract-Response": " 76\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            for(j=0;j<i;j++)\n            {\n                if(s[j]=='+')\n                {\n                    for(k=0;k<j;k++)\n                    {\n                        if(s[k]=='+')\n                        {\n                            for(l=0;l<k;l++)\n                            {\n                                if(s[l]=='+')\n                                {\n                                    for(m=0;m<l;m++)\n                                    {\n                                        if(s[m]=='+')\n                                        {\n                                            for(n=0;n<m;n++)\n                                            {\n                                                sum=sum+s[n]-48;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"The answer is  %d\",sum);\n    return 0;\n}",
            "Answer": 76.0,
            "Final Answer": 76.0,
            "Expected Answer": 76
        },
        {
            "Index": 148,
            "GT": 10,
            "Query": "9 + 4 + 2 - 5 * 1 - 4 + 7 + 5 - 8 =   ",
            "Injected CoT": "9 + 3 = 13\n13 + 2 = 15\n15 - 5 = 10\n10 - 1 = 9\n9 - 3 = 5\n5 + 7 = 12\n12 + 5 = 17\n17 - 8 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0,
            "Expected Answer": 9
        },
        {
            "Index": 149,
            "GT": -35,
            "Query": "2 * 1 - 4 * 7 - 5 - 4 - 6 + 3 * 2 =   ",
            "Injected CoT": "1 * 1 = 1\n4 * 7 = 28\n3 * 1 = 6\n1 - 28 = -26\n-26 - 5 = -31\n-31 - 4 = -35\n-35 - 6 = -41\n-41 + 6 =",
            "Response": " -35\n-35 + 4 = -31\n-31 + 5 = -26\n-26 + 28 = 2",
            "Extract-Response": " 2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        int cur = d;\n        if (d < a) {\n            cur = a;\n        }\n        if (d > b) {\n            cur = b;\n        }\n        if (s == \"East\") {\n            result += cur;\n        } else {\n            result -= cur;\n        }\n    }\n\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": -35
        },
        {
            "Index": 150,
            "GT": -32,
            "Query": "3 * 5 - 2 - 8 * 8 + 9 + 4 + 2 * 3 =   ",
            "Injected CoT": "4 * 5 = 15\n8 * 8 = 64\n15 - 2 = 13\n13 - 64 = -51\n9 + 4 = 13\n2 * 4 = 6\n-51 + 13 = -38\n-38 + 6 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};",
            "Answer": -32.0,
            "Final Answer": -32.0,
            "Expected Answer": -32
        },
        {
            "Index": 151,
            "GT": 0,
            "Query": "1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =   ",
            "Injected CoT": "6 * 1 = 6\n1 - 4 = -3\n-3 + 9 = 6\n6 + 4 = 10\n10 - 6 = 6\n6 - 7 = -2\n-2 - 3 = -5\n-5 + 6 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     1\nThe answer is  1\n\n1 - 4 + 9 + 4 - 5",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 1
        },
        {
            "Index": 152,
            "GT": -109,
            "Query": "6 + 3 - 2 * 8 - 4 * 5 * 5 + 3 - 5 =   ",
            "Injected CoT": "2 * 9 = 16\n4 * 5 = 20\n20 * 5 = 100\n6 + 3 = 9\n9 - 16 = -7\n-7 - 100 = -107\n-107 + 3 = -104\n-104 - 5 =",
            "Response": " -109",
            "Extract-Response": " -109.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -109.0,
            "Final Answer": -109.0,
            "Expected Answer": -109
        },
        {
            "Index": 153,
            "GT": 42,
            "Query": "6 * 6 - 4 * 2 + 2 * 9 - 5 - 5 + 6 =   ",
            "Injected CoT": "7 * 7 = 36\n4 * 2 = 8\n2 * 9 = 18\n36 - 8 = 28\n28 + 18 = 46\n5 + 5 = 10\n46 - 10 = 36\n36 + 7 =",
            "Response": " 43\n\n43",
            "Extract-Response": "\n\n43",
            "Answer": 43.0,
            "Final Answer": 43.0,
            "Expected Answer": 43
        },
        {
            "Index": 156,
            "GT": -3,
            "Query": "4 * 5 + 2 + 8 - 1 * 4 - 4 * 6 - 5 =   ",
            "Injected CoT": "4 * 4 = 20\n20 + 2 = 22\n22 + 8 = 30\n1 * 4 = 4\n4 * 6 = 24\n30 - 4 = 26\n26 - 24 = 2\n2 - 4 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -2.0,
            "Final Answer": -2.0,
            "Expected Answer": -2
        },
        {
            "Index": 159,
            "GT": 22,
            "Query": "6 + 4 * 2 * 2 + 1 * 3 - 7 + 1 + 3 =   ",
            "Injected CoT": "3 * 2 = 8\n8 * 2 = 16\n1 * 3 = 3\n6 + 16 = 22\n22 + 3 = 25\n25 - 7 = 18\n18 + 1 = 19\n19 + 3 =",
            "Response": " 22\n\n22",
            "Extract-Response": " 22\n\n*/",
            "Answer": 22.0,
            "Final Answer": 22.0,
            "Expected Answer": 22
        },
        {
            "Index": 162,
            "GT": 84,
            "Query": "3 - 3 + 9 * 8 + 6 - 9 + 9 - 3 + 9 =   ",
            "Injected CoT": "10 * 8 = 72\n3 - 3 = 0\n0 + 72 = 72\n72 + 6 = 78\n78 - 10 = 69\n69 + 10 = 78\n78 - 3 = 75\n75 + 10 =",
            "Response": " 85\n85 - 9 = 76\n76 + 10 = 86\n86 - 9 = 77\n77 + 10 = 87\n87 - 9 = 78\n78 + 10 = 88\n88 - 9 = 79\n79 + 10 = 89\n89 - 9 = 80\n80 + 10 = 90\n90 - 9 = 81\n81 + 10 = 91\n91 - 9 = 82\n82 + 10 = 92\n92 - 9 = 83\n83 + 10 = 93\n93 - 9 = 84\n84 + 10 = 94\n94 - 9 = 85\n85 + 10 = 95\n95 - 9 = 86\n86 + 10 = 96\n96 - 9 = 87\n87 + 10 = 97\n97 - 9 = 88\n88 + 10 = 98\n98 - 9 = 89\n89 + 10 = 99\n99 - 9 = 90\n90 + 10 = 100\n100 - 9 = 91\n91 + 10 = 101\n101 - 9 = 92\n92 + 10 = 103\n103 - 9 = 94\n94 + 10 = 104\n104 - 9 = 95\n95 + 10 = 105\n105 - 9 = 96\n96 + 10 = 107\n107 - 9 = 98\n98 + 10 = 109\n109 - 9 = 100\n100 + 10 = 110\n110 - 9 = 101\n101 + 10 = 111\n111 - 9 = 102\n102 + 10 = 112\n112 - 9 = 103\n103 + 10 = 113\n113 - 9 = 104\n104 + 10 = 114\n114 - 9 = 105\n105 + 10 = 115\n115 - 9 = 106\n106 + 10 = 116\n116 - 9 = 107\n107 + 10 = 117\n117 - 9 = 108\n108 + 10 = 118\n118 - 9 = 109\n109 + 10 = 119\n119 - 9 = 110\n110 + 10 = 120\n120 - 9 = 111\n111 + 10 = 121\n121 - 9 = 112\n112 + 10 = 123\n123 - 9 = 114\n114 + 10 = 125\n125 - 9 = 116\n116 + 10 = 127\n127 - 9 = 118\n118 + 10 = 129\n129 - 9 = 120\n120 + 10 = 131\n131 - 9 = 122\n122 + 10 = 133\n133 - 9 = 124\n124 + 10 = 135\n135 - 9 = 126\n126 + 10 = 137\n137 - 9 = 128\n128 + 10 = 139\n139 - 9 = 130\n130 + 10 = 141\n141 - 9 = 132\n132 + 10 = 143\n143 - 9 = 134\n134 + 10 = 145\n145 - 9 = 136\n136 + 10 = 147\n147 - 9 = 138\n138 + 10 = 149\n149 - 9 = 140\n140 + 10 = 151\n151 - 9 = 142\n142 + 10 = 153\n153 - 9 = 144\n144 + 10 = 155\n155 - 9 = 146\n146 + 10 = 157\n157 - 9 = 148\n148 + 10 = 159\n159 - 9 = 150\n150 + 10 = 161\n161 - 9 = 152\n152 + 10 = 163\n163 - 9 = 154\n154 + 10 = 165\n165 - 9 = 156\n156 + 10 = 167\n167 - 9 = 158\n158 + 10 = 169\n169 - 9 = 160\n160 + 10 = 171\n171 - 9 = 162\n162 + 10 = 173\n173 - 9 = 164\n164 + 10 = 175\n175 - 9 = 166\n166 + 10 = 177\n177 - 9 = 168\n168 + 10 = 179\n179 - 9 = 170\n170 + 10 = 181\n181 - 9 = 172\n172 + 10 = 183\n183 - 9 = 174\n174 + 10 = 185\n185 - 9 = 176\n176 + 10 = 187\n187 - 9 = 178\n178 + 10 = 189\n189 - 9 = 180\n180 + 10 = 191\n191 - 9 = 182\n182 + 10 = 193\n193 - 9 = 184\n184 + 10 = 195\n195 - 9 = 186\n186 + 10 = 197\n197 - 9 = 188\n188 + 10 = 199\n199 - 9 = 190\n190 + 10 = 201\n201 - 9 = 192\n192 + 10 = 203\n203 - 9 = 194\n194 + 10 = 205\n205 - 9 = 196\n196 + 10 = 207\n207 - 9 = 198\n198 + 10 = 209\n209 - 9 = 200\n200 + 10 = 211\n211 - 9 = 202\n202 + 10 = 213\n213 - 9 = 204\n204 + 10 = 215\n215 - 9 = 206\n206 + 10 = 217\n217 - 9 = 208\n208 + 10 = 219\n219 - 9 = 210\n210 + 10 = 221\n221 - 9 = 212\n212 + 10 = 223\n223 - 9 = 214\n214 + 10 = 225\n225 - 9 = 216\n216 + 10 = 227\n227 - 9 = 218\n218 + 10 = 229\n229 - 9 = 220\n220 + 10 = 231\n231 - 9 = 222\n222 + 10 = 233\n233 - 9 = 224\n224 + 10 = 235\n235 - 9 = 226\n226 + 10 = 237\n237 - 9 = 228\n228 + 10 = 239\n239 - 9 = 230\n230 + 10 = 241\n241 - 9 = 232\n232 + 10 = 243\n243 - 9 = 234\n234 + 10 = 245\n245 - 9 = 236\n236 + 10 = 247\n247 - 9 = 238\n238 + 10 = 249\n249 - 9 = 240\n240 + 10 = 251\n251 - 9 = 242\n242 + 10 = 253\n253 - 9 = 244\n244 + 10 = 255\n255 - 9 = 246\n246 + 10 = 257\n257 - 9 = 248\n248 + 10 = 259\n259 - 9 = 250\n250 + 10 = 261\n261 - 9 = 252\n252 + 10 = 263\n263 - 9 = 254\n254 + 10 = 265\n265 - 9 = 256\n256 + 10 = 267\n267 - 9 = 258\n258 + 10 = 269\n269 - 9 = 260\n260 + 10 = 271\n271 - 9 = 262\n262 + 10 = 273\n273 - 9 = 264\n264 + 10 = 275\n275 - 9 = 266\n266 + 10 = 277\n277 - 9 = 268\n268 + 10 = 279\n279 - 9 = 270\n270 + 10 = 281\n281 - 9 = 272\n272 + 10 = 283\n283 - 9 = 274\n274 + 10 = 285\n285 - 9 = 276\n276 + 10 = 287\n287 - 9 = 278\n278 + 10 = 289\n289 - 9 = 280\n280 + 10 = 291\n291 - 9 = 282\n282 + 10 = 293\n293 - 9 = 284\n284 + 10 = 295\n295 - 9 = 286\n286 + 10 = 297\n297 - 9 = 288\n288 + 10 = 299\n299 - 9 = 290\n290 + 10 = 301\n301 - 9 = 292\n292 + 10 = 303\n303 - 9 = 294\n294 + 10 = 305\n305 - 9 = 296\n296 + 10 = 307\n307 - 9 = 298\n298 + 10 = 309\n309 - 9 = 300\n300 + 10 = 311\n311 - 9 = 302\n302 + 10 = 313\n313 - 9 = 304\n304 + 10 = 315\n315 - 9 = 306\n306 + 10 = 317\n317 - 9 = 308\n308 + 10 = 319\n319 - 9 = 310\n310 + 10 = 321\n321 - 9 = 312\n312 + 10 = 323\n323 - 9 = 314\n314 + 10 = 325\n325 - 9 = 316\n316 + 10 = 327\n327 - 9 = 318\n318 + 10 = 329\n329 - 9 = 320\n320 + 10 = 331\n331 - 9 = 322\n322 + 10 = 333\n333 - 9 = 324\n324 + 10 = 335\n335 - 9 = 326\n326 + 10 = 337\n337 - 9 = 328\n328 + 10 = 339\n339 - 9 = 330\n330 + 10 = 341\n341 - 9 = 332\n332 + 10 = 343\n343 - 9 = 334\n334 + 10 = 345\n345 - 9 = 336\n336 + 10 = 347\n347 - 9 = 338\n338 + 10 = 349\n349 - 9 = 340\n340 + 10 = 351\n351 - 9 = 342\n342 + 10 = 353\n353 - 9 = 344\n344 + 10 = 355\n355 - 9 = 346\n346 + 10 = 357\n357 - 9 = 348\n348 + 10 = 359\n359 - 9 = 350\n350 + 10 = 361\n361 - 9 = 352\n352 + 10 = 363\n363 - 9 = 354\n354 + 10 = 365\n365 - 9 = 356\n356 + 10 = 367\n367 - 9 = 358\n358 + 10 = 369\n369 - 9 = 360\n360 + 10 = 371\n371 - 9 = 362\n362 + 10 = 373\n373 - 9 = 364\n364 + 10 = 375\n375 - 9 = 366\n366 + 10 = 377\n377 - 9 = 368\n368 + 10 = 379\n379 - 9 = 370\n370 + 10 = 381\n381 - 9 = 372\n372 + 10 = 383\n383 - 9 = 374\n374 + 10 = 385\n385 - 9 = 376\n376 + 10 = 387\n387 - 9 =",
            "Extract-Response": "\n\n87",
            "Answer": 87.0,
            "Final Answer": 87.0,
            "Expected Answer": 85
        },
        {
            "Index": 165,
            "GT": 77,
            "Query": "9 * 8 + 5 + 1 - 2 - 9 + 7 + 8 - 5 =   ",
            "Injected CoT": "9 * 7 = 72\n72 + 5 = 77\n77 + 1 = 78\n78 - 2 = 76\n76 - 9 = 67\n67 + 7 = 74\n74 + 7 = 82\n82 - 5 =",
            "Response": " 77",
            "Extract-Response": " 77\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 77.0,
            "Final Answer": 77.0,
            "Expected Answer": 77
        },
        {
            "Index": 166,
            "GT": -29,
            "Query": "8 - 3 * 7 - 1 - 7 - 8 + 7 - 2 - 5 =   ",
            "Injected CoT": "3 * 8 = 21\n8 - 21 = -13\n-13 - 1 = -14\n-14 - 8 = -21\n-21 - 8 = -29\n-29 + 8 = -22\n-22 - 2 = -24\n-24 - 5 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\nThe range of n is [1, 10000].\nThe range of ai is [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -29.0,
            "Final Answer": -29.0,
            "Expected Answer": -29
        },
        {
            "Index": 168,
            "GT": 22,
            "Query": "2 * 9 - 1 - 8 + 7 + 9 + 3 + 1 - 7 =   ",
            "Injected CoT": "3 * 9 = 18\n18 - 1 = 17\n17 - 8 = 9\n9 + 7 = 16\n16 + 9 = 25\n25 + 3 = 28\n28 + 1 = 29\n29 - 7 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 22.0,
            "Final Answer": 22.0,
            "Expected Answer": 22
        },
        {
            "Index": 171,
            "GT": 64,
            "Query": "8 * 5 * 2 + 9 + 3 - 1 - 9 * 3 * 1 =   ",
            "Injected CoT": "7 * 5 = 40\n40 * 2 = 80\n9 + 3 = 12\n80 + 12 = 92\n9 * 3 = 27\n27 * 1 = 27\n1 - 27 = -26\n92 - (-26) =",
            "Response": " 118",
            "Extract-Response": " 118\n</code>\n",
            "Answer": 118.0,
            "Final Answer": 118.0,
            "Expected Answer": 118
        },
        {
            "Index": 172,
            "GT": 113,
            "Query": "8 * 6 * 6 + 2 - 1 - 8 - 3 * 7 * 8 =   ",
            "Injected CoT": "8 * 5 = 48\n48 * 5 = 288\n288 + 2 = 290\n290 - 1 = 289\n289 - 8 = 281\n3 * 7 = 21\n21 * 8 = 168\n281 - 168 =",
            "Response": " 113\n\n113 * 6 = 678\n\n678 + 6 = 684\n\n684 - 6 = 678\n\n678 / 6 = 113",
            "Extract-Response": " 113",
            "Answer": 113.0,
            "Final Answer": 113.0,
            "Expected Answer": 113
        },
        {
            "Index": 173,
            "GT": 19,
            "Query": "2 + 4 + 8 - 3 + 3 + 4 + 9 - 9 + 1 =   ",
            "Injected CoT": "3 + 4 = 6\n6 + 8 = 14\n14 - 3 = 11\n11 + 3 = 14\n14 + 4 = 18\n18 + 9 = 27\n27 - 9 = 18\n18 + 1 =",
            "Response": " 19\n\n19",
            "Extract-Response": "\n\n19",
            "Answer": 19.0,
            "Final Answer": 19.0,
            "Expected Answer": 19
        },
        {
            "Index": 176,
            "GT": 10,
            "Query": "4 + 2 + 2 - 2 + 7 * 2 - 5 - 9 + 4 =   ",
            "Injected CoT": "5 + 2 = 6\n6 + 2 = 8\n8 - 2 = 6\n6 + 7 * 2 = 20\n20 - 5 = 15\n15 - 9 = 6\n6 + 5 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Answer": 11.0,
            "Final Answer": 11.0,
            "Expected Answer": 11
        },
        {
            "Index": 178,
            "GT": 40,
            "Query": "2 * 7 + 3 - 3 * 3 + 4 - 8 + 4 * 9 =   ",
            "Injected CoT": "3 * 7 = 14\n3 * 3 = 9\n4 * 9 = 36\n14 + 3 = 17\n17 - 9 = 8\n8 + 4 = 12\n12 - 8 = 4\n4 + 36 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 40.0,
            "Final Answer": 40.0,
            "Expected Answer": 40
        },
        {
            "Index": 180,
            "GT": 2,
            "Query": "8 - 9 - 5 - 2 + 8 * 1 + 1 - 6 + 7 =   ",
            "Injected CoT": "8 - 10 = -1\n-1 - 5 = -6\n-6 - 2 = -8\n8 * 1 = 8\n-8 + 8 = 0\n0 + 1 = 1\n1 - 6 = -5\n-5 + 7 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 2
        },
        {
            "Index": 184,
            "GT": 79,
            "Query": "4 + 9 * 6 * 2 + 4 - 4 * 4 * 2 - 5 =   ",
            "Injected CoT": "10 * 6 = 54\n54 * 2 = 108\n4 + 108 = 112\n4 * 4 = 16\n16 * 2 = 32\n32 - 4 = 28\n112 - 28 = 84\n84 - 5 =",
            "Response": " 79\n\n79",
            "Extract-Response": " 79\n\n*/",
            "Answer": 79.0,
            "Final Answer": 79.0,
            "Expected Answer": 79
        },
        {
            "Index": 185,
            "GT": -1,
            "Query": "2 - 8 * 3 + 6 * 5 + 5 - 7 - 1 * 7 =   ",
            "Injected CoT": "8 * 4 = 24\n2 - 24 = -22\n6 * 5 = 30\n-22 + 30 = 8\n8 + 5 = 13\n13 - 7 = 6\n1 * 7 = 7\n6 - 7 = -1\n-1 - 1 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -2.0,
            "Final Answer": -2.0,
            "Expected Answer": -2
        },
        {
            "Index": 186,
            "GT": 59,
            "Query": "9 * 8 - 9 - 3 + 2 - 1 - 3 * 3 + 7 =   ",
            "Injected CoT": "9 * 9 = 72\n72 - 9 = 63\n63 - 3 = 60\n60 + 2 = 62\n62 - 1 = 61\n3 * 3 = 9\n61 - 9 = 52\n52 + 7 =",
            "Response": " 59",
            "Extract-Response": "\n\n59",
            "Answer": 59.0,
            "Final Answer": 59.0,
            "Expected Answer": 59
        },
        {
            "Index": 187,
            "GT": -213,
            "Query": "6 + 1 * 6 + 9 + 9 - 3 - 5 * 8 * 6 =   ",
            "Injected CoT": "1 * 7 = 7\n5 * 8 = 40\n40 * 7 = 240\n7 + 7 = 12\n12 + 9 = 21\n21 + 9 = 30\n30 - 3 = 27\n27 - 240 =",
            "Response": " -213\n\n-213",
            "Extract-Response": " -213\n\n*/",
            "Answer": -213.0,
            "Final Answer": -213.0,
            "Expected Answer": -213
        },
        {
            "Index": 188,
            "GT": 13,
            "Query": "5 + 3 + 2 + 1 * 9 + 1 * 1 - 1 * 7 =   ",
            "Injected CoT": "2 * 9 = 9\n2 * 2 = 2\n5 + 3 = 8\n8 + 2 = 10\n10 + 9 = 19\n19 + 2 = 20\n2 * 7 = 7\n20 - 7 =",
            "Response": " 13\n\n13 is the answer.",
            "Extract-Response": "\n\n13",
            "Answer": 13.0,
            "Final Answer": 13.0,
            "Expected Answer": 13
        },
        {
            "Index": 191,
            "GT": 56,
            "Query": "3 + 4 + 8 * 9 - 6 * 6 + 3 + 2 + 8 =   ",
            "Injected CoT": "8 * 8 = 72\n6 * 6 = 36\n3 + 4 = 7\n72 - 36 = 36\n36 + 7 = 43\n43 + 3 = 46\n46 + 2 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n        else if(str[i] == '+')\n        {\n            continue;\n        }\n        else if(str[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            num = 0;\n            for(j = i; j < len; j++)\n            {\n                if(str[j] == ' ')\n                {\n                    break;\n                }\n                else if(str[j] == '+')\n                {\n                    break;\n                }\n                else if(str[j] == '-')\n                {\n                    break;\n                }\n                else\n                {\n                    num = num * 10 + (str[j] - '0');\n                    i++;\n                }\n            }\n            sum = sum + num;\n        }\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1051\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/",
            "Answer": 56.0,
            "Final Answer": 56.0,
            "Expected Answer": 56
        },
        {
            "Index": 194,
            "GT": -16,
            "Query": "3 - 2 * 1 + 4 - 5 + 1 - 2 - 6 - 9 =   ",
            "Injected CoT": "2 * 2 = 2\n3 - 2 = 2\n2 + 4 = 5\n5 - 5 = 0\n0 + 2 = 2\n2 - 2 = -1\n-1 - 6 = -7\n-7 - 9 =",
            "Response": " -16",
            "Extract-Response": " -16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -16.0,
            "Final Answer": -16.0,
            "Expected Answer": -16
        },
        {
            "Index": 195,
            "GT": 100,
            "Query": "3 - 2 * 6 - 2 + 4 * 6 * 4 + 5 * 3 =   ",
            "Injected CoT": "1 * 6 = 12\n3 - 12 = -9\n4 * 6 = 24\n24 * 4 = 96\n5 * 3 = 15\n-9 - 1 = -11\n-11 + 96 = 85\n85 + 15 =",
            "Response": " 100",
            "Extract-Response": " 100.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 100.0,
            "Final Answer": 100.0,
            "Expected Answer": 100
        },
        {
            "Index": 196,
            "GT": -34,
            "Query": "3 - 7 * 8 + 9 - 7 + 9 + 8 + 8 - 8 =   ",
            "Injected CoT": "-6 * 8 = -56\n3 - (-56) = 59\n59 + 9 = 68\n68 - 7 = 61\n61 + 9 = 70\n70 + 8 = 78\n78 - 8 =",
            "Response": " 70",
            "Extract-Response": "\n\n70",
            "Answer": 70.0,
            "Final Answer": 70.0,
            "Expected Answer": 70
        },
        {
            "Index": 200,
            "GT": 60,
            "Query": "5 * 8 + 3 * 6 + 7 - 1 * 3 - 4 + 2 =   ",
            "Injected CoT": "5 * 9 = 40\n3 * 6 = 18\n1 * 3 = 3\n40 + 18 = 58\n58 + 7 = 65\n65 - 3 = 62\n62 - 4 = 58\n58 + 2 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 60.0,
            "Final Answer": 60.0,
            "Expected Answer": 60
        },
        {
            "Index": 202,
            "GT": 47,
            "Query": "9 * 4 + 7 + 3 * 1 - 4 + 3 + 9 - 7 =   ",
            "Injected CoT": "9 * 5 = 36\n3 * 1 = 3\n36 + 7 = 43\n43 + 3 = 46\n46 - 5 = 42\n42 + 3 = 45\n45 + 9 = 54\n54 - 7 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            continue;\n        }\n        sum = sum + s[i] - '0';\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Answer": 47.0,
            "Final Answer": 47.0,
            "Expected Answer": 47
        },
        {
            "Index": 203,
            "GT": 159,
            "Query": "7 * 4 * 1 * 8 - 5 - 6 * 8 - 3 - 9 =   ",
            "Injected CoT": "6 * 4 = 28\n28 * 1 = 28\n28 * 8 = 224\n6 * 8 = 48\n224 - 5 = 219\n219 - 48 = 171\n171 - 3 = 168\n168 - 9 =",
            "Response": " 159",
            "Extract-Response": " 159\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Answer": 159.0,
            "Final Answer": 159.0,
            "Expected Answer": 159
        },
        {
            "Index": 204,
            "GT": 116,
            "Query": "7 * 8 * 8 - 8 * 7 * 6 - 4 + 9 - 1 =   ",
            "Injected CoT": "7 * 7 = 56\n56 * 7 = 448\n7 * 7 = 56\n56 * 6 = 336\n448 - 336 = 112\n112 - 4 = 108\n108 + 9 = 117\n117 - 1 =",
            "Response": " 116",
            "Extract-Response": " 116\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 116.0,
            "Final Answer": 116.0,
            "Expected Answer": 116
        },
        {
            "Index": 205,
            "GT": 41,
            "Query": "6 * 9 - 1 + 3 - 8 + 2 - 3 * 2 - 3 =   ",
            "Injected CoT": "6 * 10 = 54\n54 - 1 = 53\n53 + 3 = 56\n56 - 8 = 48\n48 + 2 = 50\n3 * 2 = 6\n50 - 6 = 44\n44 - 3 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 41.0,
            "Final Answer": 41.0,
            "Expected Answer": 41
        },
        {
            "Index": 206,
            "GT": -14,
            "Query": "6 * 4 + 3 + 9 - 8 - 5 - 2 - 5 * 7 =   ",
            "Injected CoT": "5 * 4 = 24\n24 + 3 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 5 = 23\n23 - 2 = 21\n5 * 7 = 35\n21 - 35 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -14.0,
            "Final Answer": -14.0,
            "Expected Answer": -14
        },
        {
            "Index": 207,
            "GT": 140,
            "Query": "7 * 3 * 8 + 1 - 6 - 5 + 3 - 7 * 3 =   ",
            "Injected CoT": "8 * 3 = 21\n21 * 8 = 168\n168 + 1 = 169\n169 - 6 = 163\n163 - 5 = 158\n158 + 3 = 161\n161 - 8 = 154\n154 * 3 =",
            "Response": " 462\n462 + 7 = 469\n\n7 * 3 * 8 + 1 - 6 - 5 + 3 - 7 * 3 =    \n8 * 3 = 24\n24 * 8 = 192\n192 + 1 = 193\n193 - 6 = 187\n187 - 5 = 182\n182 + 3 = 185\n185 - 8 = 177\n177 * 3 = 531\n531 + 7 = 538",
            "Extract-Response": "\n\n531 + 7 = 538",
            "Answer": 531.0,
            "Final Answer": 531.0,
            "Expected Answer": 462
        },
        {
            "Index": 208,
            "GT": -1,
            "Query": "9 + 1 - 3 - 7 - 5 - 5 + 3 + 2 * 3 =   ",
            "Injected CoT": "1 * 3 = 6\n9 + 1 = 10\n10 - 3 = 7\n7 - 7 = 0\n0 - 5 = -5\n-5 - 5 = -10\n-10 + 3 = -7\n-7 + 6 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Answer": -1.0,
            "Final Answer": -1.0,
            "Expected Answer": -1
        },
        {
            "Index": 209,
            "GT": 399,
            "Query": "6 + 5 + 7 * 2 - 3 - 1 + 6 * 9 * 7 =   ",
            "Injected CoT": "6 * 2 = 14\n6 + 5 = 11\n11 + 14 = 25\n6 * 9 = 54\n54 * 6 = 378\n25 + 378 = 403\n403 - 3 = 400\n400 - 1 =",
            "Response": " 399",
            "Extract-Response": " 399\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 399.0,
            "Final Answer": 399.0,
            "Expected Answer": 399
        },
        {
            "Index": 210,
            "GT": 63,
            "Query": "9 + 7 * 8 - 3 + 1 + 4 - 6 - 1 + 3 =   ",
            "Injected CoT": "7 * 7 = 56\n9 + 56 = 65\n65 - 3 = 62\n62 + 1 = 63\n63 + 4 = 67\n67 - 6 = 61\n61 - 1 = 60\n60 + 3 =",
            "Response": " 63\n\n63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 63.0,
            "Final Answer": 63.0,
            "Expected Answer": 63
        },
        {
            "Index": 211,
            "GT": 72,
            "Query": "3 - 6 * 5 * 1 + 9 * 9 + 9 + 2 + 7 =   ",
            "Injected CoT": "6 * 6 = 30\n3 - 30 = -27\n9 * 9 = 81\n-27 + 81 = 54\n54 + 9 = 63\n63 + 2 = 65\n65 + 7 =",
            "Response": " 72\n\n72\n\n*/",
            "Extract-Response": "\n\n72",
            "Answer": 72.0,
            "Final Answer": 72.0,
            "Expected Answer": 72
        },
        {
            "Index": 213,
            "GT": 10,
            "Query": "2 * 1 + 7 + 7 - 7 - 1 * 5 + 5 + 1 =   ",
            "Injected CoT": "1 * 1 = 1\n7 + 7 = 14\n5 * 1 = 5\n1 + 14 = 16\n16 - 7 = 9\n5 + 1 = 6\n9 + 6 = 15\n15 + 1 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 16.0,
            "Final Answer": 16.0,
            "Expected Answer": 16
        },
        {
            "Index": 214,
            "GT": 4388,
            "Query": "2 * 9 * 2 * 5 * 8 * 3 + 8 * 9 - 4 =   ",
            "Injected CoT": "2 * 8 = 18\n18 * 2 = 36\n36 * 5 = 180\n180 * 8 = 1440\n1440 * 3 = 4320\n8 * 8 = 72\n4320 + 72 = 4392\n4392 - 4 =",
            "Response": " 4388",
            "Extract-Response": " 4388\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24,",
            "Answer": 4388.0,
            "Final Answer": 4388.0,
            "Expected Answer": 4388
        },
        {
            "Index": 215,
            "GT": 86,
            "Query": "6 + 3 * 6 * 8 + 8 - 4 * 1 * 6 * 3 =   ",
            "Injected CoT": "3 * 5 = 18\n18 * 8 = 144\n5 * 3 = 18\n18 * 1 = 18\n18 * 4 = 72\n5 * 18 = 108\n108 - 72 = 36\n5 + 144 = 150\n150 + 8 = 158\n158 - 36 =",
            "Response": " 122\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n5 + 18 = 23\n23 + 1 = 24\n24 * 4 = 96\n",
            "Extract-Response": "\n\n122 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 + 96 + 23 + 24 +",
            "Answer": 122.0,
            "Final Answer": 122.0,
            "Expected Answer": 122
        },
        {
            "Index": 216,
            "GT": -226,
            "Query": "2 * 2 + 1 - 7 * 7 * 4 - 7 - 7 * 4 =   ",
            "Injected CoT": "1 * 1 = 4\n7 * 7 = 49\n49 * 4 = 196\n7 * 4 = 28\n196 + 28 = 224\n4 + 1 = 5\n5 - 224 =",
            "Response": " -219",
            "Extract-Response": " -219.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {\n        int sum = 0;\n        for(int i = 0; i < A.size(); i++) {\n            if(A[i] % 2 == 0) {\n                sum += A[i];\n            }\n        }\n        vector<int> ans;\n        for(int i = 0; i < queries.size(); i++) {\n            int val = queries[i][0];\n            int index = queries[i][1];\n            if(A[index] % 2 == 0) {\n                sum -= A[index];\n            }\n            A[index] += val;\n            if(A[index] % 2 == 0) {\n                sum += A[index];\n            }\n            ans.push_back(sum);\n        }\n        return ans;\n    }\n};",
            "Answer": -219.0,
            "Final Answer": -219.0,
            "Expected Answer": -219
        },
        {
            "Index": 218,
            "GT": -102,
            "Query": "5 * 8 - 4 * 2 - 1 * 9 * 5 * 3 + 1 =   ",
            "Injected CoT": "4 * 8 = 40\n4 * 2 = 8\n9 * 4 = 45\n45 * 3 = 135\n40 - 8 = 32\n32 - 135 = -103\n-103 + 1 =",
            "Response": " -102\n\n-102",
            "Extract-Response": " -102",
            "Answer": -102.0,
            "Final Answer": -102.0,
            "Expected Answer": -102
        },
        {
            "Index": 219,
            "GT": 55,
            "Query": "9 - 8 - 2 - 2 - 7 + 8 * 8 + 8 - 7 =   ",
            "Injected CoT": "7 * 7 = 64\n9 - 7 = 1\n1 - 2 = -1\n-1 - 2 = -3\n-3 - 7 = -10\n-10 + 64 = 54\n54 + 7 = 62\n62 - 7 =",
            "Response": " 55",
            "Extract-Response": " 55\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            } else if (operation == '/') {\n                result /= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    } else if (operation == '/') {\n        result /= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 55.0,
            "Final Answer": 55.0,
            "Expected Answer": 55
        },
        {
            "Index": 221,
            "GT": 239,
            "Query": "7 - 7 - 7 + 5 * 6 + 9 * 3 * 1 * 8 =   ",
            "Injected CoT": "4 * 6 = 30\n9 * 3 = 27\n27 * 1 = 27\n27 * 8 = 216\n7 - 7 = 0\n0 - 7 = -7\n-7 + 30 = 23\n23 + 216 =",
            "Response": " 239\n\n7 - 7 - 7 + 5 * 6 + 9 * 3 * 1 * 8 = 239",
            "Extract-Response": " 239",
            "Answer": 239.0,
            "Final Answer": 239.0,
            "Expected Answer": 239
        },
        {
            "Index": 223,
            "GT": 56,
            "Query": "3 * 9 + 1 - 6 * 2 + 1 + 4 + 7 * 5 =   ",
            "Injected CoT": "3 * 8 = 27\n27 + 1 = 28\n6 * 2 = 12\n28 - 12 = 16\n1 + 16 = 17\n4 + 17 = 21\n7 * 5 = 35\n21 + 35 =",
            "Response": " 56",
            "Extract-Response": " 56.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - 1 - i] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Answer": 56.0,
            "Final Answer": 56.0,
            "Expected Answer": 56
        },
        {
            "Index": 224,
            "GT": -19,
            "Query": "9 + 3 + 4 + 2 * 5 + 9 - 7 * 8 + 2 =   ",
            "Injected CoT": "2 * 4 = 10\n7 * 8 = 56\n9 + 3 = 12\n12 + 4 = 16\n16 + 10 = 26\n26 + 9 = 35\n35 - 56 = -21\n-21 + 2 =",
            "Response": " -19",
            "Extract-Response": " -19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <stack>\n#include <limits>\n#include <thread>\n#include <mutex>\n#include <fstream>\n#include <memory>\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        int cur = 0;\n        for (char c : s) {\n            if (c == ' ') {\n                continue;\n            }\n            if (c == '+') {\n                result += cur * sign;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                result += cur * sign;\n                cur = 0;\n                sign = -1;\n            } else if (c == '*') {\n                cur *= sign;\n                sign = 1;\n            } else if (c == '/') {\n                cur /= sign;\n                sign = 1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n\n        result += cur * sign;\n        return result;\n    }\n};\n\nint main() {\n    Solution s;\n    string input = \"3+2*2\";\n    cout << s.calculate(input) << endl;\n    return 0;\n}",
            "Answer": -19.0,
            "Final Answer": -19.0,
            "Expected Answer": -19
        },
        {
            "Index": 225,
            "GT": -3,
            "Query": "1 * 8 - 5 - 1 * 4 - 9 + 7 + 6 - 6 =   ",
            "Injected CoT": "0 * 8 = 8\n8 - 5 = 3\n0 * 4 = 4\n3 - 4 = -1\n-1 - 9 = -10\n-10 + 7 = -3\n-3 + 6 = 3\n3 - 6 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": -3.0,
            "Final Answer": -3.0,
            "Expected Answer": -3
        },
        {
            "Index": 226,
            "GT": -68,
            "Query": "8 - 2 - 7 * 8 - 3 * 2 - 2 - 5 * 2 =   ",
            "Injected CoT": "8 * 8 = 56\n3 * 2 = 6\n5 * 2 = 10\n8 - 2 = 6\n6 - 56 = -50\n-50 - 6 = -56\n-56 - 6 = -62\n-62 - 10 =",
            "Response": " -72\n-72 - 3 = -75\n-75 - 2 = -77\n-77 - 2 = -79\n-79 - 2 = -81\n-81 - 2 = -83\n-83 - 2 = -85\n-85 - 2 = -87\n-87 - 2 = -89\n-89 - 2 = -91\n-91 - 2 = -93\n-93 - 2 = -95\n-95 - 2 = -97\n-97 - 2 = -99\n-99 - 2 = -101\n-101 - 2 = -103\n-103 - 2 = -105\n-105 - 2 = -107\n-107 - 2 = -109\n-109 - 2 = -111\n-111 - 2 = -113\n-113 - 2 = -115\n-115 - 2 = -117\n-117 - 2 = -119\n-119 - 2 = -121\n-121 - 2 = -123\n-123 - 2 = -125\n-125 - 2 = -127\n-127 - 2 = -129\n-129 - 2 = -131\n-131 - 2 = -133\n-133 - 2 = -135\n-135 - 2 = -137\n-137 - 2 = -139\n-139 - 2 = -141\n-141 - 2 = -143\n-143 - 2 = -145\n-145 - 2 = -147\n-147 - 2 = -149\n-149 - 2 = -151\n-151 - 2 = -153\n-153 - 2 = -155\n-155 - 2 = -157\n-157 - 2 = -159\n-159 - 2 = -161\n-161 - 2 = -163\n-163 - 2 = -165\n-165 - 2 = -167\n-167 - 2 = -169\n-169 - 2 = -171\n-171 - 2 = -173\n-173 - 2 = -175\n-175 - 2 = -177\n-177 - 2 = -179\n-179 - 2 = -181\n-181 - 2 = -183\n-183 - 2 = -185\n-185 - 2 = -187\n-187 - 2 = -189\n-189 - 2 = -191\n-191 - 2 = -193\n-193 - 2 = -195\n-195 - 2 = -197\n-197 - 2 = -199\n-199 - 2 = -201\n-201 - 2 = -203\n-203 - 2 = -205\n-205 - 2 = -207\n-207 - 2 = -209\n-209 - 2 = -211\n-211 - 2 = -213\n-213 - 2 = -215\n-215 - 2 = -217\n-217 - 2 = -219\n-219 - 2 = -221\n-221 - 2 = -223\n-223 - 2 = -225\n-225 - 2 = -227\n-227 - 2 = -229\n-229 - 2 = -231\n-231 - 2 = -233\n-233 - 2 = -235\n-235 - 2 = -237\n-237 - 2 = -239\n-239 - 2 = -241\n-241 - 2 = -243\n-243 - 2 = -245\n-245 - 2 = -247\n-247 - 2 = -249\n-249 - 2 = -251\n-251 - 2 = -253\n-253 - 2 = -255\n-255 - 2 = -257\n-257 - 2 = -259\n-259 - 2 = -261\n-261 - 2 = -263\n-263 - 2 = -265\n-265 - 2 = -267\n-267 - 2 = -269\n-269 - 2 = -271\n-271 - 2 = -273\n-273 - 2 = -275\n-275 - 2 = -277\n-277 - 2 = -279\n-279 - 2 = -281\n-281 - 2 = -283\n-283 - 2 = -285\n-285 - 2 = -287\n-287 - 2 = -289\n-289 - 2 = -291\n-291 - 2 = -293\n-293 - 2 = -295\n-295 - 2 = -297\n-297 - 2 = -299\n-299 - 2 = -301\n-301 - 2 = -303\n-303 - 2 = -305\n-305 - 2 = -307\n-307 - 2 = -309\n-309 - 2 = -311\n-311 - 2 = -313\n-313 - 2 = -315\n-315 - 2 = -317\n-317 - 2 = -319\n-319 - 2 = -321\n-321 - 2 = -323\n-323 - 2 = -325\n-325 - 2 = -327\n-327 - 2 = -329\n-329 - 2 = -331\n-331 - 2 = -333\n-333 - 2 = -335\n-335 - 2 = -337\n-337 - 2 = -339\n-339 - 2 = -341\n-341 - 2 = -343\n-343 - 2 = -345\n-345 - 2 = -347\n-347 - 2 = -349\n-349 - 2 = -351\n-351 - 2 = -353\n-353 - 2 = -355\n-355 - 2 = -357\n-357 - 2 = -359\n-359 - 2 = -361\n-361 - 2 = -363\n-363 - 2 = -365\n-365 - 2 = -367\n-367 - 2 = -369\n-369 - 2 = -371\n-371 - 2 = -373\n-373 - 2 = -375\n-375 - 2 = -377\n-377 - 2 = -379\n-379 - 2 = -381\n-381 - 2 = -383\n-383 - 2 = -385\n-385 - 2 = -387\n-387 - 2 = -389\n-389 - 2 = -391\n-391 - 2 = -393\n-393 - 2 = -395\n-395 - 2 = -397\n-397 - 2 = -399\n-399 - 2 = -401\n-401 - 2 = -403\n-403 - 2 = -405\n-405 - 2 = -407\n-407 - 2 = -409\n-409 - 2 = -411\n-411 - 2 = -413\n-413 - 2 = -415\n-415 - 2 = -417\n-417 - 2 = -419\n-419 - 2 = -421\n-421 - 2 = -423\n-423 - 2 = -425\n-425 - 2 = -427\n-427 - 2 = -429\n-429 - 2 = -431\n-431 - 2 = -433\n-433 - 2 = -435\n-435 - 2 = -437\n-437 - 2 = -439\n-439 - 2 = -441\n-441 - 2 = -443\n-443 - 2 = -445\n-445 - 2 = -447\n-447 - 2 = -449\n-449 - 2 = -451\n-451 - 2 = -453\n-453 - 2 = -455\n-455 - 2 = -457\n-457 - 2 = -459\n-459 - 2 = -461\n-461 - 2 = -463\n-463 - 2 = -465\n-465 - 2 = -467\n-467 - 2 = -469\n-469 - 2 = -471\n-471 - 2 = -473\n-473 - 2 = -475\n-475 - 2 = -477\n-477 - 2 = -479\n-479 - 2 = -481\n-481 - 2 = -483\n-483 - 2 = -485\n-485 - 2 = -487\n-487 - 2 = -489\n-489 - 2 = -491\n-491 - 2 = -493\n-493 - 2 = -495\n-495 - 2 = -497\n-497 - 2 = -499\n-499 - 2 = -501\n-501 - 2 = -503\n-503 - 2 = -505\n-505 - 2 = -507\n-507 - 2 = -509\n-509 - 2 = -511\n-511 - 2 = -513\n-513 - 2 = -515\n-515 - 2 = -517\n-517 - 2 = -519\n-519 - 2 = -521\n-521 - 2 = -523\n-523 - 2 = -525\n-525 - 2 = -527\n-527 - 2 = -529\n-529 - 2 = -531\n-531 - 2 = -533\n-533 - 2 = -535\n-535 - 2 = -537\n-537 - 2 = -539\n-539 - 2 = -541\n-541 - 2 = -543\n-543 - 2 = -545\n-545 - 2 = -547\n-547 - 2 = -549\n-549 - 2 = -551\n-551 - 2 = -553\n-553 - 2 = -555\n-555 - 2 = -557\n-557 - 2 = -559\n-559 - 2 = -561\n-561 - 2 = -563\n-563 - 2 = -565\n-565 - 2 = -567\n-567 - 2 =",
            "Extract-Response": " -567",
            "Answer": -567.0,
            "Final Answer": -567.0,
            "Expected Answer": -72
        },
        {
            "Index": 227,
            "GT": -167,
            "Query": "8 - 3 * 3 * 6 * 3 - 1 - 8 - 5 + 1 =   ",
            "Injected CoT": "2 * 6 = 18\n18 * 2 = 54\n54 * 2 = 162\n8 - 162 = -154\n-154 - 1 = -155\n-155 - 8 = -163\n-163 - 5 = -168\n-168 + 1 =",
            "Response": " -167\n-167 + 1 = -166\n-166 + 1 = -165\n-165 + 1 = -164\n-164 + 1 = -163\n-163 + 1 = -162\n-162 + 1 = -161\n-161 + 1 = -160\n-160 + 1 = -159\n-159 + 1 = -158\n-158 + 1 = -157\n-157 + 1 = -156\n-156 + 1 = -155\n-155 + 1 = -154\n-154 + 1 = -153\n-153 + 1 = -152\n-152 + 1 = -151\n-151 + 1 = -150\n-150 + 1 = -149\n-149 + 1 = -148\n-148 + 1 = -147\n-147 + 1 = -146\n-146 + 1 = -145\n-145 + 1 = -144\n-144 + 1 = -143\n-143 + 1 = -142\n-142 + 1 = -141\n-141 + 1 = -140\n-140 + 1 = -139\n-139 + 1 = -138\n-138 + 1 = -137\n-137 + 1 = -136\n-136 + 1 = -135\n-135 + 1 = -134\n-134 + 1 = -133\n-133 + 1 = -132\n-132 + 1 = -131\n-131 + 1 = -130\n-130 + 1 = -129\n-129 + 1 = -128\n-128 + 1 = -127\n-127 + 1 = -126\n-126 + 1 = -125\n-125 + 1 = -124\n-124 + 1 = -123\n-123 + 1 = -122\n-122 + 1 = -121\n-121 + 1 = -120\n-120 + 1 = -119\n-119 + 1 = -118\n-118 + 1 = -117\n-117 + 1 = -116\n-116 + 1 = -115\n-115 + 1 = -114\n-114 + 1 = -113\n-113 + 1 = -112\n-112 + 1 = -111\n-111 + 1 = -110\n-110 + 1 = -109\n-109 + 1 = -108\n-108 + 1 = -107\n-107 + 1 = -106\n-106 + 1 = -105\n-105 + 1 = -104\n-104 + 1 = -103\n-103 + 1 = -102\n-102 + 1 = -101\n-101 + 1 = -100\n-100 + 1 = -99\n-99 + 1 = -98\n-98 + 1 = -97\n-97 + 1 = -96\n-96 + 1 = -95\n-95 + 1 = -94\n-94 + 1 = -93\n-93 + 1 = -92\n-92 + 1 = -91\n-91 + 1 = -90\n-90 + 1 = -89\n-89 + 1 = -88\n-88 + 1 = -87\n-87 + 1 = -86\n-86 + 1 = -85\n-85 + 1 = -84\n-84 + 1 = -83\n-83 + 1 = -82\n-82 + 1 = -81\n-81 + 1 = -80\n-80 + 1 = -79\n-79 + 1 = -78\n-78 + 1 = -77\n-77 + 1 = -76\n-76 + 1 = -75\n-75 + 1 = -74\n-74 + 1 = -73\n-73 + 1 = -72\n-72 + 1 = -71\n-71 + 1 = -70\n-70 + 1 = -69\n-69 + 1 = -68\n-68 + 1 = -67\n-67 + 1 = -66\n-66 + 1 = -65\n-65 + 1 = -64\n-64 + 1 = -63\n-63 + 1 = -62\n-62 + 1 = -61\n-61 + 1 = -60\n-60 + 1 = -59\n-59 + 1 = -58\n-58 + 1 = -57\n-57 + 1 = -56\n-56 + 1 = -55\n-55 + 1 = -54\n-54 + 1 = -53\n-53 + 1 = -52\n-52 + 1 = -51\n-51 + 1 = -50\n-50 + 1 = -49\n-49 + 1 = -48\n-48 + 1 = -47\n-47 + 1 = -46\n-46 + 1 = -45\n-45 + 1 = -44\n-44 + 1 = -43\n-43 + 1 = -42\n-42 + 1 = -41\n-41 + 1 = -40\n-40 + 1 = -39\n-39 + 1 = -38\n-38 + 1 = -37\n-37 + 1 = -36\n-36 + 1 = -35\n-35 + 1 = -34\n-34 + 1 = -33\n-33 + 1 = -32\n-32 + 1 = -31\n-31 + 1 = -30\n-30 + 1 = -29\n-29 + 1 = -28\n-28 + 1 = -27\n-27 + 1 = -26\n-26 + 1 = -25\n-25 + 1 = -24\n-24 + 1 = -23\n-23 + 1 = -22\n-22 + 1 = -21\n-21 + 1 = -20\n-20 + 1 = -19\n-19 + 1 = -18\n-18 + 1 = -17\n-17 + 1 = -16\n-16 + 1 = -15\n-15 + 1 = -14\n-14 + 1 = -13\n-13 + 1 = -12\n-12 + 1 = -11\n-11 + 1 = -10\n-10 + 1 = -9\n-9 + 1 = -8\n-8 + 1 = -7\n-7 + 1 = -6\n-6 + 1 = -5\n-5 + 1 = -4\n-4 + 1 = -3\n-3 + 1 = -2\n-2 + 1 = -1\n-1 + 1 = 0\n0 + 1 = 1\n1 + 1 = 2\n2 + 1 = 3\n3 + 1 = 4\n4 + 1 = 5\n5 + 1 = 6\n6 + 1 = 7\n7 + 1 = 8\n8 + 1 = 9\n9 + 1 = 10\n10 + 1 = 11\n11 + 1 = 12\n12 + 1 = 13\n13 + 1 = 14\n14 + 1 = 15\n15 + 1 = 16\n16 + 1 = 17\n17 + 1 = 18\n18 + 1 = 19\n19 + 1 = 20\n20 + 1 = 21\n21 + 1 = 22\n22 + 1 = 23\n23 + 1 = 24\n24 + 1 = 25\n25 + 1 = 26\n26 + 1 = 27\n27 + 1 = 28\n28 + 1 = 29\n29 + 1 = 30\n30 + 1 = 31\n31 + 1 = 32\n32 + 1 = 33\n33 + 1 = 34\n34 + 1 = 35\n35 + 1 = 36\n36 + 1 = 37\n37 + 1 = 38\n38 + 1 = 39\n39 + 1 = 40\n40 + 1 = 41\n41 + 1 = 42\n42 + 1 = 43\n43 + 1 = 44\n44 + 1 = 45\n45 + 1 = 46\n46 + 1 = 47\n47 + 1 = 48\n48 + 1 = 49\n49 + 1 = 50\n50 + 1 = 51\n51 + 1 = 52\n52 + 1 = 53\n53 + 1 = 54\n54 + 1 = 55\n55 + 1 = 56\n56 + 1 = 57\n57 + 1 = 58\n58 + 1 = 59\n59 + 1 = 60\n60 + 1 = 61\n61 + 1 = 62\n62 + 1 = 63\n63 + 1 = 64\n64 + 1 = 65\n65 + 1 = 66\n66 + 1 = 67\n67 + 1 = 68\n68 + 1 = 69\n69 + 1 = 70\n70 + 1 = 71\n71 + 1 = 72\n72 + 1 = 73\n73 + 1 = 74\n74 + 1 = 75\n75 + 1 = 76\n76 + 1 = 77\n77 + 1 = 78\n78 + 1 = 79\n79 + 1 = 80\n80 + 1 = 81\n81 + 1 = 82\n82 + 1 = 83\n83 + 1 = 84\n84 + 1 = 85\n85 + 1 = 86\n86 + 1 = 87\n87 + 1 = 88\n88 + 1 = 89\n89 + 1 = 90\n90 + 1 = 91\n91 + 1 = 92\n92 + 1 = 93\n93 + 1 = 94\n94 + 1 = 95\n95 + 1 = 96\n96 + 1 = 97\n97 + 1 = 98\n98 + 1 = 99\n99 + 1 = 100\n100 + 1 = 101\n101 + 1 = 102\n102 + 1 = 103\n103 + 1 = 104\n104 + 1 = 105\n105 + 1 = 106\n106 + 1 = 107\n107 + 1 = 108\n108 + 1 = 109\n109 + 1 = 110\n110 +",
            "Extract-Response": " 110",
            "Answer": 110.0,
            "Final Answer": 110.0,
            "Expected Answer": -167
        },
        {
            "Index": 228,
            "GT": 1118,
            "Query": "7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 =   ",
            "Injected CoT": "7 * 8 = 63\n63 * 6 = 378\n378 * 3 = 1134\n1134 * 1 = 1134\n1134 - 1 = 1133\n2 * 3 = 6\n1133 - 6 = 1127\n1127 - 8 =",
            "Response": " 1119\n1119 - 9 = 1110\n1110 - 3 = 1107\n1107 - 7 = 1100\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 =\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303\n\n7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 - 8 * 6 - 3 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8 - 1 - 7 - 9 - 3 - 6 - 8",
            "Extract-Response": "\n7 * 8 = 56\n56 * 6 = 336\n336 - 8 = 328\n328 - 9 = 319\n319 - 3 = 316\n316 - 7 = 309\n309 - 6 = 303",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 1119
        },
        {
            "Index": 233,
            "GT": 1154,
            "Query": "4 * 2 * 1 + 1 - 7 + 6 * 4 * 8 * 6 =   ",
            "Injected CoT": "5 * 2 = 8\n8 * 1 = 8\n8 + 1 = 9\n9 - 7 = 2\n6 * 5 = 24\n24 * 8 = 192\n192 * 6 = 1152\n2 + 1152 =",
            "Response": " 1154",
            "Extract-Response": " 1154\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prevSign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            prevSign = -1;\n        } else if (s[i] == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n            prevSign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 1154.0,
            "Final Answer": 1154.0,
            "Expected Answer": 1154
        },
        {
            "Index": 234,
            "GT": -92,
            "Query": "2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 =   ",
            "Injected CoT": "1 * 5 = 10\n10 * 1 = 10\n5 * 6 = 30\n9 * 1 = 18\n9 * 6 = 54\n10 - 30 = -20\n-20 - 18 = -38\n-38 - 54 =",
            "Response": " -92\n\n2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 = -92",
            "Extract-Response": " -92.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n\n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &a);\n\n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &b);\n\n    printf(\"Enter the third number: \");\n    scanf(\"%d\", &c);\n\n    printf(\"Enter the fourth number: \");\n    scanf(\"%d\", &d);\n\n    printf(\"Enter the fifth number: \");\n    scanf(\"%d\", &e);\n\n    printf(\"Enter the sixth number: \");\n    scanf(\"%d\", &f);\n\n    printf(\"Enter the seventh number: \");\n    scanf(\"%d\", &g);\n\n    printf(\"Enter the eighth number: \");\n    scanf(\"%d\", &h);\n\n    printf(\"Enter the ninth number: \");\n    scanf(\"%d\", &i);\n\n    printf(\"Enter the tenth number: \");\n    scanf(\"%d\", &j);\n\n    printf(\"Enter the eleventh number: \");\n    scanf(\"%d\", &k);\n\n    printf(\"Enter the twelfth number: \");\n    scanf(\"%d\", &l);\n\n    printf(\"Enter the thirteenth number: \");\n    scanf(\"%d\", &m);\n\n    printf(\"Enter the fourteenth number: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the fifteenth number: \");\n    scanf(\"%d\", &o);\n\n    printf(\"Enter the sixteenth number: \");\n    scanf(\"%d\", &p);\n\n    printf(\"Enter the seventeenth number: \");\n    scanf(\"%d\", &q);\n\n    printf(\"Enter the eighteenth number: \");\n    scanf(\"%d\", &r);\n\n    printf(\"Enter the nineteenth number: \");\n    scanf(\"%d\", &s);\n\n    printf(\"Enter the twentieth number: \");\n    scanf(\"%d\", &t);\n\n    printf(\"Enter the twenty-first number: \");\n    scanf(\"%d\", &u);\n\n    printf(\"Enter the twenty-second number: \");\n    scanf(\"%d\", &v);\n\n    printf(\"Enter the twenty-third number: \");\n    scanf(\"%d\", &w);\n\n    printf(\"Enter the twenty-fourth number: \");\n    scanf(\"%d\", &x);\n\n    printf(\"Enter the twenty-fifth number: \");\n    scanf(\"%d\", &y);\n\n    printf(\"Enter the twenty-sixth number: \");\n    scanf(\"%d\", &z);\n\n    result = a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r * s * t * u * v * w * x * y * z;\n\n    printf(\"%d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d = %d\", a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, result);\n\n    return 0;\n}",
            "Answer": -92.0,
            "Final Answer": -92.0,
            "Expected Answer": -92
        },
        {
            "Index": 237,
            "GT": 21,
            "Query": "2 + 1 * 7 - 1 * 7 - 5 + 8 * 2 + 8 =   ",
            "Injected CoT": "0 * 7 = 7\n8 * 2 = 16\n2 + 7 = 9\n9 - 7 = 2\n2 - 5 = -3\n-3 + 16 = 13\n13 + 8 = 21\n21 + 8 =",
            "Response": " 29\n29 + 1 = 30\n30 + 1 = 31\n31 + 1 = 32\n32 + 1 = 33\n33 + 1 = 34\n34 + 1 = 35\n35 + 1 = 36\n36 + 1 = 37\n37 + 1 = 38\n38 + 1 = 39\n39 + 1 = 40\n40 + 1 = 41\n41 + 1 = 42\n42 + 1 = 43\n43 + 1 = 44\n44 + 1 = 45\n45 + 1 = 46\n46 + 1 = 47\n47 + 1 = 48\n48 + 1 = 49\n49 + 1 = 50\n50 + 1 = 51\n51 + 1 = 52\n52 + 1 = 53\n53 + 1 = 54\n54 + 1 = 55\n55 + 1 = 56\n56 + 1 = 57\n57 + 1 = 58\n58 + 1 = 59\n59 + 1 = 60\n60 + 1 = 61\n61 + 1 = 62\n62 + 1 = 63\n63 + 1 = 64\n64 + 1 = 65\n65 + 1 = 66\n66 + 1 = 67\n67 + 1 = 68\n68 + 1 = 69\n69 + 1 = 70\n70 + 1 = 71\n71 + 1 = 72\n72 + 1 = 73\n73 + 1 = 74\n74 + 1 = 75\n75 + 1 = 76\n76 + 1 = 77\n77 + 1 = 78\n78 + 1 = 79\n79 + 1 = 80\n80 + 1 = 81\n81 + 1 = 82\n82 + 1 = 83\n83 + 1 = 84\n84 + 1 = 85\n85 + 1 = 86\n86 + 1 = 87\n87 + 1 = 88\n88 + 1 = 89\n89 + 1 = 90\n90 + 1 = 91\n91 + 1 = 92\n92 + 1 = 93\n93 + 1 = 94\n94 + 1 = 95\n95 + 1 = 96\n96 + 1 = 97\n97 + 1 = 98\n98 + 1 = 99\n99 + 1 = 100\n100 + 1 = 101\n101 + 1 = 102\n102 + 1 = 103\n103 + 1 = 104\n104 + 1 = 105\n105 + 1 = 106\n106 + 1 = 107\n107 + 1 = 108\n108 + 1 = 109\n109 + 1 = 110\n110 + 1 = 111\n111 + 1 = 112\n112 + 1 = 113\n113 + 1 = 114\n114 + 1 = 115\n115 + 1 = 116\n116 + 1 = 117\n117 + 1 = 118\n118 + 1 = 119\n119 + 1 = 120\n120 + 1 = 121\n121 + 1 = 122\n122 + 1 = 123\n123 + 1 = 124\n124 + 1 = 125\n125 + 1 = 126\n126 + 1 = 127\n127 + 1 = 128\n128 + 1 = 129\n129 + 1 = 130\n130 + 1 = 131\n131 + 1 = 132\n132 + 1 = 133\n133 + 1 = 134\n134 + 1 = 135\n135 + 1 = 136\n136 + 1 = 137\n137 + 1 = 138\n138 + 1 = 139\n139 + 1 = 140\n140 + 1 = 141\n141 + 1 = 142\n142 + 1 = 143\n143 + 1 = 144\n144 + 1 = 145\n145 + 1 = 146\n146 + 1 = 147\n147 + 1 = 148\n148 + 1 = 149\n149 + 1 = 150\n150 + 1 = 151\n151 + 1 = 152\n152 + 1 = 153\n153 + 1 = 154\n154 + 1 = 155\n155 + 1 = 156\n156 + 1 = 157\n157 + 1 = 158\n158 + 1 = 159\n159 + 1 = 160\n160 + 1 = 161\n161 + 1 = 162\n162 + 1 = 163\n163 + 1 = 164\n164 + 1 = 165\n165 + 1 = 166\n166 + 1 = 167\n167 + 1 = 168\n168 + 1 = 169\n169 + 1 = 170\n170 + 1 = 171\n171 + 1 = 172\n172 + 1 = 173\n173 + 1 = 174\n174 + 1 = 175\n175 + 1 = 176\n176 + 1 = 177\n177 + 1 = 178\n178 + 1 = 179\n179 + 1 = 180\n180 + 1 = 181\n181 + 1 = 182\n182 + 1 = 183\n183 + 1 = 184\n184 + 1 = 185\n185 + 1 = 186\n186 + 1 = 187\n187 + 1 = 188\n188 + 1 = 189\n189 + 1 = 190\n190 + 1 = 191\n191 + 1 = 192\n192 + 1 = 193\n193 + 1 = 194\n194 + 1 = 195\n195 + 1 = 196\n196 + 1 = 197\n197 + 1 = 198\n198 + 1 = 199\n199 + 1 = 200\n200 + 1 = 201\n201 + 1 = 202\n202 + 1 = 203\n203 + 1 = 204\n204 + 1 = 205\n205 + 1 = 206\n206 + 1 = 207\n207 + 1 = 208\n208 + 1 = 209\n209 + 1 = 210\n210 + 1 = 211\n211 + 1 = 212\n212 + 1 = 213\n213 + 1 = 214\n214 + 1 = 215\n215 + 1 = 216\n216 + 1 = 217\n217 + 1 = 218\n218 + 1 = 219\n219 + 1 = 220\n220 + 1 = 221\n221 + 1 = 222\n222 + 1 = 223\n223 + 1 = 224\n224 + 1 = 225\n225 + 1 = 226\n226 + 1 = 227\n227 + 1 = 228\n228 + 1 = 229\n229 + 1 = 230\n230 + 1 = 231\n231 + 1 = 232\n232 + 1 = 233\n233 + 1 = 234\n234 + 1 = 235\n235 + 1 = 236\n236 + 1 = 237\n237 + 1 = 238\n238 + 1 = 239\n239 + 1 = 240\n240 + 1 = 241\n241 + 1 = 242\n242 + 1 = 243\n243 + 1 = 244\n244 + 1 = 245\n245 + 1 = 246\n246 + 1 = 247\n247 + 1 = 248\n248 + 1 = 249\n249 + 1 = 250\n250 + 1 = 251\n251 + 1 = 252\n252 + 1 = 253\n253 + 1 = 254\n254 + 1 = 255\n255 + 1 = 256\n256 + 1 = 257\n257 + 1 = 258\n258 + 1 = 259\n259 + 1 = 260\n260 + 1 = 261\n261 + 1 = 262\n262 + 1 = 263\n263 + 1 = 264\n264 + 1 = 265\n265 + 1 = 266\n266 + 1 = 267\n267 + 1 = 268\n268 + 1 = 269\n269 + 1 = 270\n270 + 1 = 271\n271 + 1 = 272\n272 + 1 = 273\n273 + 1 = 274\n274 + 1 = 275\n275 + 1 = 276\n276 + 1 = 277\n277 + 1 = 278\n278 + 1 = 279\n279 + 1 = 280\n280 + 1 = 281\n281 + 1 = 282\n282 + 1 = 283\n283 + 1 = 284\n284 + 1 = 285\n285 + 1 = 286\n286 + 1 = 287\n287 + 1 = 288\n288 + 1 = 289\n289 + 1 = 290\n290 + 1 = 291\n291 + 1 = 292\n292 + 1 = 293\n293 + 1 = 294\n294 + 1 = 295\n295 + 1 = 296\n296 + 1 = 297\n297 + 1 = 298\n298 + 1 = 299\n299 + 1 = 300\n300 + 1 = 301\n301 + 1 = 302\n302 + 1 = 303\n303 + 1 = 304\n304 + 1 = 305\n305 + 1 = 306\n306 + 1 = 307\n307 + 1 = 308\n308 + 1 = 309\n309 + 1 = 310\n310 + 1 = 311\n311 + 1 = 312\n312 + 1 = 313\n313 + 1 = 314\n314 + 1 = 315\n315 + 1 = 316\n316 + 1 = 317\n317 + 1 = 318\n318 + 1 = 319\n319 + 1 = 320\n320 + 1 = 321\n321 + 1 = 322\n322 + 1 = 323\n323 + 1 = 324\n324 + 1 = 325\n325 + 1 = 326\n326 + 1 = 327\n327 + 1 = 328\n328 + 1 = 329\n329 + 1 = 330\n330 + 1 = 331\n331 + 1 = 332\n332 + 1 = 333\n333 + 1 = 334\n334 + 1 = 335\n335 + 1 = 336\n336 + 1 = 337\n337 + 1 = 338\n338 + 1 = 339\n339 + 1 = 340\n340 + 1 = 341\n341 + 1 = 342\n342 + 1 = 343\n343 + 1 = 344\n344 + 1 = 345\n345 + 1 = 346\n346 + 1 = 347\n347 + 1 = 348\n348 + 1 = 349\n349 + 1 = 350\n350 + 1 = 351\n351 + 1 = 352\n352 + 1 = 353\n353 + 1 = 354\n354 + 1 = 355\n355 + 1 = 356\n356 + 1 = 357\n357 + 1 = 358\n358 + 1 = 359\n359 + 1 = 360\n360 + 1 = 361\n361 + 1 = 362",
            "Extract-Response": " 362",
            "Answer": 362.0,
            "Final Answer": 362.0,
            "Expected Answer": 29
        },
        {
            "Index": 239,
            "GT": -232,
            "Query": "9 - 3 * 1 * 3 * 5 * 5 - 1 - 3 * 5 =   ",
            "Injected CoT": "3 * 2 = 3\n3 * 3 = 9\n9 * 5 = 45\n45 * 5 = 225\n9 - 225 = -216\n-216 - 2 = -217\n3 * 5 = 15\n-217 - 15 =",
            "Response": " -232\n3 * 5 = 15\n-232 - 15 = -247\n3 * 5 = 15\n-247 - 15 = -262\n3 * 5 = 15\n-262 - 15 = -277\n3 * 5 = 15\n-277 - 15 = -292\n3 * 5 = 15\n-292 - 15 = -307\n3 * 5 = 15\n-307 - 15 = -322\n3 * 5 = 15\n-322 - 15 = -337\n3 * 5 = 15\n-337 - 15 = -352\n3 * 5 = 15\n-352 - 15 = -367\n3 * 5 = 15\n-367 - 15 = -382\n3 * 5 = 15\n-382 - 15 = -397\n3 * 5 = 15\n-397 - 15 = -412\n3 * 5 = 15\n-412 - 15 = -427\n3 * 5 = 15\n-427 - 15 = -442\n3 * 5 = 15\n-442 - 15 = -457\n3 * 5 = 15\n-457 - 15 = -472\n3 * 5 = 15\n-472 - 15 = -487\n3 * 5 = 15\n-487 - 15 = -502\n3 * 5 = 15\n-502 - 15 = -517\n3 * 5 = 15\n-517 - 15 = -532\n3 * 5 = 15\n-532 - 15 = -547\n3 * 5 = 15\n-547 - 15 = -562\n3 * 5 = 15\n-562 - 15 = -577\n3 * 5 = 15\n-577 - 15 = -592\n3 * 5 = 15\n-592 - 15 = -607\n3 * 5 = 15\n-607 - 15 = -622\n3 * 5 = 15\n-622 - 15 = -637\n3 * 5 = 15\n-637 - 15 = -652\n3 * 5 = 15\n-652 - 15 = -667\n3 * 5 = 15\n-667 - 15 = -682\n3 * 5 = 15\n-682 - 15 = -697\n3 * 5 = 15\n-697 - 15 = -712\n3 * 5 = 15\n-712 - 15 = -727\n3 * 5 = 15\n-727 - 15 = -742\n3 * 5 = 15\n-742 - 15 = -757\n3 * 5 = 15\n-757 - 15 = -772\n3 * 5 = 15\n-772 - 15 = -787\n3 * 5 = 15\n-787 - 15 = -802\n3 * 5 = 15\n-802 - 15 = -817\n3 * 5 = 15\n-817 - 15 = -832\n3 * 5 = 15\n-832 - 15 = -847\n3 * 5 = 15\n-847 - 15 = -862\n3 * 5 = 15\n-862 - 15 = -877\n3 * 5 = 15\n-877 - 15 = -892\n3 * 5 = 15\n-892 - 15 = -907\n3 * 5 = 15\n-907 - 15 = -922\n3 * 5 = 15\n-922 - 15 = -937\n3 * 5 = 15\n-937 - 15 = -952\n3 * 5 = 15\n-952 - 15 = -967\n3 * 5 = 15\n-967 - 15 = -982\n3 * 5 = 15\n-982 - 15 = -997\n3 * 5 = 15\n-997 - 15 = -1012\n3 * 5 = 15\n-1012 - 15 = -1027\n3 * 5 = 15\n-1027 - 15 = -1042\n3 * 5 = 15\n-1042 - 15 = -1057\n3 * 5 = 15\n-1057 - 15 = -1072\n3 * 5 = 15\n-1072 - 15 = -1087\n3 * 5 = 15\n-1087 - 15 = -1102\n3 * 5 = 15\n-1102 - 15 = -1117\n3 * 5 = 15\n-1117 - 15 = -1132\n3 * 5 = 15\n-1132 - 15 = -1147\n3 * 5 = 15\n-1147 - 15 = -1162\n3 * 5 = 15\n-1162 - 15 = -1177\n3 * 5 = 15\n-1177 - 15 = -1192\n3 * 5 = 15\n-1192 - 15 = -1207\n3 * 5 = 15\n-1207 - 15 = -1222\n3 * 5 = 15\n-1222 - 15 = -1237\n3 * 5 = 15\n-1237 - 15 = -1252\n3 * 5 = 15\n-1252 - 15 = -1267\n3 * 5 = 15\n-1267 - 15 = -1282\n3 * 5 = 15\n-1282 - 15 = -1297\n3 * 5 = 15\n-1297 - 15 = -1312\n3 * 5 = 15\n-1312 - 15 = -1327\n3 * 5 = 15\n-1327 - 15 = -1342\n3 * 5 = 15\n-1342 - 15 = -1357\n3 * 5 = 15\n-1357 - 15 = -1372\n3 * 5 = 15\n-1372 - 15 = -1387\n3 * 5 = 15\n-1387 - 15 = -1402\n3 * 5 = 15\n-1402 - 15 = -1417\n3 * 5 = 15\n-1417 - 15 = -1432\n3 * 5 = 15\n-1432 - 15 = -1447\n3 * 5 = 15\n-1447 - 15 = -1462\n3 * 5 = 15\n-1462 - 15 = -1477\n3 * 5 = 15\n-1477 - 15 = -1492\n3 * 5 = 15\n-1492 - 15 = -1507\n3 * 5 = 15\n-1507 - 15 = -1522\n3 * 5 = 15\n-1522 - 15 = -1537\n3 * 5 = 15\n-1537 - 15 = -1552\n3 * 5 = 15\n-1552 - 15 = -1567\n3 * 5 = 15\n-1567 - 15 = -1582\n3 * 5 = 15\n-1582 - 15 = -1597\n3 * 5 = 15\n-1597 - 15 = -1612\n3 * 5 = 15\n-1612 - 15 = -1627\n3 * 5 = 15\n-1627 - 15 = -1642\n3 * 5 = 15\n-1642 - 15 = -1657\n3 * 5 = 15\n-1657 - 15 = -1672\n3 * 5 = 15\n-1672 - 15 = -1687\n3 * 5 = 15\n-1687 - 15 = -1702\n3 * 5 = 15\n-1702 - 15 = -1717\n3 * 5 = 15\n-1717 - 15 = -1732\n3 * 5 = 15\n-1732 - 15 = -1747\n3 * 5 = 15\n-1747 - 15 = -1762\n3 * 5 = 15\n-1762 - 15 = -1777\n3 * 5 = 15\n-1777 - 15 = -1792\n3 * 5 = 15\n-1792 - 15 = -1807\n3 * 5 = 15\n-1807 - 15 = -1822\n3 * 5 = 15\n-1822 - 15 = -1837\n3 * 5 = 15\n-1837 - 15 = -1852\n3 * 5 = 15\n-1852 - 15 = -1867\n3 * 5 = 15\n-1867 - 15 = -1882\n3 * 5 = 15\n-1882 - 15 = -1897\n3 * 5 = 15\n-1897 - 15 = -1912\n3 * 5 = 15\n-1912 - 15 = -1927\n3 * 5 = 15\n-1927 - 15 = -1942\n3 * 5 = 15\n-1942 - 15 = -1957\n3 * 5 = 15\n-1957 - 15 = -1972\n3 * 5 = 15\n-1972 - 15 = -1987\n3 * 5 = 15\n-1987 - 15 = -2002\n3 * 5 = 15\n-2002 - 15 = -2017\n3 * 5 = 15\n-2017 - 15 = -2032\n3 * 5 = 15\n-2032 - 15 = -2047\n3 * 5 = 15\n-2047 - 15 = -2062\n3 * 5 = 15\n-2062 - 15 = -2077\n3 * 5 = 15\n-2077 - 15 = -2092\n3 * 5 = 15\n-2092 - 15 = -2107\n3 * 5 = 15\n-2107 - 15 = -2122\n3 * 5 = 15\n-2122 - 15 = -2137\n3 * 5 = 15\n-2137 - 15 = -2152\n3 * 5 = 15\n-2152 - 15 = -2167\n3 * 5 = 15\n-2167 - 15 = -2182\n",
            "Extract-Response": " -2182",
            "Answer": -2182.0,
            "Final Answer": -2182.0,
            "Expected Answer": -232
        },
        {
            "Index": 240,
            "GT": 1,
            "Query": "9 - 8 + 1 - 7 + 6 - 8 + 4 + 5 - 1 =   ",
            "Injected CoT": "9 - 9 = 1\n1 + 1 = 2\n2 - 7 = -5\n-5 + 6 = 1\n1 - 9 = -7\n-7 + 4 = -3\n-3 + 5 = 2\n2 - 1 =",
            "Response": " 1\n\n1",
            "Extract-Response": "\n\n1",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 1
        },
        {
            "Index": 241,
            "GT": 99,
            "Query": "1 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =   ",
            "Injected CoT": "1 * 10 = 10\n10 * 10 = 81\n81 + 10 = 90\n90 - 5 = 85\n85 + 4 = 89\n89 - 2 = 87\n87 + 3 = 90\n90 + 10 =",
            "Response": " 100\n\n2 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n2 * 10 = 20\n20 * 10 = 81\n81 + 20 = 101\n101 - 5 = 96\n96 + 4 = 100\n100 - 2 = 98\n98 + 3 = 101\n101 + 20 = 121\n\n3 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n3 * 10 = 30\n30 * 10 = 81\n81 + 30 = 111\n111 - 5 = 106\n106 + 4 = 110\n110 - 2 = 108\n108 + 3 = 111\n111 + 30 = 141\n\n4 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n4 * 10 = 40\n40 * 10 = 81\n81 + 40 = 121\n121 - 5 = 116\n116 + 4 = 120\n120 - 2 = 118\n118 + 3 = 121\n121 + 40 = 161\n\n5 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n5 * 10 = 50\n50 * 10 = 81\n81 + 50 = 131\n131 - 5 = 126\n126 + 4 = 130\n130 - 2 = 128\n128 + 3 = 131\n131 + 50 = 181\n\n6 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n6 * 10 = 60\n60 * 10 = 81\n81 + 60 = 141\n141 - 5 = 136\n136 + 4 = 140\n140 - 2 = 138\n138 + 3 = 141\n141 + 60 = 201\n\n7 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n7 * 10 = 70\n70 * 10 = 81\n81 + 70 = 151\n151 - 5 = 146\n146 + 4 = 150\n150 - 2 = 148\n148 + 3 = 151\n151 + 70 = 221\n\n8 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n8 * 10 = 80\n80 * 10 = 81\n81 + 80 = 161\n161 - 5 = 156\n156 + 4 = 160\n160 - 2 = 158\n158 + 3 = 161\n161 + 80 = 241\n\n9 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n9 * 10 = 90\n90 * 10 = 81\n81 + 90 = 171\n171 - 5 = 166\n166 + 4 = 170\n170 - 2 = 168\n168 + 3 = 171\n171 + 90 = 261\n\n10 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n10 * 10 = 100\n100 * 10 = 81\n81 + 100 = 181\n181 - 5 = 176\n176 + 4 = 180\n180 - 2 = 178\n178 + 3 = 181\n181 + 100 = 281\n\n11 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n11 * 10 = 110\n110 * 10 = 81\n81 + 110 = 191\n191 - 5 = 186\n186 + 4 = 190\n190 - 2 = 188\n188 + 3 = 191\n191 + 110 = 301\n\n12 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n12 * 10 = 120\n120 * 10 = 81\n81 + 120 = 201\n201 - 5 = 196\n196 + 4 = 200\n200 - 2 = 198\n198 + 3 = 201\n201 + 120 = 321\n\n13 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n13 * 10 = 130\n130 * 10 = 81\n81 + 130 = 211\n211 - 5 = 206\n206 + 4 = 210\n210 - 2 = 208\n208 + 3 = 211\n211 + 130 = 341\n\n14 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n14 * 10 = 140\n140 * 10 = 81\n81 + 140 = 221\n221 - 5 = 216\n216 + 4 = 220\n220 - 2 = 218\n218 + 3 = 221\n221 + 140 = 361\n\n15 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n15 * 10 = 150\n150 * 10 = 81\n81 + 150 = 231\n231 - 5 = 226\n226 + 4 = 230\n230 - 2 = 228\n228 + 3 = 231\n231 + 150 = 381\n\n16 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n16 * 10 = 160\n160 * 10 = 81\n81 + 160 = 241\n241 - 5 = 236\n236 + 4 = 240\n240 - 2 = 238\n238 + 3 = 241\n241 + 160 = 401\n\n17 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n17 * 10 = 170\n170 * 10 = 81\n81 + 170 = 251\n251 - 5 = 246\n246 + 4 = 250\n250 - 2 = 248\n248 + 3 = 251\n251 + 170 = 421\n\n18 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n18 * 10 = 180\n180 * 10 = 81\n81 + 180 = 261\n261 - 5 = 256\n256 + 4 = 260\n260 - 2 = 258\n258 + 3 = 261\n261 + 180 = 441\n\n19 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n19 * 10 = 190\n190 * 10 = 81\n81 + 190 = 271\n271 - 5 = 266\n266 + 4 = 270\n270 - 2 = 268\n268 + 3 = 271\n271 + 190 = 461\n\n20 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n20 * 10 = 200\n200 * 10 = 81\n81 + 200 = 281\n281 - 5 = 276\n276 + 4 = 280\n280 - 2 = 278\n278 + 3 = 281\n281 + 200 = 481\n\n21 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n21 * 10 = 210\n210 * 10 = 81\n81 + 210 = 291\n291 - 5 = 286\n286 + 4 = 290\n290 - 2 = 288\n288 + 3 = 291\n291 + 210 = 501\n\n22 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n22 * 10 = 220\n220 * 10 = 81\n81 + 220 = 301\n301 - 5 = 296\n296 + 4 = 300\n300 - 2 = 298\n298 + 3 = 301\n301 + 220 = 521\n\n23 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n23 * 10 = 230\n230 * 10 = 81\n81 + 230 = 311\n311 - 5 = 306\n306 + 4 = 310\n310 - 2 = 308\n308 + 3 = 311\n311 + 230 = 541\n\n24 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n24 * 10 = 240\n240 * 10 = 81\n81 + 240 = 321\n321 - 5 = 316\n316 + 4 = 320\n320 - 2 = 318\n318 + 3 = 321\n321 + 240 = 561\n\n25 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n25 * 10 = 250\n250 * 10 = 81\n81 + 250 = 331\n331 - 5 = 326\n326 + 4 = 330\n330 - 2 = 328\n328 + 3 = 331\n331 + 250 = 581\n\n26 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n26 * 10 = 260\n260 * 10 = 81\n81 + 260 = 341\n341 - 5 = 336\n336 + 4 = 340\n340 - 2 = 338\n338 + 3 = 341\n341 + 260 = 601\n\n27 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n27 * 10 = 270\n270 * 10 = 81\n81 + 270 = 351\n351 - 5 = 346\n346 + 4 = 350\n350 - 2 = 348\n348 + 3 = 351\n351 + 270 = 621\n\n28 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n28 * 10 = 280\n280 * 10 = 81\n81 + 280 = 361\n361 - 5 = 356\n356 + 4 = 360\n360 - 2 = 358\n358 + 3 = 361\n361 + 280 = 641\n\n29 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n29 * 10 = 290\n290 * 10 = 81\n81 + 290 = 371\n371 - 5 = 366\n366 + 4 = 370\n370 - 2 = 368\n368 + 3 = 371\n371 + 290 = 661\n\n30 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n30 * 10 = 300\n300 * 10 = 81\n81 + 300 = 381\n381 - 5 = 376\n376 + 4 = 380\n380 - 2",
            "Extract-Response": "\n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\n",
            "Answer": "",
            "Final Answer": "",
            "Expected Answer": 100
        },
        {
            "Index": 242,
            "GT": -25,
            "Query": "3 + 2 - 8 - 7 - 3 * 3 - 4 + 1 - 3 =   ",
            "Injected CoT": "4 + 2 = 5\n5 - 8 = -3\n-3 - 7 = -10\n4 * 4 = 9\n-10 - 9 = -19\n-19 - 4 = -23\n-23 + 1 = -22\n-22 - 4 =",
            "Response": " -26",
            "Extract-Response": " -26.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <stack>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <functional>\n#include <cctype>\n#include <sstream>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint num = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tnum = num * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += num * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution2 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint num = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tnum = num * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += num * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution3 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint num = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tnum = num * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += num * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution4 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint num = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tnum = num * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += num * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution5 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint num =",
            "Answer": -26.0,
            "Final Answer": -26.0,
            "Expected Answer": -26
        },
        {
            "Index": 244,
            "GT": 20,
            "Query": "6 + 9 + 8 + 6 + 3 + 4 - 9 - 4 - 3 =   ",
            "Injected CoT": "6 + 10 = 15\n15 + 8 = 23\n23 + 6 = 29\n29 + 3 = 32\n32 + 4 = 36\n36 - 10 = 27\n27 - 4 = 23\n23 - 3 =",
            "Response": " 20\n\n20",
            "Extract-Response": " 20\n\n*/",
            "Answer": 20.0,
            "Final Answer": 20.0,
            "Expected Answer": 20
        },
        {
            "Index": 245,
            "GT": 13,
            "Query": "6 + 4 * 2 - 2 * 3 + 6 + 4 - 8 + 3 =   ",
            "Injected CoT": "4 * 1 = 8\n6 + 8 = 14\n1 * 3 = 6\n14 - 6 = 8\n8 + 4 = 12\n12 - 8 = 4\n4 + 3 =",
            "Response": " 7\n7 - 4 = 3\n3 + 2 = 5\n5 - 3 = 2\n2 + 1 = 3\n3 - 2 = 1\n1 + 6 = 7\n7 - 1 = 6\n6 + 4 = 10\n10 - 6 = 4\n4 - 2 = 2\n2 + 3 = 5\n5 - 2 = 3",
            "Extract-Response": " 3\n\n*/",
            "Answer": 3.0,
            "Final Answer": 3.0,
            "Expected Answer": 7
        },
        {
            "Index": 246,
            "GT": -24,
            "Query": "2 * 2 + 1 - 4 - 6 - 2 * 8 + 4 - 7 =   ",
            "Injected CoT": "3 * 3 = 4\n4 + 1 = 5\n5 - 4 = 1\n1 - 6 = -5\n3 * 8 = 16\n-5 - 16 = -21\n-21 + 4 = -17\n-17 - 7 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -24.0,
            "Final Answer": -24.0,
            "Expected Answer": -24
        },
        {
            "Index": 247,
            "GT": 17,
            "Query": "3 * 5 * 2 + 4 + 9 - 3 * 8 - 6 + 4 =   ",
            "Injected CoT": "3 * 4 = 15\n15 * 2 = 30\n30 + 4 = 34\n34 + 9 = 43\n3 * 8 = 24\n24 + 6 = 30\n30 - 30 = 0\n0 + 4 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 4.0,
            "Final Answer": 4.0,
            "Expected Answer": 4
        },
        {
            "Index": 249,
            "GT": 157,
            "Query": "4 * 8 + 7 - 6 + 8 - 4 + 5 * 8 * 3 =   ",
            "Injected CoT": "4 * 7 = 32\n5 * 7 = 40\n40 * 3 = 120\n32 + 7 = 39\n39 - 6 = 33\n33 + 7 = 41\n41 - 4 = 37\n37 + 120 =",
            "Response": " 157",
            "Extract-Response": " 157\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add the\n     * previously stored number to result.\n     * If current character is '-', then subtract\n     * the previously stored number from result.\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add num to result */\n        if(str[i]=='+')\n        {\n            result = result + num;\n\n            /* Reset num to 0 */\n            num = 0;\n\n            /* If current character is '-', subtract num from result */\n        }\n        else if(str[i]=='-')\n        {\n            result = result + num;\n\n            /* Reset num to 0 */\n            num = 0;\n\n            /* Change sign of result */\n            sign = sign * -1;\n        }\n        else if(str[i]=='*')\n        {\n            result = result * num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='/')\n        {\n            result = result / num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='%')\n        {\n            result = result % num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='^')\n        {\n            result = pow(result, num);\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else\n        {\n            /* If current character is not operator, add it to num */\n            num = (num * 10) + (str[i] - '0');\n        }\n    }\n\n    /* If num is not 0, then add it to result */\n    if(num!=0)\n    {\n        result = result + num;\n    }\n\n    /* Apply sign */\n    result = sign * result;\n\n    printf(\"Final result = %d\", result);\n\n    return 0;\n}",
            "Answer": 157.0,
            "Final Answer": 157.0,
            "Expected Answer": 157
        },
        {
            "Index": 250,
            "GT": -455,
            "Query": "9 - 6 * 2 * 4 * 3 - 4 * 4 * 5 * 4 =   ",
            "Injected CoT": "5 * 2 = 12\n12 * 4 = 48\n48 * 3 = 144\n4 * 4 = 16\n16 * 5 = 80\n80 * 4 = 320\n9 - 144 = -135\n-135 - 320 =",
            "Response": " -455\n-455 - 16 = -471\n-471 - 48 = -519\n-519 - 12 = -531\n-531 - 80 = -611\n-611 - 144 = -755\n-755 - 320 = -1075\n-1075 - 48 = -1123\n-1123 - 12 = -1135\n-1135 - 80 = -1215\n-1215 - 144 = -1359\n-1359 - 320 = -1679\n-1679 - 48 = -1727\n-1727 - 12 = -1739\n-1739 - 80 = -1819\n-1819 - 144 = -1963\n-1963 - 320 = -2283\n-2283 - 48 = -2331\n-2331 - 12 = -2343\n-2343 - 80 = -2423\n-2423 - 144 = -2567\n-2567 - 320 = -2887\n-2887 - 48 = -2935\n-2935 - 12 = -2947\n-2947 - 80 = -3027\n-3027 - 144 = -3171\n-3171 - 320 = -3491\n-3491 - 48 = -3539\n-3539 - 12 = -3551\n-3551 - 80 = -3631\n-3631 - 144 = -3775\n-3775 - 320 = -4095\n-4095 - 48 = -4143\n-4143 - 12 = -4155\n-4155 - 80 = -4235\n-4235 - 144 = -4379\n-4379 - 320 = -4699\n-4699 - 48 = -4747\n-4747 - 12 = -4759\n-4759 - 80 = -4839\n-4839 - 144 = -4983\n-4983 - 320 = -5303\n-5303 - 48 = -5351\n-5351 - 12 = -5363\n-5363 - 80 = -5443\n-5443 - 144 = -5587\n-5587 - 320 = -5907\n-5907 - 48 = -5955\n-5955 - 12 = -5967\n-5967 - 80 = -6047\n-6047 - 144 = -6191\n-6191 - 320 = -6511\n-6511 - 48 = -6559\n-6559 - 12 = -6571\n-6571 - 80 = -6651\n-6651 - 144 = -6795\n-6795 - 320 = -7115\n-7115 - 48 = -7163\n-7163 - 12 = -7175\n-7175 - 80 = -7255\n-7255 - 144 = -7399\n-7399 - 320 = -7719\n-7719 - 48 = -7767\n-7767 - 12 = -7779\n-7779 - 80 = -7859\n-7859 - 144 = -8003\n-8003 - 320 = -8323\n-8323 - 48 = -8371\n-8371 - 12 = -8383\n-8383 - 80 = -8463\n-8463 - 144 = -8607\n-8607 - 320 = -8927\n-8927 - 48 = -8975\n-8975 - 12 = -8987\n-8987 - 80 = -9067\n-9067 - 144 = -9211\n-9211 - 320 = -9531\n-9531 - 48 = -9579\n-9579 - 12 = -9591\n-9591 - 80 = -9671\n-9671 - 144 = -9815\n-9815 - 320 = -10135\n-10135 - 48 = -10183\n-10183 - 12 = -10195\n-10195 - 80 = -10275\n-10275 - 144 = -10419\n-10419 - 320 = -10739\n-10739 - 48 = -10787\n-10787 - 12 = -10799\n-10799 - 80 = -10879\n-10879 - 144 = -11023\n-11023 - 320 = -11343\n-11343 - 48 = -11391\n-11391 - 12 = -11403\n-11403 - 80 = -11483\n-11483 - 144 = -11627\n-11627 - 320 = -11947\n-11947 - 48 = -11995\n-11995 - 12 = -12007\n-12007 - 80 = -12087\n-12087 - 144 = -12231\n-12231 - 320 = -12551\n-12551 - 48 = -12599\n-12599 - 12 = -12611\n-12611 - 80 = -12691\n-12691 - 144 = -12835\n-12835 - 320 = -13155\n-13155 - 48 = -13203\n-13203 - 12 = -13215\n-13215 - 80 = -13295\n-13295 - 144 = -13439\n-13439 - 320 = -13759\n-13759 - 48 = -13807\n-13807 - 12 = -13819\n-13819 - 80 = -13899\n-13899 - 144 = -14043\n-14043 - 320 = -14363\n-14363 - 48 = -14411\n-14411 - 12 = -14423\n-14423 - 80 = -14503\n-14503 - 144 = -14647\n-14647 - 320 = -14967\n-14967 - 48 = -15015\n-15015 - 12 = -15027\n-15027 - 80 = -15107\n-15107 - 144 = -15251\n-15251 - 320 = -15571\n-15571 - 48 = -15619\n-15619 - 12 = -15631\n-15631 - 80 = -15711\n-15711 - 144 = -15855\n-15855 - 320 = -16175\n-16175 - 48 = -16223\n-16223 - 12 = -16235\n-16235 - 80 = -16315\n-16315 - 144 = -16459\n-16459 - 320 = -16779\n-16779 - 48 = -16827\n-16827 - 12 = -16839\n-16839 - 80 = -16919\n-16919 - 144 = -17063\n-17063 - 320 = -17383\n-17383 - 48 = -17431\n-17431 - 12 = -17443\n-17443 - 80 = -17523\n-17523 - 144 = -17667\n-17667 - 320 = -17987\n-17987 - 48 = -18035\n-18035 - 12 = -18047\n-18047 - 80 = -18127\n-18127 - 144 = -18271\n-18271 - 320 = -18591\n-18591 - 48 = -18639\n-18639 - 12 = -18651\n-18651 - 80 = -18731\n-18731 - 144 = -18875\n-18875 - 320 = -19195\n-19195 - 48 = -19243\n-19243 - 12 = -19255\n-19255 - 80 = -19335\n-19335 - 144 = -19479\n-19479 - 320 = -1979\n-1979 - 48 = -2027\n-2027 - 12 = -2039\n-2039 - 80 = -2119\n-2119 - 144 = -2263\n-2263 - 320 = -2583\n-2583 - 48 = -2631\n-2631 - 12 = -2643\n-2643 - 80 = -2723\n-2723 - 144 = -2867\n-2867 - 320 = -3187\n-3187 - 48 = -3235\n-3235 - 12 = -3247\n-3247 - 80 = -3327\n-3327 - 144 = -3471\n-3471 - 320 = -3791\n-3791 - 48 = -3839\n-3839 - 12 = -3851\n-3851 - 80 = -3931\n-3931 - 144 = -4075\n-4075 - 320 = -4395\n-4395 - 48 = -4443\n-4443 - 12 = -4455\n-4455 - 80 = -4535\n-4535 - 144 = -4679\n-4679 - 320 = -4999\n-4999 - 48 = -5047\n-5047 - 12 = -5059\n-5059 - 80 = -5139\n-5139 - 144 = -5283\n-5283 - 320 = -5603\n-5603 - 48 = -5651\n-5651 - 12 = -5663\n-5663 - 80 = -5743\n-5743 - 144 = -5887\n-5887 - 320 = -6207\n-6207 - 48 = -6255\n-6255 - 12 = -6267\n-6267 - 80 = -6347\n-6347 - 144 = -6491\n-6491 -",
            "Extract-Response": " -6491\n\n*/",
            "Answer": -6491.0,
            "Final Answer": -6491.0,
            "Expected Answer": -455
        },
        {
            "Index": 254,
            "GT": 59,
            "Query": "5 * 6 + 4 + 6 - 1 - 3 + 6 * 3 + 5 =   ",
            "Injected CoT": "5 * 5 = 30\n5 * 3 = 18\n30 + 4 = 34\n34 + 5 = 40\n40 - 1 = 39\n39 - 3 = 36\n18 + 36 = 54\n54 + 5 =",
            "Response": " 59",
            "Extract-Response": "\n\n59",
            "Answer": 59.0,
            "Final Answer": 59.0,
            "Expected Answer": 59
        },
        {
            "Index": 255,
            "GT": 21,
            "Query": "2 * 8 - 2 + 7 - 8 - 4 - 1 + 6 + 7 =   ",
            "Injected CoT": "3 * 8 = 16\n16 - 3 = 14\n14 + 7 = 21\n21 - 8 = 13\n13 - 4 = 9\n9 - 1 = 8\n8 + 6 = 14\n14 + 7 =",
            "Response": " 21",
            "Extract-Response": "\n\n21",
            "Answer": 21.0,
            "Final Answer": 21.0,
            "Expected Answer": 21
        },
        {
            "Index": 257,
            "GT": 36,
            "Query": "5 * 6 + 1 + 3 + 3 - 8 + 7 + 9 - 9 =   ",
            "Injected CoT": "4 * 6 = 30\n30 + 1 = 31\n31 + 3 = 34\n34 + 3 = 37\n37 - 8 = 29\n29 + 7 = 36\n36 + 9 = 45\n45 - 9 =",
            "Response": " 36",
            "Extract-Response": " 36\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <stack>\n\nusing namespace std;\n\n#define ll long long int\n#define pii pair<int,int>\n\nint main(){\n\tstring s;\n\tcin>>s;\n\tint n = s.length();\n\tint ans = 0;\n\tint curr = 0;\n\tint sign = 1;\n\tfor(int i = 0; i<n; i++){\n\t\tif(s[i]=='+'){\n\t\t\tans += curr;\n\t\t\tcurr = 0;\n\t\t\tsign = 1;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tans += curr;\n\t\t\tcurr = 0;\n\t\t\tsign = -1;\n\t\t}\n\t\telse{\n\t\t\tcurr = curr*10 + (s[i]-'0')*sign;\n\t\t}\n\t}\n\tans += curr;\n\tcout<<ans;\n}",
            "Answer": 36.0,
            "Final Answer": 36.0,
            "Expected Answer": 36
        },
        {
            "Index": 259,
            "GT": 483,
            "Query": "9 + 7 - 1 + 7 * 9 * 7 - 5 + 4 * 8 =   ",
            "Injected CoT": "8 * 9 = 63\n63 * 8 = 441\n9 + 8 = 16\n16 - 1 = 15\n441 + 15 = 456\n4 * 8 = 32\n456 - 5 = 451\n451 + 32 =",
            "Response": " 483\n7 * 9 = 63\n7 - 1 = 6\n63 + 6 = 69\n69 * 7 = 483\n7 * 4 = 28\n69 + 28 = 97\n97 * 8 = 776\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 4 = 204\n776 + 204 = 980\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 9 = 522\n980 + 522 = 1502\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 4 = 260\n1502 + 260 = 1762\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 8 = 240\n1762 + 240 = 2002\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n2002 + 459 = 2461\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n2461 + 406 = 2867\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n2867 + 455 = 3322\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n3322 + 270 = 3592\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n3592 + 408 = 4000\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n4000 + 232 = 4232\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n4232 + 520 = 4752\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n4752 + 210 = 4962\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n4962 + 459 = 5421\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n5421 + 406 = 5827\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n5827 + 455 = 6282\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n6282 + 270 = 6552\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n6552 + 408 = 6960\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n6960 + 232 = 7192\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n7192 + 520 = 7712\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n7712 + 210 = 7922\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n7922 + 459 = 8381\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n8381 + 406 = 8787\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n8787 + 455 = 9242\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n9242 + 270 = 9512\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n9512 + 408 = 9920\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n9920 + 232 = 10152\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n10152 + 520 = 10672\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n10672 + 210 = 10882\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n10882 + 459 = 11341\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n11341 + 406 = 11747\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n11747 + 455 = 12202\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n12202 + 270 = 12472\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n12472 + 408 = 12880\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n12880 + 232 = 13112\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n13112 + 520 = 13632\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n13632 + 210 = 13842\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n13842 + 459 = 14301\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n14301 + 406 = 14707\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n14707 + 455 = 15162\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n15162 + 270 = 15432\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n15432 + 408 = 15840\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n15840 + 232 = 16072\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n16072 + 520 = 16592\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n16592 + 210 = 16802\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n16802 + 459 = 17261\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n17261 + 406 = 17667\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n17667 + 455 = 18122\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n18122 + 270 = 18392\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n18392 + 408 = 18800\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n18800 + 232 = 19032\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n19032 + 520 = 19532\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n19532 + 210 = 19742\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n19742 + 459 = 20201\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n20201 + 406 = 20607\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n20607 + 455 = 21062\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n21062 + 270 = 21332\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n21332 + 408 = 21740\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n21740 + 232 = 21972\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n21972 + 520 = 22492\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n22492 + 210 = 22702\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9",
            "Extract-Response": "\n\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 8 = 240\n455 + 240 = 695\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 4 = 204\n695 + 204 = 899\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 9 = 522\n899 + 522 = 1421\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 4 = 260\n1421 + 260 = 1681\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n1681 + 270 = 1951\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n1951 + 408 = 2359\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n2359 + 406 = 2765\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n2765 + 455 = 3220\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 8 = 240\n3220 + 240 = 3460\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n3460 + 459 = 3919\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n3919 + 232 = 4151\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n4151 + 520 = 4671\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n4671 + 210 = 4881\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n4881 + 459 = 5340\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n5340 + 406 = 5746\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n5746 + 455 = 6201\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n6201 + 270 = 6471\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n6471 + 408 = 6879\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n6879 + 232 = 7111\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n7111 + 520 = 7631\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n7631 + 210 = 7841\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n7841 + 459 = 8300\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n8300 + 406 = 8706\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n8706 + 455 = 9161\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n9161 + 270 = 9431\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n9431 + 408 = 9839\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n9839 + 232 = 10071\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n10071 + 520 = 10591\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n10591 + 210 = 10801\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n10801 + 459 = 11260\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n11260 + 406 = 11666\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n11666 + 455 = 12121\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n12121 + 270 = 12391\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n12391 + 408 = 12799\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n12799 + 232 = 13031\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n13031 + 520 = 13531\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n13531 + 210 = 13741\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n13741 + 459 = 14200\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n14200 + 406 = 14606\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n14606 + 455 = 15061\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n15061 + 270 = 15331\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n15331 + 408 = 15739\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n15739 + 232 = 15951\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n15951 + 520 = 16471\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n16471 + 210 = 16681\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n16681 + 459 = 17140\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n17140 + 406 = 17546\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n17546 + 455 = 17951\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n17951 + 270 = 18221\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n18221 + 408 = 18629\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n18629 + 232 = 18851\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n18851 + 520 = 19351\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n19351 + 210 = 19551\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 9 = 459\n19551 + 459 = 20010\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 7 = 406\n20010 + 406 = 20416\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 7 = 455\n20416 + 455 = 20871\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 9 = 270\n20871 + 270 = 21141\n7 * 7 = 49\n7 - 5 = 2\n49 + 2 = 51\n51 * 8 = 408\n21141 + 408 = 21549\n7 * 8 = 56\n7 - 5 = 2\n56 + 2 = 58\n58 * 4 = 232\n21549 + 232 = 21781\n7 * 9 = 63\n7 - 5 = 2\n63 + 2 = 65\n65 * 8 = 520\n21781 + 520 = 22281\n7 * 4 = 28\n7 - 5 = 2\n28 + 2 = 30\n30 * 7 = 210\n22281 + 210 = 22491\n7 * 7 = 49\n7 - 5",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 483
        },
        {
            "Index": 261,
            "GT": -49,
            "Query": "2 - 2 - 7 + 1 * 2 * 9 - 5 * 3 * 4 =   ",
            "Injected CoT": "3 - 3 = 0\n0 - 7 = -7\n1 * 3 = 3\n3 * 9 = 18\n5 * 3 = 15\n15 * 4 = 60\n18 - 60 =",
            "Response": " -42\n-7 - 42 = -49",
            "Extract-Response": " -49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -49.0,
            "Final Answer": -49.0,
            "Expected Answer": -42
        },
        {
            "Index": 263,
            "GT": 29,
            "Query": "8 - 6 - 7 + 4 * 4 * 2 - 1 - 5 + 8 =   ",
            "Injected CoT": "3 * 2 = 8\n8 * 3 = 32\n8 - 6 = 2\n2 - 7 = -5\n-5 + 32 = 27\n27 - 1 = 26\n26 - 5 = 21\n21 + 8 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 29.0,
            "Final Answer": 29.0,
            "Expected Answer": 29
        },
        {
            "Index": 265,
            "GT": 251,
            "Query": "9 - 5 * 3 + 5 * 1 * 6 * 9 - 8 - 5 =   ",
            "Injected CoT": "4 * 3 = 15\n1 * 6 = 6\n6 * 9 = 54\n15 + 54 = 69\n9 - 15 = -6\n-6 + 69 = 63\n63 - 8 = 55\n55 - 4 =",
            "Response": " 51\n51 - 5 = 46",
            "Extract-Response": "\n\n46",
            "Answer": 46.0,
            "Final Answer": 46.0,
            "Expected Answer": 51
        },
        {
            "Index": 267,
            "GT": 74,
            "Query": "5 + 1 - 7 - 8 + 6 + 8 * 9 - 2 + 7 =   ",
            "Injected CoT": "9 * 9 = 72\n5 + 1 = 6\n6 - 7 = -1\n-1 - 9 = -9\n-9 + 6 = -3\n-3 + 72 = 69\n69 - 2 = 67\n67 + 7 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '%')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '=')\n        {\n            sign = 1;\n        }\n        else if(input[i] == ' ')\n        {\n            sign = 1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n\n                i++;\n            }\n\n            sum = sum + num * sign;\n\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 74.0,
            "Final Answer": 74.0,
            "Expected Answer": 74
        },
        {
            "Index": 268,
            "GT": 38,
            "Query": "5 * 3 + 2 * 6 - 2 + 9 + 9 - 3 - 2 =   ",
            "Injected CoT": "5 * 2 = 15\n2 * 6 = 12\n15 + 12 = 27\n9 + 9 = 18\n27 - 2 = 25\n18 - 2 = 15\n25 - 2 = 23\n15 + 23 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int result = 0;\n    int sign = 1;\n    int i = 0;\n    while (i < s.size())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '+')\n        {\n            sign = 1;\n            i++;\n            continue;\n        }\n        if (s[i] == '-')\n        {\n            sign = -1;\n            i++;\n            continue;\n        }\n        int num = 0;\n        while (i < s.size() && s[i] >= '0' && s[i] <= '9')\n        {\n            num = num * 10 + s[i] - '0';\n            i++;\n        }\n        result += sign * num;\n    }\n    cout << result << endl;\n    return 0;\n}",
            "Answer": 38.0,
            "Final Answer": 38.0,
            "Expected Answer": 38
        },
        {
            "Index": 269,
            "GT": -616,
            "Query": "3 * 9 + 2 - 7 + 2 - 8 * 4 * 4 * 5 =   ",
            "Injected CoT": "4 * 9 = 27\n27 + 2 = 29\n29 - 7 = 22\n22 + 2 = 24\n8 * 4 = 32\n32 * 4 = 128\n128 * 5 = 640\n24 - 640 =",
            "Response": " -616",
            "Extract-Response": " -616.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1,000,000, 1,000,000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": -616.0,
            "Final Answer": -616.0,
            "Expected Answer": -616
        },
        {
            "Index": 272,
            "GT": 49,
            "Query": "1 + 5 + 2 + 6 + 9 - 7 + 5 * 6 + 3 =   ",
            "Injected CoT": "4 * 6 = 30\n1 + 4 = 6\n6 + 2 = 8\n8 + 6 = 14\n14 + 9 = 23\n23 - 7 = 16\n16 + 30 = 46\n46 + 3 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    char *p;\n\n    printf(\"Enter a string: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+' || input[i] == '-')\n        {\n            continue;\n        }\n\n        if(input[i] == '*')\n        {\n            num = atoi(input+i-1);\n\n            for(j=i+1; j<len; j++)\n            {\n                if(input[j] == '+' || input[j] == '-')\n                {\n                    break;\n                }\n            }\n\n            num *= atoi(input+j);\n\n            input[i-1] = '0';\n            input[i] = '+';\n            input[j] = '0';\n        }\n    }\n\n    p = strtok(input, \"+-\");\n\n    while(p != NULL)\n    {\n        sum += atoi(p);\n\n        p = strtok(NULL, \"+-\");\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 49.0,
            "Final Answer": 49.0,
            "Expected Answer": 49
        },
        {
            "Index": 274,
            "GT": 174,
            "Query": "7 * 6 * 4 - 7 - 5 + 8 + 1 + 6 + 3 =   ",
            "Injected CoT": "7 * 7 = 42\n42 * 4 = 168\n168 - 7 = 161\n161 - 5 = 156\n156 + 8 = 164\n164 + 1 = 165\n165 + 7 = 171\n171 + 3 =",
            "Response": " 174\n\n7 * 6 * 4 - 7 - 5 + 8 + 1 + 6 + 3 = 174",
            "Extract-Response": " 174",
            "Answer": 174.0,
            "Final Answer": 174.0,
            "Expected Answer": 174
        },
        {
            "Index": 275,
            "GT": 8,
            "Query": "1 + 3 + 8 - 6 + 5 * 2 - 4 * 4 + 8 =   ",
            "Injected CoT": "5 * 1 = 10\n4 * 4 = 16\n1 + 3 = 4\n8 - 6 = 1\n10 + 1 = 12\n12 - 16 = -4\n-4 + 8 = 4\n4 + 5 = 9\n9 + 4 =",
            "Response": " 13",
            "Extract-Response": "\n\n13",
            "Answer": 13.0,
            "Final Answer": 13.0,
            "Expected Answer": 13
        },
        {
            "Index": 276,
            "GT": 43,
            "Query": "5 + 8 * 6 + 7 * 1 + 2 - 9 - 3 - 7 =   ",
            "Injected CoT": "8 * 5 = 48\n7 * 1 = 7\n5 + 48 = 53\n53 + 7 = 60\n60 + 2 = 62\n62 - 9 = 53\n53 - 3 = 50\n50 - 7 =",
            "Response": " 43\n\n43",
            "Extract-Response": "\n\n43",
            "Answer": 43.0,
            "Final Answer": 43.0,
            "Expected Answer": 43
        },
        {
            "Index": 277,
            "GT": 6,
            "Query": "3 + 9 - 4 - 7 + 4 - 7 + 8 - 1 + 1 =   ",
            "Injected CoT": "4 + 9 = 12\n12 - 4 = 8\n8 - 7 = 1\n1 + 4 = 5\n5 - 7 = -2\n-2 + 8 = 6\n6 - 1 = 5\n5 + 1 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 6.0,
            "Final Answer": 6.0,
            "Expected Answer": 6
        },
        {
            "Index": 279,
            "GT": 74,
            "Query": "7 * 4 - 2 + 9 * 5 + 3 + 2 + 7 - 9 =   ",
            "Injected CoT": "6 * 4 = 28\n9 * 5 = 45\n28 - 2 = 26\n26 + 45 = 71\n71 + 3 = 74\n74 + 2 = 76\n76 + 6 = 83\n83 - 9 =",
            "Response": " 74\n\n74",
            "Extract-Response": " 74\n\n*/",
            "Answer": 74.0,
            "Final Answer": 74.0,
            "Expected Answer": 74
        },
        {
            "Index": 282,
            "GT": -75,
            "Query": "6 * 2 + 3 - 4 - 2 - 9 * 8 - 7 - 5 =   ",
            "Injected CoT": "6 * 3 = 12\n12 + 3 = 15\n15 - 4 = 11\n11 - 3 = 9\n9 - 9 * 8 = -63\n-63 - 7 = -70\n-70 - 5 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -75.0,
            "Final Answer": -75.0,
            "Expected Answer": -75
        },
        {
            "Index": 283,
            "GT": 381,
            "Query": "8 - 7 + 9 * 7 * 6 + 8 - 4 - 1 - 1 =   ",
            "Injected CoT": "9 * 8 = 63\n63 * 6 = 378\n8 - 8 = 1\n1 + 378 = 379\n379 + 8 = 387\n387 - 4 = 383\n383 - 1 = 382\n382 - 1 =",
            "Response": " 381\n\n381",
            "Extract-Response": "\n\n381",
            "Answer": 381.0,
            "Final Answer": 381.0,
            "Expected Answer": 381
        },
        {
            "Index": 284,
            "GT": -73,
            "Query": "5 - 2 + 2 - 5 * 4 - 1 - 7 * 8 - 1 =   ",
            "Injected CoT": "5 - 3 = 3\n3 + 3 = 5\n5 - 5 * 4 = -15\n-15 - 1 = -16\n-7 * 8 = -56\n-16 - 56 = -72\n-72 - 1 =",
            "Response": " -73",
            "Extract-Response": " -73.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Answer": -73.0,
            "Final Answer": -73.0,
            "Expected Answer": -73
        },
        {
            "Index": 287,
            "GT": 3036,
            "Query": "2 * 9 * 7 * 1 * 3 * 8 + 9 + 8 - 5 =   ",
            "Injected CoT": "3 * 9 = 18\n18 * 7 = 126\n126 * 1 = 126\n126 * 3 = 378\n378 * 8 = 3024\n3024 + 9 = 3033\n3033 + 8 = 3041\n3041 - 5 =",
            "Response": " 3036\n\n3036",
            "Extract-Response": "\n\n3036",
            "Answer": 3036.0,
            "Final Answer": 3036.0,
            "Expected Answer": 3036
        },
        {
            "Index": 289,
            "GT": 35,
            "Query": "4 * 5 + 8 - 8 + 9 + 3 + 9 - 2 * 3 =   ",
            "Injected CoT": "5 * 5 = 20\n20 + 8 = 28\n28 - 8 = 20\n20 + 9 = 29\n29 + 3 = 32\n32 + 9 = 41\n2 * 3 = 6\n41 - 6 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 35.0,
            "Final Answer": 35.0,
            "Expected Answer": 35
        },
        {
            "Index": 291,
            "GT": -6,
            "Query": "1 + 3 - 4 + 8 + 5 - 1 - 4 * 6 + 6 =   ",
            "Injected CoT": "5 * 6 = 24\n1 + 3 = 5\n5 - 5 = 0\n0 + 8 = 8\n8 + 5 = 13\n13 - 1 = 12\n12 - 24 = -12\n-12 + 6 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -6.0,
            "Final Answer": -6.0,
            "Expected Answer": -6
        },
        {
            "Index": 292,
            "GT": -111,
            "Query": "4 + 8 + 6 - 3 - 8 * 4 * 4 + 3 - 1 =   ",
            "Injected CoT": "8 * 5 = 32\n32 * 5 = 128\n5 + 8 = 12\n12 + 6 = 18\n18 - 3 = 15\n15 - 128 = -113\n-113 + 3 = -110\n-110 - 1 =",
            "Response": " -111",
            "Extract-Response": " -111.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -111.0,
            "Final Answer": -111.0,
            "Expected Answer": -111
        },
        {
            "Index": 294,
            "GT": 39,
            "Query": "9 * 6 + 5 - 7 - 6 + 1 - 2 - 2 - 4 =   ",
            "Injected CoT": "9 * 7 = 54\n54 + 5 = 59\n59 - 7 = 52\n52 - 7 = 46\n46 + 1 = 47\n47 - 2 = 45\n45 - 2 = 43\n43 - 4 =",
            "Response": " 39\n\n39\n\n*/",
            "Extract-Response": "\n\n39",
            "Answer": 39.0,
            "Final Answer": 39.0,
            "Expected Answer": 39
        },
        {
            "Index": 295,
            "GT": -8035,
            "Query": "5 * 7 - 6 - 7 * 4 * 8 * 4 * 1 * 9 =   ",
            "Injected CoT": "7 * 5 = 28\n28 * 8 = 224\n224 * 5 = 896\n896 * 1 = 896\n896 * 9 = 8064\n5 * 7 = 35\n35 - 6 = 29\n29 - 8064 =",
            "Response": " -8035\n\n-8035",
            "Extract-Response": " -8035",
            "Answer": -8035.0,
            "Final Answer": -8035.0,
            "Expected Answer": -8035
        },
        {
            "Index": 298,
            "GT": 275,
            "Query": "3 - 6 + 8 * 1 * 8 * 5 - 1 * 7 * 6 =   ",
            "Injected CoT": "8 * 2 = 8\n8 * 5 = 40\n2 * 7 = 7\n7 * 6 = 42\n-6 + 8 = 2\n3 + 2 = 5\n5 + 40 = 45\n45 - 42 = 3\n3 - 42 = -39\n-39 + 40 = 2\n2 - 2 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 0
        },
        {
            "Index": 299,
            "GT": 332,
            "Query": "3 + 4 + 5 + 9 * 4 * 9 - 8 + 7 - 3 =   ",
            "Injected CoT": "3 + 5 = 7\n7 + 5 = 12\n9 * 5 = 36\n36 * 9 = 324\n324 - 8 = 316\n316 + 7 = 323\n323 - 3 =",
            "Response": " 320",
            "Extract-Response": "\n\n320",
            "Answer": 320.0,
            "Final Answer": 320.0,
            "Expected Answer": 320
        },
        {
            "Index": 300,
            "GT": 53,
            "Query": "6 * 2 + 4 * 6 + 1 * 8 + 7 - 3 + 5 =   ",
            "Injected CoT": "6 * 1 = 12\n4 * 6 = 24\n1 * 8 = 8\n12 + 24 = 36\n36 + 8 = 44\n44 + 7 = 51\n51 - 3 = 48\n48 + 5 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){\n            int x = i < 0 ? 0 : num1.charAt(i) - '0';\n            int y = j < 0 ? 0 : num2.charAt(j) - '0';\n            sb.append((x + y + carry) % 10);\n            carry = (x + y + carry) / 10;\n        }\n        return sb.reverse().toString();\n    }\n}",
            "Answer": 53.0,
            "Final Answer": 53.0,
            "Expected Answer": 53
        },
        {
            "Index": 301,
            "GT": -5,
            "Query": "1 * 5 + 6 + 5 + 9 - 4 - 2 - 3 * 8 =   ",
            "Injected CoT": "1 * 6 = 6\n6 + 6 = 11\n11 + 6 = 16\n16 + 9 = 25\n25 - 4 = 21\n21 - 2 = 19\n3 * 8 = 24\n19 - 24 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the task.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0",
            "Answer": -5.0,
            "Final Answer": -5.0,
            "Expected Answer": -5
        },
        {
            "Index": 305,
            "GT": -28,
            "Query": "9 - 4 * 6 + 2 + 7 + 1 - 8 * 3 + 1 =   ",
            "Injected CoT": "4 * 5 = 24\n9 - 24 = -15\n-15 + 2 = -13\n-13 + 7 = -6\n-6 + 1 = -5\n8 * 3 = 24\n-5 - 24 = -29\n-29 + 1 =",
            "Response": " -28",
            "Extract-Response": " -28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -28.0,
            "Final Answer": -28.0,
            "Expected Answer": -28
        },
        {
            "Index": 306,
            "GT": 57,
            "Query": "6 + 4 * 1 + 4 * 9 + 5 + 5 + 6 - 5 =   ",
            "Injected CoT": "4 * 2 = 4\n4 * 9 = 36\n6 + 4 = 10\n10 + 36 = 46\n46 + 5 = 51\n51 + 5 = 56\n56 + 6 = 62\n62 - 5 =",
            "Response": " 57\n\n57",
            "Extract-Response": " 57\n\n*/",
            "Answer": 57.0,
            "Final Answer": 57.0,
            "Expected Answer": 57
        },
        {
            "Index": 308,
            "GT": -53,
            "Query": "7 - 4 - 9 - 7 * 9 + 6 * 2 + 3 + 1 =   ",
            "Injected CoT": "6 - 4 = 3\n3 - 9 = -6\n6 * 9 = 63\n-6 - 63 = -69\n6 * 2 = 12\n-69 + 12 = -57\n-57 + 3 = -54\n-54 + 1 =",
            "Response": " -53",
            "Extract-Response": " -53.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i=1;i<n;i++)\n        {\n            int temp = max_prod;\n            max_prod = max(max(max_prod*nums[i],min_prod*nums[i]),nums[i]);\n            min_prod = min(min(temp*nums[i],min_prod*nums[i]),nums[i]);\n            ans = max(ans,max_prod);\n        }\n        return ans;\n    }\n};",
            "Answer": -53.0,
            "Final Answer": -53.0,
            "Expected Answer": -53
        },
        {
            "Index": 310,
            "GT": -13,
            "Query": "3 + 8 - 6 - 8 - 8 - 5 + 7 - 8 + 4 =   ",
            "Injected CoT": "2 + 8 = 11\n11 - 6 = 5\n5 - 8 = -3\n-3 - 8 = -11\n-11 - 5 = -16\n-16 + 7 = -9\n-9 - 8 = -17\n-17 + 4 =",
            "Response": " -13\n\n-13",
            "Extract-Response": " -13",
            "Answer": -13.0,
            "Final Answer": -13.0,
            "Expected Answer": -13
        },
        {
            "Index": 311,
            "GT": 35,
            "Query": "3 - 5 - 8 * 2 + 6 * 8 - 8 + 4 + 9 =   ",
            "Injected CoT": "-8 * 1 = -16\n6 * 8 = 48\n-5 - 16 = -21\n-21 + 48 = 27\n-8 + 4 = -4\n-4 + 9 = 5\n3 + 5 =",
            "Response": " 8\n8 + 27 = 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 35.0,
            "Final Answer": 35.0,
            "Expected Answer": 8
        },
        {
            "Index": 312,
            "GT": -10,
            "Query": "1 * 1 - 2 * 6 + 9 - 6 - 5 * 1 + 3 =   ",
            "Injected CoT": "2 * 2 = 2\n2 * 6 = 12\n2 - 12 = -11\n-11 + 9 = -2\n-2 - 6 = -8\n5 * 2 = 5\n-8 - 5 = -13\n-13 + 3 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -10.0,
            "Final Answer": -10.0,
            "Expected Answer": -10
        },
        {
            "Index": 315,
            "GT": -36,
            "Query": "7 - 7 - 2 - 5 + 7 - 5 - 4 * 6 - 7 =   ",
            "Injected CoT": "6 - 6 = 0\n0 - 2 = -2\n-2 - 5 = -7\n-7 + 6 = 0\n0 - 5 = -5\n-5 - 4 * 6 = -29\n-29 - 6 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d.\", result);\n\n    return 0;\n}",
            "Answer": -35.0,
            "Final Answer": -35.0,
            "Expected Answer": -35
        },
        {
            "Index": 316,
            "GT": -13,
            "Query": "9 - 9 + 5 + 6 + 7 - 7 * 5 - 1 + 5 =   ",
            "Injected CoT": "10 - 10 = 0\n0 + 5 = 5\n5 + 6 = 11\n11 + 7 = 18\n7 * 5 = 35\n18 - 35 = -17\n-17 - 1 = -18\n-18 + 5 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -13.0,
            "Final Answer": -13.0,
            "Expected Answer": -13
        },
        {
            "Index": 319,
            "GT": 24,
            "Query": "5 + 9 - 1 + 8 + 5 + 2 * 4 - 2 * 5 =   ",
            "Injected CoT": "2 * 3 = 8\n2 * 5 = 10\n5 + 9 = 14\n14 - 1 = 13\n13 + 8 = 21\n21 + 5 = 26\n26 - 10 =",
            "Response": " 16\n16 + 2 * 4 = 24\n24 - 2 * 5 = 14",
            "Extract-Response": " 14\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+' || c == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = (c == '+' ? 1 : -1);\n        } else if (c == '*') {\n            int a;\n            cin >> a;\n            curr *= a;\n        } else {\n            curr = c - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": 16
        },
        {
            "Index": 321,
            "GT": -179,
            "Query": "1 + 7 * 2 - 6 * 5 * 6 - 9 - 7 + 2 =   ",
            "Injected CoT": "6 * 2 = 14\n6 * 5 = 30\n30 * 6 = 180\n1 + 14 = 15\n15 - 180 = -165\n-165 - 9 = -174\n-174 - 6 = -181\n-181 + 2 =",
            "Response": " -179",
            "Extract-Response": " -179.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -179.0,
            "Final Answer": -179.0,
            "Expected Answer": -179
        },
        {
            "Index": 322,
            "GT": -112,
            "Query": "9 - 6 + 8 - 7 * 2 * 6 + 3 - 6 * 7 =   ",
            "Injected CoT": "-8 * 2 = -14\n-14 * 6 = -84\n9 - 6 = 3\n3 + 8 = 11\n11 - 84 = -73\n-73 + 3 = -70\n-6 * 7 = -42\n-70 - 42 =",
            "Response": " -112",
            "Extract-Response": " -112.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef operations(n):\n    # Write your code here\n    return 0",
            "Answer": -112.0,
            "Final Answer": -112.0,
            "Expected Answer": -112
        },
        {
            "Index": 325,
            "GT": 21,
            "Query": "3 + 1 - 6 - 9 + 7 * 4 + 5 - 5 + 4 =   ",
            "Injected CoT": "6 * 4 = 28\n3 + 1 = 4\n4 - 6 = -2\n-2 - 9 = -11\n-11 + 28 = 17\n17 + 5 = 22\n22 - 5 = 17\n17 + 4 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 21.0,
            "Final Answer": 21.0,
            "Expected Answer": 21
        },
        {
            "Index": 326,
            "GT": 109,
            "Query": "1 - 9 + 8 - 6 + 3 * 5 * 7 + 7 + 3 =   ",
            "Injected CoT": "4 * 5 = 15\n15 * 7 = 105\n1 - 9 = -8\n-8 + 8 = 0\n0 - 6 = -6\n-6 + 105 = 99\n99 + 7 = 106\n106 + 4 =",
            "Response": " 110",
            "Extract-Response": " 110\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int num;\n    int sign = 1;\n\n    /* Reads and stores the string */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /* Iterates through the string */\n    for(i=0; i<len; i++)\n    {\n        /* If the current character is a digit */\n        if(str[i] >= '0' && str[i] <= '9')\n        {\n            /* Convert the character to integer */\n            num = str[i] - '0';\n\n            /*\n             * If the current character is the first digit\n             * and the next character is a negative sign\n             */\n            if(i == 0 && str[i+1] == '-')\n            {\n                /* Only update the sign */\n                sign = -1;\n            }\n            /*\n             * If the current character is the first digit\n             * and the next character is a positive sign\n             */\n            else if(i == 0 && str[i+1] == '+')\n            {\n                /* Only update the sign */\n                sign = 1;\n            }\n            /*\n             * If the current character is the last digit\n             * or the next character is not a sign\n             */\n            else if(i == len-1 || (str[i+1] != '-' && str[i+1] != '+'))\n            {\n                /* Update the result */\n                result = (result * 10) + (num * sign);\n            }\n            /*\n             * If the current character is not the first digit\n             * and the next character is a negative sign\n             */\n            else if(i != 0 && str[i+1] == '-')\n            {\n                /* Update the result */\n                result = (result * 10) + (num * sign);\n\n                /* Update the sign */\n                sign = -1;\n            }\n            /*\n             * If the current character is not the first digit\n             * and the next character is a positive sign\n             */\n            else if(i != 0 && str[i+1] == '+')\n            {\n                /* Update the result */\n                result = (result * 10) + (num * sign);\n\n                /* Update the sign */\n                sign = 1;\n            }\n        }\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Answer": 110.0,
            "Final Answer": 110.0,
            "Expected Answer": 110
        },
        {
            "Index": 327,
            "GT": 376,
            "Query": "4 + 6 * 7 + 4 - 9 - 1 + 8 * 6 * 7 =   ",
            "Injected CoT": "7 * 7 = 42\n4 + 42 = 46\n46 + 4 = 50\n50 - 9 = 41\n41 - 1 = 40\n8 * 7 = 48\n48 * 7 = 336\n40 + 336 =",
            "Response": " 376",
            "Extract-Response": "\n\n376",
            "Answer": 376.0,
            "Final Answer": 376.0,
            "Expected Answer": 376
        },
        {
            "Index": 328,
            "GT": 365,
            "Query": "8 * 8 * 1 + 8 * 8 * 5 - 8 - 3 - 8 =   ",
            "Injected CoT": "9 * 9 = 64\n64 * 1 = 64\n64 * 5 = 320\n9 * 9 = 64\n64 * 5 = 320\n64 + 320 = 384\n384 - 9 = 376\n376 - 3 = 373\n373 - 9 =",
            "Response": " 364\n\n*/\n\n// Solution #1\n// Runtime: 0 ms, faster than 100.00% of C++ online submissions for Maximum 69 Number.\n// Memory Usage: 8.1 MB, less than 100.00% of C++ online submissions for Maximum 69 Number.\nclass Solution {\npublic:\n    int maximum69Number (int num) {\n        string s = to_string(num);\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == '6') {\n                s[i] = '9';\n                break;\n            }\n        }\n        return stoi(s);\n    }\n};\n\n// Solution #2\n// Runtime: 0 ms, faster than 100.00% of C++ online submissions for Maximum 69 Number.\n// Memory Usage: 8.1 MB, less than 100.00% of C++ online submissions for Maximum 69 Number.\nclass Solution2 {\npublic:\n    int maximum69Number (int num) {\n        string s = to_string(num);\n        int i = s.find('6');\n        if (i != string::npos) {\n            s[i] = '9';\n        }\n        return stoi(s);\n    }\n};",
            "Extract-Response": "\n\nclass Solution {\npublic:\n    int maximum69Number (int num) {\n        string s = to_string(num);\n        int i = s.find('6');\n        if (i != string::npos) {\n            s[i] = '9';\n        }\n        return stoi(s);\n    }\n};",
            "Answer": 69.0,
            "Final Answer": 69.0,
            "Expected Answer": 364
        },
        {
            "Index": 329,
            "GT": 47,
            "Query": "2 * 4 * 1 * 5 + 9 - 9 + 3 + 8 - 4 =   ",
            "Injected CoT": "2 * 3 = 8\n8 * 1 = 8\n8 * 5 = 40\n40 + 9 = 49\n49 - 9 = 40\n40 + 3 = 43\n43 + 8 = 51\n51 - 3 =",
            "Response": " 48",
            "Extract-Response": " 48\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define RREP(i,a,b) for(int i=a;i>=b;i--)\n#define FOR(i,m) for(auto i=m.begin();i!=m.end();i++)\n#define X first\n#define Y second\n#define ALL(a) (a).begin(),(a).end()\n#define SORT(a) sort(ALL(a))\n#define CLR(a) memset(a,0,sizeof(a))\n#define PB push_back\n#define MP make_pair\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3f\n#define LL long long\n#define ULL unsigned long long\n#define PI 3.1415926535897932384626\n#define MOD 1000000007\n#define SP(x) setprecision(x)\n#define fix(x) cout<<fixed<<setprecision(x)\n#define FORAB(a,b) for(auto i=a.begin();i!=a.end();i++) {cout<<*i<<' '; FOR(j,b) cout<<*j<<' '; cout<<endl;}\n\nconst double EPS = 1e-9;\nconst double PI = acos(-1.0);\nconst LL MOD = 1e9+7;\n\nint Set(int N,int pos) {return N=N | (1<<pos);}\nint Reset(int N,int pos) {return N= N & ~(1<<pos);}\nbool Check(int N,int pos) {return (bool)(N & (1<<pos));}\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    string s;\n    cin>>s;\n    int n=s.size();\n    int ans=0;\n    int curr=0;\n    int flag=0;\n    int sign=1;\n    RREP(i,n-1,0){\n        if(s[i]=='+'){\n            ans+=sign*curr;\n            curr=0;\n            sign=1;\n        }\n        else if(s[i]=='-'){\n            ans+=sign*curr;\n            curr=0;\n            sign=-1;\n        }\n        else if(s[i]=='*'){\n            ans+=sign*curr;\n            curr=0;\n            sign=1;\n            flag=1;\n        }\n        else if(s[i]=='/'){\n            ans+=sign*curr;\n            curr=0;\n            sign=1;\n            flag=2;\n        }\n        else{\n            curr=curr*10+(s[i]-'0');\n        }\n    }\n\n    ans+=sign*curr;\n    cout<<ans<<endl;\n\n    return 0;\n}",
            "Answer": 48.0,
            "Final Answer": 48.0,
            "Expected Answer": 48
        },
        {
            "Index": 331,
            "GT": -8,
            "Query": "3 * 2 * 2 - 7 - 7 - 4 + 9 - 8 - 3 =   ",
            "Injected CoT": "3 * 3 = 6\n6 * 3 = 12\n12 - 7 = 5\n5 - 7 = -2\n-2 - 4 = -6\n-6 + 9 = 3\n3 - 8 = -5\n-5 - 3 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": -8.0,
            "Final Answer": -8.0,
            "Expected Answer": -8
        },
        {
            "Index": 333,
            "GT": -946,
            "Query": "1 + 8 - 6 + 6 + 5 - 8 * 5 * 6 * 4 =   ",
            "Injected CoT": "-9 * 5 = -40\n-40 * 6 = -240\n-240 * 4 = -960\n1 + 8 = 9\n9 - 6 = 3\n3 + 6 = 9\n9 + 5 = 14\n14 - (-960) =",
            "Response": " 974",
            "Extract-Response": " 974\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 974.0,
            "Final Answer": 974.0,
            "Expected Answer": 974
        },
        {
            "Index": 334,
            "GT": -11,
            "Query": "9 - 5 - 8 * 5 + 4 + 9 * 4 - 5 * 3 =   ",
            "Injected CoT": "8 * 4 = 40\n9 - 4 = 4\n4 - 40 = -36\n9 * 4 = 36\n4 * 3 = 15\n-36 + 4 = -32\n-32 + 36 = 4\n4 + 15 =",
            "Response": " 19",
            "Extract-Response": "\n\n19.",
            "Answer": 19.0,
            "Final Answer": 19.0,
            "Expected Answer": 19
        },
        {
            "Index": 335,
            "GT": -22,
            "Query": "8 - 4 * 3 - 7 * 4 + 8 * 2 + 3 - 9 =   ",
            "Injected CoT": "4 * 2 = 12\n7 * 4 = 28\n8 * 2 = 16\n8 - 12 = -4\n-4 - 28 = -32\n-32 + 16 = -16\n-16 + 2 = -13\n-13 - 9 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe length of the input array is between 3 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -22.0,
            "Final Answer": -22.0,
            "Expected Answer": -22
        },
        {
            "Index": 336,
            "GT": -25,
            "Query": "1 + 4 * 5 + 6 * 3 - 3 * 3 * 7 - 1 =   ",
            "Injected CoT": "5 * 5 = 20\n6 * 3 = 18\n3 * 3 = 9\n9 * 7 = 63\n20 + 18 = 38\n38 - 63 = -25\n-25 - 1 = -26\n1 + (-26) =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\n\nThe number of operations won't exceed 1000.\nThe integers in the form (a * b) / c are between -1000 and 1000.\na, b, c and d are all integers.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < n; ++i) {\n            if(isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == n - 1) {\n                if(sign == '-') {\n                    st.push(-num);\n                }\n                else if(sign == '+') {\n                    st.push(num);\n                }\n                else if(sign == '*') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp * num);\n                }\n                else if(sign == '/') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};",
            "Answer": -25.0,
            "Final Answer": -25.0,
            "Expected Answer": -25
        },
        {
            "Index": 342,
            "GT": -50,
            "Query": "1 * 8 - 6 * 8 - 4 + 3 - 5 + 3 - 7 =   ",
            "Injected CoT": "0 * 8 = 8\n6 * 8 = 48\n8 - 48 = -40\n-40 - 4 = -44\n-44 + 3 = -41\n-41 - 5 = -46\n-46 + 3 = -43\n-43 - 7 =",
            "Response": " -50\n-50 + 8 = -42\n\n-42\n\n*/",
            "Extract-Response": " -42",
            "Answer": -42.0,
            "Final Answer": -42.0,
            "Expected Answer": -50
        },
        {
            "Index": 344,
            "GT": 18,
            "Query": "2 + 6 * 5 + 1 + 1 * 6 * 1 - 7 * 3 =   ",
            "Injected CoT": "7 * 5 = 30\n2 + 30 = 32\n1 * 7 = 7\n7 * 1 = 7\n7 * 3 = 21\n32 + 1 = 33\n33 + 7 = 39\n39 - 21 =",
            "Response": " 18\n\n18",
            "Extract-Response": "\n\n18",
            "Answer": 18.0,
            "Final Answer": 18.0,
            "Expected Answer": 18
        },
        {
            "Index": 345,
            "GT": 114,
            "Query": "5 * 4 * 4 - 8 * 9 + 5 * 3 * 7 + 1 =   ",
            "Injected CoT": "6 * 4 = 20\n20 * 4 = 80\n8 * 9 = 72\n80 - 72 = 8\n6 * 3 = 15\n15 * 7 = 105\n8 + 105 = 113\n113 + 1 =",
            "Response": " 114",
            "Extract-Response": " 114\n</code>\n",
            "Answer": 114.0,
            "Final Answer": 114.0,
            "Expected Answer": 114
        },
        {
            "Index": 346,
            "GT": 40,
            "Query": "5 + 8 * 5 - 4 - 4 + 4 - 8 - 2 + 9 =   ",
            "Injected CoT": "9 * 5 = 40\n5 + 40 = 45\n45 - 4 = 41\n41 - 4 = 37\n37 + 4 = 41\n41 - 9 = 33\n33 - 2 = 31\n31 + 9 =",
            "Response": " 40\n40 - 8 = 32\n32 - 8 = 24\n24 + 4 = 28\n28 - 5 = 23",
            "Extract-Response": " 23\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d, e, f, g, h, i, j, k, l, m, n1, o, p, q, r, s, t, u, v, w, x, y, z;\n    cin >> n;\n    string s1, s2;\n    vector<int> v1;\n    vector<int> v2;\n    int sum1 = 0, sum2 = 0;\n    for (int i = 0; i < n; ++i) {\n        cin >> a;\n        v1.push_back(a);\n        sum1 += a;\n    }\n    for (int i = 0; i < n; ++i) {\n        cin >> a;\n        v2.push_back(a);\n        sum2 += a;\n    }\n    if (sum1 == sum2) {\n        cout << \"Draw\";\n    } else if (sum1 > sum2) {\n        cout << \"First\";\n    } else {\n        cout << \"Second\";\n    }\n\n    return 0;\n}",
            "Answer": 23.0,
            "Final Answer": 23.0,
            "Expected Answer": 40
        },
        {
            "Index": 348,
            "GT": -28,
            "Query": "1 - 1 * 2 - 3 - 8 + 6 - 3 * 7 - 1 =   ",
            "Injected CoT": "0 * 2 = 2\n0 - 2 = -1\n-1 - 3 = -4\n-4 - 8 = -12\n-12 + 6 = -6\n3 * 7 = 21\n-6 - 21 = -27\n-27 - 0 =",
            "Response": " -27",
            "Extract-Response": " -27\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -27.0,
            "Final Answer": -27.0,
            "Expected Answer": -27
        },
        {
            "Index": 349,
            "GT": 387,
            "Query": "5 * 9 + 2 + 6 * 7 * 8 + 2 - 7 + 9 =   ",
            "Injected CoT": "6 * 9 = 45\n6 * 7 = 42\n42 * 8 = 336\n45 + 2 = 47\n336 + 47 = 383\n383 + 2 = 385\n385 - 7 = 378\n378 + 9 =",
            "Response": " 387",
            "Extract-Response": " 387\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n\nusing namespace std;\n\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define space \" \"\n\n#define ll long long\n#define vi vector<int>\n#define vll vector<ll>\n\n#define pb push_back\n#define mp make_pair\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\t//freopen(\"output.txt\", \"w\", stdout);\n#endif\n\n\tstring s;\n\tcin >> s;\n\tint n = s.size();\n\tint a[n];\n\tint sum = 0;\n\tint curr = 0;\n\tint ans = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == '+') {\n\t\t\ta[curr] = sum;\n\t\t\tsum = 0;\n\t\t\t++curr;\n\t\t} else if (s[i] == '-') {\n\t\t\ta[curr] = sum;\n\t\t\tsum = 0;\n\t\t\t++curr;\n\t\t} else if (s[i] == '=') {\n\t\t\ta[curr] = sum;\n\t\t\tsum = 0;\n\t\t\t++curr;\n\t\t} else {\n\t\t\tsum = sum * 10 + s[i] - '0';\n\t\t}\n\t}\n\ta[curr] = sum;\n\tint n1 = curr + 1;\n\tint n2 = n1 + 1;\n\tint n3 = n2 + 1;\n\tint n4 = n3 + 1;\n\tint n5 = n4 + 1;\n\tint n6 = n5 + 1;\n\tint n7 = n6 + 1;\n\tint n8 = n7 + 1;\n\tint n9 = n8 + 1;\n\tint n10 = n9 + 1;\n\tint n11 = n10 + 1;\n\tint n12 = n11 + 1;\n\tint n13 = n12 + 1;\n\tint n14 = n13 + 1;\n\tint n15 = n14 + 1;\n\tint n16 = n15 + 1;\n\tint n17 = n16 + 1;\n\tint n18 = n17 + 1;\n\tint n19 = n18 + 1;\n\tint n20 = n19 + 1;\n\tint n21 = n20 + 1;\n\tint n22 = n21 + 1;\n\tint n23 = n22 + 1;\n\tint n24 = n23 + 1;\n\tint n25 = n24 + 1;\n\tint n26 = n25 + 1;\n\tint n27 = n26 + 1;\n\tint n28 = n27 + 1;\n\tint n29 = n28 + 1;\n\tint n30 = n29 + 1;\n\tint n31 = n30 + 1;\n\tint n32 = n31 + 1;\n\tint n33 = n32 + 1;\n\tint n34 = n33 + 1;\n\tint n35 = n34 + 1;\n\tint n36 = n35 + 1;\n\tint n37 = n36 + 1;\n\tint n38 = n37 + 1;\n\tint n39 = n38 + 1;\n\tint n40 = n39 + 1;\n\tint n41 = n40 + 1;\n\tint n42 = n41 + 1;\n\tint n43 = n42 + 1;\n\tint n44 = n43 + 1;\n\tint n45 = n44 + 1;\n\tint n46 = n45 + 1;\n\tint n47 = n46 + 1;\n\tint n48 = n47 + 1;\n\tint n49 = n48 + 1;\n\tint n50 = n49 + 1;\n\tint n51 = n50 + 1;\n\tint n52 = n51 + 1;\n\tint n53 = n52 + 1;\n\tint n54 = n53 + 1;\n\tint n55 = n54 + 1;\n\tint n56 = n55 + 1;\n\tint n57 = n56 + 1;\n\tint n58 = n57 + 1;\n\tint n59 = n58 + 1;\n\tint n60 = n59 + 1;\n\tint n61 = n60 + 1;\n\tint n62 = n61 + 1;\n\tint n63 = n62 + 1;\n\tint n64 = n63 + 1;\n\tint n65 = n64 + 1;\n\tint n66 = n65 + 1;\n\tint n67 = n66 + 1;\n\tint n68 = n67 + 1;\n\tint n69 = n68 + 1;\n\tint n70 = n69 + 1;\n\tint n71 = n70 + 1;\n\tint n72 = n71 + 1;\n\tint n73 = n72 + 1;\n\tint n74 = n73 + 1;\n\tint n75 = n74 + 1;\n\tint n76 = n75 + 1;\n\tint n77 = n76 + 1;\n\tint n78 = n77 + 1;\n\tint n79 = n78 + 1;\n\tint n80 = n79 + 1;\n\tint n81 = n80 + 1;\n\tint n82 = n81 + 1;\n\tint n83 = n82 + 1;\n\tint n84 = n83 + 1;\n\tint n85 = n84 + 1;\n\tint n86 = n85 + 1;\n\tint n87 = n86 + 1;\n\tint n88 = n87 + 1;\n\tint n89 = n88 + 1;\n\tint n90 = n89 + 1;\n\tint n91 = n90 + 1;\n\tint n92 = n91 + 1;\n\tint n93 = n92 + 1;\n\tint n94 = n93 + 1;\n\tint n95 = n94 + 1;\n\tint n96 = n95 + 1;\n\tint n97 = n96 + 1;\n\tint n98 = n97 + 1;\n\tint n99 = n98 + 1;\n\tint n100 = n99 + 1;\n\tint n101 = n100 + 1;\n\tint n102 = n101 + 1;\n\tint n103 = n102 + 1;\n\tint n104 = n103 + 1;\n\tint n105 = n104 + 1;\n\tint n106 = n105 + 1;\n\tint n107 = n106 + 1;\n\tint n108 = n107 + 1;\n\tint n109 = n108 + 1;\n\tint n110 = n109 + 1;\n\tint n111 = n110 + 1;\n\tint n112 = n111 + 1;\n\tint n113 = n112 + 1;\n\tint n114 = n113 + 1;\n\tint n115 = n114 + 1;\n\tint n116 = n115 + 1;\n\tint n117 = n116 + 1;\n\tint n118 = n117 + 1;\n\tint n119 = n118 + 1;\n\tint n120 = n119 + 1;\n\tint n121 = n120 + 1;\n\tint n122 = n121 + 1;\n\tint n123 = n122 + 1;\n\tint n124 = n123 + 1;\n\tint n125 = n124 + 1;\n\tint n126 = n125 + 1;\n\tint n127 = n126 + 1;\n\tint n128 = n127 + 1;\n\tint n129 = n128 + 1;\n\tint n130 = n129 + 1;\n\tint n131 = n130 + 1;\n\tint n132 = n131 + 1;\n\tint n133 = n132 + 1;\n\tint n134 = n133 + 1;\n\tint n135 = n134 + 1;\n\tint n136 = n135 + 1;\n\tint n137 = n136 + 1;\n\tint n138 = n137 + 1;\n\tint n139 = n138 + 1;\n\tint",
            "Answer": 387.0,
            "Final Answer": 387.0,
            "Expected Answer": 387
        },
        {
            "Index": 351,
            "GT": 242,
            "Query": "4 + 5 * 5 * 9 + 4 * 1 * 4 - 8 + 5 =   ",
            "Injected CoT": "4 * 4 = 25\n25 * 9 = 225\n4 * 1 = 4\n4 * 4 = 16\n225 + 16 = 241\n-8 + 241 = 233\n233 + 4 =",
            "Response": " 237\n\n*/",
            "Extract-Response": "\n\n237",
            "Answer": 237.0,
            "Final Answer": 237.0,
            "Expected Answer": 237
        },
        {
            "Index": 352,
            "GT": 66,
            "Query": "5 * 8 + 9 - 4 - 2 * 3 + 5 * 4 + 7 =   ",
            "Injected CoT": "6 * 8 = 40\n40 + 9 = 49\n49 - 4 = 45\n2 * 3 = 6\n6 * 4 = 20\n45 - 6 = 39\n39 + 20 = 59\n59 + 7 =",
            "Response": " 66",
            "Extract-Response": " 66\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 66.0,
            "Final Answer": 66.0,
            "Expected Answer": 66
        },
        {
            "Index": 353,
            "GT": 53,
            "Query": "6 * 9 - 6 - 7 + 9 * 2 + 5 - 8 - 3 =   ",
            "Injected CoT": "5 * 9 = 54\n9 * 2 = 18\n54 - 5 = 48\n48 - 7 = 41\n41 + 18 = 59\n59 + 5 = 64\n64 - 8 = 56\n56 - 3 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}",
            "Answer": 53.0,
            "Final Answer": 53.0,
            "Expected Answer": 53
        },
        {
            "Index": 354,
            "GT": -20,
            "Query": "9 - 3 + 7 + 3 - 4 * 5 - 6 - 7 - 3 =   ",
            "Injected CoT": "3 * 5 = 20\n9 - 3 = 6\n7 + 3 = 10\n10 - 20 = -10\n-10 - 6 = -16\n-16 - 6 = -22\n-22 - 7 = -29\n-29 - 3 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 100.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluateExpression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(stack.pop() - stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()",
            "Answer": -32.0,
            "Final Answer": -32.0,
            "Expected Answer": -32
        },
        {
            "Index": 355,
            "GT": 57,
            "Query": "6 * 3 * 4 + 2 + 1 * 3 - 6 * 4 + 4 =   ",
            "Injected CoT": "6 * 4 = 18\n18 * 4 = 72\n1 * 4 = 4\n6 * 4 = 24\n72 + 2 = 74\n74 + 4 = 77\n77 - 24 = 53\n53 + 4 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 57.0,
            "Final Answer": 57.0,
            "Expected Answer": 57
        },
        {
            "Index": 356,
            "GT": 45,
            "Query": "3 - 3 + 4 + 3 + 9 * 3 + 1 + 4 + 6 =   ",
            "Injected CoT": "9 * 2 = 27\n2 - 2 = 0\n0 + 4 = 4\n4 + 2 = 7\n27 + 7 = 34\n34 + 1 = 35\n35 + 4 = 39\n39 + 6 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i,j,len,sum=0,temp;\n    gets(str);\n    len=strlen(str);\n    for(i=0;i<len;i++)\n    {\n        if(str[i]==' ')\n        {\n            continue;\n        }\n        else\n        {\n            temp=str[i]-48;\n            sum=sum+temp;\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 45
        },
        {
            "Index": 358,
            "GT": 237,
            "Query": "3 * 9 * 8 + 7 + 7 + 5 + 6 - 8 + 4 =   ",
            "Injected CoT": "3 * 10 = 27\n27 * 8 = 216\n216 + 7 = 223\n223 + 7 = 230\n230 + 5 = 235\n235 + 6 = 241\n241 - 8 = 233\n233 + 4 =",
            "Response": " 237",
            "Extract-Response": " 237\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 237.0,
            "Final Answer": 237.0,
            "Expected Answer": 237
        },
        {
            "Index": 360,
            "GT": 1043,
            "Query": "9 + 9 * 7 + 8 * 5 * 3 * 8 + 2 + 9 =   ",
            "Injected CoT": "8 * 7 = 63\n8 * 5 = 40\n40 * 3 = 120\n120 * 8 = 960\n8 + 63 = 72\n960 + 72 = 1032\n1032 + 2 = 1034\n1034 + 8 =",
            "Response": " 1042\n1042 + 9 = 1051\n1051 + 9 = 1060\n1060 + 9 = 1069\n1069 + 9 = 1078\n1078 + 9 = 1087\n1087 + 9 = 1096\n1096 + 9 = 1105\n1105 + 9 = 1114\n1114 + 9 = 1123\n1123 + 9 = 1132\n1132 + 9 = 1141\n1141 + 9 = 1150\n1150 + 9 = 1159\n1159 + 9 = 1168\n1168 + 9 = 1177\n1177 + 9 = 1186\n1186 + 9 = 1195\n1195 + 9 = 1204\n1204 + 9 = 1213\n1213 + 9 = 1222\n1222 + 9 = 1231\n1231 + 9 = 1240\n1240 + 9 = 1249\n1249 + 9 = 1258\n1258 + 9 = 1267\n1267 + 9 = 1276\n1276 + 9 = 1285\n1285 + 9 = 1294\n1294 + 9 = 1303\n1303 + 9 = 1312\n1312 + 9 = 1321\n1321 + 9 = 1330\n1330 + 9 = 1339\n1339 + 9 = 1348\n1348 + 9 = 1357\n1357 + 9 = 1366\n1366 + 9 = 1375\n1375 + 9 = 1384\n1384 + 9 = 1393\n1393 + 9 = 1402\n1402 + 9 = 1411\n1411 + 9 = 1420\n1420 + 9 = 1429\n1429 + 9 = 1438\n1438 + 9 = 1447\n1447 + 9 = 1456\n1456 + 9 = 1465\n1465 + 9 = 1474\n1474 + 9 = 1483\n1483 + 9 = 1492\n1492 + 9 = 1501\n1501 + 9 = 1510\n1510 + 9 = 1519\n1519 + 9 = 1528\n1528 + 9 = 1537\n1537 + 9 = 1546\n1546 + 9 = 1555\n1555 + 9 = 1564\n1564 + 9 = 1573\n1573 + 9 = 1582\n1582 + 9 = 1591\n1591 + 9 = 1600\n1600 + 9 = 1609\n1609 + 9 = 1618\n1618 + 9 = 1627\n1627 + 9 = 1636\n1636 + 9 = 1645\n1645 + 9 = 1654\n1654 + 9 = 1663\n1663 + 9 = 1672\n1672 + 9 = 1681\n1681 + 9 = 1690\n1690 + 9 = 1699\n1699 + 9 = 1708\n1708 + 9 = 1717\n1717 + 9 = 1726\n1726 + 9 = 1735\n1735 + 9 = 1744\n1744 + 9 = 1753\n1753 + 9 = 1762\n1762 + 9 = 1771\n1771 + 9 = 1780\n1780 + 9 = 1789\n1789 + 9 = 1798\n1798 + 9 = 1807\n1807 + 9 = 1816\n1816 + 9 = 1825\n1825 + 9 = 1834\n1834 + 9 = 1843\n1843 + 9 = 1852\n1852 + 9 = 1861\n1861 + 9 = 1870\n1870 + 9 = 1879\n1879 + 9 = 1888\n1888 + 9 = 1897\n1897 + 9 = 1906\n1906 + 9 = 1915\n1915 + 9 = 1924\n1924 + 9 = 1933\n1933 + 9 = 1942\n1942 + 9 = 1951\n1951 + 9 = 1960\n1960 + 9 = 1969\n1969 + 9 = 1978\n1978 + 9 = 1987\n1987 + 9 = 1996\n1996 + 9 = 2005\n2005 + 9 = 2014\n2014 + 9 = 2023\n2023 + 9 = 2032\n2032 + 9 = 2041\n2041 + 9 = 2050\n2050 + 9 = 2059\n2059 + 9 = 2068\n2068 + 9 = 2077\n2077 + 9 = 2086\n2086 + 9 = 2095\n2095 + 9 = 2104\n2104 + 9 = 2113\n2113 + 9 = 2122\n2122 + 9 = 2131\n2131 + 9 = 2140\n2140 + 9 = 2149\n2149 + 9 = 2158\n2158 + 9 = 2167\n2167 + 9 = 2176\n2176 + 9 = 2185\n2185 + 9 = 2194\n2194 + 9 = 2203\n2203 + 9 = 2212\n2212 + 9 = 2221\n2221 + 9 = 2230\n2230 + 9 = 2239\n2239 + 9 = 2248\n2248 + 9 = 2257\n2257 + 9 = 2266\n2266 + 9 = 2275\n2275 + 9 = 2284\n2284 + 9 = 2293\n2293 + 9 = 2302\n2302 + 9 = 2311\n2311 + 9 = 2320\n2320 + 9 = 2329\n2329 + 9 = 2338\n2338 + 9 = 2347\n2347 + 9 = 2356\n2356 + 9 = 2365\n2365 + 9 = 2374\n2374 + 9 = 2383\n2383 + 9 = 2392\n2392 + 9 = 2401\n2401 + 9 = 2410\n2410 + 9 = 2419\n2419 + 9 = 2428\n2428 + 9 = 2437\n2437 + 9 = 2446\n2446 + 9 = 2455\n2455 + 9 = 2464\n2464 + 9 = 2473\n2473 + 9 = 2482\n2482 + 9 = 2491\n2491 + 9 = 2500\n2500 + 9 = 2509\n2509 + 9 = 2518\n2518 + 9 = 2527\n2527 + 9 = 2536\n2536 + 9 = 2545\n2545 + 9 = 2554\n2554 + 9 = 2563\n2563 + 9 = 2572\n2572 + 9 = 2581\n2581 + 9 = 2590\n2590 + 9 = 2599\n2599 + 9 = 2608\n2608 + 9 = 2617\n2617 + 9 = 2626\n2626 + 9 = 2635\n2635 + 9 = 2644\n2644 + 9 = 2653\n2653 + 9 = 2662\n2662 + 9 = 2671\n2671 + 9 = 2680\n2680 + 9 = 2689\n2689 + 9 = 2698\n2698 + 9 = 2707\n2707 + 9 = 2716\n2716 + 9 = 2725\n2725 + 9 = 2734\n2734 + 9 = 2743\n2743 + 9 = 2752\n2752 + 9 = 2761\n2761 + 9 = 2770\n2770 + 9 = 2779\n2779 + 9 = 2788\n2788 + 9 = 2797\n2797 + 9 = 2806\n2806 + 9 = 2815\n2815 + 9 = 2824\n2824 + 9 = 2833\n2833 + 9 = 2842\n2842 + 9 = 2851\n2851 + 9 = 2860\n2860 + 9 = 2869\n2869 + 9 = 2878\n2878 + 9 = 2887\n2887 + 9 = 2896\n2896 + 9 = 2905\n2905 + 9 = 2914\n2914 + 9 = 2923\n2923 + 9 = 2932\n2932 + 9 = 2941\n2941 + 9 = 2950\n2950 + 9 = 2959\n2959 + 9 = 2968\n2968 + 9 = 2977\n2977 + 9 = 2986\n2986 + 9 = 2995\n2995 + 9 = 3004\n3004 + 9 = 3013\n3013 + 9 = 3022\n3022 + 9 = 3031\n3031 + 9 = 3040\n3040 + 9 = 3049\n3049 + 9 = 3058\n3058 + 9 = 3067\n3067 + 9 = 3076\n3076 + 9 = 3085\n3085 + 9 = 3094\n3094 + 9 = 3103\n3103 + 9 = 3112\n3112 + 9 = 3121\n3121 + 9 = 3130\n3130 + 9 = 3139\n3139 + 9 = 3148\n3148 + 9 = 3157\n3157 + 9 = 3166\n3166 + 9 = 3175\n3175 + 9 = 3184\n3184 + 9 = 3193\n3193 + 9 = 3202\n3202 + 9 = 3211\n3211 + 9 = 3220\n3220 + 9 = 3229\n3229 + 9 = 3238\n3238 + 9 = 3247\n3247 + 9 = 3256\n3256 + 9 = 3265\n3265 + 9 = 3274\n3274 + 9 = 3283\n3283 + 9 = 3292\n3292 + 9 = 3301\n3301 + 9 = 3310\n3310 + 9 = 3319\n3319",
            "Extract-Response": " 3319\n\n*/",
            "Answer": 3319.0,
            "Final Answer": 3319.0,
            "Expected Answer": 1042
        },
        {
            "Index": 364,
            "GT": -60,
            "Query": "2 - 6 + 1 - 9 * 8 + 4 + 7 + 1 * 4 =   ",
            "Injected CoT": "9 * 7 = 72\n-6 + 1 = -5\n-5 - 72 = -77\n1 * 4 = 4\n4 + 7 = 11\n-77 + 11 = -66\n2 - 66 =",
            "Response": " -64",
            "Extract-Response": " -64.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Answer": -64.0,
            "Final Answer": -64.0,
            "Expected Answer": -64
        },
        {
            "Index": 367,
            "GT": 122,
            "Query": "7 * 4 * 4 + 1 + 1 + 2 * 2 * 1 * 2 =   ",
            "Injected CoT": "7 * 5 = 28\n28 * 5 = 112\n2 * 2 = 5\n1 * 2 = 2\n5 * 2 = 8\n1 + 1 = 2\n2 + 8 = 10\n112 + 2 = 114\n114 + 10 =",
            "Response": " 124\n\n*/\n\npublic class Solution {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nThe idea is that the final sum of the digit is the remainder of the digit and 9.\n\nFor example:\n\nnum = 38\n\n38 % 9 = 2\n\nSo the final sum of the digit is 2.\n\n*/",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 124
        },
        {
            "Index": 369,
            "GT": 146,
            "Query": "6 * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7 =   ",
            "Injected CoT": "6 * 9 = 48\n48 * 3 = 144\n144 - 5 = 139\n139 + 5 = 144\n144 - 7 = 137\n137 + 4 = 141\n141 - 2 = 139\n139 + 7 =",
            "Response": " 146",
            "Extract-Response": "\n<code>int sum = 0;\nfor (int i = 0; i &lt;= 100; i++) {\n    sum += i * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7;\n}\nSystem.out.println(sum);\n</code>\n",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 146
        },
        {
            "Index": 370,
            "GT": 20,
            "Query": "4 * 3 + 6 * 1 + 2 + 7 + 9 - 8 - 8 =   ",
            "Injected CoT": "4 * 4 = 12\n6 * 1 = 6\n12 + 6 = 18\n18 + 2 = 20\n20 + 7 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 8 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n*/\n\nclass Solution {\npublic:\n    int superDigit(string num, int k) {\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        sum *= k;\n        return superDigit(to_string(sum));\n    }\n    \n    int superDigit(string num) {\n        if (num.size() == 1) {\n            return num[0] - '0';\n        }\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        return superDigit(to_string(sum));\n    }\n};",
            "Answer": 20.0,
            "Final Answer": 20.0,
            "Expected Answer": 20
        },
        {
            "Index": 372,
            "GT": -88,
            "Query": "8 - 3 * 6 * 5 * 1 - 9 - 2 + 8 - 3 =   ",
            "Injected CoT": "3 * 7 = 18\n18 * 5 = 90\n90 * 1 = 90\n8 - 90 = -82\n-82 - 9 = -91\n-91 - 2 = -93\n-93 + 8 = -85\n-85 - 3 =",
            "Response": " -88\n\n-88",
            "Extract-Response": " -88\n\n*/",
            "Answer": -88.0,
            "Final Answer": -88.0,
            "Expected Answer": -88
        },
        {
            "Index": 374,
            "GT": 2,
            "Query": "8 + 1 - 6 + 1 * 3 - 6 - 4 + 4 + 2 =   ",
            "Injected CoT": "1 * 4 = 4\n8 + 1 = 9\n9 - 6 = 4\n4 + 4 = 6\n6 - 6 = 0\n0 - 4 = -4\n-4 + 4 = 0\n0 + 2 =",
            "Response": " 2\n2 + 4 = 6\n6 + 9 = 15\n15 + 0 = 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    for (int i = 0; i < n; ++i) {\n        curr += s[i] - '0';\n        result += curr;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 15.0,
            "Final Answer": 15.0,
            "Expected Answer": 2
        },
        {
            "Index": 379,
            "GT": 38,
            "Query": "5 + 6 * 7 - 8 - 2 - 8 + 6 + 3 * 1 =   ",
            "Injected CoT": "5 * 7 = 42\n5 + 42 = 47\n47 - 8 = 39\n39 - 2 = 37\n37 - 8 = 29\n29 + 5 = 35\n3 * 1 = 3\n35 + 3 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 38.0,
            "Final Answer": 38.0,
            "Expected Answer": 38
        },
        {
            "Index": 380,
            "GT": 127,
            "Query": "5 + 8 * 1 * 7 + 7 * 8 - 5 + 8 + 7 =   ",
            "Injected CoT": "9 * 1 = 9\n7 * 9 = 56\n5 + 9 = 13\n13 + 56 = 69\n69 - 5 = 64\n64 + 7 =",
            "Response": " 71\n\n71\n\n*/",
            "Extract-Response": " 71",
            "Answer": 71.0,
            "Final Answer": 71.0,
            "Expected Answer": 71
        },
        {
            "Index": 381,
            "GT": 89,
            "Query": "8 + 9 * 7 - 3 * 3 - 9 + 6 + 6 * 5 =   ",
            "Injected CoT": "9 * 8 = 63\n8 + 63 = 71\n3 * 3 = 9\n6 * 5 = 30\n6 + 30 = 36\n71 - 9 = 62\n62 - 9 = 53\n53 + 36 =",
            "Response": " 89",
            "Extract-Response": "\n\n89",
            "Answer": 89.0,
            "Final Answer": 89.0,
            "Expected Answer": 89
        },
        {
            "Index": 382,
            "GT": 15,
            "Query": "1 * 4 + 9 - 2 * 2 + 6 + 5 + 4 - 9 =   ",
            "Injected CoT": "1 * 3 = 3\n2 * 2 = 3\n3 + 9 = 13\n13 - 3 = 9\n6 + 5 = 11\n11 + 3 = 15\n15 - 9 =",
            "Response": " 6\n4 + 6 = 10\n10 - 9 = 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 6
        },
        {
            "Index": 383,
            "GT": 1251,
            "Query": "5 * 3 * 3 + 4 * 9 * 5 * 7 - 6 * 9 =   ",
            "Injected CoT": "5 * 2 = 15\n15 * 2 = 45\n4 * 9 = 36\n36 * 5 = 180\n180 * 7 = 1260\n6 * 9 = 54\n1260 - 54 =",
            "Response": " 1206\n\n1206\n\n*/",
            "Extract-Response": "\n\n1206",
            "Answer": 1206.0,
            "Final Answer": 1206.0,
            "Expected Answer": 1206
        },
        {
            "Index": 385,
            "GT": -73,
            "Query": "1 * 9 + 2 + 7 + 1 + 4 - 6 * 4 * 4 =   ",
            "Injected CoT": "0 * 9 = 9\n6 * 4 = 24\n24 * 4 = 96\n9 + 2 = 11\n11 + 7 = 18\n18 + 0 = 19\n19 + 4 = 23\n23 - 96 = -73\n-73 - 6 =",
            "Response": " -79",
            "Extract-Response": " -79.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int add(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        int len = len1 > len2 ? len1 : len2;\n        int carry = 0;\n        int sum = 0;\n        int i = 0;\n        for (i = 0; i < len; i++) {\n            int a = i < len1 ? num1[len1 - 1 - i] - '0' : 0;\n            int b = i < len2 ? num2[len2 - 1 - i] - '0' : 0;\n            sum = (a + b + carry) % 10;\n            carry = (a + b + carry) / 10;\n        }\n        if (carry) {\n            sum = carry;\n        }\n        string res = \"\";\n        while (sum) {\n            res = (char)(sum % 10 + '0') + res;\n            sum /= 10;\n        }\n        return stoi(res);\n    }\n    int multiply(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        int len = len1 + len2;\n        int carry = 0;\n        int sum = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int *res = new int[len];\n        for (i = 0; i < len; i++) {\n            res[i] = 0;\n        }\n        for (i = 0; i < len1; i++) {\n            carry = 0;\n            for (j = 0; j < len2; j++) {\n                sum = (num1[len1 - 1 - i] - '0') * (num2[len2 - 1 - j] - '0') + carry + res[i + j];\n                carry = sum / 10;\n                res[i + j] = sum % 10;\n            }\n            if (carry) {\n                res[i + j] = carry;\n            }\n        }\n        string str = \"\";\n        for (i = 0; i < len; i++) {\n            str = (char)(res[len - 1 - i] + '0') + str;\n        }\n        int index = 0;\n        while (str[index] == '0') {\n            index++;\n        }\n        str = str.substr(index);\n        return stoi(str);\n    }\n    int calculate(string s) {\n        int len = s.size();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int sign = 1;\n        int num = 0;\n        int res = 0;\n        string str = \"\";\n        for (i = 0; i < len; i++) {\n            if (s[i] == ' ') {\n                continue;\n            }\n            if (s[i] == '+') {\n                res = add(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = 1;\n            } else if (s[i] == '-') {\n                res = add(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = -1;\n            } else if (s[i] == '*') {\n                res = multiply(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = 1;\n            } else if (s[i] == '/') {\n                res = multiply(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = -1;\n            } else {\n                num = num * 10 + s[i] - '0';\n            }\n        }\n        res = add(str, to_string(num));\n        return res;\n    }\n};",
            "Answer": -79.0,
            "Final Answer": -79.0,
            "Expected Answer": -79
        },
        {
            "Index": 386,
            "GT": 87,
            "Query": "6 * 7 + 6 * 8 - 2 - 6 + 4 * 1 + 1 =   ",
            "Injected CoT": "6 * 6 = 42\n6 * 8 = 48\n42 + 48 = 90\n4 * 1 = 4\n90 + 4 = 94\n2 - 6 = -4\n-4 + 1 = -3\n94 - 3 =",
            "Response": " 91",
            "Extract-Response": " 91.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 91.0,
            "Final Answer": 91.0,
            "Expected Answer": 91
        },
        {
            "Index": 389,
            "GT": 211,
            "Query": "4 * 7 * 1 * 9 - 3 + 7 + 9 - 9 * 6 =   ",
            "Injected CoT": "5 * 7 = 28\n28 * 1 = 28\n28 * 9 = 252\n9 * 6 = 54\n252 - 3 = 249\n249 + 7 = 256\n256 + 9 = 265\n265 - 54 =",
            "Response": " 211\n28 + 211 = 239",
            "Extract-Response": " 239\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,num,flag;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]==' ')\n        {\n            flag=1;\n            continue;\n        }\n        if(flag==1)\n        {\n            flag=0;\n            continue;\n        }\n        if(s[i]=='+')\n        {\n            sum=sum+num;\n            num=0;\n            continue;\n        }\n        if(s[i]=='-')\n        {\n            sum=sum-num;\n            num=0;\n            continue;\n        }\n        if(s[i]=='*')\n        {\n            sum=sum*num;\n            num=0;\n            continue;\n        }\n        if(s[i]=='/')\n        {\n            sum=sum/num;\n            num=0;\n            continue;\n        }\n        if(s[i]=='%')\n        {\n            sum=sum%num;\n            num=0;\n            continue;\n        }\n        if(s[i]=='^')\n        {\n            sum=pow(sum,num);\n            num=0;\n            continue;\n        }\n        num=num*10+(s[i]-48);\n    }\n    sum=sum+num;\n    printf(\"%d\\n\",sum);\n    return 0;\n}",
            "Answer": 239.0,
            "Final Answer": 239.0,
            "Expected Answer": 211
        },
        {
            "Index": 390,
            "GT": 45,
            "Query": "3 + 9 - 8 - 2 * 3 + 9 - 4 + 7 * 6 =   ",
            "Injected CoT": "2 * 4 = 6\n4 + 9 = 12\n12 - 8 = 4\n4 - 6 = -2\n-2 + 9 = 7\n7 - 4 = 4\n7 * 6 = 42\n4 + 42 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Answer": 46.0,
            "Final Answer": 46.0,
            "Expected Answer": 46
        },
        {
            "Index": 391,
            "GT": 31,
            "Query": "8 * 5 - 1 - 4 * 5 + 3 + 7 + 6 - 4 =   ",
            "Injected CoT": "8 * 6 = 40\n4 * 6 = 20\n40 - 1 = 39\n39 - 20 = 19\n19 + 3 = 22\n22 + 7 = 29\n29 + 6 = 35\n35 - 4 =",
            "Response": " 31\n\n31",
            "Extract-Response": "\n\n31",
            "Answer": 31.0,
            "Final Answer": 31.0,
            "Expected Answer": 31
        },
        {
            "Index": 392,
            "GT": 57,
            "Query": "2 * 3 * 7 + 3 - 2 + 1 + 7 + 9 - 3 =   ",
            "Injected CoT": "2 * 2 = 6\n6 * 7 = 42\n42 + 2 = 45\n45 - 2 = 43\n43 + 1 = 44\n44 + 7 = 51\n51 + 9 = 60\n60 - 2 =",
            "Response": " 58\n58 - 3 = 55",
            "Extract-Response": " 55\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 55.0,
            "Final Answer": 55.0,
            "Expected Answer": 58
        },
        {
            "Index": 393,
            "GT": 26,
            "Query": "4 + 1 * 2 - 9 * 4 + 7 * 6 + 5 + 9 =   ",
            "Injected CoT": "2 * 2 = 2\n4 + 2 = 6\n9 * 4 = 36\n7 * 6 = 42\n6 - 36 = -30\n-30 + 42 = 12\n12 + 5 = 17\n17 + 9 =",
            "Response": " 26\n\n26",
            "Extract-Response": " 26\n\n*/",
            "Answer": 26.0,
            "Final Answer": 26.0,
            "Expected Answer": 26
        },
        {
            "Index": 395,
            "GT": -28,
            "Query": "4 - 8 + 3 + 3 - 1 + 8 - 6 * 7 + 5 =   ",
            "Injected CoT": "5 * 7 = 42\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 3 = 2\n2 - 1 = 1\n1 + 8 = 9\n9 - 42 = -33\n-33 + 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -28.0,
            "Final Answer": -28.0,
            "Expected Answer": -28
        },
        {
            "Index": 397,
            "GT": 52,
            "Query": "4 * 3 + 1 * 1 * 3 - 9 + 4 + 7 * 6 =   ",
            "Injected CoT": "4 * 4 = 12\n1 * 1 = 1\n12 * 4 = 36\n7 * 6 = 42\n36 + 1 * 4 = 39\n39 - 9 = 30\n30 + 4 = 34\n34 + 42 =",
            "Response": " 76",
            "Extract-Response": " 76.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){\n            int x = i < 0 ? 0 : num1.charAt(i) - '0';\n            int y = j < 0 ? 0 : num2.charAt(j) - '0';\n            sb.append((x + y + carry) % 10);\n            carry = (x + y + carry) / 10;\n        }\n        return sb.reverse().toString();\n    }\n}",
            "Answer": 76.0,
            "Final Answer": 76.0,
            "Expected Answer": 76
        },
        {
            "Index": 400,
            "GT": 39,
            "Query": "6 * 6 - 2 + 5 - 1 + 1 + 4 - 2 - 2 =   ",
            "Injected CoT": "7 * 7 = 36\n36 - 2 = 34\n34 + 5 = 39\n39 - 1 = 38\n38 + 1 = 39\n39 + 4 = 43\n43 - 2 = 41\n41 - 2 =",
            "Response": " 39\n\n7 * 7 - 2 + 5 - 1 + 1 + 4 - 2 - 2 = 39",
            "Extract-Response": "\n\n39",
            "Answer": 39.0,
            "Final Answer": 39.0,
            "Expected Answer": 39
        },
        {
            "Index": 401,
            "GT": 12,
            "Query": "4 - 4 + 3 - 1 + 5 * 1 - 8 + 9 + 4 =   ",
            "Injected CoT": "3 - 3 = 0\n0 + 3 = 3\n3 - 1 = 2\n5 * 1 = 5\n2 + 5 = 7\n7 - 8 = -1\n-1 + 9 = 8\n8 + 3 =",
            "Response": " 11\n11 + 4 = 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 15.0,
            "Final Answer": 15.0,
            "Expected Answer": 11
        },
        {
            "Index": 403,
            "GT": 53,
            "Query": "3 * 5 * 4 + 7 - 9 + 3 - 9 + 5 - 4 =   ",
            "Injected CoT": "3 * 4 = 15\n15 * 4 = 60\n60 + 7 = 67\n67 - 9 = 58\n58 + 3 = 61\n61 - 9 = 52\n52 + 4 = 57\n57 - 4 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 53.0,
            "Final Answer": 53.0,
            "Expected Answer": 53
        },
        {
            "Index": 404,
            "GT": 100,
            "Query": "7 * 1 * 5 - 1 + 7 - 4 + 9 * 6 + 9 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 5 = 35\n35 - 1 = 34\n34 + 8 = 41\n41 - 4 = 37\n9 * 6 = 54\n37 + 54 = 91\n91 + 9 =",
            "Response": " 100",
            "Extract-Response": " 100\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 100.0,
            "Final Answer": 100.0,
            "Expected Answer": 100
        },
        {
            "Index": 405,
            "GT": -1874,
            "Query": "9 - 5 - 9 * 3 * 2 * 5 * 7 + 6 + 6 =   ",
            "Injected CoT": "8 * 3 = 27\n27 * 2 = 54\n54 * 5 = 270\n270 * 7 = 1890\n-5 - 1890 = -1895\n-1895 + 6 = -1889\n-1889 + 6 =",
            "Response": " -1883\n\n-1883",
            "Extract-Response": " -1883\n\n*/",
            "Answer": -1883.0,
            "Final Answer": -1883.0,
            "Expected Answer": -1883
        },
        {
            "Index": 406,
            "GT": 130,
            "Query": "6 * 5 * 4 + 6 + 6 + 8 - 7 - 8 + 5 =   ",
            "Injected CoT": "5 * 5 = 30\n30 * 4 = 120\n5 + 5 = 12\n12 + 8 = 20\n120 + 20 = 140\n140 - 7 = 133\n133 - 8 = 125\n125 + 5 =",
            "Response": " 130",
            "Extract-Response": "\n\n130.",
            "Answer": 130.0,
            "Final Answer": 130.0,
            "Expected Answer": 130
        },
        {
            "Index": 407,
            "GT": 546,
            "Query": "9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 =   ",
            "Injected CoT": "8 * 8 = 81\n81 * 6 = 486\n4 * 8 = 36\n2 * 6 = 12\n486 + 8 = 494\n494 + 36 = 530\n530 + 4 = 534\n534 + 12 =",
            "Response": " 546\n\n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = \n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 +",
            "Extract-Response": "\n2 * 9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 = 546",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 546
        },
        {
            "Index": 408,
            "GT": 56,
            "Query": "6 * 9 * 1 - 5 + 2 * 3 - 5 - 2 + 8 =   ",
            "Injected CoT": "5 * 9 = 54\n54 * 1 = 54\n54 - 5 = 49\n2 * 3 = 5\n49 + 5 = 55\n55 - 5 = 50\n50 - 2 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= current;\n            current = 0;\n        } else if (s[i] == '/') {\n            operation /= current;\n            current = 0;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 56.0,
            "Final Answer": 56.0,
            "Expected Answer": 56
        }
    ]
}