{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "First-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 7,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\First-Step-Single-Mod-Off-By-One-Keep-Last\\First-Step-Single-Mod-Off-By-One-Keep-Last-7-step-test-text-davinci-002.json",
    "Total": 250,
    "Total Accurate": 135,
    "Total Accuracy": 54.0,
    "Percent of Answers Containing CoT": 15.2,
    "CoT Accuracy": 15.789473684210526,
    "Non-CoT Accuracy": 60.84905660377359,
    "ci_radius": 6.1781985723995625,
    "ci_upper": 60.178198572399566,
    "ci_lower": 47.821801427600434,
    "Matches Expected": 74.0,
    "ME ci_radius": 5.437366421347747,
    "ME ci_upper": 79.43736642134775,
    "ME ci_lower": 68.56263357865225,
    "Dataset Index": 9,
    "Trials": [
        {
            "Index": 0,
            "GT": -19,
            "Query": "2 - 1 * 6 * 4 + 1 * 4 + 4 - 5 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 4 = 24\n2 - 24 = -22\n1 * 4 = 4\n-22 + 4 = -18\n4 + 4 = 8\n-18 - 5 =",
            "Response": " -23\n\n-23",
            "Extract-Response": " -23\n\n*/",
            "Answer": -23.0,
            "Final Answer": -23.0,
            "Expected Answer": -23
        },
        {
            "Index": 3,
            "GT": 9,
            "Query": "2 * 6 + 4 + 8 - 4 + 2 - 7 - 6 =   ",
            "Injected CoT": "2 * 7 = 12\n12 + 4 = 16\n16 + 8 = 24\n24 - 4 = 20\n20 + 2 = 22\n22 - 7 = 15\n15 - 7 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe length of the given array won't exceed 10000.\nAll the integers in the given array are in the range of [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 8.0,
            "Final Answer": 8.0,
            "Expected Answer": 8
        },
        {
            "Index": 4,
            "GT": 70,
            "Query": "4 * 6 * 3 + 2 - 2 + 1 - 6 + 3 =   ",
            "Injected CoT": "4 * 7 = 24\n24 * 3 = 72\n72 + 2 = 74\n74 - 2 = 72\n72 + 1 = 73\n73 - 7 = 67\n67 + 3 =",
            "Response": " 70\n\n70",
            "Extract-Response": "\n\n70",
            "Answer": 70.0,
            "Final Answer": 70.0,
            "Expected Answer": 70
        },
        {
            "Index": 5,
            "GT": 228,
            "Query": "2 + 3 * 8 + 9 + 6 * 4 * 8 + 1 =   ",
            "Injected CoT": "2 * 8 = 24\n2 + 24 = 26\n4 * 8 = 32\n32 * 6 = 192\n192 * 8 = 1536\n9 + 1 = 10\n26 + 10 = 36\n36 + 1536 =",
            "Response": " 1572\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\tchar a[100], b[100];\n\t\n\tprintf(\"Enter a number: \");\n\tscanf(\"%s\", a);\n\t\n\tl = strlen(a);\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '0')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '1')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '2')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '3')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '4')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '5')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '6')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '7')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '8')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '9')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '0')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '1')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '2')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '3')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '4')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '5')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '6')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '7')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '8')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '9')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '0')\n\t\t{",
            "Extract-Response": "\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '1')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '2')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '3')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '4')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '5')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '6')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '7')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '8')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '9')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '0')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '1')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '2')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '3')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '4')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '5')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '6')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '7')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '8')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '9')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '0')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l; i++)\n\t{\n\t\tif(a[i] == '1')\n\t\t{\n\t\t\tfor(j = i; j < l; j++)\n\t\t\t{\n\t\t\t\ta[j] = a[j + 1];\n\t\t\t}\n\t\t\tl--;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < l",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 1572
        },
        {
            "Index": 6,
            "GT": -81,
            "Query": "9 - 6 - 4 - 5 - 3 - 8 * 1 * 9 =   ",
            "Injected CoT": "7 * 1 = 7\n9 - 6 = 3\n3 - 4 = -1\n-1 - 5 = -6\n-6 - 3 = -9\n-9 - 7 = -17\n-17 * 9 =",
            "Response": " -153\n\n153 is not a palindrome.\n\n7 - 1 = 6\n6 - 8 = -2\n-2 * 9 = -18\n\n18 is not a palindrome.\n\n153 + 18 = 171\n\n171 is a palindrome.\n\nAs you can see, it's not easy to add two big numbers together by hand. Computers can do it much faster.\n\nTask\n\nFor this Kata you will have to forget how to add two numbers together.\n\nYou need to return the sum of two numbers... but both numbers are written in reverse order.\n\nFor example:\n\nadd(123, 321) = 444\nadd(555, 555) = 1110\nadd(900, 1) = 901\nadd(54321, 12345) = 66666\n\nIf the inputs are invalid you should return 0 (as 0 + 0 = 0).\n\nNotes\n\nThe input will always be two numbers (integers or strings), so there is no need for type or error checking.\n\nThe numbers should be written in reverse order and the result should be reversed too, e.g.\n\nadd(123, 321) = 444\n-->\n\nadd(321, 123) = 444\n<--\n\n444\n\nThe result will always be positive.\n\n*/\n\nfunction add(a, b) {\n  if (a === 0 && b === 0) return 0;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  let result = 0;\n  let carry = 0;\n  let i = 0;\n  while (a > 0 || b > 0 || carry > 0) {\n    let aDigit = a % 10;\n    let bDigit = b % 10;\n    let sum = aDigit + bDigit + carry;\n    carry = Math.floor(sum / 10);\n    result += (sum % 10) * Math.pow(10, i);\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n    i++;\n  }\n  return result;\n}",
            "Extract-Response": "\n\nfunction add(a, b) {\n  return Number(a.toString().split('').reverse().join('')) + Number(b.toString().split('').reverse().join(''));\n}",
            "Answer": "",
            "Final Answer": "",
            "Expected Answer": -153
        },
        {
            "Index": 7,
            "GT": 1,
            "Query": "4 - 9 + 2 * 3 + 4 - 5 - 8 + 9 =   ",
            "Injected CoT": "3 * 3 = 6\n4 - 9 = -5\n-5 + 6 = 1\n1 + 4 = 5\n5 - 5 = 0\n0 - 8 = -8\n-8 + 9 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 1
        },
        {
            "Index": 8,
            "GT": -4,
            "Query": "8 * 1 + 6 - 3 - 2 + 1 - 9 - 5 =   ",
            "Injected CoT": "7 * 1 = 7\n7 + 6 = 14\n14 - 3 = 11\n11 - 2 = 9\n9 + 1 = 10\n10 - 9 = 1\n1 - 5 =",
            "Response": " -4\n\n-4",
            "Extract-Response": " -4",
            "Answer": -4.0,
            "Final Answer": -4.0,
            "Expected Answer": -4
        },
        {
            "Index": 10,
            "GT": -63,
            "Query": "2 - 8 - 5 - 5 + 3 + 4 - 6 * 9 =   ",
            "Injected CoT": "-6 * 8 = -54\n2 - 8 = -6\n-6 - 5 = -11\n-11 - 5 = -16\n-16 + 3 = -13\n-13 + 4 = -9\n-9 + (-54) =",
            "Response": " -63",
            "Extract-Response": " -63.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a+b+c, a*(b+c), (a+b)*c, a*b*c)",
            "Answer": -63.0,
            "Final Answer": -63.0,
            "Expected Answer": -63
        },
        {
            "Index": 11,
            "GT": -11,
            "Query": "5 * 1 - 4 - 5 - 6 - 1 + 3 - 3 =   ",
            "Injected CoT": "4 * 1 = 4\n4 - 4 = 1\n1 - 4 = -4\n-4 - 6 = -10\n-10 - 1 = -11\n-11 + 3 = -8\n-8 - 3 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Answer": -11.0,
            "Final Answer": -11.0,
            "Expected Answer": -11
        },
        {
            "Index": 12,
            "GT": -138,
            "Query": "9 * 2 - 7 - 1 + 2 - 5 * 6 * 5 =   ",
            "Injected CoT": "8 * 2 = 18\n18 - 7 = 11\n11 - 1 = 10\n10 + 2 = 12\n5 * 6 = 30\n30 * 5 = 150\n12 - 150 =",
            "Response": " -138",
            "Extract-Response": " -138.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -138.0,
            "Final Answer": -138.0,
            "Expected Answer": -138
        },
        {
            "Index": 13,
            "GT": 176,
            "Query": "4 * 3 + 5 * 5 * 6 + 4 + 5 * 2 =   ",
            "Injected CoT": "4 * 2 = 12\n5 * 5 = 25\n25 * 6 = 150\n5 * 2 = 10\n12 + 150 = 162\n162 + 4 = 166\n166 + 10 =",
            "Response": " 176",
            "Extract-Response": " 176\n</code>\n",
            "Answer": 176.0,
            "Final Answer": 176.0,
            "Expected Answer": 176
        },
        {
            "Index": 14,
            "GT": -33,
            "Query": "2 - 1 + 5 - 8 - 9 - 6 * 4 + 2 =   ",
            "Injected CoT": "5 * 4 = 24\n-1 + 5 = 4\n2 - 4 = -2\n-2 - 9 = -11\n-11 - 24 = -35\n-35 + 2 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}",
            "Answer": -33.0,
            "Final Answer": -33.0,
            "Expected Answer": -33
        },
        {
            "Index": 16,
            "GT": 21,
            "Query": "7 * 2 + 8 - 5 + 2 + 8 - 6 * 1 =   ",
            "Injected CoT": "8 * 2 = 14\n14 + 8 = 22\n22 - 5 = 17\n17 + 2 = 19\n19 + 8 = 27\n6 * 1 = 6\n27 - 6 =",
            "Response": " 21\n\n21",
            "Extract-Response": "\n\n21",
            "Answer": 21.0,
            "Final Answer": 21.0,
            "Expected Answer": 21
        },
        {
            "Index": 17,
            "GT": 36,
            "Query": "5 * 7 + 4 - 2 + 3 + 2 - 5 - 1 =   ",
            "Injected CoT": "5 * 8 = 35\n35 + 4 = 39\n39 - 2 = 37\n37 + 3 = 40\n40 + 2 = 42\n42 - 5 = 37\n37 - 1 =",
            "Response": " 36",
            "Extract-Response": "\n36\n",
            "Answer": 36.0,
            "Final Answer": 36.0,
            "Expected Answer": 36
        },
        {
            "Index": 21,
            "GT": 33,
            "Query": "9 - 4 + 7 - 6 + 2 * 9 * 1 + 9 =   ",
            "Injected CoT": "2 * 8 = 18\n8 - 4 = 5\n7 - 6 = 1\n5 + 1 = 6\n6 + 18 = 24\n24 + 1 = 25\n25 + 8 =",
            "Response": " 33\n33 + 9 = 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}",
            "Answer": 42.0,
            "Final Answer": 42.0,
            "Expected Answer": 33
        },
        {
            "Index": 22,
            "GT": 14,
            "Query": "2 + 5 + 2 + 6 - 1 + 6 - 8 + 2 =   ",
            "Injected CoT": "1 + 5 = 7\n7 + 1 = 9\n9 + 6 = 15\n15 - 1 = 14\n14 + 6 = 20\n20 - 8 = 12\n12 + 1 =",
            "Response": " 13\n13 + 2 = 15\n15 + 2 = 17\n17 + 6 = 23\n23 - 1 = 22\n22 + 5 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n29 + 6 = 35\n35 - 8 = 27\n27 + 2 = 29\n",
            "Extract-Response": "\n\n29",
            "Answer": 29.0,
            "Final Answer": 29.0,
            "Expected Answer": 13
        },
        {
            "Index": 23,
            "GT": 13,
            "Query": "4 * 3 - 3 * 3 + 6 - 4 + 2 * 4 =   ",
            "Injected CoT": "4 * 2 = 12\n2 * 2 = 9\n12 - 9 = 2\n2 * 4 = 8\n6 - 4 = 2\n2 + 8 = 11\n11 + 2 =",
            "Response": " 13",
            "Extract-Response": "\n\n13",
            "Answer": 13.0,
            "Final Answer": 13.0,
            "Expected Answer": 13
        },
        {
            "Index": 24,
            "GT": 14,
            "Query": "5 * 1 + 4 * 9 - 7 - 2 * 5 * 2 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 9 = 36\n2 * 4 = 10\n10 * 2 = 20\n4 + 36 = 41\n41 - 7 = 34\n34 - 20 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": 14
        },
        {
            "Index": 25,
            "GT": 30,
            "Query": "2 * 6 + 9 + 3 * 5 - 5 - 2 + 1 =   ",
            "Injected CoT": "3 * 6 = 12\n3 * 5 = 15\n12 + 9 = 21\n15 - 5 = 10\n10 - 3 = 8\n8 + 1 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0,
            "Expected Answer": 9
        },
        {
            "Index": 26,
            "GT": 58,
            "Query": "4 * 9 + 3 - 9 + 7 * 5 - 8 + 1 =   ",
            "Injected CoT": "4 * 10 = 36\n36 + 3 = 39\n7 * 5 = 35\n39 - 10 = 30\n30 + 35 = 65\n65 - 8 = 57\n57 + 1 =",
            "Response": " 58",
            "Extract-Response": " 58\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Answer": 58.0,
            "Final Answer": 58.0,
            "Expected Answer": 58
        },
        {
            "Index": 27,
            "GT": 72,
            "Query": "5 + 5 * 2 * 9 - 1 - 5 * 4 - 2 =   ",
            "Injected CoT": "4 * 2 = 10\n10 * 9 = 90\n4 * 4 = 20\n4 + 90 = 95\n95 - 1 = 94\n94 - 20 = 74\n74 - 2 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define sz(v) (int)v.size()\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\nconst double pi = 3.1415926535897932384626433832795;\nconst int MOD = 1000000007;\nconst LL LLINF = numeric_limits<LL>::max();\n\nconst int N = 100005;\n\nint main() {\n    IOS\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == 'Q') {\n            for (int j = i+1; j < n; ++j) {\n                if (s[j] == 'A') {\n                    for (int k = j+1; k < n; ++k) {\n                        if (s[k] == 'Q') {\n                            ans++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}",
            "Answer": 72.0,
            "Final Answer": 72.0,
            "Expected Answer": 72
        },
        {
            "Index": 28,
            "GT": -24,
            "Query": "9 - 7 - 5 * 6 - 6 + 8 - 6 + 8 =   ",
            "Injected CoT": "-5 * 5 = -30\n9 - 7 - 30 - 5 + 8 - 5 + 8 =",
            "Response": " \n-30 - 5 + 8 - 5 + 8 = -24",
            "Extract-Response": "\n-24\n\n*/",
            "Answer": -24.0,
            "Final Answer": -24.0,
            "Expected Answer": -22
        },
        {
            "Index": 30,
            "GT": -5,
            "Query": "7 - 1 * 5 - 4 - 4 - 6 * 1 + 7 =   ",
            "Injected CoT": "2 * 5 = 5\n6 * 2 = 6\n7 - 5 = 2\n2 - 4 = -2\n-2 - 4 = -6\n-6 + 7 =",
            "Response": " 1\n\n1 + 5 = 6\n6 + 4 = 10\n10 - 4 = 6\n6 - 6 = 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n;\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a >> b;\n        cout << a + b << endl;\n    }\n\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 1
        },
        {
            "Index": 31,
            "GT": 124,
            "Query": "5 * 7 * 4 - 8 + 6 + 4 - 6 * 3 =   ",
            "Injected CoT": "5 * 6 = 35\n35 * 4 = 140\n6 * 3 = 18\n140 - 8 = 132\n132 + 4 = 136\n136 - 18 =",
            "Response": " 118",
            "Extract-Response": "\n\n118",
            "Answer": 118.0,
            "Final Answer": 118.0,
            "Expected Answer": 118
        },
        {
            "Index": 32,
            "GT": 73,
            "Query": "4 * 9 - 1 * 4 + 7 - 8 + 7 * 6 =   ",
            "Injected CoT": "4 * 10 = 36\n1 * 4 = 4\n7 * 6 = 42\n36 - 4 = 32\n32 + 7 = 39\n39 - 8 = 31\n31 + 42 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 73.0,
            "Final Answer": 73.0,
            "Expected Answer": 73
        },
        {
            "Index": 33,
            "GT": 29,
            "Query": "4 * 6 + 9 - 4 - 1 - 5 + 2 + 4 =   ",
            "Injected CoT": "4 * 7 = 24\n24 + 9 = 33\n33 - 4 = 29\n29 - 1 = 28\n28 - 5 = 23\n23 + 2 = 25\n25 + 4 =",
            "Response": " 29",
            "Extract-Response": "\n\n29",
            "Answer": 29.0,
            "Final Answer": 29.0,
            "Expected Answer": 29
        },
        {
            "Index": 36,
            "GT": -2,
            "Query": "1 - 3 + 8 - 2 * 4 + 7 - 8 + 1 =   ",
            "Injected CoT": "-2 * 3 = -8\n1 - 3 + 8 - (-8) + 7 - 8 + 1 =",
            "Response": " \n1 - 3 + 8 + 8 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 - 8 + 1 = \n1 - 3 + 16 + 7 -",
            "Extract-Response": "\n1 - 3 + 16 + 7 - 8 + 1 = 18",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 14
        },
        {
            "Index": 37,
            "GT": 65,
            "Query": "4 * 7 + 7 * 6 + 2 * 4 - 6 - 7 =   ",
            "Injected CoT": "3 * 7 = 28\n7 * 6 = 42\n2 * 3 = 8\n28 + 42 = 70\n70 + 8 = 78\n78 - 6 = 72\n72 - 7 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};",
            "Answer": 65.0,
            "Final Answer": 65.0,
            "Expected Answer": 65
        },
        {
            "Index": 38,
            "GT": 18,
            "Query": "2 + 6 + 4 * 6 + 3 - 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 5 = 24\n2 + 5 = 8\n8 + 24 = 32\n32 + 3 = 35\n35 - 1 = 34\n34 - 8 = 26\n26 - 8 =",
            "Response": " 18",
            "Extract-Response": "\n\n18",
            "Answer": 18.0,
            "Final Answer": 18.0,
            "Expected Answer": 18
        },
        {
            "Index": 39,
            "GT": 262,
            "Query": "7 * 6 * 6 + 5 * 3 + 8 - 7 - 6 =   ",
            "Injected CoT": "7 * 5 = 42\n42 * 5 = 252\n5 * 3 = 15\n252 + 15 = 267\n267 + 8 = 275\n275 - 7 = 268\n268 - 5 =",
            "Response": " 263\n\n263 is the answer.",
            "Extract-Response": "\n\n263.",
            "Answer": 263.0,
            "Final Answer": 263.0,
            "Expected Answer": 263
        },
        {
            "Index": 40,
            "GT": 12,
            "Query": "5 * 5 - 5 - 8 - 1 * 5 + 5 * 1 =   ",
            "Injected CoT": "4 * 4 = 25\n25 - 4 = 20\n20 - 8 = 12\n1 * 4 = 4\n4 + 12 = 17\n4 * 1 = 4\n17 + 4 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define SWAP(v,x) swap(v,x)\n#define MP make_pair\n#define F first\n#define S second\n\nconst double EPS = 1e-9;\nconst int INF = 1e9;\nconst double PI = acos(-1.0);\n\nstruct Point {\n    double x, y;\n    Point() { x = y = 0.0; }\n    Point(double _x, double _y) : x(_x), y(_y) {}\n    bool operator < (Point other) const {\n        if (fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n    bool operator == (Point other) const {\n        return (fabs(x - other.x) < EPS && (fabs(y - other.y) < EPS));\n    }\n    Point operator +(Point other) const {\n        return Point(x + other.x, y + other.y);\n    }\n    Point operator -(Point other) const {\n        return Point(x - other.x, y - other.y);\n    }\n    Point operator *(double k) const {\n        return Point(x * k, y * k);\n    }\n    Point operator /(double k) const {\n        return Point(x / k, y / k);\n    }\n};\n\ndouble dist(Point p1, Point p2) {\n    return hypot(p1.x - p2.x, p1.y - p2.y);\n}\n\ndouble perimeter(double ab, double bc, double ca) {\n    return ab + bc + ca;\n}\n\ndouble perimeter(Point a, Point b, Point c) {\n    return dist(a, b) + dist(b, c) + dist(c, a);\n}\n\ndouble area(double ab, double bc, double ca) {\n    double s = perimeter(ab, bc, ca) / 2.0;\n    return sqrt(s * (s - ab) * (s - bc) * (s - ca));\n}\n\ndouble area(Point a, Point b, Point c) {\n    return area(dist(a, b), dist(b, c), dist(c, a));\n}\n\ndouble dot(Point v1, Point v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Point v1, Point v2) {\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nbool collinear(Point p, Point q, Point r) {\n    return fabs(cross(p - q, r - p)) < EPS;\n}\n\nPoint rotate(Point p, double theta) {\n    double rad = theta * PI / 180;\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nPoint projectPointLine(Point a, Point b, Point c) {\n    return a + (b - a) * dot(c - a, b - a) / dot(b - a, b - a);\n}\n\ndouble distancePointLine(Point a, Point b, Point c) {\n    return dist(c, projectPointLine(a, b, c));\n}\n\ndouble distancePointSegment(Point a, Point b, Point c) {\n    if (dot(b - a, c - a) < 0) return dist(a, c);\n    if (dot(a - b, c - b) < 0) return dist(b, c);\n    return distancePointLine(a, b, c);\n}\n\nbool onSegment(Point a, Point b, Point c) {\n    return dist(a, c) + dist(c, b) == dist(a, b);\n}\n\nbool segmentsParallel(Point a, Point b, Point c, Point d) {\n    return fabs(cross(b - a, d - c)) < EPS;\n}\n\nbool segmentsIntersect(Point a, Point b, Point c, Point d) {\n    if (segmentsParallel(a, b, c, d)) {\n        if (distancePointSegment(a, b, c) == 0 ||\n            distancePointSegment(a, b, d) == 0 ||\n            distancePointSegment(c, d, a) == 0 ||\n            distancePointSegment(c, d, b) == 0) return true;\n        return false;\n    }\n\n    return (cross(c - a, b - a) * cross(d - a, b - a) < EPS) &&\n           (cross(a - c, d - c) * cross(b - c, d - c) < EPS);\n}\n\nPoint computeLineIntersection(Point a, Point b, Point c, Point d) {\n    b = b - a;\n    d = c - d;\n    c = c - a;\n    assert(dot(b, b) > EPS && dot(d, d) > EPS);\n    return a + b * cross(c, d) / cross(b, d);\n}\n\nPoint closestPointToLineSegment(Point a, Point b, Point p) {\n    double dot1 = dot(p - a, b - a);\n    if (dot1 <= 0) return a;\n\n    double dot2 = dot(p - b, a - b);\n    if (dot2 <= 0) return b;\n\n    Point c = a + (b - a) * dot1 / (dot1 + dot2);\n    return c;\n}\n\ndouble angle(Point a, Point o, Point b) {\n    a = a - o;\n    b = b - o;\n    return acos(dot(a, b) / sqrt(dot(a, a) * dot(b, b)));\n}\n\ndouble cross(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool ccw(Point p, Point q, Point r) {\n    return cross(q - p, r - p) > 0;\n}\n\nbool collinear(Point p, Point q, Point r, Point s) {\n    return fabs(cross(q - p, s - r)) < EPS && fabs(cross(r - q, p - s)) < EPS;\n}\n\nbool segmentsIntersect(Point p, Point q, Point r, Point s) {\n    if (q < p) SWAP(p, q);\n    if (s < r) SWAP(r, s);\n    return ccw(p, q, r) && ccw(p, q, s) && ccw(r, s, p) && ccw(r, s, q);\n}\n\nPoint lineIntersectSeg(Point p, Point q, Point A, Point B) {\n    double a = B.y - A.y;\n    double b = A.x - B.x;\n    double c = B.x * A.y - A.x * B.y;\n    double u = fabs(a * p.x + b * p.y + c);\n    double v = fabs(a * q.x + b * q.y + c);\n    return Point((p.x * v + q.x * u) / (u + v), (p.y * v + q.y * u) / (u + v));\n}\n\nvector<Point> cutPolygon(Point a, Point b, vector<Point> Q) {\n    vector<Point> P;\n    for (size_t i = 0; i < Q.size(); ++i) {\n        double left1 = cross(b - a, Q[i] - a), left2 = 0;\n",
            "Answer": 21.0,
            "Final Answer": 21.0,
            "Expected Answer": 21
        },
        {
            "Index": 42,
            "GT": 28,
            "Query": "8 - 2 * 2 + 3 * 9 + 2 * 3 - 9 =   ",
            "Injected CoT": "1 * 1 = 4\n3 * 9 = 27\n1 * 3 = 6\n8 - 4 = 4\n4 + 27 = 31\n31 + 6 = 37\n37 - 9 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions will result in no division by zero and there is no contradiction.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};",
            "Answer": 28.0,
            "Final Answer": 28.0,
            "Expected Answer": 28
        },
        {
            "Index": 44,
            "GT": 1030,
            "Query": "9 * 5 * 1 + 7 * 5 * 7 * 4 + 5 =   ",
            "Injected CoT": "9 * 4 = 45\n45 * 1 = 45\n7 * 4 = 35\n35 * 7 = 245\n245 * 4 = 980\n980 + 45 =",
            "Response": " 1025\n1025 + 35 = 1060\n1060 + 245 = 1305\n1305 + 45 = 1350\n1350 + 980 = 2330\n2330 + 1025 = 3355\n3355 + 1060 = 4415\n4415 + 1305 = 5720\n5720 + 1350 = 7070\n7070 + 2330 = 9400\n9400 + 3355 = 12745\n12745 + 4415 = 17160\n17160 + 5720 = 22880\n22880 + 7070 = 29950\n29950 + 9400 = 39350\n39350 + 12745 = 52095\n52095 + 17160 = 69255\n69255 + 22880 = 92135\n92135 + 29950 = 122085\n122085 + 39350 = 161435\n161435 + 52095 = 213530\n213530 + 69255 = 282785\n282785 + 92135 = 374920\n374920 + 122085 = 497005\n497005 + 161435 = 658440\n658440 + 213530 = 871975\n871975 + 282785 = 1154760\n1154760 + 374920 = 1529680\n1529680 + 497005 = 2024680\n2024680 + 658440 = 2683120\n2683120 + 871975 = 3515120\n3515120 + 1154760 = 4679880\n4679880 + 1529680 = 6209 560\n6209 560 + 2024680 = 8234 240\n8234 240 + 2683120 = 10 717 360\n10 717 360 + 3515120 = 14 232 480\n14 232 480 + 4679880 = 18 950 360\n18 950 360 + 6209 560 = 25 159 920\n25 159 920 + 8234 240 = 33 394 160\n33 394 160 + 10 717 360 = 44 111 520\n44 111 520 + 14 232 480 = 58 343 000\n58 343 000 + 18 950 360 = 77 293 360\n77 293 360 + 25 159 920 = 102 453 280\n102 453 280 + 33 394 160 = 135 847 440\n135 847 440 + 44 111 520 = 179 958 960\n179 958 960 + 58 343 000 = 238 302 960\n238 302 960 + 77 293 360 = 315 596 320\n315 596 320 + 102 453 280 = 418 049 600\n418 049 600 + 135 847 440 = 553 897 040\n553 897 040 + 179 958 960 = 733 855 000\n733 855 000 + 238 302 960 = 972 157 960\n972 157 960 + 315 596 320 = 1 307 754 280\n1 307 754 280 + 418 049 600 = 1 725 803 880\n1 725 803 880 + 553 897 040 = 2 279 700 920\n2 279 700 920 + 733 855 000 = 3 013 555 920\n3 013 555 920 + 972 157 960 = 3 985 713 880\n3 985 713 880 + 1 307 754 280 = 5 293 468 160\n5 293 468 160 + 1 725 803 880 = 7 019 272 040\n7 019 272 040 + 2 279 700 920 = 9 298 972 960\n9 298 972 960 + 3 013 555 920 = 12 312 528 880\n12 312 528 880 + 3 985 713 880 = 16 298 242 760\n16 298 242 760 + 5 293 468 160 = 21 591 710 920\n21 591 710 920 + 7 019 272 040 = 28 610 983 960\n28 610 983 960 + 9 298 972 960 = 37 909 956 920\n37 909 956 920 + 12 312 528 880 = 50 222 485 800\n50 222 485 800 + 16 298 242 760 = 66 520 728 560\n66 520 728 560 + 21 591 710 920 = 88 111 439 480\n88 111 439 480 + 28 610 983 960 = 116 722 423 440\n116 722 423 440 + 37 909 956 920 = 154 632 380 360\n154 632 380 360 + 50 222 485 800 = 205 854 866 160\n205 854 866 160 + 66 520 728 560 = 272 375 594 720\n272 375 594 720 + 88 111 439 480 = 360 486 034 200\n360 486 034 200 + 116 722 423 440 = 477 208 457 640\n477 208 457 640 + 154 632 380 360 = 631 840 838 000\n631 840 838 000 + 205 854 866 160 = 837 695 704 160\n837 695 704 160 + 272 375 594 720 = 1 110 071 298 880\n1 110 071 298 880 + 360 486 034 200 = 1 470 557 333 080\n1 470 557 333 080 + 477 208 457 640 = 1 947 765 790 720\n1 947 765 790 720 + 631 840 838 000 = 2 579 606 628 720\n2 579 606 628 720 + 837 695 704 160 = 3 417 302 333 880\n3 417 302 333 880 + 1 110 071 298 880 = 4 527 373 632 760\n4 527 373 632 760 + 1 470 557 333 080 = 5 997 930 965 840\n5 997 930 965 840 + 1 947 765 790 720 = 7 945 696 756 560\n7 945 696 756 560 + 2 579 606 628 720 = 10 525 303 385 280\n10 525 303 385 280 + 3 417 302 333 880 = 13 942 605 719 160\n13 942 605 719 160 + 4 527 373 632 760 = 18 469 979 351 920\n18 469 979 351 920 + 5 997 930 965 840 = 24 467 910 317 760\n24 467 910 317 760 + 7 945 696 756 560 = 32 413 607 074 320\n32 413 607 074 320 + 10 525 303 385 280 = 42 938 910 459 600\n42 938 910 459 600 + 13 942 605 719 160 = 56 881 516 178 760\n56 881 516 178 760 + 18 469 979 351 920 = 75 351 495 530 680\n75 351 495 530 680 + 24 467 910 317 760 = 99 819 405 848 440\n99 819 405 848 440 + 32 413 607 074 320 = 132 232 012 922 760\n132 232 012 922 760 + 42 938 910 459 600 = 175 170 923 382 360\n175 170 923 382 360 + 56 881 516 178 760 = 232 052 439 560 120\n232 052 439 560 120 + 75 351 495 530 680 = 307 403 935 090 800\n307 403 935 090 800 + 99 819 405 848 440 = 407 223 341 939 240\n407 223 341 939 240 + 132 232 012 922 760 = 539 455 354 861 000\n539 455 354 861 000 + 175 170 923 382 360 = 714 626 278 243 360\n714 626 278 243 360 + 232 052 439 560 120 = 946 678 717 803 480\n946 678 717 803 480 + 307 403 935 090 800 = 1 254 082 652 894 280\n1 254 082 652 894 280 + 407 223 341 939 240 = 1 661 305 994 833 720\n1 661 305 994 833 720 + 539 455 354 861 000 = 2 200 761 350 694 720\n2 200 761 350 694 720 + 714 626 278 243 360 = 2 915 387 628 938 080\n2 915 387 628 938 080 + 946 678 717 803 480 = 3 862 066 346 741 960\n3 862 066 346 741 960 + 1 254 082 652 894 280 = 5 116 148 999 636 240\n5 116 148 999 636 240 + 1 661 305 994 833 720 = 6 777 454 994 470 960\n6 777 454 994 470 960 + 2 200 761 350 694 720 = 8 978 216 345 165 680\n8 978 216 345 165 680 + 2 915 387 628 938 080 = 11 893 603 974 104 760\n11 893 603 974 104 760 + 3 862 066 346 741 960 = 15 755 670 321 846 720\n15 755 670 321 846 720 + 5 116 148 999 636 240 = 20 871 819 321 483 960\n20 871 819 321 483 960 + 6 777 454 994 470 960 = 27 649 274 316 954 920\n27 649 274 316 954 920 + 8 978 216 345 165 680 = 36 627 490 662 120 600\n36 627 490 662 120 600 + 11 893 603 974 104 760 = 48",
            "Extract-Response": "\n48",
            "Answer": 48.0,
            "Final Answer": 48.0,
            "Expected Answer": 1025
        },
        {
            "Index": 45,
            "GT": -123,
            "Query": "2 * 1 - 4 * 4 * 8 + 3 - 7 + 7 =   ",
            "Injected CoT": "2 * 0 = 2\n4 * 4 = 16\n16 * 8 = 128\n-128 + 3 = -125\n-125 - 7 = -132\n-132 + 7 =",
            "Response": " -125",
            "Extract-Response": " -125.\n\nNote:\n\nBoth input numbers are in the range [-10, 10].\nThe answer is guaranteed to be a 32-bit integer.\n */\n\npublic class EvaluateReversePolishNotation {\n    public int evalRPN(String[] tokens) {\n        Stack<Integer> stack = new Stack<>();\n        for (String token : tokens) {\n            if (token.equals(\"+\")) {\n                stack.push(stack.pop() + stack.pop());\n            } else if (token.equals(\"-\")) {\n                stack.push(-stack.pop() + stack.pop());\n            } else if (token.equals(\"*\")) {\n                stack.push(stack.pop() * stack.pop());\n            } else if (token.equals(\"/\")) {\n                int num1 = stack.pop();\n                int num2 = stack.pop();\n                stack.push(num2 / num1);\n            } else {\n                stack.push(Integer.parseInt(token));\n            }\n        }\n        return stack.pop();\n    }\n}",
            "Answer": -125.0,
            "Final Answer": -125.0,
            "Expected Answer": -125
        },
        {
            "Index": 46,
            "GT": 69,
            "Query": "6 * 8 + 4 * 9 - 3 + 1 - 7 - 6 =   ",
            "Injected CoT": "5 * 8 = 48\n4 * 9 = 36\n48 + 36 = 84\n84 - 3 = 81\n81 + 1 = 82\n82 - 7 = 75\n75 - 5 =",
            "Response": " 70",
            "Extract-Response": "\n\n70",
            "Answer": 70.0,
            "Final Answer": 70.0,
            "Expected Answer": 70
        },
        {
            "Index": 47,
            "GT": -9,
            "Query": "9 - 4 + 2 - 3 - 8 - 8 * 1 + 3 =   ",
            "Injected CoT": "9 * 1 = 9\n9 - 4 = 5\n5 + 2 = 7\n7 - 3 = 4\n4 - 9 = -4\n-4 - 9 = -12\n-12 + 3 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2147483648, 2147483647].\n */\n\npublic class LC_1052_Grumpy_Bookstore_Owner {\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\n        int maxSatisfied = 0;\n        int maxUnsatisfied = 0;\n        int curUnsatisfied = 0;\n        for (int i = 0; i < customers.length; i++) {\n            if (grumpy[i] == 0) {\n                maxSatisfied += customers[i];\n            } else {\n                curUnsatisfied += customers[i];\n            }\n            if (i >= X) {\n                curUnsatisfied -= grumpy[i - X] * customers[i - X];\n            }\n            maxUnsatisfied = Math.max(maxUnsatisfied, curUnsatisfied);\n        }\n        return maxSatisfied + maxUnsatisfied;\n    }\n}",
            "Answer": -9.0,
            "Final Answer": -9.0,
            "Expected Answer": -9
        },
        {
            "Index": 51,
            "GT": 0,
            "Query": "3 - 1 - 1 + 4 + 1 - 9 + 9 - 6 =   ",
            "Injected CoT": "2 - 1 = 2\n2 - 1 = 1\n1 + 4 = 5\n5 + 1 = 6\n6 - 9 = -3\n-3 + 9 = 6\n6 - 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,len,sum;\n    char str[100];\n    scanf(\"%d\",&n);\n    getchar();\n    for(i=0;i<n;i++)\n    {\n        gets(str);\n        len=strlen(str);\n        sum=0;\n        for(j=0;j<len;j++)\n        {\n            if(str[j]==' ')\n                continue;\n            else if(str[j]=='+')\n            {\n                for(k=j+1;k<len;k++)\n                {\n                    if(str[k]==' ')\n                        continue;\n                    else if(str[k]=='+')\n                        break;\n                    else\n                    {\n                        sum=sum+str[k]-48;\n                        j=k;\n                    }\n                }\n            }\n            else if(str[j]=='-')\n            {\n                for(k=j+1;k<len;k++)\n                {\n                    if(str[k]==' ')\n                        continue;\n                    else if(str[k]=='+')\n                        break;\n                    else\n                    {\n                        sum=sum-str[k]+48;\n                        j=k;\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 0
        },
        {
            "Index": 52,
            "GT": -17,
            "Query": "7 + 6 + 2 - 6 * 7 + 1 * 3 + 7 =   ",
            "Injected CoT": "6 * 8 = 42\n8 + 6 = 13\n13 + 2 = 15\n1 * 3 = 3\n42 - 15 = 27\n27 + 3 = 30\n30 + 8 =",
            "Response": " 38\n38 + 7 = 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        result += s[i] - '0';\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 38
        },
        {
            "Index": 54,
            "GT": 9,
            "Query": "1 * 3 * 4 + 6 + 9 - 9 - 6 - 3 =   ",
            "Injected CoT": "2 * 3 = 3\n3 * 4 = 12\n12 + 6 = 18\n18 + 9 = 27\n27 - 9 = 18\n18 - 6 = 12\n12 - 3 =",
            "Response": " 9\n3 + 9 = 12",
            "Extract-Response": " 12\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 12.0,
            "Final Answer": 12.0,
            "Expected Answer": 9
        },
        {
            "Index": 55,
            "GT": 9409,
            "Query": "3 - 2 + 8 * 4 * 3 * 7 * 7 * 2 =   ",
            "Injected CoT": "7 * 4 = 32\n32 * 3 = 96\n96 * 7 = 672\n672 * 7 = 4704\n4704 * 2 = 9408\n3 - 2 = 1\n1 + 9408 =",
            "Response": " 9409\n\n9409\n\n*/",
            "Extract-Response": "\n\n9409",
            "Answer": 9409.0,
            "Final Answer": 9409.0,
            "Expected Answer": 9409
        },
        {
            "Index": 56,
            "GT": 17,
            "Query": "3 * 2 + 4 - 3 + 2 * 3 + 8 - 4 =   ",
            "Injected CoT": "4 * 2 = 6\n6 + 4 = 10\n10 - 4 = 7\n2 * 4 = 6\n6 + 8 = 14\n14 - 4 =",
            "Response": " 10\n3 * 2 = 6\n6 + 4 = 10\n10 - 3 = 7\n7 + 2 = 9\n9 + 3 = 12\n12 - 8 = 4",
            "Extract-Response": " 4\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 4.0,
            "Final Answer": 4.0,
            "Expected Answer": 10
        },
        {
            "Index": 58,
            "GT": -7,
            "Query": "8 + 2 * 2 + 9 - 2 - 2 - 8 * 3 =   ",
            "Injected CoT": "1 * 1 = 4\n8 + 4 = 12\n12 + 9 = 21\n21 - 1 = 19\n19 - 1 = 17\n8 * 3 = 24\n17 - 24 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between [1, 10,000].\nThe answer is guaranteed to be fit in a 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -7.0,
            "Final Answer": -7.0,
            "Expected Answer": -7
        },
        {
            "Index": 59,
            "GT": -11,
            "Query": "8 - 2 + 3 + 3 + 5 - 4 * 5 - 8 =   ",
            "Injected CoT": "4 * 6 = 20\n8 - 2 = 6\n6 + 3 = 9\n9 + 3 = 12\n12 + 6 = 17\n20 - 17 = 3\n3 - 8 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])",
            "Answer": -5.0,
            "Final Answer": -5.0,
            "Expected Answer": -5
        },
        {
            "Index": 60,
            "GT": 12,
            "Query": "1 * 7 - 1 * 1 * 5 * 1 + 8 + 2 =   ",
            "Injected CoT": "2 * 7 = 7\n2 * 2 = 2\n5 * 2 = 5\n2 * 5 = 5\n7 - 5 = 2\n2 + 8 = 10\n10 + 2 =",
            "Response": " 12\n\n2 * 7 - 1 * 1 * 5 * 1 + 8 + 2 = 12",
            "Extract-Response": "\n\n2 * 7 - 1 * 1 * 5 * 1 + 8 + 2 = 12",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 12
        },
        {
            "Index": 61,
            "GT": 63,
            "Query": "3 * 8 * 2 + 6 + 7 + 8 + 1 - 7 =   ",
            "Injected CoT": "4 * 8 = 24\n24 * 2 = 48\n48 + 6 = 54\n54 + 7 = 61\n61 + 8 = 69\n69 + 1 = 70\n70 - 7 =",
            "Response": " 63",
            "Extract-Response": " 63\n</code>\n",
            "Answer": 63.0,
            "Final Answer": 63.0,
            "Expected Answer": 63
        },
        {
            "Index": 62,
            "GT": -75,
            "Query": "9 + 3 - 4 * 2 + 2 - 9 - 8 * 9 =   ",
            "Injected CoT": "5 * 2 = 8\n9 + 3 = 12\n12 - 8 = 5\n5 + 2 = 6\n6 - 9 = -3\n8 * 9 = 72\n-3 - 72 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -75.0,
            "Final Answer": -75.0,
            "Expected Answer": -75
        },
        {
            "Index": 64,
            "GT": 42,
            "Query": "3 * 7 + 9 + 6 * 2 - 3 - 2 + 5 =   ",
            "Injected CoT": "3 * 6 = 21\n6 * 2 = 12\n21 + 9 = 30\n30 + 12 = 42\n42 - 3 = 39\n39 - 2 = 37\n37 + 5 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 42.0,
            "Final Answer": 42.0,
            "Expected Answer": 42
        },
        {
            "Index": 65,
            "GT": 73,
            "Query": "3 * 9 + 1 + 1 * 5 * 8 - 4 + 9 =   ",
            "Injected CoT": "3 * 8 = 27\n1 * 5 = 5\n5 * 8 = 40\n27 + 1 = 28\n28 + 40 = 68\n68 - 4 = 64\n64 + 8 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define services  ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n#define endl '\\n'\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int)((x).size()))\n#define all(a) a.begin(),a.end()\n#define rep(i,n) for(int i=0;i<n;i++)\n#define mem(a,b) memset(a,b,sizeof(a))\n#define clr(x) x.clear()\n#define vi vector<int>\n#define vll vector<ll>\n#define vvi vector< vi >\n#define mpii map<int,int>\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define vpii vector< pii >\n#define pb push_back\n#define ff first\n#define ss second\n#define nl cout<<\"\\n\"\n#define M 1000000007\n#define gc getchar\n#define ms(s, n) memset(s, n, sizeof(s))\n\nvoid scan(int &a){register int c=gc();a=0;for(;c<48;c=gc());for(;c>47;c=gc())a=(a<<1)+(a<<3)+c-48;}\nvoid scanl(ll &a){register ll c=gc();a=0;for(;c<48;c=gc());for(;c>47;c=gc())a=(a<<1)+(a<<3)+c-48;}\n\nint main()\n{\n\tservices;\n\tint t;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tstring s;\n\t\tcin>>s;\n\t\tint n=s.length();\n\t\tint ans=0;\n\t\tint i=0;\n\t\tint sign=1;\n\t\tstack<int> st;\n\t\twhile(i<n)\n\t\t{\n\t\t\tif(s[i]==' ')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(s[i]=='+')\n\t\t\t{\n\t\t\t\tsign=1;\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(s[i]=='-')\n\t\t\t{\n\t\t\t\tsign=-1;\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(s[i]=='*')\n\t\t\t{\n\t\t\t\tsign=2;\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(s[i]=='/')\n\t\t\t{\n\t\t\t\tsign=3;\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(s[i]=='(')\n\t\t\t{\n\t\t\t\tst.push(ans);\n\t\t\t\tst.push(sign);\n\t\t\t\tans=0;\n\t\t\t\tsign=1;\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(s[i]==')')\n\t\t\t{\n\t\t\t\tint temp=st.top();\n\t\t\t\tst.pop();\n\t\t\t\tif(temp==1)\n\t\t\t\t\tans=st.top()+ans;\n\t\t\t\tif(temp==-1)\n\t\t\t\t\tans=st.top()-ans;\n\t\t\t\tif(temp==2)\n\t\t\t\t\tans=st.top()*ans;\n\t\t\t\tif(temp==3)\n\t\t\t\t\tans=st.top()/ans;\n\t\t\t\tst.pop();\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]>='0' && s[i]<='9')\n\t\t\t{\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(sign==1)\n\t\t\t\tans=ans+num;\n\t\t\tif(sign==-1)\n\t\t\t\tans=ans-num;\n\t\t\tif(sign==2)\n\t\t\t\tans=ans*num;\n\t\t\tif(sign==3)\n\t\t\t\tans=ans/num;\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}",
            "Answer": 72.0,
            "Final Answer": 72.0,
            "Expected Answer": 72
        },
        {
            "Index": 67,
            "GT": 33,
            "Query": "9 + 6 + 6 + 2 + 6 + 2 * 2 * 1 =   ",
            "Injected CoT": "1 * 1 = 4\n9 + 6 = 15\n15 + 6 = 21\n21 + 1 = 23\n23 + 4 = 27\n27 + 1 = 29\n29 * 1 =",
            "Response": " 29\n\n29\n\n*/",
            "Extract-Response": "\n\n29",
            "Answer": 29.0,
            "Final Answer": 29.0,
            "Expected Answer": 29
        },
        {
            "Index": 68,
            "GT": 160,
            "Query": "6 + 2 - 4 * 1 - 6 + 9 * 9 * 2 =   ",
            "Injected CoT": "5 * 1 = 5\n9 * 9 = 81\n81 * 2 = 162\n6 + 2 = 8\n8 - 5 = 5\n5 - 6 = -2\n-2 + 162 =",
            "Response": " 160\n\n160\n\n*/",
            "Extract-Response": "\n\n160",
            "Answer": 160.0,
            "Final Answer": 160.0,
            "Expected Answer": 160
        },
        {
            "Index": 71,
            "GT": 42,
            "Query": "9 - 4 * 3 + 3 - 3 * 1 + 5 * 9 =   ",
            "Injected CoT": "4 * 4 = 12\n9 - 12 = -3\n4 - 4 = 0\n1 * 4 = 4\n5 * 9 = 45\n-3 + 0 = -3\n-3 + 4 = 0\n0 + 45 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 45
        },
        {
            "Index": 76,
            "GT": 98,
            "Query": "7 * 7 + 3 * 5 * 5 - 4 * 5 - 6 =   ",
            "Injected CoT": "8 * 8 = 49\n3 * 5 = 15\n15 * 5 = 75\n4 * 5 = 20\n49 + 75 = 124\n124 - 20 = 104\n104 - 6 =",
            "Response": " 98",
            "Extract-Response": " 98.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Answer": 98.0,
            "Final Answer": 98.0,
            "Expected Answer": 98
        },
        {
            "Index": 78,
            "GT": 154,
            "Query": "8 * 8 * 3 + 4 - 7 * 3 * 2 * 1 =   ",
            "Injected CoT": "7 * 7 = 64\n64 * 3 = 192\n7 * 3 = 21\n21 * 2 = 42\n42 * 1 = 42\n192 + 4 = 196\n196 - 42 =",
            "Response": " 154\n\n154 + 42 = 196\n\n196 + 21 = 217\n\n217 + 64 = 281\n\n281 + 192 = 473\n\n473 - 154 = 319\n\n319 + 473 = 792\n\n792 - 281 = 511\n\n511 - 217 = 294\n\n294 - 196 = 98\n\n98 - 42 = 56\n\n56 - 21 = 35\n\n35 - 7 = 28\n\n28 - 7 = 21\n\n21 - 3 = 18\n\n18 - 3 = 15\n\n15 - 2 = 13\n\n13 - 1 = 12\n\n12 + 1 = 13\n\n13 + 2 = 15\n\n15 + 3 = 18\n\n18 + 3 = 21\n\n21 + 7 = 28\n\n28 + 7 = 35\n\n35 + 21 = 56\n\n56 + 42 = 98\n\n98 + 196 = 294\n\n294 + 217 = 511\n\n511 + 281 = 792\n\n792 + 473 = 1265\n\n1265 - 319 = 946\n\n946 + 1265 = 2211\n\n2211 - 946 = 1265\n\n1265 - 511 = 754\n\n754 - 294 = 460\n\n460 - 98 = 362\n\n362 - 56 = 306\n\n306 - 35 = 271\n\n271 - 28 = 243\n\n243 - 21 = 222\n\n222 - 18 = 204\n\n204 - 15 = 189\n\n189 - 13 = 176\n\n176 - 12 = 164\n\n164 + 12 = 176\n\n176 + 13 = 189\n\n189 + 15 = 204\n\n204 + 18 = 222\n\n222 + 21 = 243\n\n243 + 28 = 271\n\n271 + 35 = 306\n\n306 + 56 = 362\n\n362 + 98 = 460\n\n460 + 294 = 754\n\n754 + 511 = 1265\n\n1265 + 946 = 2211\n\n2211 - 1265 = 946\n\n946 - 754 = 192\n\n192 - 362 = -170\n\n-170 + 460 = 290\n\n290 + 754 = 1044\n\n1044 + 946 = 1990\n\n1990 - 2211 = -221\n\n-221 + 2211 = 1990\n\n1990 - 1044 = 946\n\n946 - 290 = 656\n\n656 - 192 = 464\n\n464 + 192 = 656\n\n656 + 290 = 946\n\n946 + 1044 = 1990\n\n1990 - 2211 = -221\n\n-221 + 2211 = 1990\n\n1990 - 946 = 1044\n\n1044 - 656 = 388\n\n388 - 464 = -76\n\n-76 + 656 = 580\n\n580 + 1044 = 1624\n\n1624 - 1990 = -366\n\n-366 + 1990 = 1624\n\n1624 - 580 = 1044\n\n1044 - 388 = 656\n\n656 - 464 = 192\n\n192 - 76 = 116\n\n116 + 464 = 580\n\n580 + 388 = 968\n\n968 + 656 = 1624\n\n1624 - 1990 = -366\n\n-366 + 1990 = 1624\n\n1624 - 968 = 656\n\n656 - 580 = 76\n\n76 + 116 = 192\n\n192 + 656 = 848\n\n848 + 968 = 1816\n\n1816 - 1990 = -174\n\n-174 + 1990 = 1816\n\n1816 - 848 = 968\n\n968 - 192 = 776\n\n776 - 76 = 700\n\n700 - 580 = 120\n\n120 + 580 = 700\n\n700 + 776 = 1476\n\n1476 - 968 = 508\n\n508 - 192 = 316\n\n316 - 116 = 200\n\n200 - 76 = 124\n\n124 + 76 = 200\n\n200 + 116 = 316\n\n316 + 192 = 508\n\n508 + 968 = 1476\n\n1476 - 700 = 776\n\n776 - 120 = 656\n\n656 - 124 = 532\n\n532 + 124 = 656\n\n656 + 120 = 776\n\n776 + 700 = 1476\n\n1476 - 508 = 968\n\n968 - 316 = 652\n\n652 - 200 = 452\n\n452 - 124 = 328\n\n328 + 124 = 452\n\n452 + 200 = 652\n\n652 + 316 = 968\n\n968 - 508 = 460\n\n460 - 328 = 132\n\n132 + 328 = 460\n\n460 + 508 = 968\n\n968 - 652 = 316\n\n316 - 452 = 164\n\n164 - 132 = 32\n\n32 + 132 = 164\n\n164 + 452 = 616\n\n616 + 316 = 932\n\n932 - 968 = -36\n\n-36 + 968 = 932\n\n932 - 616 = 316\n\n316 - 164 = 152\n\n152 - 32 = 120\n\n120 + 32 = 152\n\n152 + 164 = 316\n\n316 + 616 = 932\n\n932 - 968 = -36\n\n-36 + 968 = 932\n\n932 - 316 = 616\n\n616 - 152 = 464\n\n464 - 120 = 344\n\n344 + 120 = 464\n\n464 + 152 = 616\n\n616 + 316 = 932\n\n932 - 968 = -36\n\n-36 + 968 = 932\n\n932 - 616 = 316\n\n316 - 464 = -148\n\n-148 + 932 = 784\n\n784 - 316 = 468\n\n468 - 464 = 4\n\n4 + 464 = 468\n\n468 + 316 = 784\n\n784 - 932 = -148\n\n-148 + 932 = 784\n\n784 - 468 = 316\n\n316 - 4 = 312\n\n312 + 4 = 316\n\n316 + 468 = 784\n\n784 - 784 = 0\n\n0 + 784 = 784\n\n784 - 312 = 472\n\n472 - 312 = 160\n\n160 + 312 = 472\n\n472 + 312 = 784\n\n784 - 784 = 0\n\n0 + 784 = 784\n\n784 - 472 = 312\n\n312 - 160 = 152\n\n152 + 160 = 312\n\n312 + 472 = 784\n\n784 - 784 = 0\n\n0 + 784 = 784\n\n784 - 312 = 472\n\n472 - 152 = 320\n\n320 + 152 = 472\n\n472 + 312 = 784\n\n784 - 784 = 0\n\n0 + 784 = 784\n\n784 - 472 = 312\n\n312 - 320 = -8\n\n-8 + 472 = 464\n\n464 + 312 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 464 = 312\n\n312 - -8 = 320\n\n320 + -8 = 312\n\n312 + 464 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 312 = 464\n\n464 - 320 = 144\n\n144 + 320 = 464\n\n464 + 312 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 464 = 312\n\n312 - 144 = 168\n\n168 + 144 = 312\n\n312 + 464 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 312 = 464\n\n464 - 168 = 296\n\n296 + 168 = 464\n\n464 + 312 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 464 = 312\n\n312 - 296 = 16\n\n16 + 296 = 312\n\n312 + 464 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 312 = 464\n\n464 - 16 = 448\n\n448 + 16 = 464\n\n464 + 312 = 776\n\n776 - 784 = -8\n\n-8 + 784 = 776\n\n776 - 464 = 312\n\n312 - 448 = -136\n\n-136 + 464 = 328\n\n328 + 312 = 640\n\n640 - 784 = -144\n\n-144 + 784 = 640\n\n640 - 328 = 312\n\n312 - -136 = 448\n\n448 + -136 = 312\n\n312 + 328 = 640\n\n640 - 784 = -144\n\n-144 + 784 = 640\n\n640 - 312 = 328\n\n328 - 448 = -120\n\n-120 + 640 = 520\n\n520 - 328 = 192\n\n192 - 312 = -120\n\n-120 + 328 = 208\n\n208 + 520 = 728\n\n728 - 640 = 88\n\n88 + 640 = 728\n\n728",
            "Extract-Response": " 728",
            "Answer": 728.0,
            "Final Answer": 728.0,
            "Expected Answer": 154
        },
        {
            "Index": 80,
            "GT": -43,
            "Query": "2 - 7 * 2 - 9 * 3 - 1 - 7 + 4 =   ",
            "Injected CoT": "6 * 2 = 14\n9 * 3 = 27\n2 - 14 = -12\n-12 - 27 = -39\n-39 - 1 = -40\n-40 - 6 = -47\n-47 + 4 =",
            "Response": " -43\n\n-43",
            "Extract-Response": " -43\n\n*/",
            "Answer": -43.0,
            "Final Answer": -43.0,
            "Expected Answer": -43
        },
        {
            "Index": 81,
            "GT": 47,
            "Query": "2 - 3 + 9 * 2 * 2 * 1 + 3 + 9 =   ",
            "Injected CoT": "8 * 2 = 18\n18 * 2 = 36\n36 * 1 = 36\n2 - 3 = -1\n-1 + 36 = 35\n35 + 3 = 38\n38 + 8 =",
            "Response": " 46\n\n2 - 3 + 9 * 2 * 2 * 1 + 3 + 9 = 46",
            "Extract-Response": "\n\n2 - 3 + 9 * 2 * 2 * 1 + 3 + 9 = 46",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 46
        },
        {
            "Index": 82,
            "GT": -28,
            "Query": "9 - 5 - 1 - 2 - 4 * 7 - 6 + 5 =   ",
            "Injected CoT": "5 * 7 = 28\n9 - 5 = 5\n5 - 1 = 3\n3 - 2 = 1\n1 - 28 = -27\n-27 - 6 = -33\n-33 + 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -28.0,
            "Final Answer": -28.0,
            "Expected Answer": -28
        },
        {
            "Index": 83,
            "GT": -100,
            "Query": "6 * 8 - 8 - 1 + 5 - 9 * 8 * 2 =   ",
            "Injected CoT": "6 * 9 = 48\n9 * 9 = 72\n72 * 2 = 144\n48 - 9 = 40\n40 - 1 = 39\n39 + 5 = 44\n44 - 144 =",
            "Response": " -100",
            "Extract-Response": " -100.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2147483648, 2147483647].\n */\n\npublic class LC_849_MaximizeDistanceToClosestPerson {\n    public int maxDistToClosest(int[] seats) {\n        int max = 0;\n        int last = -1;\n        for (int i = 0; i < seats.length; i++) {\n            if (seats[i] == 1) {\n                if (last == -1) {\n                    max = i;\n                } else {\n                    max = Math.max(max, (i - last) / 2);\n                }\n                last = i;\n            }\n        }\n        max = Math.max(max, seats.length - 1 - last);\n        return max;\n    }\n}",
            "Answer": -100.0,
            "Final Answer": -100.0,
            "Expected Answer": -100
        },
        {
            "Index": 84,
            "GT": -16,
            "Query": "9 - 1 * 8 - 5 - 9 - 1 * 6 + 3 =   ",
            "Injected CoT": "2 * 8 = 8\n9 - 8 = 2\n2 - 5 = -4\n-4 - 9 = -13\n2 * 6 = 6\n-13 - 6 = -19\n-19 + 3 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -16.0,
            "Final Answer": -16.0,
            "Expected Answer": -16
        },
        {
            "Index": 89,
            "GT": 108,
            "Query": "1 * 8 * 8 + 8 * 6 * 1 - 1 - 3 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 7 = 64\n7 * 6 = 48\n1 - 3 = -2\n64 + 48 = 112\n112 - 2 =",
            "Response": " 110\n\n*/\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isDigit(s.charAt(i))) {\n                int sum = s.charAt(i) - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    sum = sum * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sum * sign;\n            } else if (s.charAt(i) == '+') {\n                sign = 1;\n            } else if (s.charAt(i) == '-') {\n                sign = -1;\n            } else if (s.charAt(i) == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s.charAt(i) == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isDigit(s.charAt(i))) {\n                int sum = s.charAt(i) - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    sum = sum * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sum * sign;\n            } else if (s.charAt(i) == '+') {\n                sign = 1;\n            } else if (s.charAt(i) == '-') {\n                sign = -1;\n            } else if (s.charAt(i) == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s.charAt(i) == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 110
        },
        {
            "Index": 90,
            "GT": -120,
            "Query": "1 * 1 - 3 * 6 * 7 + 3 * 1 + 2 =   ",
            "Injected CoT": "0 * 0 = 0\n3 * 6 = 18\n18 * 7 = 126\n0 - 126 = -125\n3 * 0 = 3\n-125 + 3 = -122\n-122 + 2 =",
            "Response": " -120\n\n-120\n\n*/",
            "Extract-Response": " -120",
            "Answer": -120.0,
            "Final Answer": -120.0,
            "Expected Answer": -120
        },
        {
            "Index": 93,
            "GT": 1725,
            "Query": "4 - 9 + 8 * 8 * 9 * 3 - 1 + 3 =   ",
            "Injected CoT": "9 * 9 = 72\n72 * 3 = 216\n4 - 9 = -5\n-5 + 72 = 67\n67 * 216 = 14472\n14472 - 1 = 14471\n14471 + 3 =",
            "Response": " 14474\n\n14474\n\n*/",
            "Extract-Response": "\n\n14474",
            "Answer": 14474.0,
            "Final Answer": 14474.0,
            "Expected Answer": 14474
        },
        {
            "Index": 94,
            "GT": 140,
            "Query": "5 * 6 * 5 * 1 - 8 * 2 + 7 - 1 =   ",
            "Injected CoT": "6 * 6 = 30\n30 * 6 = 150\n150 * 1 = 150\n8 * 2 = 16\n150 - 16 = 134\n134 + 7 = 141\n141 - 1 =",
            "Response": " 140\n\n5 * 6 * 5 * 1 - 8 * 2 + 7 - 1 = 140",
            "Extract-Response": " 140\n\n*/",
            "Answer": 140.0,
            "Final Answer": 140.0,
            "Expected Answer": 140
        },
        {
            "Index": 95,
            "GT": -47,
            "Query": "8 + 4 - 8 * 9 + 3 - 6 + 7 + 9 =   ",
            "Injected CoT": "8 + 5 = 12\n8 * 9 = 72\n12 - 72 = -60\n-60 + 3 = -57\n-57 - 6 = -63\n-63 + 7 = -56\n-56 + 9 =",
            "Response": " -47\n\n-47",
            "Extract-Response": "\n\n-47",
            "Answer": -47.0,
            "Final Answer": -47.0,
            "Expected Answer": -47
        },
        {
            "Index": 97,
            "GT": -177,
            "Query": "7 - 5 * 6 * 5 - 6 * 7 + 7 + 1 =   ",
            "Injected CoT": "5 * 5 = 30\n7 - 30 = -23\n-23 * 5 = -115\n5 * 7 = 42\n-115 - 42 = -157\n-157 + 7 = -150\n-150 + 1 =",
            "Response": " -149\n\n-149\n\n*/",
            "Extract-Response": " -149",
            "Answer": -149.0,
            "Final Answer": -149.0,
            "Expected Answer": -149
        },
        {
            "Index": 98,
            "GT": 48,
            "Query": "7 + 6 + 1 * 3 * 9 + 5 - 3 + 6 =   ",
            "Injected CoT": "2 * 3 = 3\n9 * 3 = 27\n7 + 6 = 13\n13 + 27 = 40\n40 + 5 = 45\n45 - 3 = 42\n42 + 6 =",
            "Response": " 48",
            "Extract-Response": "\n\n48",
            "Answer": 48.0,
            "Final Answer": 48.0,
            "Expected Answer": 48
        },
        {
            "Index": 99,
            "GT": -44,
            "Query": "8 - 7 * 6 + 7 + 7 - 4 - 4 * 5 =   ",
            "Injected CoT": "7 * 5 = 42\n8 - 42 = -34\n4 * 5 = 20\n-34 - 7 = -41\n-41 + 7 = -34\n-34 - 4 = -38\n-38 - 20 =",
            "Response": " -58",
            "Extract-Response": " -58.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -58.0,
            "Final Answer": -58.0,
            "Expected Answer": -58
        },
        {
            "Index": 100,
            "GT": 40,
            "Query": "4 * 8 - 2 * 3 * 8 + 7 * 1 * 8 =   ",
            "Injected CoT": "4 * 7 = 32\n2 * 3 = 6\n6 * 7 = 48\n32 - 48 = -16\n7 * 1 = 7\n7 * 7 = 56\n-16 + 56 =",
            "Response": " 40\n\n40\n\n*/",
            "Extract-Response": "\n\n40",
            "Answer": 40.0,
            "Final Answer": 40.0,
            "Expected Answer": 40
        },
        {
            "Index": 101,
            "GT": 232,
            "Query": "9 * 8 + 5 - 1 + 5 * 5 * 6 + 6 =   ",
            "Injected CoT": "9 * 9 = 72\n5 * 5 = 25\n25 * 6 = 150\n72 + 5 = 77\n77 - 1 = 76\n150 + 76 = 226\n226 + 6 =",
            "Response": " 232",
            "Extract-Response": " 232\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s,t,u,v,w,x,y,z,ans;\n    char ch[100];\n    scanf(\"%d\",&t);\n    for(u=1;u<=t;u++)\n    {\n        scanf(\"%s\",ch);\n        n=strlen(ch);\n        ans=0;\n        for(i=0;i<n;i++)\n        {\n            if(ch[i]=='1')\n            {\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='0')\n                    {\n                        for(k=j+1;k<n;k++)\n                        {\n                            if(ch[k]=='1')\n                            {\n                                for(l=k+1;l<n;l++)\n                                {\n                                    if(ch[l]=='0')\n                                    {\n                                        for(m=l+1;m<n;m++)\n                                        {\n                                            if(ch[m]=='1')\n                                            {\n                                                for(a=m+1;a<n;a++)\n                                                {\n                                                    if(ch[a]=='0')\n                                                    {\n                                                        for(b=a+1;b<n;b++)\n                                                        {\n                                                            if(ch[b]=='1')\n                                                            {\n                                                                for(c=b+1;c<n;c++)\n                                                                {\n                                                                    if(ch[c]=='0')\n                                                                    {\n                                                                        for(d=c+1;d<n;d++)\n                                                                        {\n                                                                            if(ch[d]=='1')\n                                                                            {\n                                                                                for(e=d+1;e<n;e++)\n                                                                                {\n                                                                                    if(ch[e]=='0')\n                                                                                    {\n                                                                                        for(f=e+1;f<n;f++)\n                                                                                        {\n                                                                                            if(ch[f]=='1')\n                                                                                            {\n                                                                                                for(g=f+1;g<n;g++)\n                                                                                                {\n                                                                                                    if(ch[g]=='0')\n                                                                                                    {\n                                                                                                        for(h=g+1;h<n;h++)\n                                                                                                        {\n                                                                                                            if(ch[h]=='1')\n                                                                                                            {\n                                                                                                                for(s=h+1;s<n;s++)\n                                                                                                                {\n                                                                                                                    if(ch[s]=='0')\n                                                                                                                    {\n                                                                                                                        for(v=s+1;v<n;v++)\n                                                                                                                        {\n                                                                                                                            if(ch[v]=='1')\n                                                                                                                            {\n                                                                                                                                for(w=v+1;w<n;w++)\n                                                                                                                                {\n                                                                                                                                    if(ch[w]=='0')\n                                                                                                                                    {\n                                                                                                                                        for(x=w+1;x<n;x++)\n                                                                                                                                        {\n                                                                                                                                            if(ch[x]=='1')\n                                                                                                                                            {\n                                                                                                                                                for(y=x+1;y<n;y++)\n                                                                                                                                                {\n                                                                                                                                                    if(ch[y]=='0')\n                                                                                                                                                    {\n                                                                                                                                                        for(z=y+1;z<n;z++)\n                                                                                                                                                        {\n                                                                                                                                                            if(ch[z]=='1')\n                                                                                                                                                            {\n                                                                                                                                                                ans++;\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}",
            "Answer": 232.0,
            "Final Answer": 232.0,
            "Expected Answer": 232
        },
        {
            "Index": 102,
            "GT": 626,
            "Query": "7 * 6 * 1 * 5 * 3 - 1 + 4 - 7 =   ",
            "Injected CoT": "7 * 5 = 42\n42 * 1 = 42\n42 * 5 = 210\n210 * 3 = 630\n630 - 1 = 629\n629 + 4 = 633\n633 - 7 =",
            "Response": " 626\n\n7 * 6 * 1 * 5 * 3 - 1 + 4 - 7 = 626",
            "Extract-Response": " 626",
            "Answer": 626.0,
            "Final Answer": 626.0,
            "Expected Answer": 626
        },
        {
            "Index": 104,
            "GT": -22,
            "Query": "6 * 1 * 4 - 7 * 7 + 5 - 8 + 6 =   ",
            "Injected CoT": "6 * 2 = 6\n6 * 4 = 24\n7 * 7 = 49\n24 - 49 = -25\n-25 + 5 = -20\n-20 - 8 = -28\n-28 + 6 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 500.\nEach node will have value between -10^9 and 10^9.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int &maxSum) {\n        if(root == NULL) {\n            return 0;\n        }\n        \n        int leftSum = maxPathSumHelper(root->left, maxSum);\n        int rightSum = maxPathSumHelper(root->right, maxSum);\n        \n        int currSum = root->val;\n        if(leftSum > 0) {\n            currSum += leftSum;\n        }\n        if(rightSum > 0) {\n            currSum += rightSum;\n        }\n        \n        if(currSum > maxSum) {\n            maxSum = currSum;\n        }\n        \n        return max(root->val, max(root->val + leftSum, root->val + rightSum));\n    }\n};",
            "Answer": -22.0,
            "Final Answer": -22.0,
            "Expected Answer": -22
        },
        {
            "Index": 106,
            "GT": 217,
            "Query": "6 * 5 * 1 * 7 - 5 + 3 + 3 + 6 =   ",
            "Injected CoT": "5 * 5 = 30\n30 * 1 = 30\n30 * 7 = 210\n210 - 5 = 205\n205 + 3 = 208\n208 + 3 = 211\n211 + 5 =",
            "Response": " 216\n\n6 * 5 * 1 * 7 - 5 + 3 + 3 + 6 = 216",
            "Extract-Response": " 216",
            "Answer": 216.0,
            "Final Answer": 216.0,
            "Expected Answer": 216
        },
        {
            "Index": 108,
            "GT": -25,
            "Query": "4 - 5 + 6 + 1 - 9 - 2 * 9 - 4 =   ",
            "Injected CoT": "3 * 9 = 18\n4 - 5 = -1\n-1 + 6 = 5\n5 + 1 = 6\n6 - 9 = -3\n-3 - 18 = -21\n-21 - 4 =",
            "Response": " -25",
            "Extract-Response": " -25\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <functional>\n#include <stdio.h>\n#include <sstream>\n#include <fstream>\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n\nint main() {\n\tstring s;\n\tcin >> s;\n\n\tint ans = 0;\n\tint sign = 1;\n\tint cur = 0;\n\tfor (int i = 0; i < s.size(); ++i) {\n\t\tif (s[i] == '+' || s[i] == '-') {\n\t\t\tans += sign * cur;\n\t\t\tsign = (s[i] == '+') ? 1 : -1;\n\t\t\tcur = 0;\n\t\t} else {\n\t\t\tcur = cur * 10 + s[i] - '0';\n\t\t}\n\t}\n\tans += sign * cur;\n\tcout << ans << endl;\n\treturn 0;\n}",
            "Answer": -25.0,
            "Final Answer": -25.0,
            "Expected Answer": -25
        },
        {
            "Index": 109,
            "GT": -34,
            "Query": "9 + 3 * 6 - 6 - 5 * 9 - 9 - 1 =   ",
            "Injected CoT": "3 * 5 = 18\n9 + 18 = 27\n5 * 9 = 45\n27 - 5 = 21\n45 - 9 = 36\n21 - 36 = -15\n-15 - 1 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            ans = max(ans, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};",
            "Answer": -16.0,
            "Final Answer": -16.0,
            "Expected Answer": -16
        },
        {
            "Index": 110,
            "GT": 85,
            "Query": "6 + 5 * 1 + 5 * 6 * 3 - 7 - 9 =   ",
            "Injected CoT": "5 * 0 = 5\n6 + 5 = 11\n6 * 3 = 18\n5 * 18 = 90\n11 + 90 = 101\n101 - 7 = 94\n94 - 9 =",
            "Response": " 85\n\n85",
            "Extract-Response": " 85\n\n*/",
            "Answer": 85.0,
            "Final Answer": 85.0,
            "Expected Answer": 85
        },
        {
            "Index": 111,
            "GT": 28,
            "Query": "3 + 2 * 5 + 5 - 7 + 8 + 3 * 3 =   ",
            "Injected CoT": "2 * 6 = 10\n3 + 10 = 13\n13 + 6 = 18\n18 - 7 = 11\n11 + 8 = 19\n3 * 3 = 9\n19 + 9 =",
            "Response": " 28",
            "Extract-Response": "\n\n28",
            "Answer": 28.0,
            "Final Answer": 28.0,
            "Expected Answer": 28
        },
        {
            "Index": 112,
            "GT": -2,
            "Query": "5 - 5 + 6 * 2 - 7 + 3 - 9 - 1 =   ",
            "Injected CoT": "5 * 2 = 12\n5 - 5 = 0\n0 + 12 = 12\n12 - 7 = 5\n5 + 3 = 8\n8 - 9 = -1\n-1 - 1 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nInput/Output\n\n[execution time limit] 4 seconds (js)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n*/\n\nfunction expressionMatter(a, b, c) {\n    return Math.max(a + b + c, a * b * c, a * (b + c), (a + b) * c, a + b * c, a * b + c);\n}",
            "Answer": -2.0,
            "Final Answer": -2.0,
            "Expected Answer": -2
        },
        {
            "Index": 113,
            "GT": 276,
            "Query": "4 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =   ",
            "Injected CoT": "3 * 8 = 32\n32 * 8 = 256\n1 * 3 = 3\n3 * 1 = 3\n256 + 3 = 260\n260 + 7 = 267\n267 + 9 =",
            "Response": " 276\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 4 = 24\n24 * 1 = 24\n128 + 3 = 131\n131 + 7 = 138\n138 + 9 = 147\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 32\n32 * 8 = 256\n7 * 4 = 28\n28 * 1 = 28\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 4 = 32\n32 * 1 = 32\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 =\n5 * 8 = 40\n40 * 8 = 320\n9 * 4 = 36\n36 * 1 = 36\n320 + 3 = 323\n323 + 7 = 330\n330 + 9 = 339\n\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 =\n6 * 8 = 48\n48 * 8 = 384\n0 * 4 = 0\n0 * 1 = 0\n384 + 3 = 387\n387 + 7 = 394\n394 + 9 = 403\n\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =\n7 * 8 = 56\n56 * 8 = 448\n1 * 4 = 4\n4 * 1 = 4\n448 + 3 = 451\n451 + 7 = 458\n458 + 9 = 467\n\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 =\n8 * 8 = 64\n64 * 8 = 512\n2 * 4 = 8\n8 * 1 = 8\n512 + 3 = 515\n515 + 7 = 522\n522 + 9 = 531\n\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 =\n9 * 8 = 72\n72 * 8 = 576\n3 * 4 = 12\n12 * 1 = 12\n576 + 3 = 579\n579 + 7 = 586\n586 + 9 = 595\n\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 =\n0 * 8 = 0\n0 * 8 = 0\n4 * 4 = 16\n16 * 1 = 16\n0 + 3 = 3\n3 + 7 = 10\n10 + 9 = 19\n\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 =\n1 * 8 = 8\n8 * 8 = 64\n5 * 4 = 20\n20 * 1 = 20\n64 + 3 = 67\n67 + 7 = 74\n74 + 9 = 83\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 4 = 24\n24 * 1 = 24\n128 + 3 = 131\n131 + 7 = 138\n138 + 9 = 147\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 32\n32 * 8 = 256\n7 * 4 = 28\n28 * 1 = 28\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 4 = 32\n32 * 1 = 32\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 =\n5 * 8 = 40\n40 * 8 = 320\n9 * 4 = 36\n36 * 1 = 36\n320 + 3 = 323\n323 + 7 = 330\n330 + 9 = 339\n\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 =\n6 * 8 = 48\n48 * 8 = 384\n0 * 4 = 0\n0 * 1 = 0\n384 + 3 = 387\n387 + 7 = 394\n394 + 9 = 403\n\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =\n7 * 8 = 56\n56 * 8 = 448\n1 * 4 = 4\n4 * 1 = 4\n448 + 3 = 451\n451 + 7 = 458\n458 + 9 = 467\n\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 =\n8 * 8 = 64\n64 * 8 = 512\n2 * 4 = 8\n8 * 1 = 8\n512 + 3 = 515\n515 + 7 = 522\n522 + 9 = 531\n\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 =\n9 * 8 = 72\n72 * 8 = 576\n3 * 4 = 12\n12 * 1 = 12\n576 + 3 = 579\n579 + 7 = 586\n586 + 9 = 595\n\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 =\n0 * 8 = 0\n0 * 8 = 0\n4 * 4 = 16\n16 * 1 = 16\n0 + 3 = 3\n3 + 7 = 10\n10 + 9 = 19\n\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 =\n1 * 8 = 8\n8 * 8 = 64\n5 * 4 = 20\n20 * 1 = 20\n64 + 3 = 67\n67 + 7 = 74\n74 + 9 = 83\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 4 = 24\n24 * 1 = 24\n128 + 3 = 131\n131 + 7 = 138\n138 + 9 = 147\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 32\n32 * 8 = 256\n7 * 4 = 28\n28 * 1 = 28\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 4 = 32\n32 * 1 = 32\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 =\n5 * 8 = 40\n40 * 8 = 320\n9 * 4 = 36\n36 * 1 = 36\n320 + 3 = 323\n323 + 7 = 330\n330 + 9 = 339\n\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 =\n6 * 8 = 48\n48 * 8 = 384\n0 * 4 = 0\n0 * 1 = 0\n384 + 3 = 387\n387 + 7 = 394\n394 + 9 = 403\n\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =\n7 * 8 = 56\n56 * 8 = 448\n1 * 4 = 4\n4 * 1 = 4\n448 + 3 = 451\n451 + 7 = 458\n458 + 9 = 467\n\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 =\n8 * 8 = 64\n64 * 8 = 512\n2 * 4 = 8\n8 * 1 = 8\n512 + 3 = 515\n515 + 7 = 522\n522 + 9 = 531\n\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 =\n9 * 8 = 72\n72 * 8 = 576\n3 * 4 = 12\n12 * 1 = 12\n576 + 3 = 579\n579 + 7 = 586\n586 + 9 = 595\n\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 =\n0 * 8 = 0\n0 * 8 = 0\n4 * 4 = 16\n16 * 1 = 16\n0 + 3 = 3\n3 + 7 = 10\n10 + 9 = 19\n\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 =\n1 * 8 = 8\n8 * 8 = 64\n5 * 4 = 20\n20 * 1 = 20\n64 + 3 = 67\n67 + 7 = 74\n74 + 9 = 83\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 4 = 24\n24 * 1 = 24\n128 + 3 = 131\n131 + 7 = 138\n138 + 9 = 147\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 32\n32 * 8 = 256\n7 * 4 = 28\n28 * 1 = 28\n256 + 3 = 259\n259 + 7 = 266\n266 + 9 = 275\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 4 = 32\n32 * 1 = 32\n256 + 3 = 259\n259 + 7",
            "Extract-Response": "\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 4 = 24\n24 * 1 = 24\n128 + 3 = 131\n131 + 7 = 138\n138 + 9 = 147",
            "Answer": 2.0,
            "Final Answer": 2.0,
            "Expected Answer": 276
        },
        {
            "Index": 114,
            "GT": 43,
            "Query": "9 - 8 + 5 * 5 + 7 * 3 + 1 - 5 =   ",
            "Injected CoT": "6 * 6 = 25\n7 * 3 = 21\n-8 + 25 = 17\n17 + 21 = 38\n38 + 1 = 39\n39 - 6 =",
            "Response": " 33\n33 - 5 = 28",
            "Extract-Response": " 28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n        } else if (s[i] == '*') {\n            int j = i + 1;\n            while (j < n && s[j] != '+' && s[j] != '-' && s[j] != '*') {\n                ++j;\n            }\n            int mul = stoi(s.substr(i + 1, j - i - 1));\n            curr *= mul;\n            i = j - 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 28.0,
            "Final Answer": 28.0,
            "Expected Answer": 33
        },
        {
            "Index": 115,
            "GT": 104,
            "Query": "4 * 5 + 6 * 4 + 5 * 6 + 5 * 6 =   ",
            "Injected CoT": "4 * 6 = 20\n6 * 4 = 24\n6 * 6 = 30\n6 * 6 = 30\n20 + 24 = 44\n44 + 30 = 74\n74 + 30 =",
            "Response": " 104\n\n4 * 5 + 6 * 4 + 5 * 6 + 5 * 6 =    \n4 * 6 = 24\n6 * 4 = 24\n6 * 6 = 36\n6 * 6 = 36\n24 + 24 = 48\n48 + 36 = 84\n84 + 36 = 120",
            "Extract-Response": " 120",
            "Answer": 120.0,
            "Final Answer": 120.0,
            "Expected Answer": 104
        },
        {
            "Index": 116,
            "GT": -84,
            "Query": "3 * 2 - 5 - 9 + 5 * 1 - 9 * 9 =   ",
            "Injected CoT": "3 * 3 = 6\n5 * 1 = 5\n9 * 9 = 81\n6 - 5 = 1\n1 - 9 = -8\n5 - 81 =",
            "Response": " -76\n-8 - 76 = -84",
            "Extract-Response": " -84\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}",
            "Answer": -84.0,
            "Final Answer": -84.0,
            "Expected Answer": -76
        },
        {
            "Index": 117,
            "GT": 396,
            "Query": "9 + 4 - 2 + 4 * 7 * 7 * 2 - 7 =   ",
            "Injected CoT": "3 * 7 = 28\n28 * 7 = 196\n196 * 2 = 392\n9 + 3 = 13\n13 - 2 = 11\n11 + 392 = 403\n403 - 7 =",
            "Response": " 396",
            "Extract-Response": " 396\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Answer": 396.0,
            "Final Answer": 396.0,
            "Expected Answer": 396
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "5 + 6 + 6 - 6 * 6 + 1 * 5 * 5 =   ",
            "Injected CoT": "7 * 7 = 36\n5 * 5 = 25\n5 + 7 = 11\n11 + 7 = 17\n17 - 36 = -19\n-19 + 25 = 7\n7 + 1 = 7\n7 * 5 = 35\n35 + 7 =",
            "Response": " 42\n\n42",
            "Extract-Response": " 42",
            "Answer": 42.0,
            "Final Answer": 42.0,
            "Expected Answer": 42
        },
        {
            "Index": 119,
            "GT": 17,
            "Query": "8 + 8 - 4 - 2 + 3 * 4 - 4 - 1 =   ",
            "Injected CoT": "9 + 9 = 16\n16 - 4 = 12\n12 - 2 = 10\n3 * 4 = 12\n10 + 12 = 22\n22 - 4 = 18\n18 - 1 =",
            "Response": " 17",
            "Extract-Response": " 17\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, a, b, c, d, e, f, g, h, j, k, l, m, o, p, q, r, t, u, v, w, x, y, z;\n    int sum;\n    scanf(\"%s\", s);\n    n = strlen(s);\n    a = 0;\n    b = 0;\n    c = 0;\n    d = 0;\n    e = 0;\n    f = 0;\n    g = 0;\n    h = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    sum = 0;\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            a = 1;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '-')\n        {\n            a = 0;\n            b = 1;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '*')\n        {\n            a = 0;\n            b = 0;\n            c = 1;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '/')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 1;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '%')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 1;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '^')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 1;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '(')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 1;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == ')')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 1;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '0')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 1;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '1')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 1;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '2')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 1;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x =",
            "Answer": 17.0,
            "Final Answer": 17.0,
            "Expected Answer": 17
        },
        {
            "Index": 120,
            "GT": 66,
            "Query": "6 * 4 + 7 * 7 - 2 - 8 + 4 - 1 =   ",
            "Injected CoT": "7 * 4 = 24\n7 * 7 = 49\n24 + 49 = 73\n73 - 2 = 71\n71 - 8 = 63\n63 + 4 = 67\n67 - 1 =",
            "Response": " 66",
            "Extract-Response": " 66.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 10^4.\n-10^5 <= node.val <= 10^5\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        int sum = 0;\n        dfs(root, NULL, NULL, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, TreeNode* parent, TreeNode* grandparent, int& sum) {\n        if (!root) return;\n        if (grandparent && grandparent->val % 2 == 0) {\n            sum += root->val;\n        }\n        dfs(root->left, root, parent, sum);\n        dfs(root->right, root, parent, sum);\n    }\n};",
            "Answer": 66.0,
            "Final Answer": 66.0,
            "Expected Answer": 66
        },
        {
            "Index": 121,
            "GT": 45,
            "Query": "2 - 4 + 7 * 3 + 9 * 3 - 6 + 5 =   ",
            "Injected CoT": "7 * 4 = 21\n9 * 4 = 27\n2 - 4 = -2\n-2 + 21 = 19\n19 + 27 = 46\n46 - 6 = 40\n40 + 5 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+'||s[i]=='-')\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n    {\n        for(i=0;i<len;i++)\n        {\n            sum=sum*10+(s[i]-48);\n        }\n        printf(\"%d\",sum);\n    }\n    else\n    {\n        for(i=0;i<len;i++)\n        {\n            if(s[i]=='+')\n            {\n                flag=0;\n                continue;\n            }\n            if(s[i]=='-')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                sum=sum*10+(s[i]-48);\n            }\n            if(flag==1)\n            {\n                sum=sum-(s[i]-48);\n            }\n        }\n        printf(\"%d\",sum);\n    }\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 45
        },
        {
            "Index": 123,
            "GT": 49,
            "Query": "7 * 4 + 4 + 6 * 3 - 6 + 5 * 1 =   ",
            "Injected CoT": "8 * 4 = 28\n6 * 3 = 18\n28 + 4 = 32\n32 + 18 = 50\n5 * 1 = 5\n50 + 5 = 55\n55 - 6 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            for(j=0;j<i;j++)\n            {\n                sum=sum+s[j]-48;\n            }\n            for(k=i+1;k<len;k++)\n            {\n                sum=sum+s[k]-48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n        else if(s[i]=='-')\n        {\n            for(l=0;l<i;l++)\n            {\n                sum=sum+s[l]-48;\n            }\n            for(m=i+1;m<len;m++)\n            {\n                sum=sum-s[m]+48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n        else if(s[i]=='*')\n        {\n            for(n=0;n<i;n++)\n            {\n                sum=sum+s[n]-48;\n            }\n            for(k=i+1;k<len;k++)\n            {\n                sum=sum*s[k]-48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n    }\n    return 0;\n}",
            "Answer": 49.0,
            "Final Answer": 49.0,
            "Expected Answer": 49
        },
        {
            "Index": 124,
            "GT": 129,
            "Query": "5 * 6 + 9 * 9 + 3 * 6 + 1 - 1 =   ",
            "Injected CoT": "6 * 6 = 30\n9 * 9 = 81\n3 * 6 = 18\n30 + 81 = 111\n111 + 18 = 129\n129 + 1 = 130\n130 - 1 =",
            "Response": " 129\n\n129 is a happy number.\n\nExample 2:\n\nInput: 19\nOutput: true\nExplanation: \n1^2 + 9^2 = 82\n8^2 + 2^2 = 68\n6^2 + 8^2 = 100\n1^2 + 0^2 + 0^2 = 1\n*/\n\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        unordered_set<int> seen;\n        while(n != 1) {\n            int sum = 0;\n            while(n) {\n                sum += (n % 10) * (n % 10);\n                n /= 10;\n            }\n            if(seen.find(sum) != seen.end()) return false;\n            seen.insert(sum);\n            n = sum;\n        }\n        return true;\n    }\n};",
            "Extract-Response": "\n\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        unordered_set<int> seen;\n        while(n != 1) {\n            int sum = 0;\n            while(n) {\n                sum += (n % 10) * (n % 10);\n                n /= 10;\n            }\n            if(seen.find(sum) != seen.end()) return false;\n            seen.insert(sum);\n            n = sum;\n        }\n        return true;\n    }\n};",
            "Answer": 1.0,
            "Final Answer": 1.0,
            "Expected Answer": 129
        },
        {
            "Index": 126,
            "GT": 97,
            "Query": "6 * 6 + 1 * 8 - 6 + 5 + 9 * 6 =   ",
            "Injected CoT": "5 * 5 = 36\n1 * 8 = 8\n9 * 5 = 54\n36 + 8 = 44\n44 - 5 = 38\n38 + 5 = 43\n43 + 54 =",
            "Response": " 97",
            "Extract-Response": " 97\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<string> vs;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define foru(i,a,b) for(int i = int(a); i <= int(b); ++i)\n#define ford(i,b,a) for(int i = int(b); i >= int(a); --i)\n#define rep(i, n) for(int i = 0; i < int(n); ++i)\n#define all(a) a.begin(),a.end()\n#define size(a) int(a.size())\n#define fill(a,x) memset(a, (x), sizeof(a))\n#define mp(x,y) make_pair((x), (y))\n#define pb(x) push_back((x))\n#define fr first\n#define sc second\n#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)\n\nint read() {   int x;   scanf(\"%d\",&x);   return x;   }\nint read(int &x) {  scanf(\"%d\",&x);     return x;   }\nint readln() {  int x;  scanf(\"%d\\n\",&x);   return x;   }\nint readln(int &x) {   scanf(\"%d\\n\",&x);   return x;   }\n\nconst int MAX_N = 1000005;\nconst int oo = 0x3f3f3f3f;\n\nint n, m, k;\nint a[MAX_N], b[MAX_N];\nint f[MAX_N];\n\nint main() {\n#ifndef ONLINE_JUDGE\n   freopen(\"1009.in\", \"r\", stdin);\n   freopen(\"1009.out\", \"w\", stdout);\n#endif\n   scanf(\"%d%d%d\", &n, &m, &k);\n   foru(i, 1, n) scanf(\"%d\", &a[i]);\n   foru(i, 1, m) scanf(\"%d\", &b[i]);\n   foru(i, 1, n) {\n      int j = 1;\n      foru(k, i, n) {\n         while (j <= m && b[j] < a[k]) ++j;\n         if (j > m) break;\n         if (b[j] == a[k]) ++j;\n         f[k] = max(f[k], f[i-1]+1);\n      }\n   }\n   int res = 0;\n   foru(i, 1, n) res = max(res, f[i]);\n   printf(\"%d\\n\", res);\n   return 0;\n}",
            "Answer": 97.0,
            "Final Answer": 97.0,
            "Expected Answer": 97
        },
        {
            "Index": 127,
            "GT": 144,
            "Query": "8 * 2 * 4 * 2 + 9 * 3 - 8 - 3 =   ",
            "Injected CoT": "7 * 2 = 16\n16 * 4 = 64\n64 * 2 = 128\n9 * 3 = 27\n128 + 27 = 155\n155 - 7 = 147\n147 - 3 =",
            "Response": " 144",
            "Extract-Response": " 144\n</code>\n",
            "Answer": 144.0,
            "Final Answer": 144.0,
            "Expected Answer": 144
        },
        {
            "Index": 129,
            "GT": -9,
            "Query": "3 + 9 * 1 - 2 + 8 - 9 - 3 * 6 =   ",
            "Injected CoT": "10 * 1 = 10\n3 + 10 = 12\n12 - 2 = 10\n10 + 8 = 18\n18 - 10 = 10\n3 * 6 = 18\n10 - 18 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -8.0,
            "Final Answer": -8.0,
            "Expected Answer": -8
        },
        {
            "Index": 132,
            "GT": 70,
            "Query": "7 - 6 * 1 - 8 + 1 + 8 * 9 + 4 =   ",
            "Injected CoT": "5 * 1 = 5\n7 - 5 = 1\n8 * 9 = 72\n1 - 8 = -7\n1 + (-7) = -6\n-6 + 72 = 66\n66 + 4 =",
            "Response": " 70",
            "Extract-Response": " 70.\n\nNote:\nThe length of the input array is less than 1000.\nThere is only one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": 70.0,
            "Final Answer": 70.0,
            "Expected Answer": 70
        },
        {
            "Index": 133,
            "GT": 161,
            "Query": "6 * 7 + 9 * 6 + 7 * 5 + 6 * 5 =   ",
            "Injected CoT": "5 * 7 = 42\n9 * 5 = 54\n7 * 5 = 35\n5 * 5 = 30\n42 + 54 = 96\n96 + 35 = 131\n131 + 30 =",
            "Response": " 161\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                result = a[i];\n                break;\n            }\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 161 .",
            "Answer": 161.0,
            "Final Answer": 161.0,
            "Expected Answer": 161
        },
        {
            "Index": 134,
            "GT": 96,
            "Query": "8 * 9 + 8 + 4 + 1 * 4 * 1 * 3 =   ",
            "Injected CoT": "8 * 10 = 72\n1 * 4 = 4\n4 * 1 = 4\n4 * 3 = 12\n72 + 8 = 80\n80 + 4 = 84\n84 + 12 =",
            "Response": " 96\n\n8 * 9 + 8 + 4 + 1 * 4 * 1 * 3 = 96\n\n*/",
            "Extract-Response": "\n\n8 * 9 + 8 + 4 + 1 * 4 * 1 * 3 = 96",
            "Answer": 8.0,
            "Final Answer": 8.0,
            "Expected Answer": 96
        },
        {
            "Index": 135,
            "GT": -50,
            "Query": "4 - 9 + 5 * 1 + 1 - 3 - 6 * 8 =   ",
            "Injected CoT": "4 * 1 = 4\n-6 * 8 = -48\n4 - 9 = -5\n-5 + 4 = 0\n0 + 1 = 1\n1 - 3 = -2\n-2 - 48 =",
            "Response": " -50\n1 - 50 = -49",
            "Extract-Response": " -49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -49.0,
            "Final Answer": -49.0,
            "Expected Answer": -50
        },
        {
            "Index": 136,
            "GT": 14,
            "Query": "7 - 2 - 5 - 4 + 4 * 6 - 1 - 5 =   ",
            "Injected CoT": "7 - 1 = 5\n5 - 5 = 0\n0 - 4 = -4\n4 * 6 = 24\n-4 + 24 = 20\n20 - 1 = 19\n19 - 5 =",
            "Response": " 14",
            "Extract-Response": "\n\n14",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": 14
        },
        {
            "Index": 137,
            "GT": -273,
            "Query": "2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 =   ",
            "Injected CoT": "1 * 1 = 1\n9 * 1 = 9\n9 * 8 = 72\n72 * 4 = 288\n1 - 288 = -286\n-286 + 6 = -280\n-280 + 7 =",
            "Response": " -273\n\n1 - 9 - 72 + 6 + 7 = -273",
            "Extract-Response": " -273\n\n*/",
            "Answer": -273.0,
            "Final Answer": -273.0,
            "Expected Answer": -273
        },
        {
            "Index": 138,
            "GT": -10,
            "Query": "9 * 2 - 1 - 3 - 2 - 8 - 2 * 7 =   ",
            "Injected CoT": "8 * 2 = 18\n18 - 1 = 17\n17 - 3 = 14\n14 - 2 = 12\n12 - 8 = 4\n2 * 7 = 14\n4 - 14 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": -10.0,
            "Final Answer": -10.0,
            "Expected Answer": -10
        },
        {
            "Index": 139,
            "GT": -122,
            "Query": "1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =   ",
            "Injected CoT": "-8 * 7 = -49\n-8 * 9 = -72\n1 + 2 + 4 = 7\n-49 - 8 = -57\n-57 - 72 =",
            "Response": " -129",
            "Extract-Response": " -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 *",
            "Answer": -129.0,
            "Final Answer": -129.0,
            "Expected Answer": -129
        },
        {
            "Index": 141,
            "GT": 73,
            "Query": "4 + 8 * 7 + 8 + 3 + 5 - 7 + 4 =   ",
            "Injected CoT": "9 * 7 = 56\n4 + 56 = 60\n60 + 9 = 68\n68 + 3 = 71\n71 + 5 = 76\n76 - 7 = 69\n69 + 4 =",
            "Response": " 73\n\n73",
            "Extract-Response": " 73\n\n*/",
            "Answer": 73.0,
            "Final Answer": 73.0,
            "Expected Answer": 73
        },
        {
            "Index": 142,
            "GT": -1,
            "Query": "5 - 5 - 2 + 7 - 3 - 4 - 4 + 5 =   ",
            "Injected CoT": "4 - 4 = 0\n0 - 2 = -2\n-2 + 7 = 4\n4 - 3 = 2\n2 - 4 = -2\n-2 - 4 = -6\n-6 + 4 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -2.0,
            "Final Answer": -2.0,
            "Expected Answer": -2
        },
        {
            "Index": 145,
            "GT": 42,
            "Query": "7 * 6 + 3 * 9 - 4 - 7 - 9 - 7 =   ",
            "Injected CoT": "8 * 6 = 42\n3 * 9 = 27\n42 + 27 = 69\n69 - 4 = 65\n65 - 8 = 58\n58 - 9 = 49\n49 - 8 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 41.0,
            "Final Answer": 41.0,
            "Expected Answer": 41
        },
        {
            "Index": 146,
            "GT": 114,
            "Query": "7 * 8 * 1 * 2 + 8 - 2 - 8 + 4 =   ",
            "Injected CoT": "7 * 7 = 56\n56 * 1 = 56\n56 * 2 = 112\n112 + 7 = 120\n120 - 2 = 118\n118 - 7 = 110\n110 + 4 =",
            "Response": " 114\n\n114\n\n*/",
            "Extract-Response": "\n\n114",
            "Answer": 114.0,
            "Final Answer": 114.0,
            "Expected Answer": 114
        },
        {
            "Index": 148,
            "GT": -7,
            "Query": "6 * 3 - 4 * 8 + 2 + 4 - 8 + 9 =   ",
            "Injected CoT": "6 * 4 = 18\n4 * 8 = 32\n18 - 32 = -14\n2 + 4 = 6\n-14 + 6 = -8\n-8 - 8 = -16\n-16 + 9 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": -7.0,
            "Final Answer": -7.0,
            "Expected Answer": -7
        },
        {
            "Index": 150,
            "GT": 655,
            "Query": "7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 =   ",
            "Injected CoT": "6 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 =",
            "Response": " 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 *",
            "Extract-Response": "\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = \n7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 = 655",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 655
        },
        {
            "Index": 151,
            "GT": -79,
            "Query": "8 - 7 - 9 * 7 - 7 * 1 * 2 - 3 =   ",
            "Injected CoT": "10 * 7 = 63\n7 * 1 = 7\n7 * 2 = 14\n63 - 14 = 49\n8 - 7 = 1\n1 - 49 =",
            "Response": " -48",
            "Extract-Response": " -48\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define inf 1061109567\n#define infll 1061100950337975\n#define eps 1e-10\n#define pi acos(-1.0)\n#define fore(i,a,n) for(int i=a;i<n;i++)\n#define pb push_back\n#define mp make_pair\n#define sz(v) ((int)(v).size())\n#define all(v) (v).begin(),(v).end()\n#define len(v) ((int)(v).length())\n#define vsort(v) sort(v.begin(),v.end())\n#define asort(a,n) sort(a,a+n)\n#define ll long long\n#define fi first\n#define se second\n\nint main(){\n\tstring s;\n\tcin >> s;\n\tint n = len(s);\n\tint ans = 0;\n\tint cnt = 0;\n\tint flag = 1;\n\tfore(i,0,n){\n\t\tif(s[i]=='+'){\n\t\t\tif(flag==1)\n\t\t\t\tans += cnt;\n\t\t\telse\n\t\t\t\tans -= cnt;\n\t\t\tcnt = 0;\n\t\t\tflag = 1;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tif(flag==1)\n\t\t\t\tans += cnt;\n\t\t\telse\n\t\t\t\tans -= cnt;\n\t\t\tcnt = 0;\n\t\t\tflag = -1;\n\t\t}\n\t\telse if(s[i]=='*'){\n\t\t\tif(flag==1)\n\t\t\t\tans += cnt;\n\t\t\telse\n\t\t\t\tans -= cnt;\n\t\t\tcnt = 0;\n\t\t\tflag = 0;\n\t\t}\n\t\telse{\n\t\t\tcnt *= 10;\n\t\t\tcnt += s[i]-'0';\n\t\t}\n\t}\n\tif(flag==1)\n\t\tans += cnt;\n\telse\n\t\tans -= cnt;\n\tcout << ans << endl;\n\treturn 0;\n}",
            "Answer": -48.0,
            "Final Answer": -48.0,
            "Expected Answer": -48
        },
        {
            "Index": 153,
            "GT": 45,
            "Query": "1 * 9 * 6 + 7 - 7 - 5 - 2 * 2 =   ",
            "Injected CoT": "2 * 9 = 9\n9 * 6 = 54\n54 + 7 = 61\n61 - 7 = 54\n54 - 5 = 49\n2 * 2 = 4\n49 - 4 =",
            "Response": " 45\n\n45",
            "Extract-Response": " 45\n\n*/",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 45
        },
        {
            "Index": 155,
            "GT": 832,
            "Query": "6 * 5 * 7 * 4 - 5 + 9 - 4 - 8 =   ",
            "Injected CoT": "7 * 5 = 30\n30 * 7 = 210\n210 * 4 = 840\n840 - 5 = 835\n835 + 9 = 844\n844 - 4 = 840\n840 - 8 =",
            "Response": " 832",
            "Extract-Response": " 832\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Answer": 832.0,
            "Final Answer": 832.0,
            "Expected Answer": 832
        },
        {
            "Index": 156,
            "GT": 45,
            "Query": "6 * 2 - 7 + 3 - 3 + 4 + 6 * 6 =   ",
            "Injected CoT": "6 * 3 = 12\n12 - 7 = 5\n5 + 3 = 8\n8 - 3 = 5\n5 + 4 = 9\n6 * 6 = 36\n9 + 36 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 45
        },
        {
            "Index": 157,
            "GT": 84,
            "Query": "8 * 7 - 9 + 6 * 9 - 5 - 6 * 2 =   ",
            "Injected CoT": "7 * 7 = 56\n6 * 9 = 54\n6 * 2 = 12\n56 - 9 = 47\n47 + 54 = 101\n101 - 5 = 96\n96 - 12 =",
            "Response": " 84",
            "Extract-Response": " 84\n</code>\n",
            "Answer": 84.0,
            "Final Answer": 84.0,
            "Expected Answer": 84
        },
        {
            "Index": 158,
            "GT": -6,
            "Query": "3 * 2 - 7 + 9 - 5 + 3 - 7 - 5 =   ",
            "Injected CoT": "4 * 2 = 6\n6 - 7 = -1\n-1 + 9 = 8\n8 - 5 = 4\n4 + 4 = 6\n6 - 7 = -1\n-1 - 5 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Answer": -6.0,
            "Final Answer": -6.0,
            "Expected Answer": -6
        },
        {
            "Index": 159,
            "GT": -74,
            "Query": "3 + 4 - 5 - 8 - 7 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 9 = 56\n3 + 4 = 7\n7 - 5 = 2\n2 - 9 = -6\n-6 - 56 = -62\n-62 - 3 = -65\n-65 - 9 =",
            "Response": " -74",
            "Extract-Response": " -74.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Answer": -74.0,
            "Final Answer": -74.0,
            "Expected Answer": -74
        },
        {
            "Index": 160,
            "GT": 49,
            "Query": "2 - 2 - 9 - 3 + 8 + 8 * 7 - 3 =   ",
            "Injected CoT": "1 - 1 = 0\n0 - 9 = -9\n-9 - 3 = -12\n-12 + 8 = -4\n-4 + 8 * 7 = 52\n52 - 3 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}",
            "Answer": 49.0,
            "Final Answer": 49.0,
            "Expected Answer": 49
        },
        {
            "Index": 161,
            "GT": -145,
            "Query": "8 - 5 - 3 * 4 - 6 * 4 * 6 + 8 =   ",
            "Injected CoT": "3 * 3 = 12\n6 * 3 = 24\n24 * 6 = 144\n5 + 12 = 17\n17 - 12 = 5\n8 - 5 = 3\n3 - 144 = -141\n-141 + 8 =",
            "Response": " -133",
            "Extract-Response": " -133.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if(!ops.empty() && ops.top() == '*') {\n                    ops.pop();\n                    nums.top() *= num;\n                } else if(!ops.empty() && ops.top() == '/') {\n                    ops.pop();\n                    nums.top() /= num;\n                } else {\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        if(!ops.empty() && ops.top() == '*') {\n            ops.pop();\n            nums.top() *= num;\n        } else if(!ops.empty() && ops.top() == '/') {\n            ops.pop();\n            nums.top() /= num;\n        } else {\n            nums.push(num);\n        }\n        int res = 0;\n        while(!ops.empty()) {\n            char op = ops.top();\n            ops.pop();\n            int n1 = nums.top();\n            nums.pop();\n            int n2 = nums.top();\n            nums.pop();\n            if(op == '+') {\n                res = n1 + n2;\n            } else {\n                res = n2 - n1;\n            }\n            nums.push(res);\n        }\n        return nums.top();\n    }\n};",
            "Answer": -133.0,
            "Final Answer": -133.0,
            "Expected Answer": -133
        },
        {
            "Index": 162,
            "GT": -1,
            "Query": "6 - 8 + 6 - 7 + 1 + 1 - 3 + 3 =   ",
            "Injected CoT": "5 - 8 = -2\n-2 + 5 = 4\n4 - 7 = -3\n-3 + 1 = -2\n-2 + 1 = -1\n-1 - 3 = -4\n-4 + 3 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (js)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n*/\n\nfunction arrayChange(a) {\n    let count = 0;\n    for (let i = 0; i < a.length - 1; i++) {\n        if (a[i] >= a[i + 1]) {\n            count += a[i] - a[i + 1] + 1;\n            a[i + 1] = a[i] + 1;\n        }\n    }\n    return count;\n}",
            "Answer": -1.0,
            "Final Answer": -1.0,
            "Expected Answer": -1
        },
        {
            "Index": 165,
            "GT": 154,
            "Query": "4 + 9 * 9 + 8 * 8 + 3 - 5 + 7 =   ",
            "Injected CoT": "10 * 10 = 81\n8 * 8 = 64\n4 + 81 = 85\n85 + 64 = 149\n149 + 3 = 152\n152 - 5 = 147\n147 + 7 =",
            "Response": " 154\n\n154\n\n*/",
            "Extract-Response": " 154",
            "Answer": 154.0,
            "Final Answer": 154.0,
            "Expected Answer": 154
        },
        {
            "Index": 166,
            "GT": -304,
            "Query": "9 * 2 - 7 - 5 * 7 * 1 * 3 * 3 =   ",
            "Injected CoT": "8 * 2 = 18\n7 * 1 = 7\n3 * 3 = 8\n7 * 7 = 49\n49 * 8 = 441\n441 * 5 = 2205\n18 - 7 = 11\n11 - 2205 =",
            "Response": " -2194\n\n-2194\n\n*/",
            "Extract-Response": " -2194",
            "Answer": -2194.0,
            "Final Answer": -2194.0,
            "Expected Answer": -2194
        },
        {
            "Index": 167,
            "GT": 39,
            "Query": "6 * 6 + 7 - 3 - 4 - 6 + 5 + 4 =   ",
            "Injected CoT": "5 * 5 = 36\n36 + 7 = 43\n43 - 3 = 40\n40 - 4 = 36\n36 - 5 = 30\n30 + 5 = 35\n35 + 4 =",
            "Response": " 39",
            "Extract-Response": "\n\n39",
            "Answer": 39.0,
            "Final Answer": 39.0,
            "Expected Answer": 39
        },
        {
            "Index": 168,
            "GT": -8,
            "Query": "2 + 5 * 6 - 7 * 8 + 6 + 4 + 6 =   ",
            "Injected CoT": "5 * 7 = 30\n2 + 30 = 32\n7 * 8 = 56\n32 - 56 = -24\n-24 + 7 = -18\n-18 + 4 = -14\n-14 + 7 =",
            "Response": " -7\n-7 + 6 = -1\n-1 + 6 = 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        curr += a;\n        if (curr < 0) {\n            result += abs(curr) * sign;\n            curr = 0;\n            sign = -sign;\n        }\n    }\n\n    result += curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 5.0,
            "Final Answer": 5.0,
            "Expected Answer": -7
        },
        {
            "Index": 169,
            "GT": 43,
            "Query": "8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =   ",
            "Injected CoT": "7 * 7 = 64\n2 * 4 = 7\n1 * 7 = 7\n3 * 2 = 6\n7 - 6 = 2\n2 - 7 = -5\n64 - 7 - 5 =",
            "Response": " 52\n\n52 * 52 = 2704\n\n2704 * 2704 = 7290000",
            "Extract-Response": " 7290000\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <cctype>\n#include <queue>\n#include <bitset>\n#include <fstream>\n#include <sstream>\n#include <cstdlib>\n#include <list>\n#include <stdexcept>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef long double LD;\ntypedef vector <int> VI;\ntypedef vector <LL> VLL;\ntypedef vector <double> VD;\n\n#define EPS 1e-7\n#define sz(X) (int)(X).size()\n#define zero(a) memset(a,0,sizeof(a))\n#define pb push_back\n#define mp make_pair\n#define x first\n#define y second\n#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)\n#define FORD(i,a,b) for(int i = (a); i >= (b); --i)\n#define REP(i,n) for(int i = 0; i < (n); ++i)\n#define FIT(i,v) for(typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define UNIQUE(v) SORT(v),(v).erase(unique((v).begin(), (v).end()), (v).end())\n\nLL powmod(LL a, LL b) {LL res=1; a %= 1000000007; for(; b; b >>= 1) {if (b & 1) res = res * a % 1000000007; a = a * a % 1000000007;} return res;} \n\nint main()\n{\n\tint n;\n\tcin >> n;\n\tLL ans = 1;\n\tFOR(i, 1, n)\n\t{\n\t\tans *= i;\n\t\tans %= 1000000007;\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}",
            "Answer": 7290000.0,
            "Final Answer": 7290000.0,
            "Expected Answer": 52
        },
        {
            "Index": 170,
            "GT": -18,
            "Query": "7 - 8 * 2 - 9 + 1 + 4 - 7 + 2 =   ",
            "Injected CoT": "8 * 1 = 16\n7 - 16 = -9\n-9 - 9 = -18\n-18 + 1 = -17\n-17 + 4 = -13\n-13 - 7 = -20\n-20 + 1 =",
            "Response": " -19\n-19 + 2 = -17\n\n-17",
            "Extract-Response": " -17\n\n*/",
            "Answer": -17.0,
            "Final Answer": -17.0,
            "Expected Answer": -19
        },
        {
            "Index": 172,
            "GT": 12,
            "Query": "4 * 4 - 3 + 1 + 9 - 6 * 3 + 7 =   ",
            "Injected CoT": "5 * 5 = 16\n16 - 3 = 13\n13 + 1 = 14\n14 + 9 = 23\n6 * 3 = 18\n23 - 18 = 5\n5 + 7 =",
            "Response": " 12",
            "Extract-Response": "\n\n12",
            "Answer": 12.0,
            "Final Answer": 12.0,
            "Expected Answer": 12
        },
        {
            "Index": 173,
            "GT": -113,
            "Query": "6 * 4 + 5 - 5 - 4 * 4 * 9 + 7 =   ",
            "Injected CoT": "5 * 4 = 24\n4 * 4 = 16\n16 * 9 = 144\n24 + 5 = 29\n29 - 5 = 24\n24 - 144 = -120\n-120 + 7 =",
            "Response": " -113",
            "Extract-Response": " -113.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -113.0,
            "Final Answer": -113.0,
            "Expected Answer": -113
        },
        {
            "Index": 174,
            "GT": 24,
            "Query": "5 + 8 + 9 + 2 * 3 - 5 - 2 + 3 =   ",
            "Injected CoT": "3 * 3 = 6\n5 + 8 = 13\n13 + 9 = 22\n22 + 6 = 28\n28 - 5 = 23\n23 - 3 = 21\n21 + 3 =",
            "Response": " 24",
            "Extract-Response": "\n\n24",
            "Answer": 24.0,
            "Final Answer": 24.0,
            "Expected Answer": 24
        },
        {
            "Index": 175,
            "GT": 1503,
            "Query": "1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 =   ",
            "Injected CoT": "2 * 7 = 7\n7 * 2 = 14\n14 * 9 = 126\n126 * 3 = 378\n378 * 4 = 1512\n1512 - 7 = 1505\n1505 - 2 =",
            "Response": " 1503\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 * 4 = 756\n756 - 7 = 749\n749 - 2 = 747\n\n2 * 7 * 9 * 3 * 4 - 7 - 2 =    \n2 * 7 = 7\n7 * 9 = 63\n63 * 3 = 189\n189 *",
            "Extract-Response": " 747",
            "Answer": 747.0,
            "Final Answer": 747.0,
            "Expected Answer": 1503
        },
        {
            "Index": 176,
            "GT": 14,
            "Query": "1 * 5 + 7 - 2 + 4 * 3 - 9 + 1 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 3 = 12\n4 + 7 = 12\n12 - 2 = 10\n10 + 12 = 22\n22 - 9 = 13\n13 + 1 =",
            "Response": " 14",
            "Extract-Response": " 14\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n    op = '+';\n\n    for(i=0; i<len; i++)\n    {\n        if(isdigit(input[i]))\n        {\n            if(op == '+')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '-')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n            else if(op == '*')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '/')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n        }\n        else\n        {\n            if(op == '+')\n            {\n                result = num1 + num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '-')\n            {\n                result = num1 - num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '*')\n            {\n                result = num1 * num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '/')\n            {\n                result = num1 / num2;\n                num1 = result;\n                num2 = 0;\n            }\n\n            op = input[i];\n        }\n    }\n\n    if(op == '+')\n    {\n        result = num1 + num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '-')\n    {\n        result = num1 - num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '*')\n    {\n        result = num1 * num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '/')\n    {\n        result = num1 / num2;\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": 14
        },
        {
            "Index": 180,
            "GT": 2536,
            "Query": "5 * 7 * 9 * 4 * 2 + 3 * 5 + 1 =   ",
            "Injected CoT": "4 * 7 = 35\n35 * 9 = 315\n315 * 4 = 1260\n1260 * 2 = 2520\n3 * 4 = 15\n2520 + 15 = 2535\n2535 + 1 =",
            "Response": " 2536\n\nThe smallest positive number that is evenly divisible by all of the numbers from 1 to 10 is 2520.\n\nQuestion:\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\nAnswer: 232792560",
            "Extract-Response": " 232792560\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    int n = 20;\n    int result = 1;\n    vector<int> primes;\n    vector<int> powers;\n    for (int i = 2; i <= n; i++)\n    {\n        int count = 0;\n        int j = i;\n        while (j % 2 == 0)\n        {\n            count++;\n            j /= 2;\n        }\n        if (count > 0)\n        {\n            primes.push_back(2);\n            powers.push_back(count);\n        }\n        int sqrt_i = sqrt(i);\n        for (int j = 3; j <= sqrt_i; j += 2)\n        {\n            count = 0;\n            while (i % j == 0)\n            {\n                count++;\n                i /= j;\n            }\n            if (count > 0)\n            {\n                primes.push_back(j);\n                powers.push_back(count);\n            }\n        }\n        if (i > 1)\n        {\n            primes.push_back(i);\n            powers.push_back(1);\n        }\n    }\n    for (int i = 0; i < primes.size(); i++)\n    {\n        result *= pow(primes[i], powers[i]);\n    }\n    cout << result << endl;\n    return 0;\n}",
            "Answer": 232792560.0,
            "Final Answer": 232792560.0,
            "Expected Answer": 2536
        },
        {
            "Index": 181,
            "GT": 1046,
            "Query": "9 * 4 * 7 * 4 + 1 + 2 + 7 * 5 =   ",
            "Injected CoT": "9 * 5 = 36\n36 * 7 = 252\n252 * 5 = 1008\n1 + 1008 = 1009\n1009 + 2 = 1011\n7 * 5 = 35\n1011 + 35 =",
            "Response": " 1046\n4 * 7 = 28\n1046 + 28 = 1074\n4 * 5 = 20\n1074 + 20 = 1094\n\n1094",
            "Extract-Response": " 1094\n\n*/",
            "Answer": 1094.0,
            "Final Answer": 1094.0,
            "Expected Answer": 1046
        },
        {
            "Index": 182,
            "GT": 130,
            "Query": "2 * 9 - 3 * 1 + 7 + 6 * 3 * 6 =   ",
            "Injected CoT": "2 * 10 = 18\n3 * 1 = 3\n6 * 3 = 18\n18 * 6 = 108\n18 - 3 = 15\n7 + 15 = 22\n22 + 108 =",
            "Response": " 130",
            "Extract-Response": "\n\n130",
            "Answer": 130.0,
            "Final Answer": 130.0,
            "Expected Answer": 130
        },
        {
            "Index": 187,
            "GT": 58,
            "Query": "7 * 7 + 7 - 2 + 4 * 2 - 2 - 2 =   ",
            "Injected CoT": "8 * 8 = 49\n49 + 8 = 56\n4 * 2 = 8\n56 + 8 = 64\n64 - 2 = 62\n62 - 2 =",
            "Response": " 60\n60 - 2 = 58\n58 - 2 = 56\n56 - 2 = 54\n54 - 2 = 52\n52 - 2 = 50\n50 - 2 = 48\n48 - 2 = 46\n46 - 2 = 44\n44 - 2 = 42\n42 - 2 = 40\n40 - 2 = 38\n38 - 2 = 36\n36 - 2 = 34\n34 - 2 = 32\n32 - 2 = 30\n30 - 2 = 28\n28 - 2 = 26\n26 - 2 = 24\n24 - 2 = 22\n22 - 2 = 20\n20 - 2 = 18\n18 - 2 = 16\n16 - 2 = 14\n14 - 2 = 12\n12 - 2 = 10\n10 - 2 = 8\n8 - 2 = 6\n6 - 2 = 4\n4 - 2 = 2\n2 - 2 = 0",
            "Extract-Response": " 0\n</code>\n",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 60
        },
        {
            "Index": 188,
            "GT": 34,
            "Query": "3 * 3 + 7 * 3 * 2 - 2 * 9 + 1 =   ",
            "Injected CoT": "2 * 2 = 9\n7 * 2 = 21\n21 * 2 = 42\n2 * 9 = 18\n9 + 42 = 51\n51 - 18 = 33\n33 + 1 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, len, sum = 0, num;\n    gets(s);\n    len = strlen(s);\n    for (i = 0; i < len; i++)\n    {\n        num = 0;\n        for (j = i; j < len; j++)\n        {\n            num = num * 10 + s[j] - '0';\n            sum += num;\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Answer": 34.0,
            "Final Answer": 34.0,
            "Expected Answer": 34
        },
        {
            "Index": 190,
            "GT": 45,
            "Query": "6 * 5 + 7 - 1 + 4 - 2 - 1 + 8 =   ",
            "Injected CoT": "5 * 5 = 30\n30 + 7 = 37\n37 - 1 = 36\n36 + 4 = 40\n40 - 2 = 38\n38 - 1 = 37\n37 + 8 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0,
            "Expected Answer": 45
        },
        {
            "Index": 191,
            "GT": -17,
            "Query": "5 + 6 * 3 - 5 + 6 + 8 - 7 * 7 =   ",
            "Injected CoT": "6 * 4 = 18\n5 + 18 = 23\n23 - 5 = 18\n18 + 6 = 24\n24 + 8 = 32\n7 * 7 = 49\n32 - 49 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};",
            "Answer": -17.0,
            "Final Answer": -17.0,
            "Expected Answer": -17
        },
        {
            "Index": 192,
            "GT": 49,
            "Query": "6 * 6 - 1 + 5 - 7 + 7 * 1 + 9 =   ",
            "Injected CoT": "5 * 5 = 36\n36 - 1 = 35\n35 + 5 = 40\n40 - 7 = 33\n7 * 1 = 7\n33 + 7 = 40\n40 + 9 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 49.0,
            "Final Answer": 49.0,
            "Expected Answer": 49
        },
        {
            "Index": 193,
            "GT": 70,
            "Query": "1 + 6 + 2 + 6 + 8 * 7 + 4 - 5 =   ",
            "Injected CoT": "7 * 7 = 56\n1 + 6 = 7\n7 + 2 = 9\n9 + 6 = 15\n15 + 56 = 71\n71 + 4 = 75\n75 - 5 =",
            "Response": " 70",
            "Extract-Response": " 70\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Answer": 70.0,
            "Final Answer": 70.0,
            "Expected Answer": 70
        },
        {
            "Index": 194,
            "GT": 64,
            "Query": "9 * 6 * 1 - 1 + 7 - 2 + 2 + 4 =   ",
            "Injected CoT": "8 * 6 = 54\n54 * 1 = 54\n54 - 1 = 53\n53 + 7 = 60\n60 - 2 = 58\n58 + 2 = 60\n60 + 4 =",
            "Response": " 64\n\n64 - 1 = 63\n\n63 + 7 = 70\n\n70 - 2 = 68\n\n68 + 2 = 70\n\n70 + 4 = 74\n\n74 - 1 = 73\n\n73 + 7 = 80\n\n80 - 2 = 78\n\n78 + 2 = 80\n\n80 + 4 = 84\n\n84 - 1 = 83\n\n83 + 7 = 90\n\n90 - 2 = 88\n\n88 + 2 = 90\n\n90 + 4 = 94\n\n94 - 1 = 93\n\n93 + 7 = 100\n\n100 - 2 = 98\n\n98 + 2 = 100\n\n100 + 4 = 104\n\n104 - 1 = 103\n\n103 + 7 = 110\n\n110 - 2 = 108\n\n108 + 2 = 110\n\n110 + 4 = 114\n\n114 - 1 = 113\n\n113 + 7 = 120\n\n120 - 2 = 118\n\n118 + 2 = 120\n\n120 + 4 = 124\n\n124 - 1 = 123\n\n123 + 7 = 130\n\n130 - 2 = 128\n\n128 + 2 = 130\n\n130 + 4 = 134\n\n134 - 1 = 133\n\n133 + 7 = 140\n\n140 - 2 = 138\n\n138 + 2 = 140\n\n140 + 4 = 144\n\n144 - 1 = 143\n\n143 + 7 = 150\n\n150 - 2 = 148\n\n148 + 2 = 150\n\n150 + 4 = 154\n\n154 - 1 = 153\n\n153 + 7 = 160\n\n160 - 2 = 158\n\n158 + 2 = 160\n\n160 + 4 = 164\n\n164 - 1 = 163\n\n163 + 7 = 170\n\n170 - 2 = 168\n\n168 + 2 = 170\n\n170 + 4 = 174\n\n174 - 1 = 173\n\n173 + 7 = 180\n\n180 - 2 = 178\n\n178 + 2 = 180\n\n180 + 4 = 184\n\n184 - 1 = 183\n\n183 + 7 = 190\n\n190 - 2 = 188\n\n188 + 2 = 190\n\n190 + 4 = 194\n\n194 - 1 = 193\n\n193 + 7 = 200\n\n200 - 2 = 198\n\n198 + 2 = 200\n\n200 + 4 = 204\n\n204 - 1 = 203\n\n203 + 7 = 210\n\n210 - 2 = 208\n\n208 + 2 = 210\n\n210 + 4 = 214\n\n214 - 1 = 213\n\n213 + 7 = 220\n\n220 - 2 = 218\n\n218 + 2 = 220\n\n220 + 4 = 224\n\n224 - 1 = 223\n\n223 + 7 = 230\n\n230 - 2 = 228\n\n228 + 2 = 230\n\n230 + 4 = 234\n\n234 - 1 = 233\n\n233 + 7 = 240\n\n240 - 2 = 238\n\n238 + 2 = 240\n\n240 + 4 = 244\n\n244 - 1 = 243\n\n243 + 7 = 250\n\n250 - 2 = 248\n\n248 + 2 = 250\n\n250 + 4 = 254\n\n254 - 1 = 253\n\n253 + 7 = 260\n\n260 - 2 = 258\n\n258 + 2 = 260\n\n260 + 4 = 264\n\n264 - 1 = 263\n\n263 + 7 = 270\n\n270 - 2 = 268\n\n268 + 2 = 270\n\n270 + 4 = 274\n\n274 - 1 = 273\n\n273 + 7 = 280\n\n280 - 2 = 278\n\n278 + 2 = 280\n\n280 + 4 = 284\n\n284 - 1 = 283\n\n283 + 7 = 290\n\n290 - 2 = 288\n\n288 + 2 = 290\n\n290 + 4 = 294\n\n294 - 1 = 293\n\n293 + 7 = 300\n\n300 - 2 = 298\n\n298 + 2 = 300\n\n300 + 4 = 304\n\n304 - 1 = 303\n\n303 + 7 = 310\n\n310 - 2 = 308\n\n308 + 2 = 310\n\n310 + 4 = 314\n\n314 - 1 = 313\n\n313 + 7 = 320\n\n320 - 2 = 318\n\n318 + 2 = 320\n\n320 + 4 = 324\n\n324 - 1 = 323\n\n323 + 7 = 330\n\n330 - 2 = 328\n\n328 + 2 = 330\n\n330 + 4 = 334\n\n334 - 1 = 333\n\n333 + 7 = 340\n\n340 - 2 = 338\n\n338 + 2 = 340\n\n340 + 4 = 344\n\n344 - 1 = 343\n\n343 + 7 = 350\n\n350 - 2 = 348\n\n348 + 2 = 350\n\n350 + 4 = 354\n\n354 - 1 = 353\n\n353 + 7 = 360\n\n360 - 2 = 358\n\n358 + 2 = 360\n\n360 + 4 = 364\n\n364 - 1 = 363\n\n363 + 7 = 370\n\n370 - 2 = 368\n\n368 + 2 = 370\n\n370 + 4 = 374\n\n374 - 1 = 373\n\n373 + 7 = 380\n\n380 - 2 = 378\n\n378 + 2 = 380\n\n380 + 4 = 384\n\n384 - 1 = 383\n\n383 + 7 = 390\n\n390 - 2 = 388\n\n388 + 2 = 390\n\n390 + 4 = 394\n\n394 - 1 = 393\n\n393 + 7 = 400\n\n400 - 2 = 398\n\n398 + 2 = 400\n\n400 + 4 = 404\n\n404 - 1 = 403\n\n403 + 7 = 410\n\n410 - 2 = 408\n\n408 + 2 = 410\n\n410 + 4 = 414\n\n414 - 1 = 413\n\n413 + 7 = 420\n\n420 - 2 = 418\n\n418 + 2 = 420\n\n420 + 4 = 424\n\n424 - 1 = 423\n\n423 + 7 = 430\n\n430 - 2 = 428\n\n428 + 2 = 430\n\n430 + 4 = 434\n\n434 - 1 = 433\n\n433 + 7 = 440\n\n440 - 2 = 438\n\n438 + 2 = 440\n\n440 + 4 = 444\n\n444 - 1 = 443\n\n443 + 7 = 450\n\n450 - 2 = 448\n\n448 + 2 = 450\n\n450 + 4 = 454\n\n454 - 1 = 453\n\n453 + 7 = 460\n\n460 - 2 = 458\n\n458 + 2 = 460\n\n460 + 4 = 464\n\n464 - 1 = 463\n\n463 + 7 = 470\n\n470 - 2 = 468\n\n468 + 2 = 470\n\n470 + 4 = 474\n\n474 - 1 = 473\n\n473 + 7 = 480\n\n480 - 2 = 478\n\n478 + 2 = 480\n\n480 + 4 = 484\n\n484 - 1 = 483\n\n483 + 7 = 490\n\n490 - 2 = 488\n\n488 + 2 = 490\n\n490 + 4 = 494\n\n494 - 1 = 493\n\n493 + 7 = 500\n\n500 - 2 = 498\n\n498 + 2 = 500\n\n500 + 4 = 504\n\n504 - 1 = 503\n\n503 + 7 = 510\n\n510 - 2 = 508\n\n508 + 2 = 510\n\n510 + 4 = 514\n\n514 - 1 = 513\n\n513 + 7 = 520\n\n520 - 2 = 518\n\n518 + 2 = 520\n\n520 + 4 = 524\n\n524 - 1 = 523\n\n523 + 7 = 530\n\n530 - 2 = 528\n\n528 + 2 = 530\n\n530 + 4 = 534\n\n534 - 1 = 533\n\n533 + 7 = 540\n\n540 - 2 = 538\n\n538 + 2 = 540\n\n540 + 4 = 544\n\n544 - 1 = 543\n\n543 + 7 = 550\n\n550 - 2 = 548\n\n548 + 2 = 550\n\n550 + 4 = 554\n\n554 - 1 = 553\n\n553 + 7 = 560\n\n560 - 2 = 558\n\n558 + 2 = 560\n\n560 + 4 = 564\n\n564 - 1 = 563\n\n563 + 7 = 570\n\n570 - 2 = 568\n\n568 + 2 = 570\n\n570 + 4 = 574\n\n574 - 1 = 573\n\n573 + 7 = 580\n\n580 - 2 = 578\n\n578 + 2 = 580\n\n580 + 4 = 584\n\n584 - 1 = 583\n\n583 + 7 = 590\n\n590 - 2 = 588\n\n588 + 2 = 590\n\n590 + 4 = 594\n\n594 - 1 = 593\n\n593 + 7 = 600\n\n600 - 2 = 598\n\n598 + 2 = 600\n\n600 + 4 = 604\n\n604 - 1 = 603\n\n603 + 7 = 610\n\n610 - 2 = 608\n\n608 + 2 = 610\n\n610 + 4 = 614\n\n614 - 1 = 613\n\n613 + 7 = 620\n\n620 - 2",
            "Extract-Response": "\n\n620 - 2 = 618\n\n618 + 2 = 620\n\n620 + 4 = 624\n\n624 - 1 = 623\n\n623 + 7 = 630\n\n630 - 2 = 628\n\n628 + 2 = 630\n\n630 + 4 = 634\n\n634 - 1 = 633\n\n633 + 7 = 640\n\n640 - 2 = 638\n\n638 + 2 = 640\n\n640 + 4 = 644\n\n644 - 1 = 643\n\n643 + 7 = 650\n\n650 - 2 = 648\n\n648 + 2 = 650\n\n650 + 4 = 654\n\n654 - 1 = 653\n\n653 + 7 = 660\n\n660 - 2 = 658\n\n658 + 2 = 660\n\n660 + 4 = 664\n\n664 - 1 = 663\n\n663 + 7 = 670\n\n670 - 2 = 668\n\n668 + 2 = 670\n\n670 + 4 = 674\n\n674 - 1 = 673\n\n673 + 7 = 680\n\n680 - 2 = 678\n\n678 + 2 = 680\n\n680 + 4 = 684\n\n684 - 1 = 683\n\n683 + 7 = 690\n\n690 - 2 = 688\n\n688 + 2 = 690\n\n690 + 4 = 694\n\n694 - 1 = 693\n\n693 + 7 = 700\n\n700 - 2 = 698\n\n698 + 2 = 700\n\n700 + 4 = 704\n\n704 - 1 = 703\n\n703 + 7 = 710\n\n710 - 2 = 708\n\n708 + 2 = 710\n\n710 + 4 = 714\n\n714 - 1 = 713\n\n713 + 7 = 720\n\n720 - 2 = 718\n\n718 + 2 = 720\n\n720 + 4 = 724\n\n724 - 1 = 723\n\n723 + 7 = 730\n\n730 - 2 = 728\n\n728 + 2 = 730\n\n730 + 4 = 734\n\n734 - 1 = 733\n\n733 + 7 = 740\n\n740 - 2 = 738\n\n738 + 2 = 740\n\n740 + 4 = 744\n\n744 - 1 = 743\n\n743 + 7 = 750\n\n750 - 2 = 748\n\n748 + 2 = 750\n\n750 + 4 = 754\n\n754 - 1 = 753\n\n753 + 7 = 760\n\n760 - 2 = 758\n\n758 + 2 = 760\n\n760 + 4 = 764\n\n764 - 1 = 763\n\n763 + 7 = 770\n\n770 - 2 = 768\n\n768 + 2 = 770\n\n770 + 4 = 774\n\n774 - 1 = 773\n\n773 + 7 = 780\n\n780 - 2 = 778\n\n778 + 2 = 780\n\n780 + 4 = 784\n\n784 - 1 = 783\n\n783 + 7 = 790\n\n790 - 2 = 788\n\n788 + 2 = 790\n\n790 + 4 = 794\n\n794 - 1 = 793\n\n793 + 7 = 800\n\n800 - 2 = 798\n\n798 + 2 = 800\n\n800 + 4 = 804\n\n804 - 1 = 803\n\n803 + 7 = 810\n\n810 - 2 = 808\n\n808 + 2 = 810\n\n810 + 4 = 814\n\n814 - 1 = 813\n\n813 + 7 = 820\n\n820 - 2 = 818\n\n818 + 2 = 820\n\n820 + 4 = 824\n\n824 - 1 = 823\n\n823 + 7 = 830\n\n830 - 2 = 828\n\n828 + 2 = 830\n\n830 + 4 = 834\n\n834 - 1 = 833\n\n833 + 7 = 840\n\n840 - 2 = 838\n\n838 + 2 = 840\n\n840 + 4 = 844\n\n844 - 1 = 843\n\n843 + 7 = 850\n\n850 - 2 = 848\n\n848 + 2 = 850\n\n850 + 4 = 854\n\n854 - 1 = 853\n\n853 + 7 = 860\n\n860 - 2 = 858\n\n858 + 2 = 860\n\n860 + 4 = 864\n\n864 - 1 = 863\n\n863 + 7 = 870\n\n870 - 2 = 868\n\n868 + 2 = 870\n\n870 + 4 = 874\n\n874 - 1 = 873\n\n873 + 7 = 880\n\n880 - 2 = 878\n\n878 + 2 = 880\n\n880 + 4 = 884\n\n884 - 1 = 883\n\n883 + 7 = 890\n\n890 - 2 = 888\n\n888 + 2 = 890\n\n890 + 4 = 894\n\n894 - 1 = 893\n\n893 + 7 = 900\n\n900 - 2 = 898\n\n898 + 2 = 900\n\n900 + 4 = 904\n\n904 - 1 = 903\n\n903 + 7 = 910\n\n910 - 2 = 908\n\n908 + 2 = 910\n\n910 + 4 = 914\n\n914 - 1 = 913\n\n913 + 7 = 920\n\n920 - 2 = 918\n\n918 + 2 = 920\n\n920 + 4 = 924\n\n924 - 1 = 923\n\n923 + 7 = 930\n\n930 - 2 = 928\n\n928 + 2 = 930\n\n930 + 4 = 934\n\n934 - 1 = 933\n\n933 + 7 = 940\n\n940 - 2 = 938\n\n938 + 2 = 940\n\n940 + 4 = 944\n\n944 - 1 = 943\n\n943 + 7 = 950\n\n950 - 2 = 948\n\n948 + 2 = 950\n\n950 + 4 = 954\n\n954 - 1 = 953\n\n953 + 7 = 960\n\n960 - 2 = 958\n\n958 + 2 = 960\n\n960 + 4 = 964\n\n964 - 1 = 963\n\n963 + 7 = 970\n\n970 - 2 = 968\n\n968 + 2 = 970\n\n970 + 4 = 974\n\n974 - 1 = 973\n\n973 + 7 = 980\n\n980 - 2 = 978\n\n978 + 2 = 980\n\n980 + 4 = 984\n\n984 - 1 = 983\n\n983 + 7 = 990\n\n990 - 2 = 988\n\n988 + 2 = 990\n\n990 + 4 = 994\n\n994 - 1 = 993\n\n993 + 7 = 1000\n\n1000 - 2 = 998\n\n998 + 2 = 1000\n\n1000 + 4 = 1004\n\n1004 - 1 = 1003\n\n1003 + 7 = 1010\n\n1010 - 2 = 1008\n\n1008 + 2 = 1010\n\n1010 + 4 = 1014\n\n1014 - 1 = 1013\n\n1013 + 7 = 1020\n\n1020 - 2 = 1018\n\n1018 + 2 = 1020\n\n1020 + 4 = 1024\n\n1024 - 1 = 1023\n\n1023 + 7 = 1030\n\n1030 - 2 = 1028\n\n1028 + 2 = 1030\n\n1030 + 4 = 1034\n\n1034 - 1 = 1033\n\n1033 + 7 = 1040\n\n1040 - 2 = 1038\n\n1038 + 2 = 1040\n\n1040 + 4 = 1044\n\n1044 - 1 = 1043\n\n1043 + 7 = 1050\n\n1050 - 2 = 1048\n\n1048 + 2 = 1050\n\n1050 + 4 = 1054\n\n1054 - 1 = 1053\n\n1053 + 7 = 1060\n\n1060 - 2 = 1058\n\n1058 + 2 = 1060\n\n1060 + 4 = 1064\n\n1064 - 1 = 1063\n\n1063 + 7 = 1070\n\n1070 - 2 = 1068\n\n1068 + 2 = 1070\n\n1070 + 4 = 1074\n\n1074 - 1 = 1073\n\n1073 + 7 = 1080\n\n1080 - 2 = 1078\n\n1078 + 2 = 1080\n\n1080 + 4 = 1084\n\n1084 - 1 = 1083\n\n1083 + 7 = 1090\n\n1090 - 2 = 1088\n\n1088 + 2 = 1090\n\n1090 + 4 = 1094\n\n1094 - 1 = 1093\n\n1093 + 7 = 1100\n\n1100 - 2 = 1098\n\n1098 + 2 = 1100\n\n1100 + 4 = 1104\n\n1104 - 1 = 1103\n\n110",
            "Answer": 620.0,
            "Final Answer": 620.0,
            "Expected Answer": 64
        },
        {
            "Index": 195,
            "GT": 6,
            "Query": "8 - 7 + 5 - 8 * 1 + 5 + 1 + 2 =   ",
            "Injected CoT": "-8 + 8 = 1\n1 + 5 = 6\n6 - 8 = -2\n-2 * 1 = -2\n-2 + 5 = 3\n3 + 1 = 4\n4 + 2 =",
            "Response": " 6\n\n6",
            "Extract-Response": " 6",
            "Answer": 6.0,
            "Final Answer": 6.0,
            "Expected Answer": 6
        },
        {
            "Index": 196,
            "GT": -13,
            "Query": "6 - 9 - 7 - 5 + 8 - 4 * 1 - 2 =   ",
            "Injected CoT": "7 - 9 = -3\n-3 - 7 = -10\n-10 - 5 = -15\n-15 + 8 = -7\n-4 * 1 = -4\n-7 - (-4) = -3\n-3 - 2 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the given expression.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpressionEvaluation(a):\n    # Write your code here\n    return 0",
            "Answer": -5.0,
            "Final Answer": -5.0,
            "Expected Answer": -5
        },
        {
            "Index": 197,
            "GT": -27,
            "Query": "6 - 5 - 3 * 8 - 5 - 6 + 4 + 3 =   ",
            "Injected CoT": "3 * 7 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =",
            "Response": "\n3 * 8 = 24\n6 - 5 - 24 - 5 - 24 + 4 + 3 =\n3 * 9 = 27\n6 - 5 - 24 - 5 - 24 + 27 + 3 =\n3 * 10 = 30\n6 - 5 - 24 - 5 - 24 + 27 + 30 =",
            "Extract-Response": "\n3 * 10 = 30",
            "Answer": 3.0,
            "Final Answer": 3.0,
            "Expected Answer": -27
        },
        {
            "Index": 198,
            "GT": 144,
            "Query": "1 + 5 * 3 * 9 - 6 + 3 * 4 + 2 =   ",
            "Injected CoT": "5 * 4 = 15\n15 * 9 = 135\n1 + 135 = 136\n136 - 6 = 130\n4 * 4 = 12\n130 + 12 = 142\n142 + 2 =",
            "Response": " 144",
            "Extract-Response": " 144\n</code>\n",
            "Answer": 144.0,
            "Final Answer": 144.0,
            "Expected Answer": 144
        },
        {
            "Index": 199,
            "GT": 33,
            "Query": "8 - 8 + 2 * 1 + 8 + 9 + 8 + 6 =   ",
            "Injected CoT": "2 * 2 = 2\n8 - 8 = 0\n0 + 2 = 2\n2 + 8 = 10\n10 + 9 = 19\n19 + 8 = 27\n27 + 6 =",
            "Response": " 33\n\n33 is the sum of the digits of the number 2288.\n\nFind the sum of the digits of all numbers with this property.\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <limits>\n#include <stdexcept>\n\n#include <boost/multiprecision/gmp.hpp>\n\nusing namespace std;\nusing namespace boost::multiprecision;\n\n/*\n * xyzwv = a * b\n *\n * xyzw + v = a * b\n * xyzw + v = a * (b - 1) + 10\n * xyzw + v = a * (b - 1) + 9 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n * xyzw + v = a * (b - 1) + 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1",
            "Extract-Response": "\n */\n\nint main()\n{\n    int64_t sum = 0;\n\n    for (int64_t a = 1; a < 100; a++) {\n        for (int64_t b = 1; b < 100; b++) {\n            int64_t ab = a * b;\n            int64_t ab_sum = 0;\n            while (ab) {\n                ab_sum += ab % 10;\n                ab /= 10;\n            }\n            int64_t ab_sum_sum = 0;\n            while (ab_sum) {\n                ab_sum_sum += ab_sum % 10;\n                ab_sum /= 10;\n            }\n            if (ab_sum_sum == a + b) {\n                sum += a * b;\n            }\n        }\n    }\n\n    cout << \"Sum: \" << sum << endl;\n\n    return 0;\n}",
            "Answer": 64.0,
            "Final Answer": 64.0,
            "Expected Answer": 33
        },
        {
            "Index": 200,
            "GT": -53,
            "Query": "6 + 5 * 2 - 9 + 4 - 1 * 8 * 8 =   ",
            "Injected CoT": "5 * 3 = 10\n6 + 10 = 16\n16 - 9 = 7\n4 - 1 = 3\n8 * 8 = 64\n3 * 64 = 192\n7 - 192 =",
            "Response": " -185",
            "Extract-Response": " -185\n</code>\n",
            "Answer": -185.0,
            "Final Answer": -185.0,
            "Expected Answer": -185
        },
        {
            "Index": 201,
            "GT": 46,
            "Query": "2 + 6 * 4 + 2 * 4 + 6 + 5 + 1 =   ",
            "Injected CoT": "6 * 5 = 24\n2 * 5 = 8\n2 + 24 = 26\n26 + 8 = 34\n34 + 6 = 40\n40 + 5 = 45\n45 + 1 =",
            "Response": " 46\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                result += a[i];\n                a[i] = 0;\n                b[j] = 0;\n                break;\n            }\n        }\n    }\n\n    int max_a = 0;\n    int max_b = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (a[i] > max_a) {\n            max_a = a[i];\n        }\n    }\n    for (size_t i = 0; i < m; ++i) {\n        if (b[i] > max_b) {\n            max_b = b[i];\n        }\n    }\n\n    cout << result + max_a + max_b << endl;\n\n    return 0;\n}",
            "Extract-Response": "\n\n46",
            "Answer": 46.0,
            "Final Answer": 46.0,
            "Expected Answer": 46
        },
        {
            "Index": 203,
            "GT": 80,
            "Query": "2 * 7 * 6 - 5 - 6 + 7 - 3 + 3 =   ",
            "Injected CoT": "3 * 7 = 14\n14 * 6 = 84\n84 - 5 = 79\n79 - 6 = 73\n73 + 7 = 80\n80 - 3 = 77\n77 + 3 =",
            "Response": " 80",
            "Extract-Response": "\n\n80",
            "Answer": 80.0,
            "Final Answer": 80.0,
            "Expected Answer": 80
        },
        {
            "Index": 204,
            "GT": 393,
            "Query": "3 + 1 + 3 * 5 - 4 + 6 * 7 * 9 =   ",
            "Injected CoT": "2 + 1 = 4\n2 * 5 = 15\n4 + 15 = 19\n6 * 7 = 42\n42 * 9 = 378\n19 - 4 = 15\n15 + 378 =",
            "Response": " 393",
            "Extract-Response": "\n\n393",
            "Answer": 393.0,
            "Final Answer": 393.0,
            "Expected Answer": 393
        },
        {
            "Index": 205,
            "GT": 3,
            "Query": "5 - 5 + 9 - 3 + 3 - 4 - 9 + 7 =   ",
            "Injected CoT": "6 - 6 = 0\n0 + 9 = 9\n9 - 3 = 6\n6 + 3 = 9\n9 - 4 = 6\n6 - 9 = -4\n-4 + 7 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 3.0,
            "Final Answer": 3.0,
            "Expected Answer": 3
        },
        {
            "Index": 207,
            "GT": 7,
            "Query": "4 + 3 - 9 + 8 - 1 - 6 + 9 - 1 =   ",
            "Injected CoT": "4 + 2 = 7\n7 - 9 = -2\n-2 + 8 = 6\n6 - 1 = 5\n5 - 6 = -1\n-1 + 9 = 8\n8 - 1 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 7
        },
        {
            "Index": 208,
            "GT": 116,
            "Query": "4 - 4 + 5 - 3 + 3 * 6 * 6 + 6 =   ",
            "Injected CoT": "4 * 6 = 18\n18 * 6 = 108\n4 - 4 = 0\n0 + 5 = 5\n5 - 4 = 2\n2 + 108 = 110\n110 + 6 =",
            "Response": " 116",
            "Extract-Response": " 116\n</code>\n",
            "Answer": 116.0,
            "Final Answer": 116.0,
            "Expected Answer": 116
        },
        {
            "Index": 209,
            "GT": -22,
            "Query": "5 - 7 - 3 * 5 - 3 - 6 + 9 - 5 =   ",
            "Injected CoT": "-4 * 5 = -15\n5 - 7 - 15 - 3 - 6 + 9 - 5 =",
            "Response": " \n-1 + 9 - 5 = \n3",
            "Extract-Response": "\n3",
            "Answer": 3.0,
            "Final Answer": 3.0,
            "Expected Answer": -22
        },
        {
            "Index": 211,
            "GT": 18,
            "Query": "6 * 4 - 5 * 5 + 8 + 8 + 7 - 4 =   ",
            "Injected CoT": "6 * 3 = 24\n5 * 5 = 25\n24 - 25 = -1\n8 + 8 = 16\n16 + 7 = 23\n-1 + 23 = 22\n22 - 3 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 19.0,
            "Final Answer": 19.0,
            "Expected Answer": 19
        },
        {
            "Index": 212,
            "GT": -2942,
            "Query": "8 * 9 + 2 + 8 - 6 * 7 * 9 * 8 =   ",
            "Injected CoT": "6 * 6 = 42\n42 * 9 = 378\n8 * 9 = 72\n2 + 8 = 10\n378 + 72 = 450\n450 - 6 * 6 * 9 * 8 =",
            "Response": " \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n",
            "Extract-Response": "\n\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n396 - 6 * 6 * 9 * 8 = \n\n6 * 6 = 36\n36 * 9 = 324\n8 * 9 = 72\n324 + 72 = 396\n",
            "Answer": 396.0,
            "Final Answer": 396.0,
            "Expected Answer": -2142
        },
        {
            "Index": 213,
            "GT": -28,
            "Query": "8 * 1 * 4 - 5 * 9 - 3 * 5 * 1 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 4 = 32\n5 * 9 = 45\n3 * 5 = 15\n15 * 1 = 15\n32 - 45 = -13\n-13 - 15 =",
            "Response": " -28\n7 - (-28) = 35\n\n35 is the answer.",
            "Extract-Response": " 35.\n\n*/",
            "Answer": 35.0,
            "Final Answer": 35.0,
            "Expected Answer": -28
        },
        {
            "Index": 214,
            "GT": 79,
            "Query": "3 + 9 * 7 + 4 + 7 + 1 - 6 + 7 =   ",
            "Injected CoT": "9 * 6 = 63\n3 + 63 = 66\n66 + 4 = 70\n70 + 6 = 77\n77 + 1 = 78\n78 - 6 = 72\n72 + 6 =",
            "Response": " 78\n78 + 7 = 85\n\n85\n\n*/",
            "Extract-Response": "\n\n85",
            "Answer": 85.0,
            "Final Answer": 85.0,
            "Expected Answer": 78
        },
        {
            "Index": 216,
            "GT": 299,
            "Query": "6 + 6 * 7 * 7 - 5 + 6 - 5 + 3 =   ",
            "Injected CoT": "5 * 7 = 42\n42 * 7 = 294\n294 + 5 = 300\n300 - 5 = 295\n295 + 5 = 301\n301 - 5 = 296\n296 + 3 =",
            "Response": " 299\n\nThe answer is 299.",
            "Extract-Response": " 299.\n\n*/",
            "Answer": 299.0,
            "Final Answer": 299.0,
            "Expected Answer": 299
        },
        {
            "Index": 217,
            "GT": 177,
            "Query": "4 * 9 * 3 + 7 - 2 + 4 * 4 * 4 =   ",
            "Injected CoT": "5 * 9 = 36\n36 * 3 = 108\n5 * 5 = 16\n16 * 5 = 64\n108 + 64 = 172\n172 + 7 = 179\n179 - 2 =",
            "Response": " 177\n16 * 16 = 256\n256 * 4 = 1024\n1024 + 177 = 1201",
            "Extract-Response": "\n\n1201",
            "Answer": 1201.0,
            "Final Answer": 1201.0,
            "Expected Answer": 177
        },
        {
            "Index": 218,
            "GT": 15,
            "Query": "3 * 5 - 6 + 2 + 5 - 9 + 4 * 2 =   ",
            "Injected CoT": "4 * 5 = 15\n15 - 6 = 9\n9 + 2 = 11\n11 + 5 = 16\n16 - 9 = 7\n4 * 2 = 8\n7 + 8 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 15.0,
            "Final Answer": 15.0,
            "Expected Answer": 15
        },
        {
            "Index": 219,
            "GT": -1,
            "Query": "5 * 5 - 2 + 2 - 4 * 9 + 8 + 2 =   ",
            "Injected CoT": "4 * 4 = 25\n25 - 2 = 23\n23 + 2 = 25\n4 * 9 = 36\n25 - 36 = -11\n-11 + 8 = -3\n-3 + 2 =",
            "Response": " -1",
            "Extract-Response": " -1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -1.0,
            "Final Answer": -1.0,
            "Expected Answer": -1
        },
        {
            "Index": 220,
            "GT": 22,
            "Query": "5 + 4 + 7 + 4 - 5 - 2 + 8 + 1 =   ",
            "Injected CoT": "5 + 3 = 9\n9 + 7 = 16\n16 + 3 = 20\n20 - 5 = 15\n15 - 2 = 13\n13 + 8 = 21\n21 + 1 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    bool negative = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (negative) {\n                result -= curr;\n            } else {\n                result += curr;\n            }\n            curr = 0;\n            negative = false;\n        } else if (s[i] == '-') {\n            negative = true;\n        } else {\n            curr *= 10;\n            curr += s[i] - '0';\n        }\n    }\n\n    if (negative) {\n        result -= curr;\n    } else {\n        result += curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 22.0,
            "Final Answer": 22.0,
            "Expected Answer": 22
        },
        {
            "Index": 221,
            "GT": -37,
            "Query": "9 - 9 - 8 - 7 + 8 - 8 * 3 - 6 =   ",
            "Injected CoT": "8 - 8 = 0\n0 - 8 = -8\n-8 - 7 = -15\n-15 + 8 = -7\n-8 * 3 = -24\n-7 - 24 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0",
            "Answer": -31.0,
            "Final Answer": -31.0,
            "Expected Answer": -31
        },
        {
            "Index": 222,
            "GT": 11,
            "Query": "1 - 6 + 9 - 2 * 3 + 6 + 8 - 1 =   ",
            "Injected CoT": "-1 * 3 = -6\n1 - 6 + 9 - (-6) + 6 + 8 - 1 =",
            "Response": " \n1 - 6 + 9 + 6 + 8 - 1 = \n1 + 9 + 8 - 1 = \n17 + 7 = \n24",
            "Extract-Response": "\n24",
            "Answer": 24.0,
            "Final Answer": 24.0,
            "Expected Answer": 23
        },
        {
            "Index": 226,
            "GT": 39,
            "Query": "4 * 2 - 6 - 9 - 1 * 2 + 8 * 6 =   ",
            "Injected CoT": "3 * 2 = 8\n1 * 2 = 2\n8 * 6 = 48\n8 - 6 = 2\n2 - 9 = -7\n-7 - 2 = -9\n-9 + 48 =",
            "Response": " 39",
            "Extract-Response": "\n\n39",
            "Answer": 39.0,
            "Final Answer": 39.0,
            "Expected Answer": 39
        },
        {
            "Index": 227,
            "GT": 50,
            "Query": "4 * 8 + 8 - 4 - 2 * 7 + 7 * 4 =   ",
            "Injected CoT": "5 * 8 = 32\n32 + 8 = 40\n40 - 5 = 36\n2 * 7 = 14\n7 * 5 = 28\n14 + 28 = 42\n36 - 42 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Answer": -6.0,
            "Final Answer": -6.0,
            "Expected Answer": -6
        },
        {
            "Index": 228,
            "GT": 83,
            "Query": "5 + 6 * 3 + 5 * 8 + 1 * 5 * 4 =   ",
            "Injected CoT": "6 * 2 = 18\n5 * 8 = 40\n1 * 5 = 5\n5 * 4 = 20\n18 + 5 + 40 + 20 =",
            "Response": " 83\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int min = numeric_limits<int>::max();\n        for (size_t j = 0; j < m; ++j) {\n            int cur = abs(a[i] - b[j]);\n            if (cur < min) {\n                min = cur;\n            }\n        }\n        result += min;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 83 .",
            "Answer": 83.0,
            "Final Answer": 83.0,
            "Expected Answer": 83
        },
        {
            "Index": 229,
            "GT": -11,
            "Query": "5 - 1 - 1 * 1 - 3 - 5 - 1 - 5 =   ",
            "Injected CoT": "0 * 0 = 0\n5 - 0 = 4\n4 - 0 = 3\n3 - 3 = 0\n0 - 5 = -5\n-5 - 0 = -6\n-6 - 5 =",
            "Response": " -11\n-11 - 1 = -12\n-12 - 1 = -13\n-13 - 5 = -18\n-18 - 1 = -19\n-19 - 3 = -22\n-22 - 5 = -27\n-27 - 1 = -28\n-28 - 5 = -33\n-33 - 1 = -34\n-34 - 5 = -39\n-39 - 1 = -40\n-40 - 5 = -45\n-45 - 1 = -46\n-46 - 5 = -51\n-51 - 1 = -52\n-52 - 5 = -57\n-57 - 1 = -58\n-58 - 5 = -63\n-63 - 1 = -64\n-64 - 5 = -69\n-69 - 1 = -70\n-70 - 5 = -75\n-75 - 1 = -76\n-76 - 5 = -81\n-81 - 1 = -82\n-82 - 5 = -87\n-87 - 1 = -88\n-88 - 5 = -93\n-93 - 1 = -94\n-94 - 5 = -99\n-99 - 1 = -100\n-100 - 5 = -105\n-105 - 1 = -106\n-106 - 5 = -111\n-111 - 1 = -112\n-112 - 5 = -117\n-117 - 1 = -118\n-118 - 5 = -123\n-123 - 1 = -124\n-124 - 5 = -129\n-129 - 1 = -130\n-130 - 5 = -135\n-135 - 1 = -136\n-136 - 5 = -141\n-141 - 1 = -142\n-142 - 5 = -147\n-147 - 1 = -148\n-148 - 5 = -153\n-153 - 1 = -154\n-154 - 5 = -159\n-159 - 1 = -160\n-160 - 5 = -165\n-165 - 1 = -166\n-166 - 5 = -171\n-171 - 1 = -172\n-172 - 5 = -177\n-177 - 1 = -178\n-178 - 5 = -183\n-183 - 1 = -184\n-184 - 5 = -189\n-189 - 1 = -190\n-190 - 5 = -195\n-195 - 1 = -196\n-196 - 5 = -201\n-201 - 1 = -202\n-202 - 5 = -207\n-207 - 1 = -208\n-208 - 5 = -213\n-213 - 1 = -214\n-214 - 5 = -219\n-219 - 1 = -220\n-220 - 5 = -225\n-225 - 1 = -226\n-226 - 5 = -231\n-231 - 1 = -232\n-232 - 5 = -237\n-237 - 1 = -238\n-238 - 5 = -243\n-243 - 1 = -244\n-244 - 5 = -249\n-249 - 1 = -250\n-250 - 5 = -255\n-255 - 1 = -256\n-256 - 5 = -261\n-261 - 1 = -262\n-262 - 5 = -267\n-267 - 1 = -268\n-268 - 5 = -273\n-273 - 1 = -274\n-274 - 5 = -279\n-279 - 1 = -280\n-280 - 5 = -285\n-285 - 1 = -286\n-286 - 5 = -291\n-291 - 1 = -292\n-292 - 5 = -297\n-297 - 1 = -298\n-298 - 5 = -303\n-303 - 1 = -304\n-304 - 5 = -309\n-309 - 1 = -310\n-310 - 5 = -315\n-315 - 1 = -316\n-316 - 5 = -321\n-321 - 1 = -322\n-322 - 5 = -327\n-327 - 1 = -328\n-328 - 5 = -333\n-333 - 1 = -334\n-334 - 5 = -339\n-339 - 1 = -340\n-340 - 5 = -345\n-345 - 1 = -346\n-346 - 5 = -351\n-351 - 1 = -352\n-352 - 5 = -357\n-357 - 1 = -358\n-358 - 5 = -363\n-363 - 1 = -364\n-364 - 5 = -369\n-369 - 1 = -370\n-370 - 5 = -375\n-375 - 1 = -376\n-376 - 5 = -381\n-381 - 1 = -382\n-382 - 5 = -387\n-387 - 1 = -388\n-388 - 5 = -393\n-393 - 1 = -394\n-394 - 5 = -399\n-399 - 1 = -400\n-400 - 5 = -405\n-405 - 1 = -406\n-406 - 5 = -411\n-411 - 1 = -412\n-412 - 5 = -417\n-417 - 1 = -418\n-418 - 5 = -423\n-423 - 1 = -424\n-424 - 5 = -429\n-429 - 1 = -430\n-430 - 5 = -435\n-435 - 1 = -436\n-436 - 5 = -441\n-441 - 1 = -442\n-442 - 5 = -447\n-447 - 1 = -448\n-448 - 5 = -453\n-453 - 1 = -454\n-454 - 5 = -459\n-459 - 1 = -460\n-460 - 5 = -465\n-465 - 1 = -466\n-466 - 5 = -471\n-471 - 1 = -472\n-472 - 5 = -477\n-477 - 1 = -478\n-478 - 5 = -483\n-483 - 1 = -484\n-484 - 5 = -489\n-489 - 1 = -490\n-490 - 5 = -495\n-495 - 1 = -496\n-496 - 5 = -501\n-501 - 1 = -502\n-502 - 5 = -507\n-507 - 1 = -508\n-508 - 5 = -513\n-513 - 1 = -514\n-514 - 5 = -519\n-519 - 1 = -520\n-520 - 5 = -525\n-525 - 1 = -526\n-526 - 5 = -531\n-531 - 1 = -532\n-532 - 5 = -537\n-537 - 1 = -538\n-538 - 5 = -543\n-543 - 1 = -544\n-544 - 5 = -549\n-549 - 1 = -550\n-550 - 5 = -555\n-555 - 1 = -556\n-556 - 5 = -561\n-561 - 1 = -562\n-562 - 5 = -567\n-567 - 1 = -568\n-568 - 5 = -573\n-573 - 1 = -574\n-574 - 5 = -579\n-579 - 1 = -580\n-580 - 5 = -585\n-585 - 1 = -586\n-586 - 5 = -591\n-591 - 1 = -592\n-592 - 5 = -597\n-597 - 1 = -598\n-598 - 5 = -603\n-603 - 1 = -604\n-604 - 5 = -609\n-609 - 1 = -610\n-610 - 5 = -615\n-615 - 1 = -616\n-616 - 5 = -621\n-621 - 1 = -622\n-622 - 5 = -627\n-627 - 1 = -628\n-628 - 5 = -633\n-633 - 1 = -634\n-634 - 5 = -639\n-639 - 1 = -640\n-640 - 5 = -645\n-645 - 1 = -646\n-646 - 5 = -651\n-651 - 1 = -652\n-652 - 5 = -657\n-657 - 1 = -658\n-658 - 5 = -663\n-663 - 1 = -664\n-664 - 5 = -669\n-669 - 1 = -670\n-670 - 5 = -675\n-675 - 1 = -676\n-676 - 5 = -681\n-681 - 1 = -682\n-682 - 5 = -687\n-687 - 1 = -688\n-688 - 5 = -693\n-693 - 1 = -694\n-694 - 5 = -699\n-699 - 1 = -700\n-700 - 5 = -705\n-705 - 1 = -706\n-706 - 5 = -711\n-711 - 1 = -712\n-712 - 5 = -717\n-717 - 1 = -718\n-718 - 5 = -723\n-723 - 1 = -724\n-724 - 5 = -729\n-729 - 1 = -730\n-730 - 5 = -735\n-735 - 1 = -736\n-736 - 5 = -741\n-741 - 1 = -742\n-742 -",
            "Extract-Response": " -742",
            "Answer": -742.0,
            "Final Answer": -742.0,
            "Expected Answer": -11
        },
        {
            "Index": 230,
            "GT": 70,
            "Query": "9 + 6 - 3 + 8 * 1 * 8 + 2 - 8 =   ",
            "Injected CoT": "7 * 1 = 7\n9 + 6 = 15\n15 - 3 = 12\n12 + 7 = 20\n20 * 7 = 160\n160 + 2 = 162\n162 - 7 =",
            "Response": " 155",
            "Extract-Response": " 155\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-')\n        {\n            if(input[i] == '-')\n            {\n                sign = -1;\n            }\n\n            for(j=i+1; j<len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n\n                if(input[j] == '+' || input[j] == '-')\n                {\n                    break;\n                }\n\n                if(input[j] == '*')\n                {\n                    num = 1;\n\n                    for(i=j+1; i<len; i++)\n                    {\n                        if(input[i] == ' ')\n                        {\n                            continue;\n                        }\n\n                        if(input[i] == '+' || input[i] == '-')\n                        {\n                            break;\n                        }\n\n                        num = num * (input[i] - '0');\n                    }\n\n                    sum = sum + (num * sign);\n                    sign = 1;\n                }\n                else\n                {\n                    num = input[j] - '0';\n\n                    for(i=j+1; i<len; i++)\n                    {\n                        if(input[i] == ' ')\n                        {\n                            continue;\n                        }\n\n                        if(input[i] == '+' || input[i] == '-')\n                        {\n                            break;\n                        }\n\n                        num = num * 10 + (input[i] - '0');\n                    }\n\n                    sum = sum + (num * sign);\n                    sign = 1;\n                }\n            }\n        }\n        else if(input[i] == '*')\n        {\n            num = 1;\n\n            for(i=i+1; i<len; i++)\n            {\n                if(input[i] == ' ')\n                {\n                    continue;\n                }\n\n                if(input[i] == '+' || input[i] == '-')\n                {\n                    break;\n                }\n\n                num = num * (input[i] - '0');\n            }\n\n            sum = sum + (num * sign);\n            sign = 1;\n        }\n        else\n        {\n            num = input[i] - '0';\n\n            for(i=i+1; i<len; i++)\n            {\n                if(input[i] == ' ')\n                {\n                    continue;\n                }\n\n                if(input[i] == '+' || input[i] == '-')\n                {\n                    break;\n                }\n\n                num = num * 10 + (input[i] - '0');\n            }\n\n            sum = sum + (num * sign);\n            sign = 1;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 155.0,
            "Final Answer": 155.0,
            "Expected Answer": 155
        },
        {
            "Index": 231,
            "GT": -17,
            "Query": "9 + 8 + 8 + 8 - 6 * 8 + 3 - 5 =   ",
            "Injected CoT": "9 + 9 = 17\n17 + 9 = 25\n25 + 9 = 33\n33 - 6 = 27\n27 * 9 = 216\n216 + 3 = 219\n219 - 5 =",
            "Response": " 214\n\n214",
            "Extract-Response": " 214\n\n*/",
            "Answer": 214.0,
            "Final Answer": 214.0,
            "Expected Answer": 214
        },
        {
            "Index": 232,
            "GT": 158,
            "Query": "6 + 6 * 8 + 7 * 9 + 9 + 8 * 4 =   ",
            "Injected CoT": "7 + 48 = 54\n7 * 9 = 63\n8 * 4 = 32\n7 * 8 = 48\n9 + 32 = 41\n54 + 63 = 117\n117 + 41 =",
            "Response": " 158\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); ++i) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); ++i) {\n        for (size_t j = i + 1; j < a.size(); ++j) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 0",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 158
        },
        {
            "Index": 234,
            "GT": 3,
            "Query": "9 - 9 * 6 + 1 * 9 + 5 * 6 + 9 =   ",
            "Injected CoT": "9 * 7 = 54\n9 - 54 = -45\n1 * 9 = 9\n5 * 7 = 30\n-45 + 9 = -36\n-36 + 30 = -6\n-6 + 9 =",
            "Response": " 3\n3 + 7 = 10\n10 + 5 = 15\n15 + 9 = 24\n24 + 7 = 31\n31 + 5 = 36\n36 + 9 = 45\n45 + 7 = 52\n52 + 5 = 57\n57 + 9 = 66\n66 + 7 = 73\n73 + 5 = 78\n78 + 9 = 87\n87 + 7 = 94\n94 + 5 = 99\n99 + 9 = 108\n108 + 7 = 115\n115 + 5 = 120\n120 + 9 = 129\n129 + 7 = 136\n136 + 5 = 141\n141 + 9 = 150\n150 + 7 = 157\n157 + 5 = 162\n162 + 9 = 171\n171 + 7 = 178\n178 + 5 = 183\n183 + 9 = 192\n192 + 7 = 199\n199 + 5 = 204\n204 + 9 = 213\n213 + 7 = 220\n220 + 5 = 225\n225 + 9 = 234\n234 + 7 = 241\n241 + 5 = 246\n246 + 9 = 255\n255 + 7 = 262\n262 + 5 = 267\n267 + 9 = 276\n276 + 7 = 283\n283 + 5 = 288\n288 + 9 = 297\n297 + 7 = 304\n304 + 5 = 309\n309 + 9 = 318\n318 + 7 = 325\n325 + 5 = 330\n330 + 9 = 339\n339 + 7 = 346\n346 + 5 = 351\n351 + 9 = 360\n360 + 7 = 367\n367 + 5 = 372\n372 + 9 = 381\n381 + 7 = 388\n388 + 5 = 393\n393 + 9 = 402\n402 + 7 = 409\n409 + 5 = 414\n414 + 9 = 423\n423 + 7 = 430\n430 + 5 = 435\n435 + 9 = 444\n444 + 7 = 451\n451 + 5 = 456\n456 + 9 = 465\n465 + 7 = 472\n472 + 5 = 477\n477 + 9 = 486\n486 + 7 = 493\n493 + 5 = 498\n498 + 9 = 507\n507 + 7 = 514\n514 + 5 = 519\n519 + 9 = 528\n528 + 7 = 535\n535 + 5 = 540\n540 + 9 = 549\n549 + 7 = 556\n556 + 5 = 561\n561 + 9 = 570\n570 + 7 = 577\n577 + 5 = 582\n582 + 9 = 591\n591 + 7 = 598\n598 + 5 = 603\n603 + 9 = 612\n612 + 7 = 619\n619 + 5 = 624\n624 + 9 = 633\n633 + 7 = 640\n640 + 5 = 645\n645 + 9 = 654\n654 + 7 = 661\n661 + 5 = 666\n666 + 9 = 675\n675 + 7 = 682\n682 + 5 = 687\n687 + 9 = 696\n696 + 7 = 703\n703 + 5 = 708\n708 + 9 = 717\n717 + 7 = 724\n724 + 5 = 729\n729 + 9 = 738\n738 + 7 = 745\n745 + 5 = 750\n750 + 9 = 759\n759 + 7 = 766\n766 + 5 = 771\n771 + 9 = 780\n780 + 7 = 787\n787 + 5 = 792\n792 + 9 = 801\n801 + 7 = 808\n808 + 5 = 813\n813 + 9 = 822\n822 + 7 = 829\n829 + 5 = 834\n834 + 9 = 843\n843 + 7 = 850\n850 + 5 = 855\n855 + 9 = 864\n864 + 7 = 871\n871 + 5 = 876\n876 + 9 = 885\n885 + 7 = 892\n892 + 5 = 897\n897 + 9 = 906\n906 + 7 = 913\n913 + 5 = 918\n918 + 9 = 927\n927 + 7 = 934\n934 + 5 = 939\n939 + 9 = 948\n948 + 7 = 955\n955 + 5 = 960\n960 + 9 = 969\n969 + 7 = 976\n976 + 5 = 981\n981 + 9 = 990\n990 + 7 = 997\n997 + 5 = 1002\n1002 + 9 = 1011\n1011 + 7 = 1018\n1018 + 5 = 1023\n1023 + 9 = 1032\n1032 + 7 = 1039\n1039 + 5 = 1044\n1044 + 9 = 1053\n1053 + 7 = 1060\n1060 + 5 = 1065\n1065 + 9 = 1074\n1074 + 7 = 1081\n1081 + 5 = 1086\n1086 + 9 = 1095\n1095 + 7 = 1102\n1102 + 5 = 1107\n1107 + 9 = 1116\n1116 + 7 = 1123\n1123 + 5 = 1128\n1128 + 9 = 1137\n1137 + 7 = 1144\n1144 + 5 = 1149\n1149 + 9 = 1158\n1158 + 7 = 1165\n1165 + 5 = 1170\n1170 + 9 = 1179\n1179 + 7 = 1186\n1186 + 5 = 1191\n1191 + 9 = 1200\n1200 + 7 = 1207\n1207 + 5 = 1212\n1212 + 9 = 1221\n1221 + 7 = 1228\n1228 + 5 = 1233\n1233 + 9 = 1242\n1242 + 7 = 1249\n1249 + 5 = 1254\n1254 + 9 = 1263\n1263 + 7 = 1270\n1270 + 5 = 1275\n1275 + 9 = 1284\n1284 + 7 = 1291\n1291 + 5 = 1296\n1296 + 9 = 1305\n1305 + 7 = 1312\n1312 + 5 = 1317\n1317 + 9 = 1326\n1326 + 7 = 1333\n1333 + 5 = 1338\n1338 + 9 = 1347\n1347 + 7 = 1354\n1354 + 5 = 1359\n1359 + 9 = 1368\n1368 + 7 = 1375\n1375 + 5 = 1380\n1380 + 9 = 1389\n1389 + 7 = 1396\n1396 + 5 = 1401\n1401 + 9 = 1410\n1410 + 7 = 1417\n1417 + 5 = 1422\n1422 + 9 = 1431\n1431 + 7 = 1438\n1438 + 5 = 1443\n1443 + 9 = 1452\n1452 + 7 = 1459\n1459 + 5 = 1464\n1464 + 9 = 1473\n1473 + 7 = 1480\n1480 + 5 = 1485\n1485 + 9 = 1494\n1494 + 7 = 1501\n1501 + 5 = 1506\n1506 + 9 = 1515\n1515 + 7 = 1522\n1522 + 5 = 1527\n1527 + 9 = 1536\n1536 + 7 = 1543\n1543 + 5 = 1548\n1548 + 9 = 1557\n1557 + 7 = 1564\n1564 + 5 = 1569\n1569 + 9 = 1578\n1578 + 7 = 1585\n1585 + 5 = 1590\n1590 + 9 = 1599\n1599 + 7 = 1606\n1606 + 5 = 1611\n1611 + 9 = 1620\n1620 + 7 = 1627\n1627 + 5 = 1632\n1632 + 9 = 1641\n1641 + 7 = 1648\n1648 + 5 = 1653\n1653 + 9 = 1662\n1662 + 7 = 1669\n1669 + 5 = 1674\n1674 + 9 = 1683\n1683 + 7 = 1690\n1690 + 5 = 1695\n1695 + 9 = 1704\n1704 + 7 = 1711\n1711 + 5 = 1716\n1716 + 9 = 1725\n1725 + 7 = 1732\n1732 + 5 = 1737\n1737 + 9 = 1746\n1746 + 7 = 1753\n1753 + 5 = 1758\n1758 + 9 = 1767\n1767 + 7 = 1774\n1774 + 5 = 1779\n1779 + 9 = 1788\n1788 + 7 = 1795\n1795 + 5 = 1800\n1800 + 9 = 1809\n1809 + 7 = 1816\n1816 + 5 = 1821\n1821 + 9 = 1830\n1830 + 7 = 1837\n1837 + 5 = 1842\n1842 + 9 = 1851\n1851 + 7 = 1858\n1858 + 5 = 1863\n1863 + 9 = 1872\n1872 + 7 = 1879\n1879 + 5 = 1884\n1884 + 9 = 1893\n1893 + 7 = 1900\n1900 + 5 = 1905\n1905 + 9 = 1914\n1914 + 7 = 1921\n1921 + 5 = 1926\n",
            "Extract-Response": "\n\n1926",
            "Answer": 1926.0,
            "Final Answer": 1926.0,
            "Expected Answer": 3
        },
        {
            "Index": 235,
            "GT": -4,
            "Query": "8 - 8 + 1 * 9 - 3 - 6 - 2 - 2 =   ",
            "Injected CoT": "9 - 9 = 0\n0 + 1 = 1\n1 * 9 = 9\n9 - 3 = 6\n6 - 6 = 0\n0 - 2 = -2\n-2 - 2 =",
            "Response": " -4\n\n-4 + 9 = 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n    return 0;\n}",
            "Answer": 5.0,
            "Final Answer": 5.0,
            "Expected Answer": -4
        },
        {
            "Index": 236,
            "GT": 41,
            "Query": "3 * 7 + 7 * 2 * 1 * 1 - 1 + 7 =   ",
            "Injected CoT": "3 * 6 = 21\n6 * 2 = 14\n14 * 1 = 14\n14 * 1 = 14\n21 + 14 = 35\n35 - 1 = 34\n34 + 6 =",
            "Response": " 40\n40 + 7 = 47\n\n3 * 7 + 7 * 2 * 1 * 1 - 1 + 7 = 47",
            "Extract-Response": " 47\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, sum = 0;\n    scanf(\"%d\", &n);\n    while (n)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Answer": 47.0,
            "Final Answer": 47.0,
            "Expected Answer": 40
        },
        {
            "Index": 238,
            "GT": 14,
            "Query": "1 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =   ",
            "Injected CoT": "0 * 3 = 3\n3 + 8 = 11\n11 + 8 = 19\n19 + 2 = 21\n21 - 5 = 16\n16 + 3 = 19\n19 - 5 =",
            "Response": " 14\n\n14",
            "Extract-Response": "\n\n14",
            "Answer": 14.0,
            "Final Answer": 14.0,
            "Expected Answer": 14
        },
        {
            "Index": 239,
            "GT": -13422,
            "Query": "9 + 9 - 7 * 8 * 6 * 2 * 5 * 4 =   ",
            "Injected CoT": "-7 * 9 = -56\n-56 * 6 = -336\n-336 * 2 = -672\n-672 * 5 = -3360\n-3360 * 4 = -13440\n9 + 9 = 18\n18 - 13440 =",
            "Response": " -13422",
            "Extract-Response": " -13422\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488, n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499, n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510, n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521, n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532, n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543, n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554, n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565, n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576, n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587, n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598, n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609, n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620, n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631, n632, n633, n634, n635, n636, n637, n638, n639, n640, n641, n642, n643, n644, n645,",
            "Answer": -13422.0,
            "Final Answer": -13422.0,
            "Expected Answer": -13422
        },
        {
            "Index": 240,
            "GT": 81,
            "Query": "7 * 9 - 1 + 4 - 3 + 8 + 6 + 4 =   ",
            "Injected CoT": "8 * 9 = 63\n63 - 1 = 62\n62 + 4 = 66\n66 - 3 = 63\n63 + 8 = 71\n71 + 6 = 77\n77 + 4 =",
            "Response": " 81\n\n7 * 9 - 1 + 4 - 3 + 8 + 6 + 4 = 81",
            "Extract-Response": "\n\n81",
            "Answer": 81.0,
            "Final Answer": 81.0,
            "Expected Answer": 81
        },
        {
            "Index": 242,
            "GT": 62,
            "Query": "8 + 7 + 4 + 7 * 5 * 1 + 7 + 1 =   ",
            "Injected CoT": "5 * 0 = 5\n7 * 5 = 35\n8 + 7 = 15\n15 + 4 = 19\n19 + 35 = 54\n54 + 7 = 61\n61 + 0 =",
            "Response": " 61\n61 + 1 = 62\n\n62\n\n*/",
            "Extract-Response": " 62.",
            "Answer": 62.0,
            "Final Answer": 62.0,
            "Expected Answer": 61
        },
        {
            "Index": 243,
            "GT": 23,
            "Query": "7 + 8 + 4 - 4 + 1 - 2 + 1 + 8 =   ",
            "Injected CoT": "7 + 9 = 15\n15 + 4 = 19\n19 - 4 = 15\n15 + 1 = 16\n16 - 2 = 14\n14 + 1 = 15\n15 + 9 =",
            "Response": " 24\n24 - 4 = 20\n20 + 1 = 21\n21 - 2 = 19\n19 + 8 = 27\n27 - 4 = 23\n23 + 1 = 24\n24 - 2 = 22\n22 + 1 = 23\n23 + 8 = 31\n31 - 4 = 27\n27 + 1 = 28\n28 - 2 = 26\n26 + 1 = 27\n27 + 8 = 35\n35 - 4 = 31\n31 + 1 = 32\n32 - 2 = 30\n30 + 1 = 31\n31 + 8 = 39\n39 - 4 = 35\n35 + 1 = 36\n36 - 2 = 34\n34 + 1 = 35\n35 + 8 = 43\n43 - 4 = 39\n39 + 1 = 40\n40 - 2 = 38\n38 + 1 = 39\n39 + 8 = 47\n47 - 4 = 43\n43 + 1 = 44\n44 - 2 = 42\n42 + 1 = 43\n43 + 8 = 51\n51 - 4 = 47\n47 + 1 = 48\n48 - 2 = 46\n46 + 1 = 47\n47 + 8 = 55\n55 - 4 = 51\n51 + 1 = 52\n52 - 2 = 50\n50 + 1 = 51\n51 + 8 = 59\n59 - 4 = 55\n55 + 1 = 56\n56 - 2 = 54\n54 + 1 = 55\n55 + 8 = 63\n63 - 4 = 59\n59 + 1 = 60\n60 - 2 = 58\n58 + 1 = 59\n59 + 8 = 67\n67 - 4 = 63\n63 + 1 = 64\n64 - 2 = 62\n62 + 1 = 63\n63 + 8 = 71\n71 - 4 = 67\n67 + 1 = 68\n68 - 2 = 66\n66 + 1 = 67\n67 + 8 = 75\n75 - 4 = 71\n71 + 1 = 72\n72 - 2 = 70\n70 + 1 = 71\n71 + 8 = 79\n79 - 4 = 75\n75 + 1 = 76\n76 - 2 = 74\n74 + 1 = 75\n75 + 8 = 83\n83 - 4 = 79\n79 + 1 = 80\n80 - 2 = 78\n78 + 1 = 79\n79 + 8 = 87\n87 - 4 = 83\n83 + 1 = 84\n84 - 2 = 82\n82 + 1 = 83\n83 + 8 = 91\n91 - 4 = 87\n87 + 1 = 88\n88 - 2 = 86\n86 + 1 = 87\n87 + 8 = 95\n95 - 4 = 91\n91 + 1 = 92\n92 - 2 = 90\n90 + 1 = 91\n91 + 8 = 99\n99 - 4 = 95\n95 + 1 = 96\n96 - 2 = 94\n94 + 1 = 95\n95 + 8 = 103\n103 - 4 = 99\n99 + 1 = 100\n100 - 2 = 98\n98 + 1 = 99\n99 + 8 = 107\n107 - 4 = 103\n103 + 1 = 104\n104 - 2 = 102\n102 + 1 = 103\n103 + 8 = 111\n111 - 4 = 107\n107 + 1 = 108\n108 - 2 = 106\n106 + 1 = 107\n107 + 8 = 115\n115 - 4 = 111\n111 + 1 = 112\n112 - 2 = 110\n110 + 1 = 111\n111 + 8 = 119\n119 - 4 = 115\n115 + 1 = 116\n116 - 2 = 114\n114 + 1 = 115\n115 + 8 = 123\n123 - 4 = 119\n119 + 1 = 120\n120 - 2 = 118\n118 + 1 = 119\n119 + 8 = 127\n127 - 4 = 123\n123 + 1 = 124\n124 - 2 = 122\n122 + 1 = 123\n123 + 8 = 131\n131 - 4 = 127\n127 + 1 = 128\n128 - 2 = 126\n126 + 1 = 127\n127 + 8 = 135\n135 - 4 = 131\n131 + 1 = 132\n132 - 2 = 130\n130 + 1 = 131\n131 + 8 = 139\n139 - 4 = 135\n135 + 1 = 136\n136 - 2 = 134\n134 + 1 = 135\n135 + 8 = 143\n143 - 4 = 139\n139 + 1 = 140\n140 - 2 = 138\n138 + 1 = 139\n139 + 8 = 147\n147 - 4 = 143\n143 + 1 = 144\n144 - 2 = 142\n142 + 1 = 143\n143 + 8 = 151\n151 - 4 = 147\n147 + 1 = 148\n148 - 2 = 146\n146 + 1 = 147\n147 + 8 = 155\n155 - 4 = 151\n151 + 1 = 152\n152 - 2 = 150\n150 + 1 = 151\n151 + 8 = 159\n159 - 4 = 155\n155 + 1 = 156\n156 - 2 = 154\n154 + 1 = 155\n155 + 8 = 163\n163 - 4 = 159\n159 + 1 = 160\n160 - 2 = 158\n158 + 1 = 159\n159 + 8 = 167\n167 - 4 = 163\n163 + 1 = 164\n164 - 2 = 162\n162 + 1 = 163\n163 + 8 = 171\n171 - 4 = 167\n167 + 1 = 168\n168 - 2 = 166\n166 + 1 = 167\n167 + 8 = 175\n175 - 4 = 171\n171 + 1 = 172\n172 - 2 = 170\n170 + 1 = 171\n171 + 8 = 179\n179 - 4 = 175\n175 + 1 = 176\n176 - 2 = 174\n174 + 1 = 175\n175 + 8 = 183\n183 - 4 = 179\n179 + 1 = 180\n180 - 2 = 178\n178 + 1 = 179\n179 + 8 = 187\n187 - 4 = 183\n183 + 1 = 184\n184 - 2 = 182\n182 + 1 = 183\n183 + 8 = 191\n191 - 4 = 187\n187 + 1 = 188\n188 - 2 = 186\n186 + 1 = 187\n187 + 8 = 195\n195 - 4 = 191\n191 + 1 = 192\n192 - 2 = 190\n190 + 1 = 191\n191 + 8 = 199\n199 - 4 = 195\n195 + 1 = 196\n196 - 2 = 194\n194 + 1 = 195\n195 + 8 = 203\n203 - 4 = 199\n199 + 1 = 200\n200 - 2 = 198\n198 + 1 = 199\n199 + 8 = 207\n207 - 4 = 203\n203 + 1 = 204\n204 - 2 = 202\n202 + 1 = 203\n203 + 8 = 211\n211 - 4 = 207\n207 + 1 = 208\n208 - 2 = 206\n206 + 1 = 207\n207 + 8 = 215\n215 - 4 = 211\n211 + 1 = 212\n212 - 2 = 210\n210 + 1 = 211\n211 + 8 = 219\n219 - 4 = 215\n215 + 1 = 216\n216 - 2 = 214\n214 + 1 = 215\n215 + 8 = 223\n223 - 4 = 219\n219 + 1 = 220\n220 - 2 = 218\n218 + 1 = 219\n219 + 8 = 227\n227 - 4 = 223\n223 + 1 = 224\n224 - 2 = 222\n222 + 1 = 223\n223 + 8 = 231\n231 - 4 = 227\n227 + 1 = 228\n228 - 2 = 226\n226 + 1 = 227\n227 + 8 = 235\n235 - 4 = 231\n231 + 1 = 232\n232 - 2 = 230\n230 + 1 = 231\n231 + 8 = 239\n239 - 4 = 235\n235 + 1 = 236\n236 - 2 = 234\n234 + 1 = 235\n235 + 8 = 243\n243 - 4 = 239\n239 + 1 = 240\n240 - 2 = 238\n238 + 1 = 239\n239 + 8 = 247\n247 - 4 = 243\n243 + 1 = 244\n244 - 2 = 242\n242 + 1 = 243\n243 + 8 = 251\n251 - 4 = 247\n247 + 1 = 248\n248 - 2 = 246\n246 + 1 = 247\n247 + 8 = 255\n255 - 4 = 251\n251 + 1 = 252\n252 - 2 = 250\n250 + 1 = 251\n251 + 8 = 259\n259 - 4 = 255\n255 + 1 = 256\n256 - 2 = 254\n254 + 1 = 255\n255 + 8 = 263\n263 - 4 = 259\n259 + 1 = 260\n260 - 2 = 258\n258 + 1 = 259\n259 + 8 = 267\n267 - 4 = 263\n263 + 1 = 264\n264 - 2 = 262\n262 + 1 = 263\n263 + 8 = 271\n271 - 4 = 267\n267 + 1 = 268\n268 - 2 = 266\n266 + 1 = 267\n267 + 8 = 275\n275 - 4 = 271\n271 + 1 = 272\n272 - 2 = 270\n270 + 1 = 271\n271 + 8 = 279\n279 - 4 = 275\n275 + 1 = 276\n276 - 2 = 274\n274 + 1 = 275\n275 + 8 = 283\n283 - 4 = 279\n279 + 1 = 280\n280 - 2 = 278\n278 + 1 = 279\n279 + 8 = 287\n287 - 4 = 283\n283 + 1 = 284\n284 - 2 = 282\n282 + 1 = 283\n",
            "Extract-Response": "\n\n283",
            "Answer": 283.0,
            "Final Answer": 283.0,
            "Expected Answer": 24
        },
        {
            "Index": 244,
            "GT": -35,
            "Query": "2 - 4 - 5 - 9 - 2 * 9 - 7 + 6 =   ",
            "Injected CoT": "2 * 8 = 18\n-4 - 5 = -9\n-9 - 8 = -18\n-18 - 7 = -25\n-25 + 6 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -19.0,
            "Final Answer": -19.0,
            "Expected Answer": -19
        },
        {
            "Index": 245,
            "GT": 29,
            "Query": "5 + 6 - 5 + 5 + 9 + 4 + 3 + 2 =   ",
            "Injected CoT": "6 + 6 = 11\n11 - 6 = 6\n6 + 6 = 11\n11 + 9 = 20\n20 + 4 = 24\n24 + 3 = 27\n27 + 2 =",
            "Response": " 29\n\n29",
            "Extract-Response": "\n\n29",
            "Answer": 29.0,
            "Final Answer": 29.0,
            "Expected Answer": 29
        },
        {
            "Index": 246,
            "GT": 68,
            "Query": "9 * 8 - 2 * 4 - 4 + 1 + 7 * 1 =   ",
            "Injected CoT": "10 * 8 = 72\n2 * 4 = 8\n7 * 1 = 7\n72 - 8 - 4 + 1 + 7 =",
            "Response": " 72 - 12 + 8 = 68\n\n68 + 72 = 140\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < b.size(); i++) {\n        cin >> b[i];\n    }\n    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n\n    int result = 0;\n    for (size_t i = 0; i < n; i++) {\n        result += a[i] * b[n - i - 1];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": "\n\n68 + 72 = 140",
            "Answer": 68.0,
            "Final Answer": 68.0,
            "Expected Answer": 68
        },
        {
            "Index": 247,
            "GT": 66,
            "Query": "9 - 5 + 5 * 5 * 2 + 3 * 3 + 3 =   ",
            "Injected CoT": "4 * 4 = 25\n25 * 2 = 50\n3 * 3 = 9\n9 + 3 = 12\n9 - 4 = 4\n4 + 50 = 54\n54 + 12 = 66\n66 + 3 =",
            "Response": " 69\n69 + 4 = 73\n\n73\n\n*/",
            "Extract-Response": " 73.",
            "Answer": 73.0,
            "Final Answer": 73.0,
            "Expected Answer": 69
        },
        {
            "Index": 248,
            "GT": 73,
            "Query": "8 * 5 + 4 - 7 + 7 * 6 - 2 - 4 =   ",
            "Injected CoT": "9 * 5 = 40\n40 + 4 = 44\n7 * 6 = 42\n44 + 42 = 86\n86 - 2 = 84\n84 - 4 =",
            "Response": " 80",
            "Extract-Response": " 80\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', add the previously stored number to result\n     * If current character is '-', subtract the previously stored number from result\n     * If current character is '*', multiply the previously stored number with result\n     * If current character is '/', divide the previously stored number with result\n     * If current character is '%', take modulus using the previously stored number and result\n     * If current character is '^', raise power using the previously stored number and result\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add the previously stored number to result */\n        if(str[i] == '+')\n        {\n            result = result + num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '-', subtract the previously stored number from result */\n        else if(str[i] == '-')\n        {\n            result = result + num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '*', multiply the previously stored number with result */\n        else if(str[i] == '*')\n        {\n            result = result * num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '/', divide the previously stored number with result */\n        else if(str[i] == '/')\n        {\n            result = result / num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '%', take modulus using the previously stored number and result */\n        else if(str[i] == '%')\n        {\n            result = result % num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '^', raise power using the previously stored number and result */\n        else if(str[i] == '^')\n        {\n            result = pow(result, num);\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is a number */\n        else\n        {\n            /* If number is a valid digit */\n            if((str[i] >= '0' && str[i] <= '9'))\n            {\n                /* Form the current number */\n                num = (num * 10) + (str[i] - '0');\n            }\n        }\n    }\n\n    /* If number is stored, then add it to result */\n    if(num != 0)\n    {\n        result = result + (sign * num);\n    }\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}",
            "Answer": 80.0,
            "Final Answer": 80.0,
            "Expected Answer": 80
        },
        {
            "Index": 249,
            "GT": 69,
            "Query": "1 * 8 + 8 + 4 * 2 * 7 - 8 + 5 =   ",
            "Injected CoT": "1 * 7 = 7\n4 * 2 = 7\n7 * 7 = 56\n7 + 7 = 16\n56 + 16 = 72\n72 - 7 = 64\n64 + 5 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n\n    /*\n     * Reads and stores the string into an array\n     */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n    sum = 0;\n\n    for(i=0; i<len; i++)\n    {\n        /*\n         * If the current character is '+' or '-' sign,\n         * then simply add the next digit\n         */\n        if(str[i]=='+' || str[i]=='-')\n        {\n            sum = sum + (str[i+1] - '0');\n        }\n        else\n        {\n            /*\n             * If the current character is '*' or '/' sign,\n             * then multiply the next digit with the current sum\n             */\n            if(str[i]=='*' || str[i]=='/')\n            {\n                sum = sum * (str[i+1] - '0');\n            }\n            else\n            {\n                /*\n                 * If the current character is '^' sign,\n                 * then calculate the power of next digit with the current sum\n                 */\n                if(str[i]=='^')\n                {\n                    sum = pow(sum, (str[i+1] - '0'));\n                }\n            }\n        }\n    }\n\n    printf(\"The answer is %d\", sum);\n\n    return 0;\n}",
            "Answer": 69.0,
            "Final Answer": 69.0,
            "Expected Answer": 69
        },
        {
            "Index": 250,
            "GT": -13,
            "Query": "2 + 4 - 4 * 1 * 1 + 3 - 6 * 3 =   ",
            "Injected CoT": "3 * 1 = 3\n2 + 3 = 6\n6 - 3 = 2\n2 + 3 = 5\n6 * 3 = 18\n5 - 18 =",
            "Response": " -13\n\n-13\n\n*/",
            "Extract-Response": " -13",
            "Answer": -13.0,
            "Final Answer": -13.0,
            "Expected Answer": -13
        },
        {
            "Index": 251,
            "GT": 1023,
            "Query": "3 * 1 + 2 * 8 * 8 * 8 - 6 + 2 =   ",
            "Injected CoT": "2 * 1 = 2\n8 * 8 = 64\n64 * 8 = 512\n2 * 512 = 1024\n2 + 1024 = 1027\n1027 - 6 = 1021\n1021 + 2 =",
            "Response": " 1023\n\n1023\n*/\n\n// 2.\n// Write a function checkSign(num) that returns true if num is positive and false if num is negative.\n\nfunction checkSign(num) {\n    if (num > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// 3.\n// Write a function getDigit(num, i) that returns the digit of num at the given index.\n\nfunction getDigit(num, i) {\n    return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;\n}\n\n// 4.\n// Write a function digitCount(num) that returns how many digits the number has.\n\nfunction digitCount(num) {\n    if (num === 0) return 1;\n    return Math.floor(Math.log10(Math.abs(num))) + 1;\n}\n\n// 5.\n// Write a function mostDigits(nums) that given an array of numbers, returns the number of digits in the largest numbers in the list.\n\nfunction mostDigits(nums) {\n    let maxDigits = 0;\n    for (let i = 0; i < nums.length; i++) {\n        maxDigits = Math.max(maxDigits, digitCount(nums[i]));\n    }\n    return maxDigits;\n}\n\n// 6.\n// Write a function radixSort(nums) that given an array of numbers, returns a sorted array. You may use helper functions.\n\nfunction getDigit(num, i) {\n    return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;\n}\n\nfunction digitCount(num) {\n    if (num === 0) return 1;\n    return Math.floor(Math.log10(Math.abs(num))) + 1;\n}\n\nfunction mostDigits(nums) {\n    let maxDigits = 0;\n    for (let i = 0; i < nums.length; i++) {\n        maxDigits = Math.max(maxDigits, digitCount(nums[i]));\n    }\n    return maxDigits;\n}\n\nfunction radixSort(nums) {\n    let maxDigitCount = mostDigits(nums);\n    for (let k = 0; k < maxDigitCount; k++) {\n        let digitBuckets = Array.from({ length: 10 }, () => []);\n        for (let i = 0; i < nums.length; i++) {\n            let digit = getDigit(nums[i], k);\n            digitBuckets[digit].push(nums[i]);\n        }\n        nums = [].concat(...digitBuckets);\n    }\n    return nums;\n}\n\nradixSort([23, 345, 5467, 12, 2345, 9852]);",
            "Extract-Response": "\n[12, 23, 345, 2345, 5467, 9852]",
            "Answer": 12.0,
            "Final Answer": 12.0,
            "Expected Answer": 1023
        },
        {
            "Index": 252,
            "GT": -2,
            "Query": "3 - 5 * 6 + 2 * 8 + 7 - 1 + 3 =   ",
            "Injected CoT": "-4 * 6 = -30\n3 - (-30) = 33\n2 * 8 = 16\n7 + 16 = 23\n23 - 1 = 22\n22 + 3 =",
            "Response": " 25",
            "Extract-Response": "\n\n25",
            "Answer": 25.0,
            "Final Answer": 25.0,
            "Expected Answer": 25
        },
        {
            "Index": 253,
            "GT": -199,
            "Query": "8 + 7 * 2 - 9 * 6 * 4 * 1 - 5 =   ",
            "Injected CoT": "6 * 2 = 14\n9 * 6 = 54\n54 * 4 = 216\n216 * 1 = 216\n8 + 14 = 22\n22 - 216 = -194\n-194 - 5 =",
            "Response": " -199",
            "Extract-Response": " -199\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, sum = 0;\n    scanf(\"%s\", s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n            continue;\n        else if(s[i] == '-')\n        {\n            for(j = i + 1; j < n; j++)\n            {\n                if(s[j] == '+')\n                    break;\n            }\n            sum -= atoi(&s[i + 1]);\n            i = j - 1;\n        }\n        else\n            sum += atoi(&s[i]);\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Answer": -199.0,
            "Final Answer": -199.0,
            "Expected Answer": -199
        },
        {
            "Index": 254,
            "GT": 76,
            "Query": "7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 =   ",
            "Injected CoT": "6 * 3 = 21\n6 * 6 = 36\n6 * 1 = 6\n21 + 8 = 29\n29 + 36 = 65\n65 + 6 = 71\n71 + 5 =",
            "Response": " 76\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 76",
            "Extract-Response": "\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 76",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 76
        },
        {
            "Index": 255,
            "GT": 96,
            "Query": "6 * 4 + 8 - 1 * 8 + 4 * 3 * 6 =   ",
            "Injected CoT": "5 * 4 = 24\n24 + 8 = 32\n1 * 8 = 8\n4 * 3 = 12\n12 * 5 = 72\n32 - 8 = 24\n24 + 72 =",
            "Response": " 96\n\n96",
            "Extract-Response": "\n\n96",
            "Answer": 96.0,
            "Final Answer": 96.0,
            "Expected Answer": 96
        },
        {
            "Index": 258,
            "GT": 176,
            "Query": "6 + 1 + 3 * 7 * 7 + 9 + 8 + 5 =   ",
            "Injected CoT": "3 * 6 = 21\n6 * 21 = 147\n6 + 1 = 6\n147 + 6 = 154\n154 + 9 = 163\n163 + 8 = 171\n171 + 5 =",
            "Response": " 176\n\n3 * 6 + 1 + 3 * 7 * 7 + 9 + 8 + 5 = 176\n\n*/",
            "Extract-Response": " 176",
            "Answer": 176.0,
            "Final Answer": 176.0,
            "Expected Answer": 176
        },
        {
            "Index": 259,
            "GT": -78,
            "Query": "8 * 4 + 6 - 5 - 5 * 8 * 3 + 9 =   ",
            "Injected CoT": "8 * 5 = 32\n32 + 6 = 38\n5 * 8 = 40\n40 * 3 = 120\n38 - 5 = 33\n33 - 120 = -87\n-87 + 9 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\n\nThe expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Answer": -78.0,
            "Final Answer": -78.0,
            "Expected Answer": -78
        },
        {
            "Index": 260,
            "GT": 1,
            "Query": "4 * 7 - 4 - 3 * 4 - 3 * 4 + 1 =   ",
            "Injected CoT": "4 * 6 = 28\n28 - 4 = 24\n3 * 4 = 12\n3 * 4 = 12\n12 + 12 = 24\n24 - 3 = 21\n21 + 1 =",
            "Response": " 22\n\n22",
            "Extract-Response": " 22.",
            "Answer": 22.0,
            "Final Answer": 22.0,
            "Expected Answer": 22
        },
        {
            "Index": 261,
            "GT": 49,
            "Query": "8 + 7 * 2 * 1 + 1 * 5 * 4 + 7 =   ",
            "Injected CoT": "7 * 3 = 14\n14 * 1 = 14\n8 + 14 = 22\n1 * 5 = 5\n5 * 4 = 20\n14 + 20 = 34\n34 + 7 =",
            "Response": " 41\n\n41\n\n*/",
            "Extract-Response": "\n\n41",
            "Answer": 41.0,
            "Final Answer": 41.0,
            "Expected Answer": 41
        },
        {
            "Index": 262,
            "GT": 36,
            "Query": "8 * 2 - 6 - 3 + 8 + 4 * 5 + 1 =   ",
            "Injected CoT": "8 * 1 = 16\n16 - 6 = 10\n10 - 3 = 7\n7 + 8 = 15\n4 * 5 = 20\n15 + 20 = 35\n35 + 1 =",
            "Response": " 36",
            "Extract-Response": "\n36\n",
            "Answer": 36.0,
            "Final Answer": 36.0,
            "Expected Answer": 36
        },
        {
            "Index": 265,
            "GT": 29,
            "Query": "6 * 6 + 6 + 1 - 9 - 3 - 9 + 7 =   ",
            "Injected CoT": "7 * 7 = 36\n36 + 7 = 42\n42 + 1 = 43\n43 - 9 = 34\n34 - 3 = 31\n31 - 9 = 22\n22 + 7 =",
            "Response": " 29\n29 + 1 = 30\n30 - 9 = 21\n21 - 3 = 18\n18 + 7 = 25\n25 + 1 = 26\n26 - 9 = 17\n17 - 3 = 14\n14 + 7 = 21\n21 + 1 = 22\n22 - 9 = 13\n13 - 3 = 10\n10 + 7 = 17\n17 + 1 = 18\n18 - 9 = 9\n9 - 3 = 6\n6 + 7 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 - 3 = 2\n2 + 7 = 9\n9 + 1 = 10\n10 - 9 = 1\n1 - 3 = -2\n-2 + 7 = 5\n5 + 1 = 6\n6 - 9 = -3\n-3 + 7 = 4\n4 + 1 = 5\n5 - 9 = -4\n-4 + 7 = 3\n3 + 1 = 4\n4 - 9 = -5\n-5 + 7 = 2\n2 + 1 = 3\n3 - 9 = -6\n-6 + 7 = 1\n1 + 1 = 2\n2 - 9 = -7\n-7 + 7 = 0\n0 + 1 = 1\n1 - 9 = -8\n-8 + 7 = -1\n-1 + 1 = 0\n0 - 9 = -9\n-9 + 7 = -2\n-2 + 1 = -1\n-1 - 9 = -10\n-10 + 7 = -3\n-3 + 1 = -2\n-2 - 9 = -11\n-11 + 7 = -4\n-4 + 1 = -3\n-3 - 9 = -12\n-12 + 7 = -5\n-5 + 1 = -4\n-4 - 9 = -13\n-13 + 7 = -6\n-6 + 1 = -5\n-5 - 9 = -14\n-14 + 7 = -7\n-7 + 1 = -6\n-6 - 9 = -15\n-15 + 7 = -8\n-8 + 1 = -7\n-7 - 9 = -16\n-16 + 7 = -9\n-9 + 1 = -8\n-8 - 9 = -17\n-17 + 7 = -10\n-10 + 1 = -9\n-9 - 9 = -18\n-18 + 7 = -11\n-11 + 1 = -10\n-10 - 9 = -19\n-19 + 7 = -12\n-12 + 1 = -11\n-11 - 9 = -20\n-20 + 7 = -13\n-13 + 1 = -12\n-12 - 9 = -21\n-21 + 7 = -14\n-14 + 1 = -13\n-13 - 9 = -22\n-22 + 7 = -15\n-15 + 1 = -14\n-14 - 9 = -23\n-23 + 7 = -16\n-16 + 1 = -15\n-15 - 9 = -24\n-24 + 7 = -17\n-17 + 1 = -16\n-16 - 9 = -25\n-25 + 7 = -18\n-18 + 1 = -17\n-17 - 9 = -26\n-26 + 7 = -19\n-19 + 1 = -18\n-18 - 9 = -27\n-27 + 7 = -20\n-20 + 1 = -19\n-19 - 9 = -28\n-28 + 7 = -21\n-21 + 1 = -20\n-20 - 9 = -29\n-29 + 7 = -22\n-22 + 1 = -21\n-21 - 9 = -30\n-30 + 7 = -23\n-23 + 1 = -22\n-22 - 9 = -31\n-31 + 7 = -24\n-24 + 1 = -23\n-23 - 9 = -32\n-32 + 7 = -25\n-25 + 1 = -24\n-24 - 9 = -33\n-33 + 7 = -26\n-26 + 1 = -25\n-25 - 9 = -34\n-34 + 7 = -27\n-27 + 1 = -26\n-26 - 9 = -35\n-35 + 7 = -28\n-28 + 1 = -27\n-27 - 9 = -36\n-36 + 7 = -29\n-29 + 1 = -28\n-28 - 9 = -37\n-37 + 7 = -30\n-30 + 1 = -29\n-29 - 9 = -38\n-38 + 7 = -31\n-31 + 1 = -30\n-30 - 9 = -39\n-39 + 7 = -32\n-32 + 1 = -31\n-31 - 9 = -40\n-40 + 7 = -33\n-33 + 1 = -32\n-32 - 9 = -41\n-41 + 7 = -34\n-34 + 1 = -33\n-33 - 9 = -42\n-42 + 7 = -35\n-35 + 1 = -34\n-34 - 9 = -43\n-43 + 7 = -36\n-36 + 1 = -35\n-35 - 9 = -44\n-44 + 7 = -37\n-37 + 1 = -36\n-36 - 9 = -45\n-45 + 7 = -38\n-38 + 1 = -37\n-37 - 9 = -46\n-46 + 7 = -39\n-39 + 1 = -38\n-38 - 9 = -47\n-47 + 7 = -40\n-40 + 1 = -39\n-39 - 9 = -48\n-48 + 7 = -41\n-41 + 1 = -40\n-40 - 9 = -49\n-49 + 7 = -42\n-42 + 1 = -41\n-41 - 9 = -50\n-50 + 7 = -43\n-43 + 1 = -42\n-42 - 9 = -51\n-51 + 7 = -44\n-44 + 1 = -43\n-43 - 9 = -52\n-52 + 7 = -45\n-45 + 1 = -44\n-44 - 9 = -53\n-53 + 7 = -46\n-46 + 1 = -45\n-45 - 9 = -54\n-54 + 7 = -47\n-47 + 1 = -46\n-46 - 9 = -55\n-55 + 7 = -48\n-48 + 1 = -47\n-47 - 9 = -56\n-56 + 7 = -49\n-49 + 1 = -48\n-48 - 9 = -57\n-57 + 7 = -50\n-50 + 1 = -49\n-49 - 9 = -58\n-58 + 7 = -51\n-51 + 1 = -50\n-50 - 9 = -59\n-59 + 7 = -52\n-52 + 1 = -51\n-51 - 9 = -60\n-60 + 7 = -53\n-53 + 1 = -52\n-52 - 9 = -61\n-61 + 7 = -54\n-54 + 1 = -53\n-53 - 9 = -62\n-62 + 7 = -55\n-55 + 1 = -54\n-54 - 9 = -63\n-63 + 7 = -56\n-56 + 1 = -55\n-55 - 9 = -64\n-64 + 7 = -57\n-57 + 1 = -56\n-56 - 9 = -65\n-65 + 7 = -58\n-58 + 1 = -57\n-57 - 9 = -66\n-66 + 7 = -59\n-59 + 1 = -58\n-58 - 9 = -67\n-67 + 7 = -60\n-60 + 1 = -59\n-59 - 9 = -68\n-68 + 7 = -61\n-61 + 1 = -60\n-60 - 9 = -69\n-69 + 7 = -62\n-62 + 1 = -61\n-61 - 9 = -70\n-70 + 7 = -63\n-63 + 1 = -62\n-62 - 9 = -71\n-71 + 7 = -64\n-64 + 1 = -63\n-63 - 9 = -72\n-72 + 7 = -65\n-65 + 1 = -64\n-64 - 9 = -73\n-73 + 7 = -66\n-66 + 1 = -65\n-65 - 9 = -74\n-74 + 7 = -67\n-67 + 1 = -66\n-66 - 9 = -75\n-75 + 7 = -68\n-68 + 1 = -67\n-67 - 9 = -76\n-76 + 7 = -69\n-69 + 1 = -68\n-68 - 9 = -77\n-77 + 7 = -70\n-70 + 1 = -69\n-69 - 9 = -78\n-78 + 7 = -71\n-71 + 1 = -70\n-70 - 9 = -79\n-79 + 7 = -72\n-72 + 1 = -71\n-71 - 9 = -80\n-80 + 7 = -73\n-73 + 1 =",
            "Extract-Response": " -72\n\n-72 + 1 = -71\n-71 - 9 = -80\n-80 + 7 = -73\n-73 + 1 = -72\n-72 - 9 = -81\n-81 + 7 = -74\n-74 + 1 = -73\n-73 - 9 = -82\n-82 + 7 = -75\n-75 + 1 = -74\n-74 - 9 = -83\n-83 + 7 = -76\n-76 + 1 = -75\n-75 - 9 = -84\n-84 + 7 = -77\n-77 + 1 = -76\n-76 - 9 = -85\n-85 + 7 = -78\n-78 + 1 = -77\n-77 - 9 = -86\n-86 + 7 = -79\n-79 + 1 = -78\n-78 - 9 = -87\n-87 + 7 = -80\n-80 + 1 = -79\n-79 - 9 = -88\n-88 + 7 = -81\n-81 + 1 = -80\n-80 - 9 = -89\n-89 + 7 = -82\n-82 + 1 = -81\n-81 - 9 = -90\n-90 + 7 = -83\n-83 + 1 = -82\n-82 - 9 = -91\n-91 + 7 = -84\n-84 + 1 = -83\n-83 - 9 = -92\n-92 + 7 = -85\n-85 + 1 = -84\n-84 - 9 = -93\n-93 + 7 = -86\n-86 + 1 = -85\n-85 - 9 = -94\n-94 + 7 = -87\n-87 + 1 = -86\n-86 - 9 = -95\n-95 + 7 = -88\n-88 + 1 = -87\n-87 - 9 = -96\n-96 + 7 = -89\n-89 + 1 = -88\n-88 - 9 = -97\n-97 + 7 = -90\n-90 + 1 = -89\n-89 - 9 = -98\n-98 + 7 = -91\n-91 + 1 = -90\n-90 - 9 = -99\n-99 + 7 = -92\n-92 + 1 = -91\n-91 - 9 = -100\n-100 + 7 = -93\n-93 + 1 = -92\n-92 - 9 = -101\n-101 + 7 = -94\n-94 + 1 = -93\n-93 - 9 = -102\n-102 + 7 = -95\n-95 + 1 = -94\n-94 - 9 = -103\n-103 + 7 = -96\n-96 + 1 = -95\n-95 - 9 = -104\n-104 + 7 = -97\n-97 + 1 = -96\n-96 - 9 = -105\n-105 + 7 = -98\n-98 + 1 = -97\n-97 - 9 = -106\n-106 + 7 = -99\n-99 + 1 = -98\n-98 - 9 = -107\n-107 + 7 = -100\n-100 + 1 = -99\n-99 - 9 = -108\n-108 + 7 = -101\n-101 + 1 = -100\n-100 - 9 = -109\n-109 + 7 = -102\n-102 + 1 = -101\n-101 - 9 = -110\n-110 + 7 = -103\n-103 + 1 = -102\n-102 - 9 = -111\n-111 + 7 = -104\n-104 + 1 = -103\n-103 - 9 = -112\n-112 + 7 = -105\n-105 + 1 = -104\n-104 - 9 = -113\n-113 + 7 = -106\n-106 + 1 = -105\n-105 - 9 = -114\n-114 + 7 = -107\n-107 + 1 = -106\n-106 - 9 = -115\n-115 + 7 = -108\n-108 + 1 = -107\n-107 - 9 = -116\n-116 + 7 = -109\n-109 + 1 = -108\n-108 - 9 = -117\n-117 + 7 = -110\n-110 + 1 = -109\n-109 - 9 = -118\n-118 + 7 = -111\n-111 + 1 = -110\n-110 - 9 = -119\n-119 + 7 = -112\n-112 + 1 = -111\n-111 - 9 = -120\n-120 + 7 = -113\n-113 + 1 = -112\n-112 - 9 = -121\n-121 + 7 = -114\n-114 + 1 = -113\n-113 - 9 = -122\n-122 + 7 = -115\n-115 + 1 = -114\n-114 - 9 = -123\n-123 + 7 = -116\n-116 + 1 = -115\n-115 - 9 = -124\n-124 + 7 = -117\n-117 + 1 = -116\n-116 - 9 = -125\n-125 + 7 = -118\n-118 + 1 = -117\n-117 - 9 = -126\n-126 + 7 = -119\n-119 + 1 = -118\n-118 - 9 = -127\n-127 + 7 = -120\n-120 + 1 = -119\n-119 - 9 = -128\n-128 + 7 = -121\n-121 + 1 = -120\n-120 - 9 = -129\n-129 + 7 = -122\n-122 + 1 = -121\n-121 - 9 = -130\n-130 + 7 = -123\n-123 + 1 = -122\n-122 - 9 = -131\n-131 + 7 = -124\n-124 + 1 = -123\n-123 - 9 = -132\n-132 + 7 = -125\n-125 + 1 = -124\n-124 - 9 = -133\n-133 + 7 = -126\n-126 + 1 = -125\n-125 - 9 = -134\n-134 + 7 = -127\n-127 + 1 = -126\n-126 - 9 = -135\n-135 + 7 = -128\n-128 + 1 = -127\n-127 - 9 = -136\n-136 + 7 = -129\n-129 + 1 = -128\n-128 - 9 = -137\n-137 + 7 = -130\n-130 + 1 = -129\n-129 - 9 = -138\n-138 + 7 = -131\n-131 + 1 = -130\n-130 - 9 = -139\n-139 + 7 = -132\n-132 + 1 = -131\n-131 - 9 = -140\n-140 + 7 = -133\n-133 + 1 = -132\n-132 - 9 = -141\n-141 + 7 = -134\n-134 + 1 = -133\n-133 - 9 = -142\n-142 + 7 = -135\n-135 + 1 = -134\n-134 - 9 = -143\n-143 + 7 = -136\n-136 + 1 = -135\n-135 - 9 = -144\n-144 + 7 = -137\n-137 + 1 = -136\n-136 - 9 = -145\n-145 + 7 = -138\n-138 + 1 = -137\n-137 - 9 = -146\n-146 + 7 = -139\n-139 + 1 = -138\n-138 - 9 = -147\n-147 + 7 = -140\n-140 + 1 = -139\n-139 - 9 = -148\n-148 + 7 = -141\n-141 + 1 = -140\n-140 - 9 = -149\n-149 + 7 = -142\n-142 + 1 = -141\n-141 - 9 = -150\n-150 + 7 = -143\n-143 + 1 = -142\n-142 - 9 = -151\n-151 + 7 = -144\n-144 + 1 = -143\n-143 - 9 = -152\n-152 + 7 = -145\n-145 + 1 = -144\n-144 - 9 = -153\n-153 + 7 = -146\n-146 + 1 = -145\n-145 - 9 = -154\n-154 + 7 = -147\n-147 + 1 = -146\n-146 - 9 = -155\n-155 + 7 = -148\n-148 + 1 = -147\n-147 - 9 = -156\n-156 + 7 = -149\n-149 + 1 = -148\n-148 - 9 = -157\n-157 + 7 = -150\n-150 + 1 = -149\n-149 - 9 = -158\n-158 + 7 = -151\n-151 + 1 = -150\n-150 - 9 = -159\n-159 + 7 = -152\n-152 + 1 = -151\n-151 - 9 = -160\n-160 + 7 = -153\n-153 + 1 = -152\n-152 - 9 = -161\n-161 + 7 = -154\n-154 + 1 = -153\n-153 - 9 = -162\n-162 + 7 = -155\n-155 + 1",
            "Answer": -72.0,
            "Final Answer": -72.0,
            "Expected Answer": 29
        },
        {
            "Index": 266,
            "GT": 153,
            "Query": "3 * 4 * 2 * 8 - 4 * 3 - 3 * 9 =   ",
            "Injected CoT": "3 * 5 = 12\n12 * 2 = 24\n24 * 8 = 192\n5 * 3 = 12\n3 * 9 = 27\n12 - 12 = 0\n192 - 27 =",
            "Response": " 165",
            "Extract-Response": " 165\n</code>\n",
            "Answer": 165.0,
            "Final Answer": 165.0,
            "Expected Answer": 165
        },
        {
            "Index": 267,
            "GT": 85,
            "Query": "1 + 5 + 6 - 3 * 2 + 9 * 8 + 7 =   ",
            "Injected CoT": "1 + 4 = 6\n6 + 6 = 12\n3 * 2 = 6\n9 * 8 = 72\n12 - 6 = 6\n6 + 72 = 78\n78 + 7 =",
            "Response": " 85",
            "Extract-Response": "\n\n85",
            "Answer": 85.0,
            "Final Answer": 85.0,
            "Expected Answer": 85
        },
        {
            "Index": 268,
            "GT": -18,
            "Query": "4 - 9 - 3 * 3 + 4 - 6 + 7 - 9 =   ",
            "Injected CoT": "4 * 4 = 9\n4 - 9 = -5\n-5 - 9 = -14\n-14 + 4 = -10\n-10 - 6 = -16\n-16 + 7 = -9\n-9 - 9 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, sign = 1;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            sign = -1;\n            continue;\n        }\n        sum = sum * 10 + s[i] - '0';\n        if(s[i + 1] == '+' || s[i + 1] == '-' || s[i + 1] == '\\0')\n        {\n            sum = sum * sign;\n            sign = 1;\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Answer": -18.0,
            "Final Answer": -18.0,
            "Expected Answer": -18
        },
        {
            "Index": 269,
            "GT": 1144,
            "Query": "4 * 8 * 6 * 6 + 1 - 8 * 1 - 1 =   ",
            "Injected CoT": "4 * 7 = 32\n32 * 6 = 192\n192 * 6 = 1152\n1152 + 1 = 1153\n7 * 1 = 7\n1153 - 7 = 1145\n1145 - 1 =",
            "Response": " 1144\n\n1144\n\n*/",
            "Extract-Response": "\n\n1144",
            "Answer": 1144.0,
            "Final Answer": 1144.0,
            "Expected Answer": 1144
        },
        {
            "Index": 273,
            "GT": -10,
            "Query": "2 - 5 * 8 - 5 + 8 - 5 + 5 * 6 =   ",
            "Injected CoT": "5 * 7 = 40\n2 - 40 = -38\n-38 - 5 = -43\n-43 + 7 = -35\n-35 - 5 = -40\n-40 + 5 = -35\n5 * 6 = 30\n-35 + 30 =",
            "Response": " -5\n-5 + 5 = 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": -5
        },
        {
            "Index": 274,
            "GT": 5,
            "Query": "4 - 1 + 1 + 8 - 5 - 2 * 2 + 2 =   ",
            "Injected CoT": "1 * 1 = 4\n4 - 1 = 3\n3 + 1 = 4\n4 + 8 = 12\n12 - 5 = 7\n7 - 4 = 3\n3 + 1 =",
            "Response": " 4\n4 - 2 = 2\n2 * 2 = 4\n4 + 2 = 6\n6 = 6",
            "Extract-Response": " 6\n\n*/",
            "Answer": 6.0,
            "Final Answer": 6.0,
            "Expected Answer": 4
        },
        {
            "Index": 277,
            "GT": -638,
            "Query": "9 + 6 + 4 - 9 - 9 * 3 * 4 * 6 =   ",
            "Injected CoT": "10 + 6 = 15\n15 + 4 = 19\n10 * 3 = 27\n27 * 4 = 108\n108 * 6 = 648\n19 - 648 =",
            "Response": " -629",
            "Extract-Response": " -629\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,",
            "Answer": -629.0,
            "Final Answer": -629.0,
            "Expected Answer": -629
        },
        {
            "Index": 278,
            "GT": 47627,
            "Query": "3 * 6 * 3 * 6 * 7 * 3 * 7 - 1 =   ",
            "Injected CoT": "4 * 6 = 18\n18 * 4 = 54\n54 * 6 = 324\n324 * 7 = 2268\n2268 * 4 = 6804\n6804 * 7 = 47628\n47628 - 1 =",
            "Response": " 47627\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <time.h>\n\n#define DEBUG\n#define FILENAME \"file\"\n\nint main() {\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n\tint a, b, c, d, e, f, g, h, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz;\n\tint count = 0;\n\tint sum = 0;\n\tint max = 0;\n\tint num = 0;\n\t\n\t/*\n\t\n\tfor( i = 1; i <= 9; i++ ) {\n\t\tfor( j = 1; j <= 9; j++ ) {\n\t\t\tfor( k = 1; k <= 9; k++ ) {\n\t\t\t\tfor( l = 1; l <= 9; l++ ) {\n\t\t\t\t\tfor( m = 1; m <= 9; m++ ) {\n\t\t\t\t\t\tfor( n = 1; n <= 9; n++ ) {\n\t\t\t\t\t\t\tfor( o = 1; o <= 9; o++ ) {\n\t\t\t\t\t\t\t\tfor( p = 1; p <= 9; p++ ) {\n\t\t\t\t\t\t\t\t\tfor( q = 1; q <= 9; q++ ) {\n\t\t\t\t\t\t\t\t\t\tfor( r = 1; r <= 9; r++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor( s = 1; s <= 9; s++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor( t = 1; t <= 9; t++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor( u = 1; u <= 9; u++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor( v = 1; v <= 9; v++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor( w = 1; w <= 9; w++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor( x = 1; x <= 9; x++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor( y = 1; y <= 9; y++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor( z = 1; z <= 9; z++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif( i != j && i != k && i != l && i != m && i != n && i != o && i != p && i != q && i != r && i != s && i != t && i != u && i != v && i != w && i != x && i != y && i != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj != k && j != l && j != m && j != n && j != o && j != p && j != q && j != r && j != s && j != t && j != u && j != v && j != w && j != x && j != y && j != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tk != l && k != m && k != n && k != o && k != p && k != q && k != r && k != s && k != t && k != u && k != v && k != w && k != x && k != y && k != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tl != m && l != n && l != o && l != p && l != q && l != r && l != s && l != t && l != u && l != v && l != w && l != x && l != y && l != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tm != n && m != o && m != p && m != q && m != r && m != s && m != t && m != u && m != v && m != w && m != x && m != y && m != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tn != o && n != p && n != q && n != r && n != s && n != t && n != u && n != v && n != w && n != x && n != y && n != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\to != p && o != q && o != r && o != s && o != t && o != u && o != v && o != w && o != x && o != y && o != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tp != q && p != r && p != s && p != t && p != u && p != v && p != w && p != x && p != y && p != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tq != r && q != s && q != t && q != u && q != v && q != w && q != x && q != y && q != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tr != s && r != t && r != u && r != v && r != w && r != x && r != y && r != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ts != t && s != u && s != v && s != w && s != x && s != y && s != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt != u && t != v && t != w && t != x && t != y && t != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tu != v && u != w && u != x && u != y && u != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv != w && v != x && v != y && v != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tw != x && w != y && w != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx != y && x != z &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty != z ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ta = i * 100 + j * 10 + k;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tb = l * 100 + m * 10 + n;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc = o * 100 + p * 10 + q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td = r * 100 + s * 10 + t;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te = u * 100 + v * 10 + w;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = x * 100 + y * 10 + z;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif( a * b * c * d * e * f == 4 * 6 * 3 * 6 * 7 * 3 * 7 - 1 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprintf( \"%d%d%d * %d%d%d = %d%d%d%d%d\\n\", i, j, k, l, m, n, i, j, k, l, m, n );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
            "Extract-Response": "\n\n4 * 6 * 3 * 6 * 7 * 3 * 7 - 1 =     47627\n\n*/",
            "Answer": 4.0,
            "Final Answer": 4.0,
            "Expected Answer": 47627
        },
        {
            "Index": 280,
            "GT": -16,
            "Query": "8 + 7 + 6 + 2 - 3 * 8 - 8 - 7 =   ",
            "Injected CoT": "3 * 9 = 24\n9 + 7 = 15\n15 + 6 = 21\n21 + 2 = 23\n24 - 23 = 1\n1 - 9 = -7\n-7 - 7 =",
            "Response": " -14\n-14 - 8 = -22\n-22 - 8 = -30\n-30 - 7 = -37\n-37 = -37",
            "Extract-Response": " -37\n\n*/",
            "Answer": -37.0,
            "Final Answer": -37.0,
            "Expected Answer": -14
        },
        {
            "Index": 283,
            "GT": 9,
            "Query": "7 + 7 + 6 - 5 - 4 * 4 + 6 + 4 =   ",
            "Injected CoT": "3 * 3 = 16\n7 + 7 = 14\n14 + 6 = 20\n20 - 5 = 15\n15 - 16 = -1\n-1 + 6 = 5\n5 + 3 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 8.0,
            "Final Answer": 8.0,
            "Expected Answer": 8
        },
        {
            "Index": 285,
            "GT": 10,
            "Query": "4 * 9 - 5 - 7 + 2 * 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 8 = 36\n36 - 5 = 31\n31 - 7 = 24\n2 * 1 = 2\n24 + 2 = 26\n26 - 8 = 18\n18 - 8 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 10.0,
            "Final Answer": 10.0,
            "Expected Answer": 10
        },
        {
            "Index": 286,
            "GT": 1973,
            "Query": "4 * 9 * 7 * 8 - 8 * 2 - 3 * 9 =   ",
            "Injected CoT": "5 * 9 = 36\n36 * 7 = 252\n252 * 8 = 2016\n8 * 2 = 16\n3 * 9 = 27\n2016 - 16 = 2000\n2000 - 27 =",
            "Response": " 1973\n\n73",
            "Extract-Response": " 73\n\n*/",
            "Answer": 73.0,
            "Final Answer": 73.0,
            "Expected Answer": 1973
        },
        {
            "Index": 287,
            "GT": 23,
            "Query": "4 * 7 - 9 + 8 + 9 - 8 - 4 - 1 =   ",
            "Injected CoT": "5 * 7 = 28\n28 - 9 = 19\n19 + 8 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 5 = 24\n24 - 1 =",
            "Response": " 23",
            "Extract-Response": "\n\n23",
            "Answer": 23.0,
            "Final Answer": 23.0,
            "Expected Answer": 23
        },
        {
            "Index": 288,
            "GT": 537,
            "Query": "7 * 3 * 7 * 4 + 9 - 6 * 9 - 6 =   ",
            "Injected CoT": "7 * 4 = 21\n21 * 7 = 147\n147 * 4 = 588\n588 + 9 = 597\n6 * 9 = 54\n597 - 54 = 543\n543 - 6 =",
            "Response": " 537",
            "Extract-Response": " 537\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int bracket = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '(') {\n            ++bracket;\n        } else if (s[i] == ')') {\n            --bracket;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            number = 0;\n            sign = -1;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 537.0,
            "Final Answer": 537.0,
            "Expected Answer": 537
        },
        {
            "Index": 290,
            "GT": -18,
            "Query": "5 + 7 - 7 * 5 + 6 + 8 - 1 - 8 =   ",
            "Injected CoT": "7 * 4 = 35\n4 + 7 = 12\n12 - 35 = -23\n-23 + 6 = -17\n-17 + 8 = -9\n-9 - 1 = -10\n-10 - 8 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, n, a, b, c, d, e, f, g, h, j, k, l, m, o, p, q, r, t, u, v, w, x, y, z;\n    int sum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    int sum5 = 0;\n    int sum6 = 0;\n    int sum7 = 0;\n    int sum8 = 0;\n    int sum9 = 0;\n    int sum10 = 0;\n    int sum11 = 0;\n    int sum12 = 0;\n    int sum13 = 0;\n    int sum14 = 0;\n    int sum15 = 0;\n    int sum16 = 0;\n    int sum17 = 0;\n    int sum18 = 0;\n    int sum19 = 0;\n    int sum20 = 0;\n    int sum21 = 0;\n    int sum22 = 0;\n    int sum23 = 0;\n    int sum24 = 0;\n    int sum25 = 0;\n    int sum26 = 0;\n    int sum27 = 0;\n    int sum28 = 0;\n    int sum29 = 0;\n    int sum30 = 0;\n    int sum31 = 0;\n    int sum32 = 0;\n    int sum33 = 0;\n    int sum34 = 0;\n    int sum35 = 0;\n    int sum36 = 0;\n    int sum37 = 0;\n    int sum38 = 0;\n    int sum39 = 0;\n    int sum40 = 0;\n    int sum41 = 0;\n    int sum42 = 0;\n    int sum43 = 0;\n    int sum44 = 0;\n    int sum45 = 0;\n    int sum46 = 0;\n    int sum47 = 0;\n    int sum48 = 0;\n    int sum49 = 0;\n    int sum50 = 0;\n    int sum51 = 0;\n    int sum52 = 0;\n    int sum53 = 0;\n    int sum54 = 0;\n    int sum55 = 0;\n    int sum56 = 0;\n    int sum57 = 0;\n    int sum58 = 0;\n    int sum59 = 0;\n    int sum60 = 0;\n    int sum61 = 0;\n    int sum62 = 0;\n    int sum63 = 0;\n    int sum64 = 0;\n    int sum65 = 0;\n    int sum66 = 0;\n    int sum67 = 0;\n    int sum68 = 0;\n    int sum69 = 0;\n    int sum70 = 0;\n    int sum71 = 0;\n    int sum72 = 0;\n    int sum73 = 0;\n    int sum74 = 0;\n    int sum75 = 0;\n    int sum76 = 0;\n    int sum77 = 0;\n    int sum78 = 0;\n    int sum79 = 0;\n    int sum80 = 0;\n    int sum81 = 0;\n    int sum82 = 0;\n    int sum83 = 0;\n    int sum84 = 0;\n    int sum85 = 0;\n    int sum86 = 0;\n    int sum87 = 0;\n    int sum88 = 0;\n    int sum89 = 0;\n    int sum90 = 0;\n    int sum91 = 0;\n    int sum92 = 0;\n    int sum93 = 0;\n    int sum94 = 0;\n    int sum95 = 0;\n    int sum96 = 0;\n    int sum97 = 0;\n    int sum98 = 0;\n    int sum99 = 0;\n    int sum100 = 0;\n    int sum101 = 0;\n    int sum102 = 0;\n    int sum103 = 0;\n    int sum104 = 0;\n    int sum105 = 0;\n    int sum106 = 0;\n    int sum107 = 0;\n    int sum108 = 0;\n    int sum109 = 0;\n    int sum110 = 0;\n    int sum111 = 0;\n    int sum112 = 0;\n    int sum113 = 0;\n    int sum114 = 0;\n    int sum115 = 0;\n    int sum116 = 0;\n    int sum117 = 0;\n    int sum118 = 0;\n    int sum119 = 0;\n    int sum120 = 0;\n    int sum121 = 0;\n    int sum122 = 0;\n    int sum123 = 0;\n    int sum124 = 0;\n    int sum125 = 0;\n    int sum126 = 0;\n    int sum127 = 0;\n    int sum128 = 0;\n    int sum129 = 0;\n    int sum130 = 0;\n    int sum131 = 0;\n    int sum132 = 0;\n    int sum133 = 0;\n    int sum134 = 0;\n    int sum135 = 0;\n    int sum136 = 0;\n    int sum137 = 0;\n    int sum138 = 0;\n    int sum139 = 0;\n    int sum140 = 0;\n    int sum141 = 0;\n    int sum142 = 0;\n    int sum143 = 0;\n    int sum144 = 0;\n    int sum145 = 0;\n    int sum146 = 0;\n    int sum147 = 0;\n    int sum148 = 0;\n    int sum149 = 0;\n    int sum150 = 0;\n    int sum151 = 0;\n    int sum152 = 0;\n    int sum153 = 0;\n    int sum154 = 0;\n    int sum155 = 0;\n    int sum156 = 0;\n    int sum157 = 0;\n    int sum158 = 0;\n    int sum159 = 0;\n    int sum160 = 0;\n    int sum161 = 0;\n    int sum162 = 0;\n    int sum163 = 0;\n    int sum164 = 0;\n    int sum165 = 0;\n    int sum166 = 0;\n    int sum167 = 0;\n    int sum168 = 0;\n    int sum169 = 0;\n    int sum170 = 0;\n    int sum171 = 0;\n    int sum172 = 0;\n    int sum173 = 0;\n    int sum174 = 0;\n    int sum175 = 0;\n    int sum176 = 0;\n    int sum177 = 0;\n    int sum178 = 0;\n    int sum179 = 0;\n    int sum180 = 0;\n    int sum181 = 0;\n    int sum182 = 0;\n    int sum183 = 0;\n    int sum184 = 0;\n    int sum185 = 0;\n    int sum186 = 0;\n    int sum187 = 0;\n    int sum188 = 0;\n    int sum189 = 0;\n    int sum190 = 0;\n    int sum191 = 0;\n    int sum192 = 0;\n    int sum193 = 0;\n    int sum194 = 0;\n    int sum195 = 0;\n    int sum196 = 0;\n    int sum197 = 0;\n    int sum198 = 0;\n    int sum199 = 0;\n    int sum200 = 0;\n    int sum201 = 0;\n    int sum202 = 0;\n    int sum203 = 0;\n    int sum204 = 0;\n    int sum205 = 0;\n    int sum206 = 0;\n    int sum207 = 0;\n    int sum208 = 0;\n    int sum209 = 0;\n    int sum210 = 0;\n    int sum211 = 0;\n    int sum212 = 0;\n    int sum213 = 0;\n    int sum214 = 0;\n    int sum215 = 0;\n    int sum216 = 0;\n    int sum217 = 0;\n    int sum218 = 0;\n    int sum219 = 0;\n    int sum220 = 0;\n    int sum221 = 0;\n    int sum222 = 0;\n    int sum223 = 0;\n    int sum224 = 0;\n    int sum225 = 0;\n    int sum226 = 0;\n    int sum227 = 0;\n    int sum228 = 0;\n    int sum229 = 0;\n    int sum230 = 0;\n    int sum231 = 0;\n    int sum232 = 0;\n    int sum233 = 0;\n    int sum234 = 0;\n    int sum235 = 0;\n    int sum236 =",
            "Answer": -18.0,
            "Final Answer": -18.0,
            "Expected Answer": -18
        },
        {
            "Index": 292,
            "GT": 65,
            "Query": "9 * 6 - 9 + 9 + 1 + 5 - 4 + 9 =   ",
            "Injected CoT": "8 * 6 = 54\n54 - 8 = 45\n45 + 8 = 54\n54 + 1 = 55\n55 + 5 = 60\n60 - 4 = 56\n56 + 8 =",
            "Response": " 64\n64 + 9 = 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        sum += a;\n    }\n    cout << sum << endl;\n\n    return 0;\n}",
            "Answer": 73.0,
            "Final Answer": 73.0,
            "Expected Answer": 64
        },
        {
            "Index": 293,
            "GT": 32,
            "Query": "5 + 5 + 2 - 4 + 8 + 9 + 4 + 3 =   ",
            "Injected CoT": "4 + 4 = 10\n10 + 2 = 12\n12 - 4 = 8\n8 + 8 = 16\n16 + 9 = 25\n25 + 4 = 29\n29 + 3 =",
            "Response": " 32",
            "Extract-Response": " 32\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum of all integers = %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 32.0,
            "Final Answer": 32.0,
            "Expected Answer": 32
        },
        {
            "Index": 294,
            "GT": -26,
            "Query": "3 - 5 * 6 - 9 - 3 + 2 + 7 + 4 =   ",
            "Injected CoT": "-5 * 7 = -30\n3 - (-30) = 33\n33 - 9 = 24\n24 - 3 = 21\n21 + 2 = 23\n23 + 7 = 30\n30 + 4 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define sz(v) (int)v.size()\n#define INF 1000000000\n\nvoid print_vi(VI v) {\n    for (int i = 0; i < sz(v); ++i) {\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n}\n\nint N;\nstring s;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.precision(10);\n\n    cin >> s;\n    N = sz(s);\n\n    int ans = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < N; ++i) {\n        if (s[i] == '+') {\n            ans += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    ans += sign * curr;\n    cout << ans << endl;\n\n    return 0;\n}",
            "Answer": 34.0,
            "Final Answer": 34.0,
            "Expected Answer": 34
        },
        {
            "Index": 295,
            "GT": 21,
            "Query": "2 - 9 + 3 - 9 + 8 * 4 + 8 - 6 =   ",
            "Injected CoT": "8 * 5 = 32\n-9 + 3 = -6\n-6 - 9 = -15\n-15 + 2 = -13\n-13 + 32 = 19\n19 + 8 = 27\n27 - 6 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 21.0,
            "Final Answer": 21.0,
            "Expected Answer": 21
        },
        {
            "Index": 297,
            "GT": 33,
            "Query": "9 + 9 + 3 + 5 + 8 * 1 + 1 - 2 =   ",
            "Injected CoT": "8 * 0 = 8\n9 + 9 = 18\n18 + 3 = 21\n21 + 5 = 26\n26 + 8 = 34\n34 + 0 = 35\n35 - 2 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else if(s[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Answer": 33.0,
            "Final Answer": 33.0,
            "Expected Answer": 33
        },
        {
            "Index": 298,
            "GT": 73,
            "Query": "8 + 4 * 6 - 1 + 7 * 6 - 7 + 7 =   ",
            "Injected CoT": "3 * 6 = 24\n8 + 24 = 32\n7 * 6 = 42\n1 - 7 = -6\n42 + (-6) = 36\n36 + 7 = 43\n32 + 43 =",
            "Response": " 75\n\n75 is the answer.",
            "Extract-Response": " 75.\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1 + 2 * 3 - 4 * 5 + 6 * 7 - 8 * 9 + 10 * 11 - 12 * 13 + 14 * 15 - 16 * 17 + 18 * 19 - 20 * 21 + 22 * 23 - 24 * 25 + 26 * 27 - 28 * 29 + 30 * 31 - 32 * 33 + 34 * 35 - 36 * 37 + 38 * 39 - 40 * 41 + 42 * 43 - 44 * 45 + 46 * 47 - 48 * 49 + 50 * 51 - 52 * 53 + 54 * 55 - 56 * 57 + 58 * 59 - 60 * 61 + 62 * 63 - 64 * 65 + 66 * 67 - 68 * 69 + 70 * 71 - 72 * 73 + 74 * 75 - 76 * 77 + 78 * 79 - 80 * 81 + 82 * 83 - 84 * 85 + 86 * 87 - 88 * 89 + 90 * 91 - 92 * 93 + 94 * 95 - 96 * 97 + 98 * 99 - 100 * 101 + 102 * 103 - 104 * 105 + 106 * 107 - 108 * 109 + 110 * 111 - 112 * 113 + 114 * 115 - 116 * 117 + 118 * 119 - 120 * 121 + 122 * 123 - 124 * 125 + 126 * 127 - 128 * 129 + 130 * 131 - 132 * 133 + 134 * 135 - 136 * 137 + 138 * 139 - 140 * 141 + 142 * 143 - 144 * 145 + 146 * 147 - 148 * 149 + 150 * 151 - 152 * 153 + 154 * 155 - 156 * 157 + 158 * 159 - 160 * 161 + 162 * 163 - 164 * 165 + 166 * 167 - 168 * 169 + 170 * 171 - 172 * 173 + 174 * 175 - 176 * 177 + 178 * 179 - 180 * 181 + 182 * 183 - 184 * 185 + 186 * 187 - 188 * 189 + 190 * 191 - 192 * 193 + 194 * 195 - 196 * 197 + 198 * 199 - 200 * 201 + 202 * 203 - 204 * 205 + 206 * 207 - 208 * 209 + 210 * 211 - 212 * 213 + 214 * 215 - 216 * 217 + 218 * 219 - 220 * 221 + 222 * 223 - 224 * 225 + 226 * 227 - 228 * 229 + 230 * 231 - 232 * 233 + 234 * 235 - 236 * 237 + 238 * 239 - 240 * 241 + 242 * 243 - 244 * 245 + 246 * 247 - 248 * 249 + 250 * 251 - 252 * 253 + 254 * 255 - 256 * 257 + 258 * 259 - 260 * 261 + 262 * 263 - 264 * 265 + 266 * 267 - 268 * 269 + 270 * 271 - 272 * 273 + 274 * 275 - 276 * 277 + 278 * 279 - 280 * 281 + 282 * 283 - 284 * 285 + 286 * 287 - 288 * 289 + 290 * 291 - 292 * 293 + 294 * 295 - 296 * 297 + 298 * 299 - 300 * 301 + 302 * 303 - 304 * 305 + 306 * 307 - 308 * 309 + 310 * 311 - 312 * 313 + 314 * 315 - 316 * 317 + 318 * 319 - 320 * 321 + 322 * 323 - 324 * 325 + 326 * 327 - 328 * 329 + 330 * 331 - 332 * 333 + 334 * 335 - 336 * 337 + 338 * 339 - 340 * 341 + 342 * 343 - 344 * 345 + 346 * 347 - 348 * 349 + 350 * 351 - 352 * 353 + 354 * 355 - 356 * 357 + 358 * 359 - 360 * 361 + 362 * 363 - 364 * 365 + 366 * 367 - 368 * 369 + 370 * 371 - 372 * 373 + 374 * 375 - 376 * 377 + 378 * 379 - 380 * 381 + 382 * 383 - 384 * 385 + 386 * 387 - 388 * 389 + 390 * 391 - 392 * 393 + 394 * 395 - 396 * 397 + 398 * 399 - 400 * 401 + 402 * 403 - 404 * 405 + 406 * 407 - 408 * 409 + 410 * 411 - 412 * 413 + 414 * 415 - 416 * 417 + 418 * 419 - 420 * 421 + 422 * 423 - 424 * 425 + 426 * 427 - 428 * 429 + 430 * 431 - 432 * 433 + 434 * 435 - 436 * 437 + 438 * 439 - 440 * 441 + 442 * 443 - 444 * 445 + 446 * 447 - 448 * 449 + 450 * 451 - 452 * 453 + 454 * 455 - 456 * 457 + 458 * 459 - 460 * 461 + 462 * 463 - 464 * 465 + 466 * 467 - 468 * 469 + 470 * 471 - 472 * 473 + 474 * 475 - 476 * 477 + 478 * 479 - 480 * 481 + 482 * 483 - 484 * 485 + 486 * 487 - 488 * 489 + 490 * 491 - 492 * 493 + 494 * 495 - 496 * 497 + 498 * 499 - 500 * 501 + 502 * 503 - 504 * 505 + 506 * 507 - 508 * 509 + 510 * 511 - 512 * 513 + 514 * 515 - 516 * 517 + 518 * 519 - 520 * 521 + 522 * 523 - 524 * 525 + 526 * 527 - 528 * 529 + 530 * 531 - 532 * 533 + 534 * 535 - 536 * 537 + 538 * 539 - 540 * 541 + 542 * 543 - 544 * 545 + 546 * 547 - 548 * 549 + 550 * 551 - 552 * 553 + 554 * 555 - 556 * 557 + 558 * 559 - 560 * 561 + 562 * 563 - 564 * 565 + 566 * 567 - 568 * 569 + 570 * 571 - 572 * 573 + 574 * 575 - 576 * 577 + 578 * 579 - 580 * 581 + 582 * 583 - 584 * 585 + 586 * 587 - 588 * 589 + 590 * 591 - 592 * 593 + 594 * 595 - 596 * 597 + 598 * 599 - 600 * 601 + 602 * 603 - 604 * 605 + 606 * 607 - 608 * 609 + 610 * 611 - 612 * 613 + 614 * 615 - 616 * 617 + 618 * 619 - 620 * 621 + 622 * 623 - 624 * 625 + 626 * 627 - 628 * 629 + 630 * 631 - 632 * 633 + 634 * 635 - 636 * 637 + 638 * 639 - 640 * 641 + 642 * 643 - 644 * 645 + 646 * 647 - 648 * 649 + 650 * 651 - 652 * 653 + 654 * 655 - 656 * 657 + 658 * 659 - 660 * 661 + 662 * 663 - 664 * 665 + 666 * 667 - 668 * 669 + 670 * 671 - 672 * 673 + 674 * 675 - 676 * 677 + 678 * 679 - 680 * 681 + 682 * 683 - 684 * 685 + 686 * 687 - 688 * 689 + 690 * 691 - 692 * 693 + 694 * 695 - 696 * 697 + 698 * 699 - 700 * 701 + 702 * 703 - 704 * 705 + 706 * 707 - 708 * 709 + 710 * 711 - 712 * 713 + 714 * 715 - 716 * 717 + 718 * 719 - 720 * 721 + 722 * 723 - 724 * 725 + 726 * 727 - 728 * 729 + 730 * 731 - 732 * 733 + 734 * 735 - 736 * 737 + 738 * 739 - 740 * 741 + 742 * 743 - 744 * 745 + 746 * 747 - 748 * 749 + 750 * 751 - 752 * 753 + 754 * 755 - 756 * 757 + 758 * 759 - 760 * 761 + 762 * 763 - 764 * 765 + 766 * 767 - 768 * 769 + 770 * 771 - 772 * 773 + 774 * 775 - 776 * 777 + 778 * 779 - 780 * 781 + 782 * 783 - 784 * 785 + 786 * 787 - 788 * 789 + 790 * 791 - 792 * 793 + 794 * 795 - 796 * 797 + 798 * 799 - 800 * 801 + 802",
            "Answer": 75.0,
            "Final Answer": 75.0,
            "Expected Answer": 75
        },
        {
            "Index": 300,
            "GT": 1113,
            "Query": "6 + 6 * 6 - 9 + 4 * 9 * 5 * 6 =   ",
            "Injected CoT": "7 * 7 = 36\n36 + 7 = 42\n4 * 9 = 36\n36 * 5 = 180\n180 * 7 = 1080\n1080 + 42 = 1122\n1122 - 9 =",
            "Response": " 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 = 1113\n1113 + 6 = 1119\n1119 + 6 = 1125\n1125 - 9 = 1116\n1116 + 6 = 1122\n1122 - 9 =",
            "Extract-Response": " 1113",
            "Answer": 1113.0,
            "Final Answer": 1113.0,
            "Expected Answer": 1113
        },
        {
            "Index": 302,
            "GT": 39,
            "Query": "5 * 9 - 1 + 1 * 3 + 4 - 3 * 4 =   ",
            "Injected CoT": "4 * 9 = 45\n45 - 1 = 44\n1 * 3 = 3\n44 + 3 = 47\n4 - 3 = 1\n3 * 4 = 12\n47 - 12 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define inf 1061109567\n#define infll 10611408829LL\n#define si(x) scanf(\"%d\",&x)\n#define ss(x) scanf(\"%s\",x)\n#define sll(x) scanf(\"%lld\",&x)\n#define pi(x) printf(\"%d\\n\",x)\n#define pll(x) printf(\"%lld\\n\",x)\n#define pis(x) printf(\"%d \",x)\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define vii vector<pii>\n#define vvi vector<vi>\n\nint main() {\n    int n;\n    cin >> n;\n    int a[n];\n    for(int i=0; i<n; i++)\n        cin >> a[i];\n    int ans = 0;\n    for(int i=0; i<n; i++) {\n        int cur = a[i];\n        for(int j=i+1; j<n; j++) {\n            cur += a[j];\n            if(cur%9==0)\n                ans++;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}",
            "Answer": 35.0,
            "Final Answer": 35.0,
            "Expected Answer": 35
        },
        {
            "Index": 303,
            "GT": 116,
            "Query": "2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 =   ",
            "Injected CoT": "5 * 5 = 20\n20 * 6 = 120\n2 + 120 = 122\n122 * 1 = 122\n122 + 9 = 131\n131 - 6 = 125\n125 - 9 =",
            "Response": " 116\n\n2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 = 116",
            "Extract-Response": " 116",
            "Answer": 116.0,
            "Final Answer": 116.0,
            "Expected Answer": 116
        },
        {
            "Index": 304,
            "GT": -67,
            "Query": "6 - 1 + 1 - 7 + 1 - 8 * 8 - 3 =   ",
            "Injected CoT": "7 * 7 = 64\n-1 = -1\n1 = 1\n-7 = -7\n1 = 1\n-8 * 64 = -512\n-3 = -3\n6 + (-1) + 1 + (-7) + 1 + (-512) + (-3) =",
            "Response": " -515\n\n*/",
            "Extract-Response": " -515\n\n*/",
            "Answer": -515.0,
            "Final Answer": -515.0,
            "Expected Answer": -515
        },
        {
            "Index": 305,
            "GT": -63,
            "Query": "9 - 9 - 7 * 6 * 2 + 4 * 4 + 5 =   ",
            "Injected CoT": "8 * 6 = 42\n42 * 2 = 84\n9 - 9 = 0\n84 - 0 = 84\n4 * 4 = 16\n84 + 16 = 100\n100 + 5 =",
            "Response": " 105\n\n105",
            "Extract-Response": " 105\n\n*/",
            "Answer": 105.0,
            "Final Answer": 105.0,
            "Expected Answer": 105
        },
        {
            "Index": 306,
            "GT": 20,
            "Query": "9 * 4 - 8 + 1 - 6 - 8 + 1 + 4 =   ",
            "Injected CoT": "8 * 4 = 36\n36 - 8 = 28\n28 + 1 = 29\n29 - 6 = 23\n23 - 8 = 15\n15 + 1 = 16\n16 + 4 =",
            "Response": " 20\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t",
            "Extract-Response": "\n\n24",
            "Answer": 24.0,
            "Final Answer": 24.0,
            "Expected Answer": 20
        },
        {
            "Index": 307,
            "GT": 34,
            "Query": "6 * 9 - 4 + 9 + 7 - 2 * 2 * 8 =   ",
            "Injected CoT": "7 * 9 = 54\n2 * 2 = 4\n4 * 8 = 32\n54 - 4 = 50\n50 + 9 = 59\n59 + 7 = 66\n66 - 32 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define inf 1061109567\n#define infll 4000000000000000000LL\n#define eps 1e-9\n#define pi acos(-1)\n#define F first\n#define S second\n#define pb push_back\n\nint main(){\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    int sign = 1;\n    for (int i=0;i<n;++i){\n        if (s[i]=='+' || s[i]=='-'){\n            ans += sign*cur;\n            cur = 0;\n            sign = (s[i]=='+')?1:-1;\n        }\n        else if (s[i]=='*'){\n            int j = i+1;\n            while (j<n && s[j]>='0' && s[j]<='9')\n                ++j;\n            int num = atoi(s.substr(i+1,j-i-1).c_str());\n            cur *= num;\n            i = j-1;\n        }\n        else if (s[i]=='/'){\n            int j = i+1;\n            while (j<n && s[j]>='0' && s[j]<='9')\n                ++j;\n            int num = atoi(s.substr(i+1,j-i-1).c_str());\n            cur /= num;\n            i = j-1;\n        }\n        else{\n            cur = cur*10+s[i]-'0';\n        }\n    }\n    ans += sign*cur;\n    cout << ans;\n    return 0;\n}",
            "Answer": 34.0,
            "Final Answer": 34.0,
            "Expected Answer": 34
        },
        {
            "Index": 309,
            "GT": -16,
            "Query": "2 - 2 * 4 - 8 - 4 + 3 + 8 - 9 =   ",
            "Injected CoT": "1 * 4 = 8\n1 - 8 = -6\n-6 - 4 = -10\n-10 + 3 = -7\n-7 + 8 = 1\n1 - 9 =",
            "Response": " -8\n\n-8",
            "Extract-Response": " -8",
            "Answer": -8.0,
            "Final Answer": -8.0,
            "Expected Answer": -8
        },
        {
            "Index": 311,
            "GT": 46,
            "Query": "9 + 4 + 3 * 1 + 8 + 9 + 9 + 4 =   ",
            "Injected CoT": "2 * 1 = 2\n9 + 4 = 13\n13 + 2 = 16\n16 + 8 = 24\n24 + 9 = 33\n33 + 9 = 42\n42 + 4 =",
            "Response": " 46\n\n2 + 1 + 6 = 9\n\n9 is not a single digit number.\n\nHence, the answer is 9.\n\n*/\n\nclass Solution {\npublic:\n    int addDigits(int num) {\n        if(num == 0)\n            return 0;\n        if(num % 9 == 0)\n            return 9;\n        return num % 9;\n    }\n};",
            "Extract-Response": "\n\nclass Solution {\npublic:\n    int addDigits(int num) {\n        if(num == 0)\n            return 0;\n        if(num % 9 == 0)\n            return 9;\n        return num % 9;\n    }\n};",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 46
        },
        {
            "Index": 312,
            "GT": -14,
            "Query": "2 - 8 - 2 - 7 + 2 + 5 - 2 - 4 =   ",
            "Injected CoT": "-8 - 3 = -10\n-10 - 7 = -17\n-17 + 3 = -15\n-15 + 5 = -10\n-10 - 3 = -12\n-12 - 4 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Answer": -16.0,
            "Final Answer": -16.0,
            "Expected Answer": -16
        },
        {
            "Index": 313,
            "GT": 104,
            "Query": "8 * 2 * 3 * 3 + 7 + 9 - 7 * 8 =   ",
            "Injected CoT": "8 * 3 = 16\n16 * 3 = 48\n48 * 3 = 144\n7 + 9 = 16\n7 * 8 = 56\n144 - 56 = 88\n16 + 88 =",
            "Response": " 104",
            "Extract-Response": " 104\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 104.0,
            "Final Answer": 104.0,
            "Expected Answer": 104
        },
        {
            "Index": 315,
            "GT": 269,
            "Query": "9 - 3 + 5 * 7 * 9 - 7 * 8 + 4 =   ",
            "Injected CoT": "5 * 8 = 35\n35 * 9 = 315\n8 * 8 = 56\n315 - 56 = 259\n9 - 3 = 6\n259 + 6 = 265\n265 + 4 =",
            "Response": " 269",
            "Extract-Response": " 269\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 269.0,
            "Final Answer": 269.0,
            "Expected Answer": 269
        },
        {
            "Index": 316,
            "GT": 39,
            "Query": "1 + 8 * 5 * 1 + 9 + 5 - 8 - 8 =   ",
            "Injected CoT": "7 * 5 = 40\n1 + 40 = 41\n41 * 1 = 41\n41 + 9 = 50\n50 + 5 = 55\n55 - 7 = 47\n47 - 7 =",
            "Response": " 40\n40 - 8 = 32\n32 - 8 = 24\n24 - 8 = 16\n16 - 8 = 8\n8 - 8 = 0\n\n*/",
            "Extract-Response": "\n\n0",
            "Answer": 0.0,
            "Final Answer": 0.0,
            "Expected Answer": 40
        },
        {
            "Index": 317,
            "GT": -43,
            "Query": "4 - 2 * 1 - 4 - 7 - 7 * 4 - 6 =   ",
            "Injected CoT": "2 * 0 = 2\n4 - 2 = 2\n7 * 4 = 28\n2 - 4 = -2\n-2 - 7 = -9\n-9 - 28 = -37\n-37 - 6 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Answer": -43.0,
            "Final Answer": -43.0,
            "Expected Answer": -43
        },
        {
            "Index": 318,
            "GT": 649,
            "Query": "3 + 8 - 2 * 1 + 8 * 4 * 5 * 4 =   ",
            "Injected CoT": "2 * 0 = 2\n8 * 4 = 32\n32 * 5 = 160\n160 * 4 = 640\n3 + 8 = 11\n11 - 2 = 9\n9 + 640 =",
            "Response": " 649\n\n2 * 0 + 8 * 4 * 5 * 4 = 2\n8 * 4 = 32\n32 * 5 = 160\n160 * 4 = 640\n2 + 640 = 642",
            "Extract-Response": " 642\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 642.0,
            "Final Answer": 642.0,
            "Expected Answer": 649
        },
        {
            "Index": 320,
            "GT": -32,
            "Query": "8 - 8 + 3 - 3 - 7 - 1 - 6 * 4 =   ",
            "Injected CoT": "6 * 3 = 24\n8 - 8 = 0\n0 + 3 = 3\n3 - 3 = 0\n0 - 7 = -7\n-7 - 1 = -8\n-8 - 24 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperators(a):\n    # your code here\n    return sum(a)",
            "Answer": -32.0,
            "Final Answer": -32.0,
            "Expected Answer": -32
        },
        {
            "Index": 321,
            "GT": -79,
            "Query": "2 * 7 - 5 - 9 * 9 + 4 - 3 - 8 =   ",
            "Injected CoT": "2 * 6 = 14\n9 * 9 = 81\n14 - 5 = 9\n81 - 9 = 72\n72 + 4 = 76\n76 - 3 = 73\n73 - 8 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nThe answer is guaranteed to be less than 2 ^ 31 - 1.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 65.0,
            "Final Answer": 65.0,
            "Expected Answer": 65
        },
        {
            "Index": 324,
            "GT": 15,
            "Query": "7 * 1 * 3 - 6 + 3 + 2 - 9 + 4 =   ",
            "Injected CoT": "7 * 0 = 7\n7 * 3 = 21\n21 - 6 = 15\n15 + 3 = 18\n18 + 2 = 20\n20 - 9 = 11\n11 + 4 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 15.0,
            "Final Answer": 15.0,
            "Expected Answer": 15
        },
        {
            "Index": 325,
            "GT": -226,
            "Query": "1 + 7 + 5 - 3 - 6 * 8 * 5 + 4 =   ",
            "Injected CoT": "7 * 8 = 48\n48 * 5 = 240\n1 + 7 = 8\n8 + 5 = 13\n13 - 3 = 10\n10 - 240 = -230\n-230 + 4 =",
            "Response": " -226",
            "Extract-Response": " -226.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++){\n            if(s[i] >= '0' && s[i] <= '9'){\n                num = num * 10 + s[i] - '0';\n            }\n            else{\n                nums.push(num);\n                num = 0;\n                if(!ops.empty() && ops.top() == '*'){\n                    ops.pop();\n                    int a = nums.top();\n                    nums.pop();\n                    int b = nums.top();\n                    nums.pop();\n                    nums.push(a * b);\n                }\n                if(!ops.empty() && ops.top() == '/'){\n                    ops.pop();\n                    int a = nums.top();\n                    nums.pop();\n                    int b = nums.top();\n                    nums.pop();\n                    nums.push(b / a);\n                }\n                ops.push(s[i]);\n            }\n        }\n        nums.push(num);\n        while(!ops.empty()){\n            char op = ops.top();\n            ops.pop();\n            int a = nums.top();\n            nums.pop();\n            int b = nums.top();\n            nums.pop();\n            if(op == '+') nums.push(a + b);\n            else nums.push(b - a);\n        }\n        return nums.top();\n    }\n};",
            "Answer": -226.0,
            "Final Answer": -226.0,
            "Expected Answer": -226
        },
        {
            "Index": 326,
            "GT": 2,
            "Query": "3 - 8 - 2 * 3 + 8 * 6 - 7 * 5 =   ",
            "Injected CoT": "-2 * 2 = -6\n8 * 6 = 48\n7 * 5 = 35\n-6 - 5 = -11\n-11 + 48 = 37\n2 - 8 = -5\n-5 - 2 = -7\n-7 + 37 =",
            "Response": " 30",
            "Extract-Response": "\n\n30",
            "Answer": 30.0,
            "Final Answer": 30.0,
            "Expected Answer": 30
        },
        {
            "Index": 328,
            "GT": -18,
            "Query": "1 + 4 + 7 - 9 * 3 - 4 + 7 - 6 =   ",
            "Injected CoT": "-8 * 3 = -27\n1 + 4 + 7 - 27 - 4 + 7 - 6 =",
            "Response": " \n-27 + 7 - 6 = -26",
            "Extract-Response": " -26.",
            "Answer": -26.0,
            "Final Answer": -26.0,
            "Expected Answer": -18
        },
        {
            "Index": 330,
            "GT": 80,
            "Query": "9 * 9 - 5 + 6 * 5 - 6 - 4 * 5 =   ",
            "Injected CoT": "10 * 10 = 81\n81 - 5 = 76\n6 * 5 = 30\n30 - 6 = 24\n4 * 5 = 20\n24 - 20 = 4\n76 + 4 =",
            "Response": " 80",
            "Extract-Response": "\n\n80",
            "Answer": 80.0,
            "Final Answer": 80.0,
            "Expected Answer": 80
        },
        {
            "Index": 331,
            "GT": 133,
            "Query": "7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 =   ",
            "Injected CoT": "7 * 4 = 35\n35 * 4 = 140\n1 * 7 = 7\n7 * 4 = 28\n140 - 28 = 112\n3 * 7 = 21\n112 + 21 =",
            "Response": " 133\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 = 133",
            "Extract-Response": "\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 = 133",
            "Answer": 7.0,
            "Final Answer": 7.0,
            "Expected Answer": 133
        },
        {
            "Index": 332,
            "GT": 3,
            "Query": "7 * 1 - 6 - 6 + 9 - 1 - 8 + 8 =   ",
            "Injected CoT": "7 * 2 = 7\n7 - 6 = 2\n2 - 6 = -5\n-5 + 9 = 4\n4 - 2 = 3\n3 - 8 = -5\n-5 + 8 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 3.0,
            "Final Answer": 3.0,
            "Expected Answer": 3
        },
        {
            "Index": 334,
            "GT": 48,
            "Query": "8 + 8 * 4 + 5 - 5 + 7 - 3 + 4 =   ",
            "Injected CoT": "8 * 5 = 32\n32 + 8 = 40\n40 + 5 = 45\n45 - 5 = 40\n40 + 7 = 47\n47 - 3 = 44\n44 + 5 =",
            "Response": " 49\n\n49",
            "Extract-Response": " 49",
            "Answer": 49.0,
            "Final Answer": 49.0,
            "Expected Answer": 49
        },
        {
            "Index": 336,
            "GT": 10,
            "Query": "4 * 4 + 2 - 2 - 5 - 2 + 8 - 7 =   ",
            "Injected CoT": "3 * 3 = 16\n16 + 2 = 18\n18 - 2 = 16\n16 - 5 = 11\n11 - 2 = 9\n9 + 8 = 17\n17 - 7 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 10.0,
            "Final Answer": 10.0,
            "Expected Answer": 10
        },
        {
            "Index": 341,
            "GT": 58,
            "Query": "4 * 2 - 3 * 4 + 6 * 5 * 2 + 2 =   ",
            "Injected CoT": "3 * 2 = 8\n3 * 3 = 12\n6 * 5 = 30\n30 * 2 = 60\n8 - 12 = -4\n-4 + 60 = 56\n56 + 2 =",
            "Response": " 58",
            "Extract-Response": " 58.\n\nNote:\n\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed.\n\nConsider extra cases:\n\nDid you consider the case of empty input string?\n\nFor the purpose of this problem, we define empty string as valid parentheses string.\n\n*/\n\nclass Solution {\n    public int calPoints(String[] ops) {\n        Stack<Integer> stack = new Stack<>();\n        for (String op : ops) {\n            if (op.equals(\"+\")) {\n                int top = stack.pop();\n                int newtop = top + stack.peek();\n                stack.push(top);\n                stack.push(newtop);\n            } else if (op.equals(\"C\")) {\n                stack.pop();\n            } else if (op.equals(\"D\")) {\n                stack.push(2 * stack.peek());\n            } else {\n                stack.push(Integer.valueOf(op));\n            }\n        }\n        int ans = 0;\n        for (int score : stack) {\n            ans += score;\n        }\n        return ans;\n    }\n}",
            "Answer": 58.0,
            "Final Answer": 58.0,
            "Expected Answer": 58
        },
        {
            "Index": 342,
            "GT": 164,
            "Query": "6 * 9 * 3 - 4 - 9 + 5 * 4 - 5 =   ",
            "Injected CoT": "6 * 10 = 54\n54 * 3 = 162\n162 - 4 = 158\n158 - 10 = 149\n5 * 4 = 20\n149 + 20 = 169\n169 - 5 =",
            "Response": " 164",
            "Extract-Response": " 164\n</code>\n",
            "Answer": 164.0,
            "Final Answer": 164.0,
            "Expected Answer": 164
        },
        {
            "Index": 343,
            "GT": 503,
            "Query": "3 - 9 + 2 + 4 + 8 * 9 * 7 - 1 =   ",
            "Injected CoT": "7 * 9 = 72\n72 * 7 = 504\n3 - 9 = -6\n-6 + 2 = -4\n-4 + 4 = 0\n0 + 504 = 504\n504 - 1 =",
            "Response": " 503",
            "Extract-Response": " 503\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, num = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            result += num * sign;\n            num = 0;\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else\n        {\n            num = num * 10 + (input[i] - '0');\n        }\n    }\n\n    result += num * sign;\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Answer": 503.0,
            "Final Answer": 503.0,
            "Expected Answer": 503
        },
        {
            "Index": 344,
            "GT": 43,
            "Query": "9 + 9 * 3 + 9 + 3 + 4 - 1 * 9 =   ",
            "Injected CoT": "9 * 2 = 27\n9 + 27 = 36\n36 + 9 = 45\n45 + 2 = 48\n48 + 4 = 52\n1 * 9 = 9\n52 - 9 =",
            "Response": " 43\n43 + 3 = 46\n46 + 3 = 49\n49 + 1 = 50\n\n50",
            "Extract-Response": " 50\n\n*/",
            "Answer": 50.0,
            "Final Answer": 50.0,
            "Expected Answer": 43
        },
        {
            "Index": 348,
            "GT": -20,
            "Query": "2 + 8 - 3 * 4 - 7 - 7 - 4 * 1 =   ",
            "Injected CoT": "4 * 4 = 12\n4 * 1 = 4\n2 + 8 = 10\n10 - 12 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 - 4 =",
            "Response": " -20\n-20 = -20",
            "Extract-Response": " -20.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe sum of the numbers in the array.\n\"\"\"\n\ndef arraySum(a):\n    return sum(a)",
            "Answer": -20.0,
            "Final Answer": -20.0,
            "Expected Answer": -20
        },
        {
            "Index": 349,
            "GT": -75,
            "Query": "9 - 9 * 7 - 9 * 1 - 6 - 4 - 2 =   ",
            "Injected CoT": "8 * 7 = 63\n8 * 1 = 8\n63 - 8 = 54\n6 + 4 = 10\n54 - 10 = 44\n44 - 2 =",
            "Response": " 42\n\n42\n\n*/",
            "Extract-Response": "\n\n42",
            "Answer": 42.0,
            "Final Answer": 42.0,
            "Expected Answer": 42
        },
        {
            "Index": 351,
            "GT": 23,
            "Query": "1 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =   ",
            "Injected CoT": "1 * 8 = 8\n8 + 4 = 11\n11 + 5 = 16\n16 - 2 = 14\n14 + 6 = 20\n20 - 2 = 18\n18 + 5 =",
            "Response": " 23\n\n2 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n2 * 8 = 16\n16 + 4 = 20\n20 + 5 = 25\n25 - 2 = 23\n23 + 6 = 29\n29 - 2 = 27\n27 + 5 = 32\n\n3 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n3 * 8 = 24\n24 + 4 = 28\n28 + 5 = 33\n33 - 2 = 31\n31 + 6 = 37\n37 - 2 = 35\n35 + 5 = 40\n\n4 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n4 * 8 = 32\n32 + 4 = 36\n36 + 5 = 41\n41 - 2 = 39\n39 + 6 = 45\n45 - 2 = 43\n43 + 5 = 48\n\n5 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n5 * 8 = 40\n40 + 4 = 44\n44 + 5 = 49\n49 - 2 = 47\n47 + 6 = 53\n53 - 2 = 51\n51 + 5 = 56\n\n6 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n6 * 8 = 48\n48 + 4 = 52\n52 + 5 = 57\n57 - 2 = 55\n55 + 6 = 61\n61 - 2 = 59\n59 + 5 = 64\n\n7 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n7 * 8 = 56\n56 + 4 = 60\n60 + 5 = 65\n65 - 2 = 63\n63 + 6 = 69\n69 - 2 = 67\n67 + 5 = 72\n\n8 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n8 * 8 = 64\n64 + 4 = 68\n68 + 5 = 73\n73 - 2 = 71\n71 + 6 = 77\n77 - 2 = 75\n75 + 5 = 80\n\n9 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =    \n9 * 8 = 72\n72 + 4 = 76\n76 + 5 = 81\n81 - 2 = 79\n79 + 6 = 85\n85 - 2 = 83\n83 + 5 = 88",
            "Extract-Response": "\n\n23\n32\n40\n48\n56\n64\n72\n80\n88",
            "Answer": 23.0,
            "Final Answer": 23.0,
            "Expected Answer": 23
        },
        {
            "Index": 352,
            "GT": 42,
            "Query": "1 * 7 * 5 + 4 + 5 * 2 * 1 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 5 = 35\n5 * 2 = 10\n1 * 10 = 10\n35 + 4 = 39\n39 + 10 = 49\n49 - 8 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote: Please solve it without division and in O(n).\n\nFollow up:\nCould you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)\n\n*/\n\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        sumNumbers(root, sum, cur);\n        return sum;\n    }\n    \n    void sumNumbers(TreeNode* root, int &sum, int cur) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        sumNumbers(root->left, sum, cur);\n        sumNumbers(root->right, sum, cur);\n    }\n};",
            "Answer": 41.0,
            "Final Answer": 41.0,
            "Expected Answer": 41
        },
        {
            "Index": 354,
            "GT": 43,
            "Query": "6 - 2 + 4 + 8 + 4 + 9 + 2 * 7 =   ",
            "Injected CoT": "1 * 7 = 14\n6 - 1 = 4\n4 + 4 = 8\n8 + 8 = 16\n16 + 9 = 25\n25 + 14 =",
            "Response": " 39",
            "Extract-Response": "\n\n39.",
            "Answer": 39.0,
            "Final Answer": 39.0,
            "Expected Answer": 39
        },
        {
            "Index": 356,
            "GT": 390,
            "Query": "9 * 1 + 6 * 7 * 9 + 6 * 1 - 3 =   ",
            "Injected CoT": "10 * 1 = 10\n6 * 7 = 42\n42 * 10 = 378\n6 * 1 = 6\n378 + 6 = 384\n384 - 3 =",
            "Response": " 381\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Extract-Response": "\n\n-1",
            "Answer": -1.0,
            "Final Answer": -1.0,
            "Expected Answer": 381
        },
        {
            "Index": 357,
            "GT": 22,
            "Query": "4 + 7 - 5 - 7 - 4 + 4 * 7 - 1 =   ",
            "Injected CoT": "5 = 5\n7 = 7\n5 = 5\n7 = 7\n5 = 5\n5 * 7 = 28\n28 = 28\n5 + 7 = 11\n11 - 5 = 6\n6 - 7 = -1\n-1 - 5 = -5\n-5 + 28 = 23\n23 - 1 =",
            "Response": " 22\n22 + 4 = 26\n26 - 7 = 19\n19 + 4 = 23",
            "Extract-Response": " 23\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ++result;\n        } else if (s[i] == '-') {\n            --result;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n            if (i == n - 1) {\n                result -= curr;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 23.0,
            "Final Answer": 23.0,
            "Expected Answer": 22
        }
    ]
}