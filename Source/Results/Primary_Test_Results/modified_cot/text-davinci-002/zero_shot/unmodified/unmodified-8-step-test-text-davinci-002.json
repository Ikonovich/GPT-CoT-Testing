{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "unmodified",
    "Steps": 8,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\unmodified\\unmodified-8-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 0,
            "GT": 34,
            "Query": "9 + 3 + 6 - 1 + 5 * 9 + 4 - 4 * 8 =   ",
            "Injected CoT": "5 * 9 = 45\n4 * 8 = 32\n9 + 3 = 12\n12 + 6 = 18\n18 - 1 = 17\n17 + 45 = 62\n62 + 4 = 66\n66 - 32 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentOperation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] >= '0' && s[i] <= '9') {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        } else {\n            if (currentOperation == '+') {\n                result += currentNumber;\n            } else if (currentOperation == '-') {\n                result -= currentNumber;\n            } else if (currentOperation == '*') {\n                result *= currentNumber;\n            } else if (currentOperation == '/') {\n                result /= currentNumber;\n            }\n            currentNumber = 0;\n            currentOperation = s[i];\n        }\n    }\n\n    if (currentOperation == '+') {\n        result += currentNumber;\n    } else if (currentOperation == '-') {\n        result -= currentNumber;\n    } else if (currentOperation == '*') {\n        result *= currentNumber;\n    } else if (currentOperation == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 1,
            "GT": 50,
            "Query": "6 - 1 * 9 + 8 * 9 + 5 - 8 - 7 - 9 =   ",
            "Injected CoT": "1 * 9 = 9\n8 * 9 = 72\n6 - 9 = -3\n-3 + 72 = 69\n69 + 5 = 74\n74 - 8 = 66\n66 - 7 = 59\n59 - 9 =",
            "Response": " 50",
            "Extract-Response": "\n<code>50\n</code>\n"
        },
        {
            "Index": 2,
            "GT": 94,
            "Query": "4 + 9 + 8 * 6 + 8 - 4 + 9 + 5 * 4 =   ",
            "Injected CoT": "8 * 6 = 48\n4 + 9 + 48 = 61\n61 + 8 = 69\n69 - 4 = 65\n5 * 4 = 20\n9 + 20 = 29\n65 + 29 =",
            "Response": " 94",
            "Extract-Response": " 94\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 3,
            "GT": -7,
            "Query": "9 - 5 + 7 - 2 * 7 * 1 - 4 * 1 * 1 =   ",
            "Injected CoT": "2 * 7 = 14\n4 * 1 = 4\n4 * 1 = 4\n14 - 14 = 0\n9 - 5 = 4\n4 + 7 = 11\n11 - 4 =",
            "Response": " 7\n7 - 4 = 3\n3 - 4 = -1",
            "Extract-Response": " -1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int prev = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        cin >> curr;\n        if (prev != 0) {\n            if (sign == 1) {\n                result += prev;\n            } else {\n                result -= prev;\n            }\n        }\n        prev = curr;\n        sign *= -1;\n    }\n\n    if (prev != 0) {\n        if (sign == 1) {\n            result += prev;\n        } else {\n            result -= prev;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 6,
            "GT": 472,
            "Query": "3 - 7 + 8 * 4 * 5 * 3 + 6 - 9 - 1 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 5 = 160\n160 * 3 = 480\n3 - 7 = -4\n-4 + 480 = 476\n476 + 6 = 482\n482 - 9 = 473\n473 - 1 =",
            "Response": " 472",
            "Extract-Response": " 472\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 7,
            "GT": 16,
            "Query": "7 + 9 + 1 - 5 + 2 - 6 + 4 - 1 + 5 =   ",
            "Injected CoT": "7 + 9 = 16\n16 + 1 = 17\n17 - 5 = 12\n12 + 2 = 14\n14 - 6 = 8\n8 + 4 = 12\n12 - 1 = 11\n11 + 5 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 8,
            "GT": -121,
            "Query": "2 * 2 - 8 * 9 - 8 * 6 + 3 - 2 - 6 =   ",
            "Injected CoT": "2 * 2 = 4\n8 * 9 = 72\n72 + 8 * 6 = 120\n120 - 3 = 117\n117 - 2 = 115\n115 - 6 =",
            "Response": " 109",
            "Extract-Response": " 109\n</code>\n"
        },
        {
            "Index": 9,
            "GT": -49,
            "Query": "3 - 2 - 4 - 8 * 5 - 8 * 1 - 3 + 5 =   ",
            "Injected CoT": "-8 * 5 = -40\n-8 * 1 = -8\n3 - 2 = 1\n1 - 4 = -3\n-3 - 40 = -43\n-43 - 8 = -51\n-51 - 3 = -54\n-54 + 5 =",
            "Response": " -49",
            "Extract-Response": " -49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 13,
            "GT": -55,
            "Query": "8 - 7 * 5 + 1 - 2 - 7 - 6 * 2 - 8 =   ",
            "Injected CoT": "7 * 5 = 35\n8 - 35 = -27\n-27 + 1 = -26\n-26 - 2 = -28\n-28 - 7 = -35\n6 * 2 = 12\n-35 - 12 = -47\n-47 - 8 =",
            "Response": " -55",
            "Extract-Response": " -55.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 14,
            "GT": 43,
            "Query": "6 * 5 - 3 + 8 + 5 * 4 - 9 + 4 - 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 - 3 = 27\n5 * 4 = 20\n8 + 20 = 28\n27 + 28 = 55\n4 - 7 = -3\n55 - 9 = 46\n46 - 3 =",
            "Response": " 43",
            "Extract-Response": " 43.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 17,
            "GT": -3418,
            "Query": "5 * 5 - 9 * 4 * 3 * 4 * 8 + 7 + 6 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 3 = 108\n108 * 4 = 432\n432 * 8 = 3456\n5 * 5 = 25\n25 - 3456 = -3431\n-3431 + 7 = -3424\n-3424 + 6 =",
            "Response": " -3418\n\n-3418",
            "Extract-Response": " -3418"
        },
        {
            "Index": 18,
            "GT": 150,
            "Query": "4 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 8 = 160\n2 * 5 = 10\n10 * 8 = 80\n160 - 80 = 80\n9 * 7 = 63\n80 + 63 = 143\n143 + 7 =",
            "Response": " 150\n\n4 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 = 150",
            "Extract-Response": "\n\n4 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 = 150"
        },
        {
            "Index": 19,
            "GT": 64,
            "Query": "9 - 1 * 7 + 1 * 6 * 3 + 6 * 8 - 4 =   ",
            "Injected CoT": "1 * 7 = 7\n6 * 3 = 18\n1 * 6 * 3 = 18\n9 - 7 = 2\n2 + 18 = 20\n6 * 8 = 48\n20 + 48 = 68\n68 - 4 =",
            "Response": " 64",
            "Extract-Response": "\n\n64"
        },
        {
            "Index": 22,
            "GT": -4,
            "Query": "4 - 5 - 2 - 8 - 3 * 1 + 8 - 7 + 9 =   ",
            "Injected CoT": "4 - 5 = -1\n-1 - 2 = -3\n-3 - 8 = -11\n3 * 1 = 3\n-11 + 3 = -8\n-8 + 8 = 0\n0 - 7 = -7\n-7 + 9 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<string>& tokens, int& i) {\n        int a = stoi(tokens[i]);\n        if (i == tokens.size()) return a;\n        i++;\n        if (tokens[i] == \"+\") return a + calc(tokens, i);\n        if (tokens[i] == \"-\") return a - calc(tokens, i);\n        if (tokens[i] == \"*\") return a * calc(tokens, i);\n        if (tokens[i] == \"/\") return a / calc(tokens, i);\n    }\n    int evalRPN(vector<string>& tokens) {\n        int i = 0;\n        return calc(tokens, i);\n    }\n};"
        },
        {
            "Index": 26,
            "GT": 3,
            "Query": "9 - 4 + 2 * 7 - 5 - 9 * 1 - 2 * 1 =   ",
            "Injected CoT": "2 * 7 = 14\n9 * 1 = 9\n2 * 1 = 2\n9 - 4 = 5\n5 + 14 = 19\n19 - 5 = 14\n14 - 9 = 5\n5 - 2 =",
            "Response": " 3",
            "Extract-Response": "\n\n3."
        },
        {
            "Index": 27,
            "GT": 40,
            "Query": "7 + 8 + 2 + 8 + 1 - 7 - 7 + 4 * 7 =   ",
            "Injected CoT": "4 * 7 = 28\n7 + 8 = 15\n15 + 2 = 17\n17 + 8 = 25\n25 + 1 = 26\n26 - 7 = 19\n19 - 7 = 12\n12 + 28 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 28,
            "GT": -51,
            "Query": "5 * 8 - 2 * 9 * 5 + 3 - 7 - 5 + 8 =   ",
            "Injected CoT": "9 * 5 = 45\n2 * 45 = 90\n5 * 8 = 40\n90 - 40 = 50\n3 - 7 = -4\n-4 - 5 = -9\n-9 + 8 = -1\n-1 + 50 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            number = 0;\n            sign = -1;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 30,
            "GT": -11,
            "Query": "7 + 8 + 3 - 3 * 8 + 1 * 4 - 3 * 3 =   ",
            "Injected CoT": "3 * 8 = 24\n1 * 4 = 4\n3 * 3 = 9\n7 + 8 = 15\n15 + 3 = 18\n18 - 24 = -6\n-6 + 4 = -2\n-2 - 9 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 31,
            "GT": -34,
            "Query": "7 - 5 + 9 - 9 * 5 - 3 + 8 + 2 - 7 =   ",
            "Injected CoT": "9 * 5 = 45\n-5 + 45 = 40\n7 - 40 = -33\n-33 - 3 = -36\n-36 + 8 = -28\n-28 + 2 = -26\n-26 - 7 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            j = i;\n\n            while(input[j] != '+' && input[j] != '-' && input[j] != ' ' && j < len)\n            {\n                j++;\n            }\n\n            result += sign * atoi(input + i);\n\n            i = j - 1;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 33,
            "GT": 609,
            "Query": "3 * 2 * 8 * 5 * 1 + 9 + 5 * 8 * 9 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 8 = 48\n48 * 5 = 240\n240 * 1 = 240\n5 * 8 = 40\n40 * 9 = 360\n240 + 9 = 249\n249 + 360 = 609\n609 + 40 =",
            "Response": " 649\n649 + 240 = 889\n\n3 * 2 * 8 * 5 * 1 + 9 + 5 * 8 * 9 = 889",
            "Extract-Response": " 889\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    int current = n;\n    while (current > 0) {\n        sum += current % 10;\n        current /= 10;\n    }\n\n    if (sum % 4 == 0) {\n        cout << n << endl;\n    } else {\n        int result = n;\n        while (true) {\n            result++;\n            int sum = 0;\n            int current = result;\n            while (current > 0) {\n                sum += current % 10;\n                current /= 10;\n            }\n            if (sum % 4 == 0) {\n                cout << result << endl;\n                break;\n            }\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 34,
            "GT": -86,
            "Query": "3 - 5 - 7 - 7 + 5 + 9 - 3 - 9 * 9 =   ",
            "Injected CoT": "-9 * 9 = -81\n3 - 5 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 + 5 = -11\n-11 + 9 = -2\n-2 - 3 = -5\n-5 - (-81) =",
            "Response": " 76",
            "Extract-Response": " 76\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin(); v!=c.end(); ++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint res=0;\n\tint sign=1;\n\twhile(i<n){\n\t\tif(s[i]=='+'){\n\t\t\tsign=1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tsign=-1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='*'){\n\t\t\tsign=2;\n\t\t\t++i;\n\t\t}\n\t\telse{\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]>='0' && s[i]<='9'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\t++i;\n\t\t\t}\n\t\t\tif(sign==1)\n\t\t\t\tres+=num;\n\t\t\telse if(sign==-1)\n\t\t\t\tres-=num;\n\t\t\telse\n\t\t\t\tres*=num;\n\t\t}\n\t}\n\n\tcout<<res<<endl;\n\n\treturn 0;\n}"
        },
        {
            "Index": 35,
            "GT": 66,
            "Query": "2 + 2 - 2 + 6 * 9 - 2 + 3 + 3 + 6 =   ",
            "Injected CoT": "2 + 2 = 4\n4 - 2 = 2\n6 * 9 = 54\n2 + 54 = 56\n56 - 2 = 54\n54 + 3 = 57\n57 + 3 = 60\n60 + 6 =",
            "Response": " 66",
            "Extract-Response": " 66.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 10.\n\n[output] integer\n\nThe sum of the digits of the factorial of n.\n\"\"\"\n\ndef extraLongFactorials(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return sum(map(int, str(factorial)))"
        },
        {
            "Index": 36,
            "GT": 16,
            "Query": "4 * 4 + 5 - 2 + 5 + 1 + 1 - 5 * 2 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 5 = 21\n21 - 2 = 19\n19 + 5 = 24\n24 + 1 = 25\n25 + 1 = 26\n26 - 5 * 2 =",
            "Response": " 26 - 10 = 16",
            "Extract-Response": " 16.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        if (curr < 0) {\n            curr = 0;\n            ++result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 37,
            "GT": 28,
            "Query": "2 - 1 - 2 + 9 + 7 + 4 * 3 - 6 + 7 =   ",
            "Injected CoT": "4 * 3 = 12\n2 - 1 = 1\n1 - 2 = -1\n-1 + 9 = 8\n8 + 7 = 15\n15 + 12 = 27\n27 - 6 = 21\n21 + 7 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 39,
            "GT": 144,
            "Query": "3 - 2 + 7 + 7 * 7 * 2 - 7 + 9 * 5 =   ",
            "Injected CoT": "7 * 7 = 49\n49 * 2 = 98\n9 * 5 = 45\n3 - 2 = 1\n1 + 7 = 8\n8 + 98 = 106\n106 - 7 = 99\n99 + 45 =",
            "Response": " 144",
            "Extract-Response": "\n\n144"
        },
        {
            "Index": 40,
            "GT": 62,
            "Query": "2 + 6 - 3 * 6 + 1 * 9 * 8 - 8 + 8 =   ",
            "Injected CoT": "3 * 6 = 18\n1 * 9 = 9\n9 * 8 = 72\n2 + 6 = 8\n8 - 18 = -10\n-10 + 72 = 62\n62 - 8 = 54\n54 + 8 =",
            "Response": " 62",
            "Extract-Response": " 62\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * num;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 41,
            "GT": -50,
            "Query": "1 + 5 - 5 - 7 * 8 + 7 - 6 * 1 + 4 =   ",
            "Injected CoT": "1 + 5 = 6\n6 - 5 = 1\n7 * 8 = 56\n1 - 56 = -55\n-55 + 7 = -48\n6 * 1 = 6\n-48 + 6 = -42\n-42 + 4 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 42,
            "GT": 0,
            "Query": "3 * 6 + 5 - 1 * 5 + 9 - 6 * 3 - 9 =   ",
            "Injected CoT": "3 * 6 = 18\n18 + 5 = 23\n1 * 5 = 5\n23 - 5 = 18\n18 + 9 = 27\n6 * 3 = 18\n27 - 18 = 9\n9 - 9 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 45,
            "GT": 44,
            "Query": "2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 =   ",
            "Injected CoT": "2 * 1 = 2\n8 * 2 = 16\n16 * 3 = 48\n2 + 48 = 50\n50 - 2 = 48\n48 - 2 = 46\n46 - 3 = 43\n43 + 1 =",
            "Response": " 44\n\n2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 = 44",
            "Extract-Response": " 44"
        },
        {
            "Index": 48,
            "GT": -9,
            "Query": "6 - 5 * 3 - 9 + 8 - 9 * 1 + 4 + 6 =   ",
            "Injected CoT": "5 * 3 = 15\n6 - 15 = -9\n-9 - 9 = -18\n-18 + 8 = -10\n9 * 1 = 9\n-10 + 9 = -1\n-1 + 4 = 3\n3 + 6 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n    result += sign * current;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 51,
            "GT": 73,
            "Query": "9 * 4 + 7 * 6 + 5 - 1 * 2 * 3 - 4 =   ",
            "Injected CoT": "9 * 4 = 36\n7 * 6 = 42\n36 + 42 = 78\n1 * 2 = 2\n2 * 3 = 6\n78 - 6 = 72\n72 - 4 = 68\n68 + 5 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 53,
            "GT": 437,
            "Query": "1 - 9 + 6 + 5 * 8 + 7 + 7 * 8 * 7 =   ",
            "Injected CoT": "5 * 8 = 40\n8 * 7 = 56\n56 * 7 = 392\n-1 + 6 = 5\n5 + 7 = 12\n12 + 40 = 52\n52 + 392 =",
            "Response": " 444",
            "Extract-Response": " 444\n</code>\n"
        },
        {
            "Index": 54,
            "GT": -22,
            "Query": "6 * 6 - 6 * 6 + 8 - 7 - 5 - 2 * 9 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n36 - 36 = 0\n2 * 9 = 18\n8 - 7 = 1\n1 - 5 = -4\n-4 - 18 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe number of operations won't exceed 1000.\nThe integers in expression won't exceed 1000.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int res = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for (int i = 0; i < n; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 55,
            "GT": 3825,
            "Query": "1 * 9 * 8 * 9 * 6 + 7 + 2 - 8 * 9 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 8 = 72\n72 * 9 = 648\n648 * 6 = 3888\n3888 + 7 = 3895\n3895 + 2 = 3897\n8 * 9 = 72\n3897 - 72 =",
            "Response": " 3825",
            "Extract-Response": " 3825\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num"
        },
        {
            "Index": 57,
            "GT": 77,
            "Query": "4 - 4 + 8 - 6 - 1 + 3 * 8 * 3 + 4 =   ",
            "Injected CoT": "3 * 8 = 24\n4 - 4 = 0\n8 - 6 = 2\n2 - 1 = 1\n24 * 3 = 72\n72 + 1 = 73\n73 + 4 = 77\n0 + 77 =",
            "Response": " 77",
            "Extract-Response": " 77.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(input[i] >= '0' && input[i] <= '9')\n            {\n                num = (num * 10) + (input[i] - '0');\n\n                i++;\n            }\n\n            sum = sum + (num * sign);\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 59,
            "GT": 19,
            "Query": "1 * 4 + 6 + 3 + 4 * 5 - 5 - 3 * 3 =   ",
            "Injected CoT": "1 * 4 = 4\n4 + 6 = 10\n10 + 3 = 13\n4 * 5 = 20\n13 + 20 = 33\n5 - 5 = 0\n3 * 3 = 9\n33 - 9 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 62,
            "GT": 1625,
            "Query": "4 * 5 * 5 * 8 * 2 + 7 + 4 + 9 + 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 5 = 100\n100 * 8 = 800\n800 * 2 = 1600\n1600 + 7 = 1607\n1607 + 4 = 1611\n1611 + 9 = 1620\n1620 + 5 =",
            "Response": " 1625",
            "Extract-Response": " 1625.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <time.h>\n\n#define SZ 1000000\n\nint arr[SZ];\n\nvoid pre(void)\n{\n    int i, j, k, n, m, x;\n\n    arr[0] = 1;\n\n    for(i=1; i<=9; i++)\n        arr[i] = arr[i-1] * i;\n\n    for(i=10; i<=SZ; i++)\n    {\n        x = i;\n        k = 0;\n        while(x)\n        {\n            k += arr[x % 10];\n            x /= 10;\n        }\n        arr[i] = k;\n    }\n}\n\nint main()\n{\n    pre();\n    int i, j, k, n, m, t, x;\n\n    scanf(\"%d\",&t);\n\n    while(t--)\n    {\n        scanf(\"%d\",&n);\n        x = 0;\n        for(i=10; i<=n; i++)\n            if(arr[i] % i == 0)\n                x += i;\n        printf(\"%d\\n\",x);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 63,
            "GT": -15,
            "Query": "4 + 8 - 6 - 7 - 7 - 7 - 3 * 2 + 6 =   ",
            "Injected CoT": "3 * 2 = 6\n4 + 8 = 12\n12 - 6 = 6\n6 - 7 = -1\n-1 - 7 = -8\n-8 - 7 = -15\n-15 - 6 = -21\n-21 + 6 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 64,
            "GT": -4,
            "Query": "5 * 5 - 9 * 3 - 3 - 3 + 7 - 4 + 1 =   ",
            "Injected CoT": "5 * 5 = 25\n9 * 3 = 27\n25 - 27 = -2\n-2 - 3 = -5\n-5 - 3 = -8\n-8 + 7 = -1\n-1 - 4 = -5\n-5 + 1 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 65,
            "GT": -31,
            "Query": "2 - 2 * 3 - 9 - 4 * 2 - 2 - 1 * 8 =   ",
            "Injected CoT": "2 * 3 = 6\n2 - 6 = -4\n-4 - 9 = -13\n4 * 2 = 8\n-13 - 8 = -21\n2 - 2 = 0\n-1 * 8 = -8\n0 - 8 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 66,
            "GT": -4,
            "Query": "6 + 2 - 9 + 5 - 6 - 3 - 4 + 1 + 4 =   ",
            "Injected CoT": "6 + 2 = 8\n8 - 9 = -1\n-1 + 5 = 4\n4 - 6 = -2\n-2 - 3 = -5\n-5 - 4 = -9\n-9 + 1 = -8\n-8 + 4 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 69,
            "GT": -31,
            "Query": "4 + 1 * 8 - 8 * 7 + 7 + 2 + 8 - 4 =   ",
            "Injected CoT": "1 * 8 = 8\n4 + 8 = 12\n8 * 7 = 56\n12 - 56 = -44\n-44 + 7 = -37\n-37 + 2 = -35\n-35 + 8 = -27\n-27 - 4 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % MOD) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % MOD;\n        }\n        return (ans + MOD) % MOD;\n    }\nprivate:\n    const int MOD = 1e9 + 7;\n};"
        },
        {
            "Index": 71,
            "GT": -11,
            "Query": "1 + 1 - 3 * 3 - 3 * 2 + 1 + 6 - 5 =   ",
            "Injected CoT": "3 * 3 = 9\n3 * 2 = 6\n1 + 1 = 2\n2 - 9 = -7\n-7 - 6 = -13\n-13 + 1 = -12\n-12 + 6 = -6\n-6 - 5 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 72,
            "GT": 9,
            "Query": "8 + 6 - 3 + 7 - 3 * 4 + 6 - 4 + 1 =   ",
            "Injected CoT": "8 + 6 = 14\n14 - 3 = 11\n11 + 7 = 18\n3 * 4 = 12\n18 - 12 = 6\n6 + 6 = 12\n12 - 4 = 8\n8 + 1 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 73,
            "GT": 109,
            "Query": "9 + 9 * 5 * 2 + 4 + 4 + 3 - 8 + 7 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 2 = 90\n9 + 90 = 99\n4 + 99 = 103\n103 + 4 = 107\n107 + 3 = 110\n110 - 8 = 102\n102 + 7 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634"
        },
        {
            "Index": 75,
            "GT": 63,
            "Query": "2 * 5 * 6 + 5 - 7 + 2 + 7 - 5 + 1 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 6 = 60\n60 + 5 = 65\n65 - 7 = 58\n58 + 2 = 60\n60 + 7 = 67\n67 - 5 = 62\n62 + 1 =",
            "Response": " 63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else\n        {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 78,
            "GT": 28,
            "Query": "1 * 1 + 7 + 2 - 5 + 9 - 1 + 3 * 5 =   ",
            "Injected CoT": "1 * 1 = 1\n1 + 7 = 8\n8 + 2 = 10\n10 - 5 = 5\n5 + 9 = 14\n14 - 1 = 13\n3 * 5 = 15\n13 + 15 =",
            "Response": " 28",
            "Extract-Response": "\n\n28"
        },
        {
            "Index": 80,
            "GT": -31,
            "Query": "7 - 9 * 7 - 5 + 1 * 7 + 7 + 4 * 4 =   ",
            "Injected CoT": "9 * 7 = 63\n7 - 63 = -56\n1 * 7 = 7\n-56 + 7 = -49\n4 * 4 = 16\n-49 + 16 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 81,
            "GT": 428,
            "Query": "7 + 6 + 4 * 3 * 4 * 8 + 4 + 9 * 3 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 4 = 48\n48 * 8 = 384\n9 * 3 = 27\n7 + 6 = 13\n13 + 4 = 17\n17 + 384 = 401\n401 + 4 = 405\n405 + 27 =",
            "Response": " 432\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Extract-Response": "\n\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100 + 101 + 102 + 103 + 104 + 105 + 106 + 107 + 108 + 109 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 120 + 121 + 122 + 123 + 124 + 125 + 126 + 127 + 128 + 129 + 130 + 131 + 132 + 133 + 134 + 135 + 136 + 137 + 138 + 139 + 140 + 141 + 142 + 143 + 144 + 145 + 146 + 147 + 148 + 149 + 150 + 151 + 152 + 153 + 154 + 155 + 156 + 157 + 158 + 159 + 160 + 161 + 162 + 163 + 164 + 165 + 166 + 167 + 168 + 169 + 170 + 171 + 172 + 173 + 174 + 175 + 176 + 177 + 178 + 179 + 180 + 181 + 182 + 183 + 184 + 185 + 186 + 187 + 188 + 189 + 190 + 191 + 192 + 193 + 194 + 195 + 196 + 197 + 198 + 199 + 200 + 201 + 202 + 203 + 204 + 205 + 206 + 207 + 208 + 209 + 210 + 211 + 212 + 213 + 214 + 215 + 216 + 217 + 218 + 219 + 220 + 221 + 222 + 223 + 224 + 225 + 226 + 227 + 228 + 229 + 230 + 231 + 232 + 233 + 234 + 235 + 236 + 237 + 238 + 239 + 240 + 241 + 242 + 243 + 244 + 245 + 246 + 247 + 248 + 249 + 250 + 251 + 252 + 253 + 254 + 255 + 256 + 257 + 258 + 259 + 260 + 261 + 262 + 263 + 264 + 265 + 266 + 267 + 268 + 269 + 270 + 271 + 272 + 273 + 274 + 275 + 276 + 277 + 278 + 279 + 280 + 281 + 282 + 283 + 284 + 285 + 286 + 287 + 288 + 289 + 290 + 291 + 292 + 293 + 294 + 295 + 296 + 297 + 298 + 299 + 300 + 301 + 302 + 303 + 304 + 305 + 306 + 307 + 308 + 309 + 310 + 311 + 312 + 313 + 314 + 315 + 316 + 317 + 318 + 319 + 320 + 321 + 322 + 323 + 324 + 325 + 326 + 327 + 328 + 329 + 330 + 331 + 332 + 333 + 334 + 335 + 336 + 337 + 338 + 339 + 340 + 341 + 342 + 343 + 344 + 345 + 346 + 347 + 348 + 349 + 350 + 351 + 352 + 353 + 354 + 355 + 356 + 357 + 358 + 359 + 360 + 361 + 362 + 363 + 364 + 365 + 366 + 367 + 368 + 369 + 370 + 371 + 372 + 373 + 374 + 375 + 376 + 377 + 378 + 379 + 380 + 381 + 382 + 383 + 384 + 385 + 386 + 387 + 388 + 389 + 390 + 391 + 392 + 393 + 394 + 395 + 396 + 397 + 398 + 399 + 400 + 401 + 402 + 403 + 404 + 405 + 406 + 407 + 408 + 409 + 410 + 411 + 412 + 413 + 414 + 415 + 416 + 417 + 418 + 419 + 420 + 421 + 422 + 423 + 424 + 425 + 426 + 427 + 428 + 429 + 430 + 431 + 432 + 433 + 434 + 435 + 436 + 437 + 438 + 439 + 440 + 441 + 442 + 443 + 444 + 445 + 446 + 447 + 448 + 449 + 450 + 451 + 452 + 453 + 454 + 455 + 456 + 457 + 458 + 459 + 460 + 461 + 462 + 463 + 464 + 465 + 466 + 467 + 468 + 469 + 470 + 471 + 472 + 473 + 474 + 475 + 476 + 477 + 478 + 479 + 480 + 481 + 482 + 483 + 484 + 485 + 486 + 487 + 488 + 489 + 490 + 491 + 492 + 493 + 494 + 495 + 496 + 497 + 498 + 499 + 500 + 501 + 502 + 503 + 504 + 505 + 506 + 507 + 508 + 509 + 510 + 511 + 512 + 513 + 514 + 515 + 516 + 517 + 518 + 519 + 520 + 521 + 522 + 523 + 524 + 525 + 526 + 527 + 528 + 529 + 530 + 531 + 532 + 533 + 534 + 535 + 536 + 537 + 538 + 539 + 540 + 541 + 542 + 543 + 544 + 545 + 546 + 547 + 548 + 549 + 550 + 551 + 552 + 553 + 554 + 555 + 556 + 557 + 558 + 559 + 560 + 561 + 562 + 563 + 564 + 565 + 566 + 567 + 568 + 569 + 570 + 571 + 572 + 573 + 574 + 575 + 576 + 577 + 578 + 579 + 580 + 581 + 582 + 583 + 584 + 585 + 586 + 587 + 588 + 589 + 590 + 591 + 592 + 593 + 594 + 595 + 596 + 597 + 598 + 599 + 600 + 601 + 602 + 603 + 604 + 605 + 606 + 607 + 608 + 609 + 610 + 611 + 612 + 613 + 614 + 615 + 616 + 617 + 618 + 619 + 620 + 621 + 622 + 623 + 624 + 625 + 626 + 627 + 628 + 629 + 630 + 631 + 632 + 633 + 634 + 635 + 636 + 637 + 638 + 639 + 640 + 641 + 642 + 643 + 644 + 645 + 646 + 647 + 648 + 649 + 650 = \n\n13015"
        },
        {
            "Index": 82,
            "GT": -10,
            "Query": "2 - 6 + 5 * 4 - 2 * 7 - 7 - 1 * 5 =   ",
            "Injected CoT": "5 * 4 = 20\n-6 + 20 = 14\n2 * 7 = 14\n14 - 14 = 0\n-7 - 5 = -12\n0 - 12 = -12\n-12 - 1 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 83,
            "GT": -12,
            "Query": "6 * 3 + 3 + 7 - 9 - 6 * 6 + 7 - 2 =   ",
            "Injected CoT": "6 * 3 = 18\n18 + 3 = 21\n21 + 7 = 28\n28 - 9 = 19\n6 * 6 = 36\n19 - 36 = -17\n-17 + 7 = -10\n-10 - 2 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 84,
            "GT": -21,
            "Query": "8 - 4 - 5 - 7 + 4 - 5 * 4 + 9 - 6 =   ",
            "Injected CoT": "8 - 4 = 4\n4 - 5 = -1\n-1 - 7 = -8\n-8 + 4 = -4\n-5 * 4 = -20\n-4 - 20 = -24\n-24 + 9 = -15\n-15 - 6 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 100,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\"\"\"\n\ndef calculate(a):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(calculate([5, 3, 4, 5, 2, 6, 9, 1, 7, 4, 6, 8, 9, 3, 7, 1, 0, 5, 8, 7, 6, 8, 9, 4, 4, 1, 9, 9, 2, 0, 1, 1, 9, 6, 2, 4, 5, 5, 9, 4, 4, 9, 8, 9, 9, 1, 6, 8, 9, 2, 4, 8, 9, 5, 3, 4, 4, 6, 9, 2, 0, 0, 5, 5, 9, 3, 5, 8, 9, 5, 7, 9, 6, 8, 6, 9, 8, 4, 8, 9, 0, 1, 8, 4, 0, 3, 0, 5, 7, 2, 1, 1, 8, 5, 6, 7, 5, 5, 9, 3, 7, 8, 1, 9, 8, 4, 8, 0, 1, 9, 5, 7, 8, 9, 2, 8, 7, 8, 4, 9, 0, 8, 9, 2, 5, 4, 0, 7, 7, 5, 6, 7, 2, 1, 9, 9, 7, 9, 9, 9, 9, 9, 8, 3, 7, 2, 9, 7, 2, 0, 1, 1, 8, 5, 8, 8, 9, 8, 4, 8, 0, 1, 4, 2, 8, 8, 1, 9, 7, 1, 8, 7, 9, 9, 2, 8, 4, 5, 0, 2, 8, 7, 5, 1, 2, 1, 6, 3, 5, 7, 8, 1, 5, 4, 9, 8, 2, 0, 4, 5, 5, 4, 4, 4, 3, 6, 2, 9, 8, 1, 2, 3, 0, 9, 8, 7, 8, 7, 9, 9, 2, 7, 2, 4, 4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 2, 0, 0, 5, 2, 4, 0, 6, 3, 6, 8, 9, 9, 1, 2, 5, 6, 0, 7, 1, 7, 6, 2, 1, 2, 0, 5, 5, 5, 9, 6, 4, 4, 6, 2, 2, 9, 4, 8, 9, 5, 4, 9, 3, 0, 3, 8, 9, 5, 4, 0, 7, 7, 7, 0, 6, 7, 9, 8, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7, 5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4, 8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 6, 8, 8, 1, 1, 6, 4, 2, 7, 1, 7, 1, 4, 7, 9, 9, 2, 4, 4, 4, 2, 9, 2, 8, 9, 3, 3, 8, 0, 3, 0, 8, 1, 3, 5, 3, 3, 6, 2, 7, 6, 6, 1, 4, 2, 8, 2, 8, 0, 6, 4, 4, 4, 4, 8, 6, 6, 4, 5, 2, 3, 8, 7, 4, 9, 3, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9,"
        },
        {
            "Index": 85,
            "GT": 249,
            "Query": "4 * 4 * 7 * 2 + 2 * 9 + 8 + 5 - 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 7 = 112\n112 * 2 = 224\n2 * 9 = 18\n224 + 18 = 242\n242 + 8 = 250\n250 + 5 = 255\n255 - 6 =",
            "Response": " 249",
            "Extract-Response": " 249\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", num) != EOF)\n    {\n        sum = 0;\n        l = strlen(num);\n        for(i = 0; i < l; i++)\n        {\n            if(num[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(num[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(num[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(num[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(num[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 86,
            "GT": -8,
            "Query": "7 + 1 + 3 - 2 * 2 * 5 + 6 + 4 - 9 =   ",
            "Injected CoT": "2 * 5 = 10\n7 + 1 + 3 - 10 = 1\n1 + 6 + 4 - 9 =",
            "Response": " 2\n2 * 2 = 4\n4 + 1 = 5\n\n5\n\n*/",
            "Extract-Response": " 5"
        },
        {
            "Index": 88,
            "GT": 69,
            "Query": "6 * 8 + 7 - 3 * 4 + 8 + 6 + 9 + 3 =   ",
            "Injected CoT": "6 * 8 = 48\n3 * 4 = 12\n48 + 7 = 55\n55 - 12 = 43\n43 + 8 = 51\n51 + 6 = 57\n57 + 9 = 66\n66 + 3 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 90,
            "GT": 109,
            "Query": "4 * 3 * 6 + 6 * 8 - 8 - 9 - 1 + 7 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 6 = 72\n6 * 8 = 48\n72 + 48 = 120\n120 - 8 = 112\n112 - 9 = 103\n103 - 1 = 102\n102 + 7 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 91,
            "GT": 75,
            "Query": "6 + 3 * 1 + 6 * 5 + 8 * 5 - 2 - 2 =   ",
            "Injected CoT": "3 * 1 = 3\n6 * 5 = 30\n8 * 5 = 40\n6 + 3 = 9\n9 + 3 = 12\n12 + 30 = 42\n42 + 40 = 82\n82 - 2 = 80\n80 - 2 =",
            "Response": " 78\n\n78\n\n*/",
            "Extract-Response": " 78"
        },
        {
            "Index": 92,
            "GT": -69,
            "Query": "7 + 6 - 3 * 4 - 5 * 3 - 9 * 7 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n5 * 3 = 15\n9 * 7 = 63\n7 + 6 = 13\n13 - 12 = 1\n1 - 15 = -14\n-14 - 63 = -77\n-77 + 8 =",
            "Response": " -69",
            "Extract-Response": " -69.\n\nNote:\n\nThe number of operations is between 2 and 2000.\nThe answer is guaranteed to be fit in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(ans);\n                st.push(sign);\n                ans = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                ans += sign * cur;\n                cur = 0;\n                ans *= st.top();\n                st.pop();\n                ans += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        if(cur) ans += sign * cur;\n        return ans;\n    }\n};"
        },
        {
            "Index": 93,
            "GT": 15,
            "Query": "7 - 7 + 7 + 2 * 2 * 2 + 5 - 7 + 2 =   ",
            "Injected CoT": "2 * 2 = 4\n2 * 4 = 8\n7 - 7 = 0\n0 + 7 = 7\n7 + 8 = 15\n15 + 5 = 20\n20 - 7 = 13\n13 + 2 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 94,
            "GT": 48,
            "Query": "4 * 4 + 5 * 5 + 8 + 5 * 1 + 3 - 9 =   ",
            "Injected CoT": "4 * 4 = 16\n5 * 5 = 25\n16 + 25 = 41\n5 * 1 = 5\n8 + 5 = 13\n41 + 5 = 46\n46 + 3 = 49\n49 - 9 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\n\nThere are at least two nodes in this BST.\nWe define the depth of a node as the number of edges from the root to the node.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};"
        },
        {
            "Index": 96,
            "GT": 354,
            "Query": "1 - 4 + 6 * 7 - 9 + 6 * 3 * 2 * 9 =   ",
            "Injected CoT": "6 * 7 = 42\n-4 + 42 = 38\n6 * 3 = 18\n18 * 2 = 36\n36 * 9 = 324\n1 - 9 = -8\n38 + 324 = 362\n-8 + 362 =",
            "Response": " 354",
            "Extract-Response": " 354\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add\n     * If current character is '-', then subtract\n     * If current character is a number, then convert it to number\n     * and add to result\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', then add */\n        if(str[i] == '+')\n        {\n            /* Add result so far to final result */\n            result = result + num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Set sign as 1 for addition */\n            sign = 1;\n        }\n        /* If current character is '-', then subtract */\n        else if(str[i] == '-')\n        {\n            /* Add result so far to final result */\n            result = result + num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Set sign as -1 for subtraction */\n            sign = -1;\n        }\n        /* If current character is a number, then convert it to number */\n        else\n        {\n            /* Forming number by multiplying 10 and adding current digit */\n            num = (num * 10) + (str[i] - '0');\n        }\n    }\n\n    /* Add last number to result */\n    result = result + num;\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 99,
            "GT": 408,
            "Query": "6 * 5 * 3 * 1 + 8 - 5 + 5 * 9 * 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 3 = 90\n90 * 1 = 90\n90 + 8 = 98\n5 * 9 = 45\n45 * 7 = 315\n98 + 315 =",
            "Response": " 413",
            "Extract-Response": " 413.\n\nNote:\n\nThe expression is always valid.\nEvaluate the expression to get the answer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0') {\n                    num = num * 10 + s[i++] - '0';\n                }\n                res += sign * num;\n                --i;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 101,
            "GT": -119,
            "Query": "4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 1 = 16\n5 * 3 = 15\n15 * 6 = 90\n5 * 8 = 40\n90 + 40 = 130\n130 + 5 = 135\n16 - 135 =",
            "Response": " -119",
            "Extract-Response": " -119.\n\nNote:\n\nYou may assume that the input string will only contain lowercase letters a-z.\nThe length of s will be in the range [1, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < len; i++) {\n            if(isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == len - 1) {\n                if(sign == '-') {\n                    st.push(-num);\n                }\n                if(sign == '+') {\n                    st.push(num);\n                }\n                if(sign == '*') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp * num);\n                }\n                if(sign == '/') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 102,
            "GT": 6,
            "Query": "6 - 3 - 3 - 3 + 5 - 9 + 1 + 8 + 4 =   ",
            "Injected CoT": "6 - 3 = 3\n3 - 3 = 0\n0 - 3 = -3\n-3 + 5 = 2\n2 - 9 = -7\n-7 + 1 = -6\n-6 + 8 = 2\n2 + 4 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 103,
            "GT": -122,
            "Query": "9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =   ",
            "Injected CoT": "9 * 9 = 81\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n81 - 203 =",
            "Response": " -122\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num, sum = 0, temp, rem;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    temp = num;\n    while (temp != 0)\n    {\n        rem = temp % 10;\n        sum = sum + rem * rem * rem;\n        temp = temp / 10;\n    }\n    if (sum == num)\n        printf(\"%d is an Armstrong number.\", num);\n    else\n        printf(\"%d is not an Armstrong number.\", num);\n    return 0;\n}",
            "Extract-Response": " -122"
        },
        {
            "Index": 104,
            "GT": 227,
            "Query": "3 * 8 * 1 * 9 + 8 - 9 - 6 + 9 + 9 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 1 = 24\n24 * 9 = 216\n216 + 8 = 224\n224 - 9 = 215\n215 - 6 = 209\n209 + 9 = 218\n218 + 9 =",
            "Response": " 227",
            "Extract-Response": " 227\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 106,
            "GT": 1005,
            "Query": "8 * 9 * 5 * 3 - 3 * 7 - 5 - 7 * 7 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 5 = 360\n360 * 3 = 1080\n3 * 7 = 21\n7 * 7 = 49\n21 + 5 = 26\n49 + 26 = 75\n1080 - 75 =",
            "Response": " 1005\n\n1005\n\n*/",
            "Extract-Response": " 1005\n\n*/"
        },
        {
            "Index": 107,
            "GT": -23,
            "Query": "7 * 8 - 8 - 2 - 2 - 4 - 9 - 6 * 9 =   ",
            "Injected CoT": "7 * 8 = 56\n56 - 8 = 48\n48 - 2 = 46\n46 - 2 = 44\n44 - 4 = 40\n40 - 9 = 31\n6 * 9 = 54\n31 - 54 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = nums[0]\n        cur_max = cur_min = res\n        for i in range(1, len(nums)):\n            cur_max, cur_min = max(cur_max * nums[i], cur_min * nums[i], nums[i]), min(cur_max * nums[i], cur_min * nums[i], nums[i])\n            res = max(res, cur_max)\n        return res"
        },
        {
            "Index": 108,
            "GT": 2,
            "Query": "4 + 8 + 8 + 7 - 3 * 1 * 3 - 4 * 4 =   ",
            "Injected CoT": "3 * 1 = 3\n4 * 4 = 16\n4 + 8 = 12\n12 + 8 = 20\n20 + 7 = 27\n27 - 3 = 24\n24 - 16 = 8\n8 - 7 =",
            "Response": " 1\n\n1",
            "Extract-Response": "\n\n1"
        },
        {
            "Index": 109,
            "GT": 112,
            "Query": "3 - 9 + 3 * 5 * 5 - 5 + 6 * 9 - 6 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 5 = 75\n3 - 9 = -6\n-6 + 75 = 69\n6 * 9 = 54\n69 + 54 = 123\n-5 - 6 = -11\n123 - 11 =",
            "Response": " 112",
            "Extract-Response": "\n\n112"
        },
        {
            "Index": 110,
            "GT": -6,
            "Query": "3 + 1 - 5 + 1 - 6 - 3 * 6 + 2 * 9 =   ",
            "Injected CoT": "3 + 1 = 4\n4 - 5 = -1\n-1 + 1 = 0\n0 - 6 = -6\n3 * 6 = 18\n2 * 9 = 18\n-6 + 18 = 12\n12 + 18 =",
            "Response": " 30",
            "Extract-Response": "\n\n30"
        },
        {
            "Index": 111,
            "GT": 16,
            "Query": "7 + 1 + 5 + 1 - 9 + 2 - 5 + 7 + 7 =   ",
            "Injected CoT": "7 + 1 = 8\n8 + 5 = 13\n13 + 1 = 14\n14 - 9 = 5\n5 + 2 = 7\n7 - 5 = 2\n2 + 7 = 9\n9 + 7 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\nThe length of the given array is positive and will not exceed 10^5\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 115,
            "GT": -7,
            "Query": "3 * 1 + 7 - 6 * 6 + 1 + 2 * 1 * 9 =   ",
            "Injected CoT": "3 * 1 = 3\n6 * 6 = 36\n2 * 1 = 2\n2 * 9 = 18\n3 + 7 = 10\n10 - 36 = -26\n-26 + 1 = -25\n-25 + 18 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 117,
            "GT": -23,
            "Query": "3 + 7 + 8 - 3 + 2 * 8 - 5 - 7 * 7 =   ",
            "Injected CoT": "3 + 7 = 10\n10 + 8 = 18\n18 - 3 = 15\n2 * 8 = 16\n15 + 16 = 31\n31 - 5 = 26\n7 * 7 = 49\n26 - 49 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "3 * 3 + 8 - 9 * 1 + 9 - 3 + 1 - 9 =   ",
            "Injected CoT": "3 * 3 = 9\n9 + 8 = 17\n9 * 1 = 9\n17 - 9 = 8\n8 + 9 = 17\n17 - 3 = 14\n14 + 1 = 15\n15 - 9 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 119,
            "GT": -4,
            "Query": "2 * 1 * 1 + 6 + 7 + 8 - 6 * 5 + 3 =   ",
            "Injected CoT": "2 * 1 = 2\n2 * 1 = 2\n2 + 6 = 8\n8 + 7 = 15\n15 + 8 = 23\n23 - 6 = 17\n17 * 5 = 85\n85 + 3 =",
            "Response": " 88",
            "Extract-Response": "\n\n88"
        },
        {
            "Index": 120,
            "GT": -128,
            "Query": "4 + 6 * 3 - 9 * 7 + 1 - 7 - 9 * 9 =   ",
            "Injected CoT": "6 * 3 = 18\n9 * 7 = 63\n9 * 9 = 81\n4 + 18 = 22\n22 - 63 = -41\n-41 + 1 = -40\n-40 - 7 = -47\n-47 - 81 =",
            "Response": " -128",
            "Extract-Response": " -128\n</code>\n"
        },
        {
            "Index": 122,
            "GT": -14,
            "Query": "2 + 4 - 2 - 4 * 5 - 1 - 1 + 2 + 2 =   ",
            "Injected CoT": "4 * 5 = 20\n2 + 4 = 6\n6 - 2 = 4\n4 - 20 = -16\n-16 - 1 = -17\n-17 - 1 = -18\n-18 + 2 = -16\n-16 + 2 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 124,
            "GT": 11,
            "Query": "6 * 1 + 1 * 7 + 9 - 9 + 1 - 8 + 5 =   ",
            "Injected CoT": "6 * 1 = 6\n1 * 7 = 7\n6 + 7 = 13\n13 + 9 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 8 = 6\n6 + 5 =",
            "Response": " 11\n\n11",
            "Extract-Response": "\n\n11"
        },
        {
            "Index": 125,
            "GT": -10,
            "Query": "2 * 8 + 1 + 3 + 2 - 5 - 3 * 9 * 1 =   ",
            "Injected CoT": "2 * 8 = 16\n16 + 1 = 17\n17 + 3 = 20\n20 + 2 = 22\n9 * 1 = 9\n3 * 9 = 27\n27 * 1 = 27\n22 - 5 = 17\n17 - 27 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one optimal division for the given array.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 126,
            "GT": 20,
            "Query": "5 + 6 + 4 + 4 * 3 - 2 * 3 + 7 - 8 =   ",
            "Injected CoT": "4 * 3 = 12\n2 * 3 = 6\n5 + 6 = 11\n11 + 4 = 15\n15 + 12 = 27\n27 - 6 = 21\n21 + 7 = 28\n28 - 8 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 128,
            "GT": 51,
            "Query": "5 + 7 + 3 - 2 + 5 * 6 * 1 + 9 - 1 =   ",
            "Injected CoT": "5 + 7 = 12\n12 + 3 = 15\n15 - 2 = 13\n5 * 6 = 30\n30 * 1 = 30\n13 + 30 = 43\n43 + 9 = 52\n52 - 1 =",
            "Response": " 51",
            "Extract-Response": " 51.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 129,
            "GT": -34,
            "Query": "7 - 5 + 6 * 2 + 7 - 7 + 1 - 7 * 7 =   ",
            "Injected CoT": "6 * 2 = 12\n7 * 7 = 49\n-5 + 12 = 7\n7 + 6 = 13\n13 + 7 = 20\n20 + 1 = 21\n21 - 49 = -28\n-28 - 7 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef digitSum(n):\n    return sum(int(i) for i in str(n))\n\ndef digitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1])\n\ndef digitSumSquared(n):\n    return sum(int(i)**2 for i in str(n))\n\ndef digitSumSquaredInverse(n):\n    return sum(int(i)**2 for i in str(n)[::-1])\n\ndef digitSumCubed(n):\n    return sum(int(i)**3 for i in str(n))\n\ndef digitSumCubedInverse(n):\n    return sum(int(i)**3 for i in str(n)[::-1])\n\ndef digitSumFactorial(n):\n    return sum(math.factorial(int(i)) for i in str(n))\n\ndef digitSumFactorialInverse(n):\n    return sum(math.factorial(int(i)) for i in str(n)[::-1])\n\ndef digitSumFibonacci(n):\n    return sum(fib(int(i)) for i in str(n))\n\ndef digitSumFibonacciInverse(n):\n    return sum(fib(int(i)) for i in str(n)[::-1])\n\ndef digitSumPrime(n):\n    return sum(is_prime(int(i)) for i in str(n))\n\ndef digitSumPrimeInverse(n):\n    return sum(is_prime(int(i)) for i in str(n)[::-1])\n\ndef digitSumOdd(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0)\n\ndef digitSumOddInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0)\n\ndef digitSumEven(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0)\n\ndef digitSumEvenInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0)\n\ndef digitSumOddDigit(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0)\n\ndef digitSumOddDigitInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0)\n\ndef digitSumEvenDigit(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0)\n\ndef digitSumEvenDigitInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0)\n\ndef digitSumOddDigitSum(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSum(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumSquared(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumSquared(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumSquaredInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumSquared(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumSquared(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumSquared(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumSquaredInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumSquared(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumCubed(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumCubed(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumCubedInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumCubed(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumCubed(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumCubed(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumCubedInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumCubed(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumFactorial(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumFactorial(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumFactorialInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumFactorial(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumFactorial(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumFactorial(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumFactorialInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumFactorial(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumFibon"
        },
        {
            "Index": 131,
            "GT": -85,
            "Query": "3 - 2 - 9 + 2 - 8 - 2 - 6 - 9 * 7 =   ",
            "Injected CoT": "-9 * 7 = -63\n3 - 2 - 9 + 2 - 8 - 2 - 6 - (-63) =",
            "Response": " \n3 - 2 - 9 + 2 - 8 - 2 - 6 + 63 = \n3 - 2 - 9 + 2 - 8 - 2 + 57 = \n3 - 2 - 9 + 2 - 8 + 55 = \n3 - 2 - 9 + 47 = \n3 - 2 + 38 = \n3 + 36 = \n39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 132,
            "GT": 212,
            "Query": "8 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =   ",
            "Injected CoT": "8 * 9 = 72\n3 * 8 = 24\n24 * 5 = 120\n72 + 2 = 74\n120 + 74 = 194\n9 + 7 = 16\n194 + 16 =",
            "Response": " 210\n2 + 3 = 5\n210 + 5 = 215\n\n2.\n\na.\n\n1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 =\n1 * 2 = 2\n3 * 4 = 12\n2 * 5 = 10\n12 * 6 = 72\n10 * 7 = 70\n72 * 8 = 576\n70 * 9 = 630\n576 * 10 = 5760\n\nb.\n\n1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 =\n1 * 2 = 2\n3 * 4 = 12\n2 * 5 = 10\n12 * 6 = 72\n10 * 7 = 70\n72 * 8 = 576\n70 * 9 = 630\n576 * 10 = 5760\n630 * 11 = 6930\n5760 * 12 = 69120\n\n3.\n\na.\n\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 =\n1 + 2 = 3\n3 + 4 = 7\n7 + 5 = 12\n12 + 6 = 18\n18 + 7 = 25\n25 + 8 = 33\n33 + 9 = 42\n42 + 10 = 52\n\nb.\n\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 =\n1 + 2 = 3\n3 + 4 = 7\n7 + 5 = 12\n12 + 6 = 18\n18 + 7 = 25\n25 + 8 = 33\n33 + 9 = 42\n42 + 10 = 52\n52 + 11 = 63\n63 + 12 = 75",
            "Extract-Response": "\n\n75."
        },
        {
            "Index": 134,
            "GT": -34,
            "Query": "7 * 6 + 8 - 3 - 2 - 7 * 9 - 2 * 8 =   ",
            "Injected CoT": "7 * 6 = 42\n42 + 8 = 50\n50 - 3 = 47\n47 - 2 = 45\n7 * 9 = 63\n2 * 8 = 16\n63 + 16 = 79\n45 - 79 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 136,
            "GT": 5,
            "Query": "9 * 1 - 2 * 8 * 5 + 3 - 8 + 9 * 9 =   ",
            "Injected CoT": "9 * 1 = 9\n2 * 8 = 16\n16 * 5 = 80\n9 - 80 = -71\n-71 + 3 = -68\n-68 - 8 = -76\n9 * 9 = 81\n-76 + 81 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '/') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 138,
            "GT": 60,
            "Query": "4 * 8 - 3 - 6 - 2 - 6 + 3 + 6 * 7 =   ",
            "Injected CoT": "4 * 8 = 32\n32 - 3 = 29\n29 - 6 = 23\n23 - 2 = 21\n21 - 6 = 15\n15 + 3 = 18\n6 * 7 = 42\n18 + 42 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 140,
            "GT": -24,
            "Query": "2 * 4 + 7 - 7 * 3 - 3 + 9 - 8 * 3 =   ",
            "Injected CoT": "2 * 4 = 8\n8 + 7 = 15\n7 * 3 = 21\n15 - 21 = -6\n-6 - 3 = -9\n-9 + 9 = 0\n8 * 3 = 24\n0 - 24 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 141,
            "GT": 31,
            "Query": "4 + 9 + 9 - 6 + 3 + 3 + 9 + 3 - 3 =   ",
            "Injected CoT": "4 + 9 = 13\n13 + 9 = 22\n22 - 6 = 16\n16 + 3 = 19\n19 + 3 = 22\n22 + 9 = 31\n31 + 3 = 34\n34 - 3 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 142,
            "GT": -7,
            "Query": "6 * 4 - 9 * 2 - 8 - 2 * 3 + 6 - 5 =   ",
            "Injected CoT": "6 * 4 = 24\n9 * 2 = 18\n2 * 3 = 6\n24 - 18 = 6\n6 - 8 = -2\n-2 + 6 = 4\n4 - 5 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\n\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            maxSum = max(maxSum, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 145,
            "GT": -23,
            "Query": "7 + 9 * 8 + 1 * 3 + 3 - 9 * 3 * 4 =   ",
            "Injected CoT": "9 * 8 = 72\n1 * 3 = 3\n9 * 3 = 27\n27 * 4 = 108\n7 + 72 = 79\n79 + 3 = 82\n82 + 3 = 85\n85 - 108 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array can be negative or non-negative integers.\n\n\"\"\"\n\nclass Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        # DFS\n        # Time O(E + Q * E) E is the number of equations, Q is the number of queries\n        # Space O(E)\n        def dfs(start, end, visited):\n            if start == end:\n                return 1.0\n            visited.add(start)\n            for next in graph[start]:\n                if next in visited:\n                    continue\n                visited.add(next)\n                d = dfs(next, end, visited)\n                if d > 0:\n                    return d * graph[start][next]\n            return -1.0\n\n        graph = collections.defaultdict(dict)\n        for i, (x, y) in enumerate(equations):\n            graph[x][y] = values[i]\n            graph[y][x] = 1 / values[i]\n\n        res = []\n        for x, y in queries:\n            visited = set()\n            d = dfs(x, y, visited)\n            res.append(d)\n        return res"
        },
        {
            "Index": 146,
            "GT": -22,
            "Query": "2 + 6 - 8 - 6 + 9 * 1 - 7 * 3 - 4 =   ",
            "Injected CoT": "9 * 1 = 9\n7 * 3 = 21\n2 + 6 = 8\n8 - 8 = 0\n0 - 6 = -6\n-6 + 9 = 3\n3 - 21 = -18\n-18 - 4 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperations(a):\n    # Write your code here\n    return sum(a)"
        },
        {
            "Index": 147,
            "GT": 130,
            "Query": "8 + 7 + 3 + 9 * 5 - 6 + 9 + 8 * 8 =   ",
            "Injected CoT": "9 * 5 = 45\n8 + 7 = 15\n15 + 3 = 18\n18 + 45 = 63\n8 * 8 = 64\n9 + 64 = 73\n73 - 6 = 67\n67 + 9 =",
            "Response": " 76",
            "Extract-Response": " 76\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            for(j=0;j<i;j++)\n            {\n                if(s[j]=='+')\n                {\n                    for(k=0;k<j;k++)\n                    {\n                        if(s[k]=='+')\n                        {\n                            for(l=0;l<k;l++)\n                            {\n                                if(s[l]=='+')\n                                {\n                                    for(m=0;m<l;m++)\n                                    {\n                                        if(s[m]=='+')\n                                        {\n                                            for(n=0;n<m;n++)\n                                            {\n                                                sum=sum+s[n]-48;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"The answer is  %d\",sum);\n    return 0;\n}"
        },
        {
            "Index": 148,
            "GT": 10,
            "Query": "9 + 4 + 2 - 5 * 1 - 4 + 7 + 5 - 8 =   ",
            "Injected CoT": "9 + 4 = 13\n13 + 2 = 15\n15 - 5 = 10\n10 - 1 = 9\n9 - 4 = 5\n5 + 7 = 12\n12 + 5 = 17\n17 - 8 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 149,
            "GT": -35,
            "Query": "2 * 1 - 4 * 7 - 5 - 4 - 6 + 3 * 2 =   ",
            "Injected CoT": "2 * 1 = 2\n4 * 7 = 28\n3 * 2 = 6\n2 - 28 = -26\n-26 - 5 = -31\n-31 - 4 = -35\n-35 - 6 = -41\n-41 + 6 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nNote:\nThe space between two operators and numbers should be a single space.\nEach test case has  lines.\nThe answer for each test case would be printed in a separate line.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[1000];\n    int i,j,k,l,m,n,t,x,y,flag,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(i=1;i<=t;i++)\n    {\n        gets(s);\n        l=strlen(s);\n        flag=0;\n        sum=0;\n        for(j=0;j<l;j++)\n        {\n            if(s[j]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                x=s[j]-'0';\n                flag=1;\n            }\n            else\n            {\n                y=s[j]-'0';\n                flag=0;\n                if(x==1)\n                {\n                    sum=sum+y;\n                }\n                else if(x==2)\n                {\n                    sum=sum-y;\n                }\n                else if(x==3)\n                {\n                    sum=sum*y;\n                }\n                else if(x==4)\n                {\n                    sum=sum/y;\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 150,
            "GT": -32,
            "Query": "3 * 5 - 2 - 8 * 8 + 9 + 4 + 2 * 3 =   ",
            "Injected CoT": "3 * 5 = 15\n8 * 8 = 64\n15 - 2 = 13\n13 - 64 = -51\n9 + 4 = 13\n2 * 3 = 6\n-51 + 13 = -38\n-38 + 6 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 151,
            "GT": 0,
            "Query": "1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =   ",
            "Injected CoT": "5 * 1 = 5\n1 - 4 = -3\n-3 + 9 = 6\n6 + 4 = 10\n10 - 5 = 5\n5 - 7 = -2\n-2 - 3 = -5\n-5 + 5 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5"
        },
        {
            "Index": 152,
            "GT": -109,
            "Query": "6 + 3 - 2 * 8 - 4 * 5 * 5 + 3 - 5 =   ",
            "Injected CoT": "2 * 8 = 16\n4 * 5 = 20\n20 * 5 = 100\n6 + 3 = 9\n9 - 16 = -7\n-7 - 100 = -107\n-107 + 3 = -104\n-104 - 5 =",
            "Response": " -109",
            "Extract-Response": " -109.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 153,
            "GT": 42,
            "Query": "6 * 6 - 4 * 2 + 2 * 9 - 5 - 5 + 6 =   ",
            "Injected CoT": "6 * 6 = 36\n4 * 2 = 8\n2 * 9 = 18\n36 - 8 = 28\n28 + 18 = 46\n5 + 5 = 10\n46 - 10 = 36\n36 + 6 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 156,
            "GT": -3,
            "Query": "4 * 5 + 2 + 8 - 1 * 4 - 4 * 6 - 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 + 2 = 22\n22 + 8 = 30\n1 * 4 = 4\n4 * 6 = 24\n30 - 4 = 26\n26 - 24 = 2\n2 - 5 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 159,
            "GT": 22,
            "Query": "6 + 4 * 2 * 2 + 1 * 3 - 7 + 1 + 3 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 2 = 16\n1 * 3 = 3\n6 + 16 = 22\n22 + 3 = 25\n25 - 7 = 18\n18 + 1 = 19\n19 + 3 =",
            "Response": " 22\n\n22",
            "Extract-Response": " 22\n\n*/"
        },
        {
            "Index": 162,
            "GT": 84,
            "Query": "3 - 3 + 9 * 8 + 6 - 9 + 9 - 3 + 9 =   ",
            "Injected CoT": "9 * 8 = 72\n3 - 3 = 0\n0 + 72 = 72\n72 + 6 = 78\n78 - 9 = 69\n69 + 9 = 78\n78 - 3 = 75\n75 + 9 =",
            "Response": " 84",
            "Extract-Response": " 84\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 165,
            "GT": 77,
            "Query": "9 * 8 + 5 + 1 - 2 - 9 + 7 + 8 - 5 =   ",
            "Injected CoT": "9 * 8 = 72\n72 + 5 = 77\n77 + 1 = 78\n78 - 2 = 76\n76 - 9 = 67\n67 + 7 = 74\n74 + 8 = 82\n82 - 5 =",
            "Response": " 77",
            "Extract-Response": " 77\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 166,
            "GT": -29,
            "Query": "8 - 3 * 7 - 1 - 7 - 8 + 7 - 2 - 5 =   ",
            "Injected CoT": "3 * 7 = 21\n8 - 21 = -13\n-13 - 1 = -14\n-14 - 7 = -21\n-21 - 8 = -29\n-29 + 7 = -22\n-22 - 2 = -24\n-24 - 5 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\nThe range of n is [1, 10000].\nThe range of ai is [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 168,
            "GT": 22,
            "Query": "2 * 9 - 1 - 8 + 7 + 9 + 3 + 1 - 7 =   ",
            "Injected CoT": "2 * 9 = 18\n18 - 1 = 17\n17 - 8 = 9\n9 + 7 = 16\n16 + 9 = 25\n25 + 3 = 28\n28 + 1 = 29\n29 - 7 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 171,
            "GT": 64,
            "Query": "8 * 5 * 2 + 9 + 3 - 1 - 9 * 3 * 1 =   ",
            "Injected CoT": "8 * 5 = 40\n40 * 2 = 80\n9 + 3 = 12\n80 + 12 = 92\n9 * 3 = 27\n27 * 1 = 27\n1 - 27 = -26\n92 - (-26) =",
            "Response": " 118",
            "Extract-Response": " 118\n</code>\n"
        },
        {
            "Index": 172,
            "GT": 113,
            "Query": "8 * 6 * 6 + 2 - 1 - 8 - 3 * 7 * 8 =   ",
            "Injected CoT": "8 * 6 = 48\n48 * 6 = 288\n288 + 2 = 290\n290 - 1 = 289\n289 - 8 = 281\n3 * 7 = 21\n21 * 8 = 168\n281 - 168 =",
            "Response": " 113\n\n113 is the answer.",
            "Extract-Response": "\n\n113"
        },
        {
            "Index": 173,
            "GT": 19,
            "Query": "2 + 4 + 8 - 3 + 3 + 4 + 9 - 9 + 1 =   ",
            "Injected CoT": "2 + 4 = 6\n6 + 8 = 14\n14 - 3 = 11\n11 + 3 = 14\n14 + 4 = 18\n18 + 9 = 27\n27 - 9 = 18\n18 + 1 =",
            "Response": " 19\n\n19",
            "Extract-Response": "\n\n19"
        },
        {
            "Index": 176,
            "GT": 10,
            "Query": "4 + 2 + 2 - 2 + 7 * 2 - 5 - 9 + 4 =   ",
            "Injected CoT": "4 + 2 = 6\n6 + 2 = 8\n8 - 2 = 6\n6 + 7 * 2 = 20\n20 - 5 = 15\n15 - 9 = 6\n6 + 4 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 178,
            "GT": 40,
            "Query": "2 * 7 + 3 - 3 * 3 + 4 - 8 + 4 * 9 =   ",
            "Injected CoT": "2 * 7 = 14\n3 * 3 = 9\n4 * 9 = 36\n14 + 3 = 17\n17 - 9 = 8\n8 + 4 = 12\n12 - 8 = 4\n4 + 36 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 180,
            "GT": 2,
            "Query": "8 - 9 - 5 - 2 + 8 * 1 + 1 - 6 + 7 =   ",
            "Injected CoT": "8 - 9 = -1\n-1 - 5 = -6\n-6 - 2 = -8\n8 * 1 = 8\n-8 + 8 = 0\n0 + 1 = 1\n1 - 6 = -5\n-5 + 7 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 184,
            "GT": 79,
            "Query": "4 + 9 * 6 * 2 + 4 - 4 * 4 * 2 - 5 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 2 = 108\n4 + 108 = 112\n4 * 4 = 16\n16 * 2 = 32\n32 - 4 = 28\n112 - 28 = 84\n84 - 5 =",
            "Response": " 79",
            "Extract-Response": " 79.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 185,
            "GT": -1,
            "Query": "2 - 8 * 3 + 6 * 5 + 5 - 7 - 1 * 7 =   ",
            "Injected CoT": "8 * 3 = 24\n2 - 24 = -22\n6 * 5 = 30\n-22 + 30 = 8\n8 + 5 = 13\n13 - 7 = 6\n1 * 7 = 7\n6 - 7 = -1\n-1 - 1 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 186,
            "GT": 59,
            "Query": "9 * 8 - 9 - 3 + 2 - 1 - 3 * 3 + 7 =   ",
            "Injected CoT": "9 * 8 = 72\n72 - 9 = 63\n63 - 3 = 60\n60 + 2 = 62\n62 - 1 = 61\n3 * 3 = 9\n61 - 9 = 52\n52 + 7 =",
            "Response": " 59",
            "Extract-Response": "\n\n59"
        },
        {
            "Index": 187,
            "GT": -213,
            "Query": "6 + 1 * 6 + 9 + 9 - 3 - 5 * 8 * 6 =   ",
            "Injected CoT": "1 * 6 = 6\n5 * 8 = 40\n40 * 6 = 240\n6 + 6 = 12\n12 + 9 = 21\n21 + 9 = 30\n30 - 3 = 27\n27 - 240 =",
            "Response": " -213",
            "Extract-Response": " -213.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 1000.\nEach node's value will be between -10^9 and 10^9.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        if(!root) return 0;\n        int sum = 0;\n        vector<int> path;\n        dfs(root, path, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, vector<int>& path, int& sum){\n        path.push_back(root->val);\n        if(!root->left && !root->right){\n            int cur = 0;\n            for(int i = 0; i < path.size(); ++i){\n                cur = cur * 10 + path[i];\n            }\n            sum += cur;\n        }\n        if(root->left) dfs(root->left, path, sum);\n        if(root->right) dfs(root->right, path, sum);\n        path.pop_back();\n    }\n};"
        },
        {
            "Index": 188,
            "GT": 13,
            "Query": "5 + 3 + 2 + 1 * 9 + 1 * 1 - 1 * 7 =   ",
            "Injected CoT": "1 * 9 = 9\n1 * 1 = 1\n5 + 3 = 8\n8 + 2 = 10\n10 + 9 = 19\n19 + 1 = 20\n1 * 7 = 7\n20 - 7 =",
            "Response": " 13\n\n13 is the answer.",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 191,
            "GT": 56,
            "Query": "3 + 4 + 8 * 9 - 6 * 6 + 3 + 2 + 8 =   ",
            "Injected CoT": "8 * 9 = 72\n6 * 6 = 36\n3 + 4 = 7\n72 - 36 = 36\n36 + 7 = 43\n43 + 3 = 46\n46 + 2 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n        if(str[i] == '+')\n        {\n            num = 0;\n            for(j = i - 1; j >= 0; j--)\n            {\n                if(str[j] == ' ')\n                    break;\n                num += (str[j] - '0') * pow(10, i - 1 - j);\n            }\n            sum += num;\n        }\n        if(str[i] == '-')\n        {\n            num = 0;\n            for(j = i - 1; j >= 0; j--)\n            {\n                if(str[j] == ' ')\n                    break;\n                num += (str[j] - '0') * pow(10, i - 1 - j);\n            }\n            sum -= num;\n        }\n    }\n    num = 0;\n    for(j = len - 1; j >= 0; j--)\n    {\n        if(str[j] == ' ')\n            break;\n        num += (str[j] - '0') * pow(10, len - 1 - j);\n    }\n    sum += num;\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/"
        },
        {
            "Index": 194,
            "GT": -16,
            "Query": "3 - 2 * 1 + 4 - 5 + 1 - 2 - 6 - 9 =   ",
            "Injected CoT": "2 * 1 = 2\n3 - 2 = 1\n1 + 4 = 5\n5 - 5 = 0\n0 + 1 = 1\n1 - 2 = -1\n-1 - 6 = -7\n-7 - 9 =",
            "Response": " -16",
            "Extract-Response": " -16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 195,
            "GT": 100,
            "Query": "3 - 2 * 6 - 2 + 4 * 6 * 4 + 5 * 3 =   ",
            "Injected CoT": "2 * 6 = 12\n3 - 12 = -9\n4 * 6 = 24\n24 * 4 = 96\n5 * 3 = 15\n-9 - 2 = -11\n-11 + 96 = 85\n85 + 15 =",
            "Response": " 100",
            "Extract-Response": " 100.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 196,
            "GT": -34,
            "Query": "3 - 7 * 8 + 9 - 7 + 9 + 8 + 8 - 8 =   ",
            "Injected CoT": "-7 * 8 = -56\n3 - (-56) = 59\n59 + 9 = 68\n68 - 7 = 61\n61 + 9 = 70\n70 + 8 = 78\n78 - 8 =",
            "Response": " 70",
            "Extract-Response": "\n\n70"
        },
        {
            "Index": 200,
            "GT": 60,
            "Query": "5 * 8 + 3 * 6 + 7 - 1 * 3 - 4 + 2 =   ",
            "Injected CoT": "5 * 8 = 40\n3 * 6 = 18\n1 * 3 = 3\n40 + 18 = 58\n58 + 7 = 65\n65 - 3 = 62\n62 - 4 = 58\n58 + 2 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 202,
            "GT": 47,
            "Query": "9 * 4 + 7 + 3 * 1 - 4 + 3 + 9 - 7 =   ",
            "Injected CoT": "9 * 4 = 36\n3 * 1 = 3\n36 + 7 = 43\n43 + 3 = 46\n46 - 4 = 42\n42 + 3 = 45\n45 + 9 = 54\n54 - 7 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            continue;\n        }\n        if(s[i] == '*')\n        {\n            continue;\n        }\n        if(s[i] == '/')\n        {\n            continue;\n        }\n        if(s[i] == '%')\n        {\n            continue;\n        }\n        if(s[i] == '=')\n        {\n            continue;\n        }\n        sum = sum * 10 + s[i] - '0';\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 203,
            "GT": 159,
            "Query": "7 * 4 * 1 * 8 - 5 - 6 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 1 = 28\n28 * 8 = 224\n6 * 8 = 48\n224 - 5 = 219\n219 - 48 = 171\n171 - 3 = 168\n168 - 9 =",
            "Response": " 159",
            "Extract-Response": " 159\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 204,
            "GT": 116,
            "Query": "7 * 8 * 8 - 8 * 7 * 6 - 4 + 9 - 1 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 8 = 448\n8 * 7 = 56\n56 * 6 = 336\n448 - 336 = 112\n112 - 4 = 108\n108 + 9 = 117\n117 - 1 =",
            "Response": " 116",
            "Extract-Response": " 116\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 205,
            "GT": 41,
            "Query": "6 * 9 - 1 + 3 - 8 + 2 - 3 * 2 - 3 =   ",
            "Injected CoT": "6 * 9 = 54\n54 - 1 = 53\n53 + 3 = 56\n56 - 8 = 48\n48 + 2 = 50\n3 * 2 = 6\n50 - 6 = 44\n44 - 3 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 206,
            "GT": -14,
            "Query": "6 * 4 + 3 + 9 - 8 - 5 - 2 - 5 * 7 =   ",
            "Injected CoT": "6 * 4 = 24\n24 + 3 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 5 = 23\n23 - 2 = 21\n5 * 7 = 35\n21 - 35 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 207,
            "GT": 140,
            "Query": "7 * 3 * 8 + 1 - 6 - 5 + 3 - 7 * 3 =   ",
            "Injected CoT": "7 * 3 = 21\n21 * 8 = 168\n168 + 1 = 169\n169 - 6 = 163\n163 - 5 = 158\n158 + 3 = 161\n161 - 7 = 154\n154 * 3 =",
            "Response": " 462",
            "Extract-Response": " 462.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 208,
            "GT": -1,
            "Query": "9 + 1 - 3 - 7 - 5 - 5 + 3 + 2 * 3 =   ",
            "Injected CoT": "2 * 3 = 6\n9 + 1 = 10\n10 - 3 = 7\n7 - 7 = 0\n0 - 5 = -5\n-5 - 5 = -10\n-10 + 3 = -7\n-7 + 6 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 209,
            "GT": 399,
            "Query": "6 + 5 + 7 * 2 - 3 - 1 + 6 * 9 * 7 =   ",
            "Injected CoT": "7 * 2 = 14\n6 + 5 = 11\n11 + 14 = 25\n6 * 9 = 54\n54 * 7 = 378\n25 + 378 = 403\n403 - 3 = 400\n400 - 1 =",
            "Response": " 399",
            "Extract-Response": " 399\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 210,
            "GT": 63,
            "Query": "9 + 7 * 8 - 3 + 1 + 4 - 6 - 1 + 3 =   ",
            "Injected CoT": "7 * 8 = 56\n9 + 56 = 65\n65 - 3 = 62\n62 + 1 = 63\n63 + 4 = 67\n67 - 6 = 61\n61 - 1 = 60\n60 + 3 =",
            "Response": " 63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 211,
            "GT": 72,
            "Query": "3 - 6 * 5 * 1 + 9 * 9 + 9 + 2 + 7 =   ",
            "Injected CoT": "6 * 5 = 30\n3 - 30 = -27\n9 * 9 = 81\n-27 + 81 = 54\n54 + 9 = 63\n63 + 2 = 65\n65 + 7 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++result;\n        } else {\n            --result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 213,
            "GT": 10,
            "Query": "2 * 1 + 7 + 7 - 7 - 1 * 5 + 5 + 1 =   ",
            "Injected CoT": "2 * 1 = 2\n7 + 7 = 14\n5 * 1 = 5\n2 + 14 = 16\n16 - 7 = 9\n5 + 1 = 6\n9 + 6 = 15\n15 + 1 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 214,
            "GT": 4388,
            "Query": "2 * 9 * 2 * 5 * 8 * 3 + 8 * 9 - 4 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 2 = 36\n36 * 5 = 180\n180 * 8 = 1440\n1440 * 3 = 4320\n8 * 9 = 72\n4320 + 72 = 4392\n4392 - 4 =",
            "Response": " 4388",
            "Extract-Response": " 4388\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24,"
        },
        {
            "Index": 215,
            "GT": 86,
            "Query": "6 + 3 * 6 * 8 + 8 - 4 * 1 * 6 * 3 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 8 = 144\n6 * 3 = 18\n18 * 1 = 18\n18 * 4 = 72\n6 * 18 = 108\n108 - 72 = 36\n6 + 144 = 150\n150 + 8 = 158\n158 - 36 =",
            "Response": " 122\n\n122",
            "Extract-Response": " 122\n\n*/"
        },
        {
            "Index": 216,
            "GT": -226,
            "Query": "2 * 2 + 1 - 7 * 7 * 4 - 7 - 7 * 4 =   ",
            "Injected CoT": "2 * 2 = 4\n7 * 7 = 49\n49 * 4 = 196\n7 * 4 = 28\n196 + 28 = 224\n4 + 1 = 5\n5 - 224 =",
            "Response": " -219",
            "Extract-Response": " -219.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {\n        int sum = 0;\n        for(int i = 0; i < A.size(); i++) {\n            if(A[i] % 2 == 0) {\n                sum += A[i];\n            }\n        }\n        vector<int> ans;\n        for(int i = 0; i < queries.size(); i++) {\n            int val = queries[i][0];\n            int index = queries[i][1];\n            if(A[index] % 2 == 0) {\n                sum -= A[index];\n            }\n            A[index] += val;\n            if(A[index] % 2 == 0) {\n                sum += A[index];\n            }\n            ans.push_back(sum);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 218,
            "GT": -102,
            "Query": "5 * 8 - 4 * 2 - 1 * 9 * 5 * 3 + 1 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 2 = 8\n9 * 5 = 45\n45 * 3 = 135\n40 - 8 = 32\n32 - 135 = -103\n-103 + 1 =",
            "Response": " -102\n\n-102",
            "Extract-Response": " -102"
        },
        {
            "Index": 219,
            "GT": 55,
            "Query": "9 - 8 - 2 - 2 - 7 + 8 * 8 + 8 - 7 =   ",
            "Injected CoT": "8 * 8 = 64\n9 - 8 = 1\n1 - 2 = -1\n-1 - 2 = -3\n-3 - 7 = -10\n-10 + 64 = 54\n54 + 8 = 62\n62 - 7 =",
            "Response": " 55",
            "Extract-Response": " 55\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentOperation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] >= '0' && s[i] <= '9') {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        } else {\n            if (currentOperation == '+') {\n                result += currentNumber;\n            } else if (currentOperation == '-') {\n                result -= currentNumber;\n            } else if (currentOperation == '*') {\n                result *= currentNumber;\n            } else if (currentOperation == '/') {\n                result /= currentNumber;\n            }\n            currentNumber = 0;\n            currentOperation = s[i];\n        }\n    }\n\n    if (currentOperation == '+') {\n        result += currentNumber;\n    } else if (currentOperation == '-') {\n        result -= currentNumber;\n    } else if (currentOperation == '*') {\n        result *= currentNumber;\n    } else if (currentOperation == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 221,
            "GT": 239,
            "Query": "7 - 7 - 7 + 5 * 6 + 9 * 3 * 1 * 8 =   ",
            "Injected CoT": "5 * 6 = 30\n9 * 3 = 27\n27 * 1 = 27\n27 * 8 = 216\n7 - 7 = 0\n0 - 7 = -7\n-7 + 30 = 23\n23 + 216 =",
            "Response": " 239",
            "Extract-Response": " 239\n</code>\n"
        },
        {
            "Index": 223,
            "GT": 56,
            "Query": "3 * 9 + 1 - 6 * 2 + 1 + 4 + 7 * 5 =   ",
            "Injected CoT": "3 * 9 = 27\n27 + 1 = 28\n6 * 2 = 12\n28 - 12 = 16\n1 + 16 = 17\n4 + 17 = 21\n7 * 5 = 35\n21 + 35 =",
            "Response": " 56",
            "Extract-Response": " 56.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 224,
            "GT": -19,
            "Query": "9 + 3 + 4 + 2 * 5 + 9 - 7 * 8 + 2 =   ",
            "Injected CoT": "2 * 5 = 10\n7 * 8 = 56\n9 + 3 = 12\n12 + 4 = 16\n16 + 10 = 26\n26 + 9 = 35\n35 - 56 = -21\n-21 + 2 =",
            "Response": " -19",
            "Extract-Response": " -19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    int operation = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            operation = 1;\n        } else if (s[i] == '/') {\n            operation = 2;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n\n        if (operation != 0) {\n            if (operation == 1) {\n                currentNumber *= sign;\n            } else {\n                currentNumber /= sign;\n            }\n            sign = 1;\n            operation = 0;\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 225,
            "GT": -3,
            "Query": "1 * 8 - 5 - 1 * 4 - 9 + 7 + 6 - 6 =   ",
            "Injected CoT": "1 * 8 = 8\n8 - 5 = 3\n1 * 4 = 4\n3 - 4 = -1\n-1 - 9 = -10\n-10 + 7 = -3\n-3 + 6 = 3\n3 - 6 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 226,
            "GT": -68,
            "Query": "8 - 2 - 7 * 8 - 3 * 2 - 2 - 5 * 2 =   ",
            "Injected CoT": "7 * 8 = 56\n3 * 2 = 6\n5 * 2 = 10\n8 - 2 = 6\n6 - 56 = -50\n-50 - 6 = -56\n-56 - 6 = -62\n-62 - 10 =",
            "Response": " -72\n-72 - 3 = -75\n-75 - 2 = -77\n-77 - 2 = -79\n-79 - 2 = -81\n-81 - 2 = -83\n-83 - 2 = -85\n-85 - 2 = -87\n-87 - 2 = -89\n-89 - 2 = -91\n-91 - 2 = -93\n-93 - 2 = -95\n-95 - 2 = -97\n-97 - 2 = -99\n-99 - 2 = -101\n-101 - 2 = -103\n-103 - 2 = -105\n-105 - 2 = -107\n-107 - 2 = -109\n-109 - 2 = -111\n-111 - 2 = -113\n-113 - 2 = -115\n-115 - 2 = -117\n-117 - 2 = -119\n-119 - 2 = -121\n-121 - 2 = -123\n-123 - 2 = -125\n-125 - 2 = -127\n-127 - 2 = -129\n-129 - 2 = -131\n-131 - 2 = -133\n-133 - 2 = -135\n-135 - 2 = -137\n-137 - 2 = -139\n-139 - 2 = -141\n-141 - 2 = -143\n-143 - 2 = -145\n-145 - 2 = -147\n-147 - 2 = -149\n-149 - 2 = -151\n-151 - 2 = -153\n-153 - 2 = -155\n-155 - 2 = -157\n-157 - 2 = -159\n-159 - 2 = -161\n-161 - 2 = -163\n-163 - 2 = -165\n-165 - 2 = -167\n-167 - 2 = -169\n-169 - 2 = -171\n-171 - 2 = -173\n-173 - 2 = -175\n-175 - 2 = -177\n-177 - 2 = -179\n-179 - 2 = -181\n-181 - 2 = -183\n-183 - 2 = -185\n-185 - 2 = -187\n-187 - 2 = -189\n-189 - 2 = -191\n-191 - 2 = -193\n-193 - 2 = -195\n-195 - 2 = -197\n-197 - 2 = -199\n-199 - 2 = -201\n-201 - 2 = -203\n-203 - 2 = -205\n-205 - 2 = -207\n-207 - 2 = -209\n-209 - 2 = -211\n-211 - 2 = -213\n-213 - 2 = -215\n-215 - 2 = -217\n-217 - 2 = -219\n-219 - 2 = -221\n-221 - 2 = -223\n-223 - 2 = -225\n-225 - 2 = -227\n-227 - 2 = -229\n-229 - 2 = -231\n-231 - 2 = -233\n-233 - 2 = -235\n-235 - 2 = -237\n-237 - 2 = -239\n-239 - 2 = -241\n-241 - 2 = -243\n-243 - 2 = -245\n-245 - 2 = -247\n-247 - 2 = -249\n-249 - 2 = -251\n-251 - 2 = -253\n-253 - 2 = -255\n-255 - 2 = -257\n-257 - 2 = -259\n-259 - 2 = -261\n-261 - 2 = -263\n-263 - 2 = -265\n-265 - 2 = -267\n-267 - 2 = -269\n-269 - 2 = -271\n-271 - 2 = -273\n-273 - 2 = -275\n-275 - 2 = -277\n-277 - 2 = -279\n-279 - 2 = -281\n-281 - 2 = -283\n-283 - 2 = -285\n-285 - 2 = -287\n-287 - 2 = -289\n-289 - 2 = -291\n-291 - 2 = -293\n-293 - 2 = -295\n-295 - 2 = -297\n-297 - 2 = -299\n-299 - 2 = -301\n-301 - 2 = -303\n-303 - 2 = -305\n-305 - 2 = -307\n-307 - 2 = -309\n-309 - 2 = -311\n-311 - 2 = -313\n-313 - 2 = -315\n-315 - 2 = -317\n-317 - 2 = -319\n-319 - 2 = -321\n-321 - 2 = -323\n-323 - 2 = -325\n-325 - 2 = -327\n-327 - 2 = -329\n-329 - 2 = -331\n-331 - 2 = -333\n-333 - 2 = -335\n-335 - 2 = -337\n-337 - 2 = -339\n-339 - 2 = -341\n-341 - 2 = -343\n-343 - 2 = -345\n-345 - 2 = -347\n-347 - 2 = -349\n-349 - 2 = -351\n-351 - 2 = -353\n-353 - 2 = -355\n-355 - 2 = -357\n-357 - 2 = -359\n-359 - 2 = -361\n-361 - 2 = -363\n-363 - 2 = -365\n-365 - 2 = -367\n-367 - 2 = -369\n-369 - 2 = -371\n-371 - 2 = -373\n-373 - 2 = -375\n-375 - 2 = -377\n-377 - 2 = -379\n-379 - 2 = -381\n-381 - 2 = -383\n-383 - 2 = -385\n-385 - 2 = -387\n-387 - 2 = -389\n-389 - 2 = -391\n-391 - 2 = -393\n-393 - 2 = -395\n-395 - 2 = -397\n-397 - 2 = -399\n-399 - 2 = -401\n-401 - 2 = -403\n-403 - 2 = -405\n-405 - 2 = -407\n-407 - 2 = -409\n-409 - 2 = -411\n-411 - 2 = -413\n-413 - 2 = -415\n-415 - 2 = -417\n-417 - 2 = -419\n-419 - 2 = -421\n-421 - 2 = -423\n-423 - 2 = -425\n-425 - 2 = -427\n-427 - 2 = -429\n-429 - 2 = -431\n-431 - 2 = -433\n-433 - 2 = -435\n-435 - 2 = -437\n-437 - 2 = -439\n-439 - 2 = -441\n-441 - 2 = -443\n-443 - 2 = -445\n-445 - 2 = -447\n-447 - 2 = -449\n-449 - 2 = -451\n-451 - 2 = -453\n-453 - 2 = -455\n-455 - 2 = -457\n-457 - 2 = -459\n-459 - 2 = -461\n-461 - 2 = -463\n-463 - 2 = -465\n-465 - 2 = -467\n-467 - 2 = -469\n-469 - 2 = -471\n-471 - 2 = -473\n-473 - 2 = -475\n-475 - 2 = -477\n-477 - 2 = -479\n-479 - 2 = -481\n-481 - 2 = -483\n-483 - 2 = -485\n-485 - 2 = -487\n-487 - 2 = -489\n-489 - 2 = -491\n-491 - 2 = -493\n-493 - 2 = -495\n-495 - 2 = -497\n-497 - 2 = -499\n-499 - 2 = -501\n-501 - 2 = -503\n-503 - 2 = -505\n-505 - 2 = -507\n-507 - 2 = -509\n-509 - 2 = -511\n-511 - 2 = -513\n-513 - 2 = -515\n-515 - 2 = -517\n-517 - 2 = -519\n-519 - 2 = -521\n-521 - 2 = -523\n-523 - 2 = -525\n-525 - 2 = -527\n-527 - 2 = -529\n-529 - 2 = -531\n-531 - 2 = -533\n-533 - 2 = -535\n-535 - 2 = -537\n-537 - 2 = -539\n-539 - 2 = -541\n-541 - 2 = -543\n-543 - 2 = -545\n-545 - 2 = -547\n-547 - 2 = -549\n-549 - 2 = -551\n-551 - 2 = -553\n-553 - 2 = -555\n-555 - 2 = -557\n-557 - 2 = -559\n-559 - 2 = -561\n-561 - 2 = -563\n-563 - 2 = -565\n-565 - 2 = -567\n-567 - 2 =",
            "Extract-Response": " -567"
        },
        {
            "Index": 227,
            "GT": -167,
            "Query": "8 - 3 * 3 * 6 * 3 - 1 - 8 - 5 + 1 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 3 = 54\n54 * 3 = 162\n8 - 162 = -154\n-154 - 1 = -155\n-155 - 8 = -163\n-163 - 5 = -168\n-168 + 1 =",
            "Response": " -167\n\n-167 is not a multiple of 3.",
            "Extract-Response": " -167.\n\nNote:\nThe length of given array won't exceed 1000.\nThe answer is guaranteed to fit in 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int maxSumDivThree(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        if (sum % 3 == 0) {\n            return sum;\n        }\n        int mod1 = sum % 3;\n        int mod2 = (sum + 1) % 3;\n        int mod3 = (sum + 2) % 3;\n        int min1 = INT_MAX;\n        int min2 = INT_MAX;\n        int min3 = INT_MAX;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] % 3 == mod1) {\n                min1 = min(min1, nums[i]);\n            }\n            if (nums[i] % 3 == mod2) {\n                min2 = min(min2, nums[i]);\n            }\n            if (nums[i] % 3 == mod3) {\n                min3 = min(min3, nums[i]);\n            }\n        }\n        if (min1 == INT_MAX && min2 == INT_MAX && min3 == INT_MAX) {\n            return 0;\n        }\n        if (min1 == INT_MAX) {\n            return sum - min(min2, min3);\n        }\n        if (min2 == INT_MAX) {\n            return sum - min(min1, min3);\n        }\n        if (min3 == INT_MAX) {\n            return sum - min(min1, min2);\n        }\n        return sum - min(min1 + min2, min3);\n    }\n};"
        },
        {
            "Index": 228,
            "GT": 1118,
            "Query": "7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 6 = 378\n378 * 3 = 1134\n1134 * 1 = 1134\n1134 - 1 = 1133\n2 * 3 = 6\n1133 - 6 = 1127\n1127 - 9 =",
            "Response": " 1118\n1118 - 2 = 1116\n1116 - 4 = 1112\n1112 - 8 = 1104\n1104 - 6 = 1098\n1098 - 12 = 1086\n1086 - 18 = 1068\n1068 - 24 = 1044\n1044 - 30 = 1014\n1014 - 36 = 978\n978 - 42 = 936\n936 - 48 = 888\n888 - 54 = 834\n834 - 60 = 774\n774 - 66 = 708\n708 - 72 = 636\n636 - 78 = 558\n558 - 84 = 474\n474 - 90 = 384\n384 - 96 = 288\n288 - 102 = 186\n186 - 108 = 78\n78 - 114 = -36\n-36 - 120 = -156\n-156 - 126 = -282\n-282 - 132 = -432\n-432 - 138 = -606\n-606 - 144 = -814\n-814 - 150 = -1066\n-1066 - 156 = -1362\n-1362 - 162 = -1702\n-1702 - 168 = -2096\n-2096 - 174 = -2544\n-2544 - 180 = -3048\n-3048 - 186 = -3608\n-3608 - 192 = -4224\n-4224 - 198 = -4896\n-4896 - 204 = -5624\n-5624 - 210 = -6410\n-6410 - 216 = -7254\n-7254 - 222 = -8158\n-8158 - 228 = -9122\n-9122 - 234 = -10146\n-10146 - 240 = -11230\n-11230 - 246 = -12374\n-12374 - 252 = -13578\n-13578 - 258 = -14842\n-14842 - 264 = -16166\n-16166 - 270 = -17550\n-17550 - 276 = -18994\n-18994 - 282 = -20498\n-20498 - 288 = -22062\n-22062 - 294 = -23686\n-23686 - 300 = -25370\n-25370 - 306 = -27116\n-27116 - 312 = -28922\n-28922 - 318 = -30790\n-30790 - 324 = -32718\n-32718 - 330 = -34706\n-34706 - 336 = -36754\n-36754 - 342 = -38864\n-38864 - 348 = -41036\n-41036 - 354 = -43270\n-43270 - 360 = -45566\n-45566 - 366 = -47924\n-47924 - 372 = -50344\n-50344 - 378 = -52826\n-52826 - 384 = -55370\n-55370 - 390 = -57978\n-57978 - 396 = -60648\n-60648 - 402 = -63380\n-63380 - 408 = -66174\n-66174 - 414 = -69031\n-69031 - 420 = -71951\n-71951 - 426 = -74933\n-74933 - 432 = -77979\n-77979 - 438 = -81087\n-81087 - 444 = -84259\n-84259 - 450 = -87493\n-87493 - 456 = -90793\n-90793 - 462 = -94155\n-94155 - 468 = -97583\n-97583 - 474 = -101075\n-101075 - 480 = -104633\n-104633 - 486 = -108256\n-108256 - 492 = -111943\n-111943 - 498 = -115696\n-115696 - 504 = -119513\n-119513 - 510 = -123394\n-123394 - 516 = -127339\n-127339 - 522 = -131349\n-131349 - 528 = -135423\n-135423 - 534 = -139561\n-139561 - 540 = -143763\n-143763 - 546 = -148029\n-148029 - 552 = -152359\n-152359 - 558 = -156753\n-156753 - 564 = -161211\n-161211 - 570 = -165733\n-165733 - 576 = -170 319\n-170319 - 582 = -174969\n-174969 - 588 = -179683\n-179683 - 594 = -184461\n-184461 - 600 = -189303\n-189303 - 606 = -194209\n-194209 - 612 = -199179\n-199179 - 618 = -204211\n-204211 - 624 = -209305\n-209305 - 630 = -214464\n-214464 - 636 = -219686\n-219686 - 642 = -224971\n-224971 - 648 = -230319\n-230319 - 654 = -235729\n-235729 - 660 = -241193\n-241193 - 666 = -246719\n-246719 - 672 = -252309\n-252309 - 678 = -257961\n-257961 - 684 = -263677\n-263677 - 690 = -269456\n-269456 - 696 = -275297\n-275297 - 702 = -281191\n-281191 - 708 = -287148\n-287148 - 714 = -293168\n-293168 - 720 = -299251\n-299251 - 726 = -305395\n-305395 - 732 = -311602\n-311602 - 738 = -317872\n-317872 - 744 = -324205\n-324205 - 750 = -330601\n-330601 - 756 = -337061\n-337061 - 762 = -343583\n-343583 - 768 = -350169\n-350169 - 774 = -356817\n-356817 - 780 = -363529\n-363529 - 786 = -370303\n-370303 - 792 = -377140\n-377140 - 798 = -384040\n-384040 - 804 = -391001\n-391001 - 810 = -398025\n-398025 - 816 = -405110\n-405110 - 822 = -412257\n-412257 - 828 = -419466\n-419466 - 834 = -426736\n-426736 - 840 = -434068\n-434068 - 846 = -441461\n-441461 - 852 = -448916\n-448916 - 858 = -456433\n-456433 - 864 = -463993\n-463993 - 870 = -471614\n-471614 - 876 = -479297\n-479297 - 882 = -487041\n-487041 - 888 = -494848\n-494848 - 894 = -502717\n-502717 - 900 = -510648\n-510648 - 906 = -518641\n-518641 - 912 = -526696\n-526696 - 918 = -53481\n-534810 - 924 = -542986\n-542986 - 930 = -551224\n-551224 - 936 = -559524\n-559524 - 942 = -567885\n-567885 - 948 = -576308\n-576308 - 954 = -584793\n-584793 - 960 = -593341\n-593341 - 966 = -601950\n-601950 - 972 = -61062\n-610620 - 978 = -619351\n-619351 - 984 = -628143\n-628143 - 990 = -636995\n-636995 - 996 = -645909\n-645909 - 1002 = -654885\n-654885 - 1008 = -663922\n-663922 - 1014 = -673011\n-673011 - 1020 = -682161\n-682161 - 1026 = -691373\n-691373 - 1032 = -700646\n-700646 - 1038 = -709981\n-709981 - 1044 = -719377\n-719377 - 1050 = -72883\n-728830 - 1056 = -738345\n-738345 - 1062 = -747921\n-747921 - 1068 = -757559\n-757559 - 1074 = -767259\n-767259 - 1080 = -777019\n-777019 - 1086 = -786841\n-",
            "Extract-Response": " -786841"
        },
        {
            "Index": 233,
            "GT": 1154,
            "Query": "4 * 2 * 1 + 1 - 7 + 6 * 4 * 8 * 6 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 1 = 8\n8 + 1 = 9\n9 - 7 = 2\n6 * 4 = 24\n24 * 8 = 192\n192 * 6 = 1152\n2 + 1152 =",
            "Response": " 1154",
            "Extract-Response": " 1154\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prevSign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            prevSign = -1;\n        } else if (s[i] == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n            prevSign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 234,
            "GT": -92,
            "Query": "2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 1 = 10\n5 * 6 = 30\n9 * 2 = 18\n9 * 6 = 54\n10 - 30 = -20\n-20 - 18 = -38\n-38 - 54 =",
            "Response": " -92\n\n2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 = -92",
            "Extract-Response": " -92.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n\n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &a);\n\n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &b);\n\n    printf(\"Enter the third number: \");\n    scanf(\"%d\", &c);\n\n    printf(\"Enter the fourth number: \");\n    scanf(\"%d\", &d);\n\n    printf(\"Enter the fifth number: \");\n    scanf(\"%d\", &e);\n\n    printf(\"Enter the sixth number: \");\n    scanf(\"%d\", &f);\n\n    printf(\"Enter the seventh number: \");\n    scanf(\"%d\", &g);\n\n    printf(\"Enter the eighth number: \");\n    scanf(\"%d\", &h);\n\n    printf(\"Enter the ninth number: \");\n    scanf(\"%d\", &i);\n\n    printf(\"Enter the tenth number: \");\n    scanf(\"%d\", &j);\n\n    printf(\"Enter the eleventh number: \");\n    scanf(\"%d\", &k);\n\n    printf(\"Enter the twelfth number: \");\n    scanf(\"%d\", &l);\n\n    printf(\"Enter the thirteenth number: \");\n    scanf(\"%d\", &m);\n\n    printf(\"Enter the fourteenth number: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the fifteenth number: \");\n    scanf(\"%d\", &o);\n\n    printf(\"Enter the sixteenth number: \");\n    scanf(\"%d\", &p);\n\n    printf(\"Enter the seventeenth number: \");\n    scanf(\"%d\", &q);\n\n    printf(\"Enter the eighteenth number: \");\n    scanf(\"%d\", &r);\n\n    printf(\"Enter the nineteenth number: \");\n    scanf(\"%d\", &s);\n\n    printf(\"Enter the twentieth number: \");\n    scanf(\"%d\", &t);\n\n    printf(\"Enter the twenty-first number: \");\n    scanf(\"%d\", &u);\n\n    printf(\"Enter the twenty-second number: \");\n    scanf(\"%d\", &v);\n\n    printf(\"Enter the twenty-third number: \");\n    scanf(\"%d\", &w);\n\n    printf(\"Enter the twenty-fourth number: \");\n    scanf(\"%d\", &x);\n\n    printf(\"Enter the twenty-fifth number: \");\n    scanf(\"%d\", &y);\n\n    printf(\"Enter the twenty-sixth number: \");\n    scanf(\"%d\", &z);\n\n    result = a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r * s * t * u * v * w * x * y * z;\n\n    printf(\"%d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d = %d\", a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, result);\n\n    return 0;\n}"
        },
        {
            "Index": 237,
            "GT": 21,
            "Query": "2 + 1 * 7 - 1 * 7 - 5 + 8 * 2 + 8 =   ",
            "Injected CoT": "1 * 7 = 7\n8 * 2 = 16\n2 + 7 = 9\n9 - 7 = 2\n2 - 5 = -3\n-3 + 16 = 13\n13 + 8 = 21\n21 + 8 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n    int sign;\n\n    sum = 0;\n    sign = 1;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            sum = sum + sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if(str[i] == '+')\n        {\n            sum = sum + sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if(str[i] == '-')\n        {\n            sum = sum + sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + (str[i] - '0');\n        }\n    }\n\n    sum = sum + sign * num;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 239,
            "GT": -232,
            "Query": "9 - 3 * 1 * 3 * 5 * 5 - 1 - 3 * 5 =   ",
            "Injected CoT": "3 * 1 = 3\n3 * 3 = 9\n9 * 5 = 45\n45 * 5 = 225\n9 - 225 = -216\n-216 - 1 = -217\n3 * 5 = 15\n-217 - 15 =",
            "Response": " -232\n3 * 3 = 9\n-232 - 9 = -241\n3 * 1 = 3\n-241 - 3 = -244\n3 * 5 = 15\n-244 - 15 = -259\n3 * 3 = 9\n-259 - 9 = -268\n3 * 1 = 3\n-268 - 3 = -271\n3 * 5 = 15\n-271 - 15 = -286\n3 * 3 = 9\n-286 - 9 = -295\n3 * 1 = 3\n-295 - 3 = -298\n3 * 5 = 15\n-298 - 15 = -313\n3 * 3 = 9\n-313 - 9 = -322\n3 * 1 = 3\n-322 - 3 = -325\n3 * 5 = 15\n-325 - 15 = -340\n3 * 3 = 9\n-340 - 9 = -349\n3 * 1 = 3\n-349 - 3 = -352\n3 * 5 = 15\n-352 - 15 = -367\n3 * 3 = 9\n-367 - 9 = -376\n3 * 1 = 3\n-376 - 3 = -379\n3 * 5 = 15\n-379 - 15 = -394\n3 * 3 = 9\n-394 - 9 = -403\n3 * 1 = 3\n-403 - 3 = -406\n3 * 5 = 15\n-406 - 15 = -421\n3 * 3 = 9\n-421 - 9 = -430\n3 * 1 = 3\n-430 - 3 = -433\n3 * 5 = 15\n-433 - 15 = -448\n3 * 3 = 9\n-448 - 9 = -457\n3 * 1 = 3\n-457 - 3 = -460\n3 * 5 = 15\n-460 - 15 = -475\n3 * 3 = 9\n-475 - 9 = -484\n3 * 1 = 3\n-484 - 3 = -487\n3 * 5 = 15\n-487 - 15 = -502\n3 * 3 = 9\n-502 - 9 = -511\n3 * 1 = 3\n-511 - 3 = -514\n3 * 5 = 15\n-514 - 15 = -529\n3 * 3 = 9\n-529 - 9 = -538\n3 * 1 = 3\n-538 - 3 = -541\n3 * 5 = 15\n-541 - 15 = -556\n3 * 3 = 9\n-556 - 9 = -565\n3 * 1 = 3\n-565 - 3 = -568\n3 * 5 = 15\n-568 - 15 = -583\n3 * 3 = 9\n-583 - 9 = -592\n3 * 1 = 3\n-592 - 3 = -595\n3 * 5 = 15\n-595 - 15 = -610\n3 * 3 = 9\n-610 - 9 = -619\n3 * 1 = 3\n-619 - 3 = -622\n3 * 5 = 15\n-622 - 15 = -637\n3 * 3 = 9\n-637 - 9 = -646\n3 * 1 = 3\n-646 - 3 = -649\n3 * 5 = 15\n-649 - 15 = -664\n3 * 3 = 9\n-664 - 9 = -673\n3 * 1 = 3\n-673 - 3 = -676\n3 * 5 = 15\n-676 - 15 = -691\n3 * 3 = 9\n-691 - 9 = -700\n3 * 1 = 3\n-700 - 3 = -703\n3 * 5 = 15\n-703 - 15 = -718\n3 * 3 = 9\n-718 - 9 = -727\n3 * 1 = 3\n-727 - 3 = -730\n3 * 5 = 15\n-730 - 15 = -745\n3 * 3 = 9\n-745 - 9 = -754\n3 * 1 = 3\n-754 - 3 = -757\n3 * 5 = 15\n-757 - 15 = -772\n3 * 3 = 9\n-772 - 9 = -781\n3 * 1 = 3\n-781 - 3 = -784\n3 * 5 = 15\n-784 - 15 = -799\n3 * 3 = 9\n-799 - 9 = -808\n3 * 1 = 3\n-808 - 3 = -811\n3 * 5 = 15\n-811 - 15 = -826\n3 * 3 = 9\n-826 - 9 = -835\n3 * 1 = 3\n-835 - 3 = -838\n3 * 5 = 15\n-838 - 15 = -853\n3 * 3 = 9\n-853 - 9 = -862\n3 * 1 = 3\n-862 - 3 = -865\n3 * 5 = 15\n-865 - 15 = -880\n3 * 3 = 9\n-880 - 9 = -889\n3 * 1 = 3\n-889 - 3 = -892\n3 * 5 = 15\n-892 - 15 = -907\n3 * 3 = 9\n-907 - 9 = -916\n3 * 1 = 3\n-916 - 3 = -919\n3 * 5 = 15\n-919 - 15 = -934\n3 * 3 = 9\n-934 - 9 = -943\n3 * 1 = 3\n-943 - 3 = -946\n3 * 5 = 15\n-946 - 15 = -961\n3 * 3 = 9\n-961 - 9 = -970\n3 * 1 = 3\n-970 - 3 = -973\n3 * 5 = 15\n-973 - 15 = -988\n3 * 3 = 9\n-988 - 9 = -997\n3 * 1 = 3\n-997 - 3 = -1000\n3 * 5 = 15\n-1000 - 15 = -1015\n3 * 3 = 9\n-1015 - 9 = -1024\n3 * 1 = 3\n-1024 - 3 = -1027\n3 * 5 = 15\n-1027 - 15 = -1042\n3 * 3 = 9\n-1042 - 9 = -1051\n3 * 1 = 3\n-1051 - 3 = -1054\n3 * 5 = 15\n-1054 - 15 = -1069\n3 * 3 = 9\n-1069 - 9 = -1078\n3 * 1 = 3\n-1078 - 3 = -1081\n3 * 5 = 15\n-1081 - 15 = -1096\n3 * 3 = 9\n-1096 - 9 = -1105\n3 * 1 = 3\n-1105 - 3 = -1108\n3 * 5 = 15\n-1108 - 15 = -1123\n3 * 3 = 9\n-1123 - 9 = -1132\n3 * 1 = 3\n-1132 - 3 = -1135\n3 * 5 = 15\n-1135 - 15 = -1150\n3 * 3 = 9\n-1150 - 9 = -1159\n3 * 1 = 3\n-1159 - 3 = -1162\n3 * 5 = 15\n-1162 - 15 = -1177\n3 * 3 = 9\n-1177 - 9 = -1186\n3 * 1 = 3\n-1186 - 3 = -1189\n3 * 5 = 15\n-1189 - 15 = -1204\n3 * 3 = 9\n-1204 - 9 = -1213\n3 * 1 = 3\n-1213 - 3 = -1216\n3 * 5 = 15\n-1216 - 15 = -1231\n3 * 3 = 9\n-1231 - 9 = -1240\n3 * 1 = 3\n-1240 - 3 = -1243\n3 * 5 = 15\n-1243 - 15 = -1258\n3 * 3 = 9\n-1258 - 9 = -1267\n3 * 1 = 3\n-1267 - 3 = -1270\n3 * 5 = 15\n-1270 - 15 = -1285\n3 * 3 = 9\n-1285 - 9 = -1294\n3 * 1 = 3\n-1294 - 3 = -1297\n3 * 5 = 15\n-1297 - 15 = -1312\n3 * 3 = 9\n-1312 - 9 = -1321\n3 * 1 = 3\n-1321 - 3 = -1324\n3 * 5 = 15\n-1324 - 15 = -1339\n3 * 3 = 9\n-1339 - 9 = -1348\n3 * 1 = 3\n-1348 - 3 = -1351\n3 * 5 = 15\n-1351 - 15 = -1366\n3 * 3 = 9\n-1366 - 9 = -1375\n3 * 1 = 3\n-1375 - 3 = -1378\n3 * 5 = 15\n-1378 - 15 = -1393\n3 * 3 = 9\n-1393 - 9 = -1402\n3 * 1 = 3\n-1402 - 3 = -1405\n3 * 5 = 15\n-1405 - 15 = -1420\n3 * 3 = 9\n-1420 - 9 = -1429\n3 * 1 =",
            "Extract-Response": " -1429"
        },
        {
            "Index": 240,
            "GT": 1,
            "Query": "9 - 8 + 1 - 7 + 6 - 8 + 4 + 5 - 1 =   ",
            "Injected CoT": "9 - 8 = 1\n1 + 1 = 2\n2 - 7 = -5\n-5 + 6 = 1\n1 - 8 = -7\n-7 + 4 = -3\n-3 + 5 = 2\n2 - 1 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 241,
            "GT": 99,
            "Query": "1 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 9 = 81\n81 + 9 = 90\n90 - 5 = 85\n85 + 4 = 89\n89 - 2 = 87\n87 + 3 = 90\n90 + 9 =",
            "Response": " 99\n\n1 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 = 99",
            "Extract-Response": " 99\n\n*/"
        },
        {
            "Index": 242,
            "GT": -25,
            "Query": "3 + 2 - 8 - 7 - 3 * 3 - 4 + 1 - 3 =   ",
            "Injected CoT": "3 + 2 = 5\n5 - 8 = -3\n-3 - 7 = -10\n3 * 3 = 9\n-10 - 9 = -19\n-19 - 4 = -23\n-23 + 1 = -22\n-22 - 3 =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\n\nThe number of operations is between [1, 10000].\nThe answer is guaranteed to be fit in 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    nums.push(applyOp(op1, op2, ops.top()));\n                    ops.pop();\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            nums.push(applyOp(op1, op2, ops.top()));\n            ops.pop();\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 244,
            "GT": 20,
            "Query": "6 + 9 + 8 + 6 + 3 + 4 - 9 - 4 - 3 =   ",
            "Injected CoT": "6 + 9 = 15\n15 + 8 = 23\n23 + 6 = 29\n29 + 3 = 32\n32 + 4 = 36\n36 - 9 = 27\n27 - 4 = 23\n23 - 3 =",
            "Response": " 20\n\n20",
            "Extract-Response": " 20\n\n*/"
        },
        {
            "Index": 245,
            "GT": 13,
            "Query": "6 + 4 * 2 - 2 * 3 + 6 + 4 - 8 + 3 =   ",
            "Injected CoT": "4 * 2 = 8\n6 + 8 = 14\n2 * 3 = 6\n14 - 6 = 8\n8 + 4 = 12\n12 - 8 = 4\n4 + 3 =",
            "Response": " 7\n7 + 8 = 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 246,
            "GT": -24,
            "Query": "2 * 2 + 1 - 4 - 6 - 2 * 8 + 4 - 7 =   ",
            "Injected CoT": "2 * 2 = 4\n4 + 1 = 5\n5 - 4 = 1\n1 - 6 = -5\n2 * 8 = 16\n-5 - 16 = -21\n-21 + 4 = -17\n-17 - 7 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 247,
            "GT": 17,
            "Query": "3 * 5 * 2 + 4 + 9 - 3 * 8 - 6 + 4 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 2 = 30\n30 + 4 = 34\n34 + 9 = 43\n3 * 8 = 24\n24 + 6 = 30\n30 - 30 = 0\n0 + 4 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 249,
            "GT": 157,
            "Query": "4 * 8 + 7 - 6 + 8 - 4 + 5 * 8 * 3 =   ",
            "Injected CoT": "4 * 8 = 32\n5 * 8 = 40\n40 * 3 = 120\n32 + 7 = 39\n39 - 6 = 33\n33 + 8 = 41\n41 - 4 = 37\n37 + 120 =",
            "Response": " 157",
            "Extract-Response": " 157\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add the\n     * previously stored number to result.\n     * If current character is '-', then subtract\n     * the previously stored number from result.\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add num to result */\n        if(str[i]=='+')\n        {\n            result = result + num;\n\n            /* Reset num to 0 */\n            num = 0;\n\n            /* If current character is '-', subtract num from result */\n        }\n        else if(str[i]=='-')\n        {\n            result = result + num;\n\n            /* Reset num to 0 */\n            num = 0;\n\n            /* Change sign of result */\n            sign = sign * -1;\n        }\n        else if(str[i]=='*')\n        {\n            result = result * num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='/')\n        {\n            result = result / num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='%')\n        {\n            result = result % num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='^')\n        {\n            result = pow(result, num);\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else\n        {\n            /* If current character is not operator, add it to num */\n            num = (num * 10) + (str[i] - '0');\n        }\n    }\n\n    /* If num is not 0, then add it to result */\n    if(num!=0)\n    {\n        result = result + num;\n    }\n\n    /* Apply sign */\n    result = sign * result;\n\n    printf(\"Final result = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 250,
            "GT": -455,
            "Query": "9 - 6 * 2 * 4 * 3 - 4 * 4 * 5 * 4 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 4 = 48\n48 * 3 = 144\n4 * 4 = 16\n16 * 5 = 80\n80 * 4 = 320\n9 - 144 = -135\n-135 - 320 =",
            "Response": " -455\n-455 - 16 = -471\n-471 - 12 = -483\n-483 = -483\n\n-483 = -483",
            "Extract-Response": " -483\n\n*/"
        },
        {
            "Index": 254,
            "GT": 59,
            "Query": "5 * 6 + 4 + 6 - 1 - 3 + 6 * 3 + 5 =   ",
            "Injected CoT": "5 * 6 = 30\n6 * 3 = 18\n30 + 4 = 34\n34 + 6 = 40\n40 - 1 = 39\n39 - 3 = 36\n18 + 36 = 54\n54 + 5 =",
            "Response": " 59",
            "Extract-Response": "\n\n59"
        },
        {
            "Index": 255,
            "GT": 21,
            "Query": "2 * 8 - 2 + 7 - 8 - 4 - 1 + 6 + 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 2 = 14\n14 + 7 = 21\n21 - 8 = 13\n13 - 4 = 9\n9 - 1 = 8\n8 + 6 = 14\n14 + 7 =",
            "Response": " 21",
            "Extract-Response": "\n\n21"
        },
        {
            "Index": 257,
            "GT": 36,
            "Query": "5 * 6 + 1 + 3 + 3 - 8 + 7 + 9 - 9 =   ",
            "Injected CoT": "5 * 6 = 30\n30 + 1 = 31\n31 + 3 = 34\n34 + 3 = 37\n37 - 8 = 29\n29 + 7 = 36\n36 + 9 = 45\n45 - 9 =",
            "Response": " 36",
            "Extract-Response": " 36\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <stack>\n\nusing namespace std;\n\n#define ll long long int\n#define pii pair<int,int>\n\nint main(){\n\tstring s;\n\tcin>>s;\n\tint n = s.length();\n\tint ans = 0;\n\tint curr = 0;\n\tint sign = 1;\n\tfor(int i = 0; i<n; i++){\n\t\tif(s[i]=='+'){\n\t\t\tans += curr;\n\t\t\tcurr = 0;\n\t\t\tsign = 1;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tans += curr;\n\t\t\tcurr = 0;\n\t\t\tsign = -1;\n\t\t}\n\t\telse{\n\t\t\tcurr = curr*10 + (s[i]-'0')*sign;\n\t\t}\n\t}\n\tans += curr;\n\tcout<<ans;\n}"
        },
        {
            "Index": 259,
            "GT": 483,
            "Query": "9 + 7 - 1 + 7 * 9 * 7 - 5 + 4 * 8 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 7 = 441\n9 + 7 = 16\n16 - 1 = 15\n441 + 15 = 456\n4 * 8 = 32\n456 - 5 = 451\n451 + 32 =",
            "Response": " 483",
            "Extract-Response": " 483.\n\nNote:\n\n1 <= N <= 10^9\n*/\n\nclass Solution {\npublic:\n    int consecutiveNumbersSum(int N) {\n        int ans = 0;\n        for (int i = 1; i * i <= 2 * N; ++i) {\n            if ((2 * N % i == 0) && ((i + 2 * N / i) % 2 == 1)) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 261,
            "GT": -49,
            "Query": "2 - 2 - 7 + 1 * 2 * 9 - 5 * 3 * 4 =   ",
            "Injected CoT": "2 - 2 = 0\n0 - 7 = -7\n1 * 2 = 2\n2 * 9 = 18\n5 * 3 = 15\n15 * 4 = 60\n18 - 60 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nThe answer is guaranteed to be fit in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 263,
            "GT": 29,
            "Query": "8 - 6 - 7 + 4 * 4 * 2 - 1 - 5 + 8 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 4 = 32\n8 - 6 = 2\n2 - 7 = -5\n-5 + 32 = 27\n27 - 1 = 26\n26 - 5 = 21\n21 + 8 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 265,
            "GT": 251,
            "Query": "9 - 5 * 3 + 5 * 1 * 6 * 9 - 8 - 5 =   ",
            "Injected CoT": "5 * 3 = 15\n1 * 6 = 6\n6 * 9 = 54\n15 + 54 = 69\n9 - 15 = -6\n-6 + 69 = 63\n63 - 8 = 55\n55 - 5 =",
            "Response": " 50",
            "Extract-Response": " 50\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= current;\n            current = 0;\n        } else if (s[i] == '/') {\n            operation /= current;\n            current = 0;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 267,
            "GT": 74,
            "Query": "5 + 1 - 7 - 8 + 6 + 8 * 9 - 2 + 7 =   ",
            "Injected CoT": "8 * 9 = 72\n5 + 1 = 6\n6 - 7 = -1\n-1 - 8 = -9\n-9 + 6 = -3\n-3 + 72 = 69\n69 - 2 = 67\n67 + 7 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '%')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '=')\n        {\n            sign = 1;\n        }\n        else if(input[i] == ' ')\n        {\n            sign = 1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n\n                i++;\n            }\n\n            sum = sum + num * sign;\n\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 268,
            "GT": 38,
            "Query": "5 * 3 + 2 * 6 - 2 + 9 + 9 - 3 - 2 =   ",
            "Injected CoT": "5 * 3 = 15\n2 * 6 = 12\n15 + 12 = 27\n9 + 9 = 18\n27 - 2 = 25\n18 - 3 = 15\n25 - 2 = 23\n15 + 23 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int result = 0;\n    int sign = 1;\n    int i = 0;\n    while (i < s.size())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '+')\n        {\n            sign = 1;\n            i++;\n            continue;\n        }\n        if (s[i] == '-')\n        {\n            sign = -1;\n            i++;\n            continue;\n        }\n        int num = 0;\n        while (i < s.size() && s[i] >= '0' && s[i] <= '9')\n        {\n            num = num * 10 + s[i] - '0';\n            i++;\n        }\n        result += sign * num;\n    }\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 269,
            "GT": -616,
            "Query": "3 * 9 + 2 - 7 + 2 - 8 * 4 * 4 * 5 =   ",
            "Injected CoT": "3 * 9 = 27\n27 + 2 = 29\n29 - 7 = 22\n22 + 2 = 24\n8 * 4 = 32\n32 * 4 = 128\n128 * 5 = 640\n24 - 640 =",
            "Response": " -616",
            "Extract-Response": " -616.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1,000,000, 1,000,000].\n\n*/\n\nclass Solution {\npublic:\n    int sumSubarrayMins(vector<int>& A) {\n        int n = A.size();\n        int mod = 1e9 + 7;\n        stack<int> st;\n        int ans = 0;\n        for (int i = 0; i <= n; i++) {\n            int cur = i == n ? 0 : A[i];\n            while (!st.empty() && A[st.top()] >= cur) {\n                int index = st.top();\n                st.pop();\n                int left = st.empty() ? -1 : st.top();\n                int right = i;\n                ans = (ans + A[index] * (index - left) * (right - index)) % mod;\n            }\n            st.push(i);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 272,
            "GT": 49,
            "Query": "1 + 5 + 2 + 6 + 9 - 7 + 5 * 6 + 3 =   ",
            "Injected CoT": "5 * 6 = 30\n1 + 5 = 6\n6 + 2 = 8\n8 + 6 = 14\n14 + 9 = 23\n23 - 7 = 16\n16 + 30 = 46\n46 + 3 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    char *p;\n\n    printf(\"Enter an expression: \");\n    fgets(input, MAX_SIZE, stdin);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == '+')\n        {\n            continue;\n        }\n        else if(input[i] == '-')\n        {\n            continue;\n        }\n        else if(input[i] == '*')\n        {\n            continue;\n        }\n        else if(input[i] == '/')\n        {\n            continue;\n        }\n        else if(input[i] == '%')\n        {\n            continue;\n        }\n        else if(input[i] == '=')\n        {\n            break;\n        }\n        else if(input[i] == ' ')\n        {\n            continue;\n        }\n        else if(input[i] == '\\n')\n        {\n            break;\n        }\n        else if(input[i] == '\\t')\n        {\n            continue;\n        }\n        else if(input[i] == '\\r')\n        {\n            continue;\n        }\n        else if(input[i] == '\\v')\n        {\n            continue;\n        }\n        else if(input[i] == '\\f')\n        {\n            continue;\n        }\n        else if(input[i] == '\\a')\n        {\n            continue;\n        }\n        else if(input[i] == '\\b')\n        {\n            continue;\n        }\n        else if(input[i] == '\\\\')\n        {\n            continue;\n        }\n        else if(input[i] == '\\'')\n        {\n            continue;\n        }\n        else if(input[i] == '\\\"')\n        {\n            continue;\n        }\n        else if(input[i] == '?')\n        {\n            continue;\n        }\n        else if(input[i] == '>')\n        {\n            continue;\n        }\n        else if(input[i] == '<')\n        {\n            continue;\n        }\n        else if(input[i] == '&')\n        {\n            continue;\n        }\n        else if(input[i] == '|')\n        {\n            continue;\n        }\n        else if(input[i] == '^')\n        {\n            continue;\n        }\n        else if(input[i] == '~')\n        {\n            continue;\n        }\n        else if(input[i] == '!')\n        {\n            continue;\n        }\n        else if(input[i] == '(')\n        {\n            continue;\n        }\n        else if(input[i] == ')')\n        {\n            continue;\n        }\n        else if(input[i] == '{')\n        {\n            continue;\n        }\n        else if(input[i] == '}')\n        {\n            continue;\n        }\n        else if(input[i] == '[')\n        {\n            continue;\n        }\n        else if(input[i] == ']')\n        {\n            continue;\n        }\n        else if(input[i] == '.')\n        {\n            continue;\n        }\n        else if(input[i] == ',')\n        {\n            continue;\n        }\n        else if(input[i] == ';')\n        {\n            continue;\n        }\n        else if(input[i] == ':')\n        {\n            continue;\n        }\n        else if(input[i] == '#')\n        {\n            continue;\n        }\n        else if(input[i] == '$')\n        {\n            continue;\n        }\n        else if(input[i] == '_')\n        {\n            continue;\n        }\n        else if(input[i] == '@')\n        {\n            continue;\n        }\n        else if(input[i] == '`')\n        {\n            continue;\n        }\n        else if(input[i] == ' ')\n        {\n            continue;\n        }\n        else if(input[i] == '\\0')\n        {\n            break;\n        }\n        else\n        {\n            num = atoi(&input[i]);\n            sum = sum + num;\n            i++;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 274,
            "GT": 174,
            "Query": "7 * 6 * 4 - 7 - 5 + 8 + 1 + 6 + 3 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 4 = 168\n168 - 7 = 161\n161 - 5 = 156\n156 + 8 = 164\n164 + 1 = 165\n165 + 6 = 171\n171 + 3 =",
            "Response": " 174",
            "Extract-Response": " 174\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 275,
            "GT": 8,
            "Query": "1 + 3 + 8 - 6 + 5 * 2 - 4 * 4 + 8 =   ",
            "Injected CoT": "5 * 2 = 10\n4 * 4 = 16\n1 + 3 = 4\n8 - 6 = 2\n10 + 2 = 12\n12 - 16 = -4\n-4 + 8 = 4\n4 + 5 = 9\n9 + 4 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 276,
            "GT": 43,
            "Query": "5 + 8 * 6 + 7 * 1 + 2 - 9 - 3 - 7 =   ",
            "Injected CoT": "8 * 6 = 48\n7 * 1 = 7\n5 + 48 = 53\n53 + 7 = 60\n60 + 2 = 62\n62 - 9 = 53\n53 - 3 = 50\n50 - 7 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 277,
            "GT": 6,
            "Query": "3 + 9 - 4 - 7 + 4 - 7 + 8 - 1 + 1 =   ",
            "Injected CoT": "3 + 9 = 12\n12 - 4 = 8\n8 - 7 = 1\n1 + 4 = 5\n5 - 7 = -2\n-2 + 8 = 6\n6 - 1 = 5\n5 + 1 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 279,
            "GT": 74,
            "Query": "7 * 4 - 2 + 9 * 5 + 3 + 2 + 7 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n9 * 5 = 45\n28 - 2 = 26\n26 + 45 = 71\n71 + 3 = 74\n74 + 2 = 76\n76 + 7 = 83\n83 - 9 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char str[100];\n    int i, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+')\n        {\n            continue;\n        }\n        else if(str[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + (str[i] - '0');\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 282,
            "GT": -75,
            "Query": "6 * 2 + 3 - 4 - 2 - 9 * 8 - 7 - 5 =   ",
            "Injected CoT": "6 * 2 = 12\n12 + 3 = 15\n15 - 4 = 11\n11 - 2 = 9\n9 - 9 * 8 = -63\n-63 - 7 = -70\n-70 - 5 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 283,
            "GT": 381,
            "Query": "8 - 7 + 9 * 7 * 6 + 8 - 4 - 1 - 1 =   ",
            "Injected CoT": "9 * 7 = 63\n63 * 6 = 378\n8 - 7 = 1\n1 + 378 = 379\n379 + 8 = 387\n387 - 4 = 383\n383 - 1 = 382\n382 - 1 =",
            "Response": " 381",
            "Extract-Response": " 381\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 284,
            "GT": -73,
            "Query": "5 - 2 + 2 - 5 * 4 - 1 - 7 * 8 - 1 =   ",
            "Injected CoT": "5 - 2 = 3\n3 + 2 = 5\n5 - 5 * 4 = -15\n-15 - 1 = -16\n-7 * 8 = -56\n-16 - 56 = -72\n-72 - 1 =",
            "Response": " -73",
            "Extract-Response": " -73.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 287,
            "GT": 3036,
            "Query": "2 * 9 * 7 * 1 * 3 * 8 + 9 + 8 - 5 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 7 = 126\n126 * 1 = 126\n126 * 3 = 378\n378 * 8 = 3024\n3024 + 9 = 3033\n3033 + 8 = 3041\n3041 - 5 =",
            "Response": " 3036\n\n3036",
            "Extract-Response": "\n\n3036"
        },
        {
            "Index": 289,
            "GT": 35,
            "Query": "4 * 5 + 8 - 8 + 9 + 3 + 9 - 2 * 3 =   ",
            "Injected CoT": "4 * 5 = 20\n20 + 8 = 28\n28 - 8 = 20\n20 + 9 = 29\n29 + 3 = 32\n32 + 9 = 41\n2 * 3 = 6\n41 - 6 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 291,
            "GT": -6,
            "Query": "1 + 3 - 4 + 8 + 5 - 1 - 4 * 6 + 6 =   ",
            "Injected CoT": "4 * 6 = 24\n1 + 3 = 4\n4 - 4 = 0\n0 + 8 = 8\n8 + 5 = 13\n13 - 1 = 12\n12 - 24 = -12\n-12 + 6 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 292,
            "GT": -111,
            "Query": "4 + 8 + 6 - 3 - 8 * 4 * 4 + 3 - 1 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 4 = 128\n4 + 8 = 12\n12 + 6 = 18\n18 - 3 = 15\n15 - 128 = -113\n-113 + 3 = -110\n-110 - 1 =",
            "Response": " -111",
            "Extract-Response": " -111.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 294,
            "GT": 39,
            "Query": "9 * 6 + 5 - 7 - 6 + 1 - 2 - 2 - 4 =   ",
            "Injected CoT": "9 * 6 = 54\n54 + 5 = 59\n59 - 7 = 52\n52 - 6 = 46\n46 + 1 = 47\n47 - 2 = 45\n45 - 2 = 43\n43 - 4 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 295,
            "GT": -8035,
            "Query": "5 * 7 - 6 - 7 * 4 * 8 * 4 * 1 * 9 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 8 = 224\n224 * 4 = 896\n896 * 1 = 896\n896 * 9 = 8064\n5 * 7 = 35\n35 - 6 = 29\n29 - 8064 =",
            "Response": " -8035\n\n-8035",
            "Extract-Response": " -8035"
        },
        {
            "Index": 298,
            "GT": 275,
            "Query": "3 - 6 + 8 * 1 * 8 * 5 - 1 * 7 * 6 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 5 = 40\n1 * 7 = 7\n7 * 6 = 42\n-6 + 8 = 2\n3 + 2 = 5\n5 + 40 = 45\n45 - 42 = 3\n3 - 42 = -39\n-39 + 40 = 1\n1 - 1 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 299,
            "GT": 332,
            "Query": "3 + 4 + 5 + 9 * 4 * 9 - 8 + 7 - 3 =   ",
            "Injected CoT": "3 + 4 = 7\n7 + 5 = 12\n9 * 4 = 36\n36 * 9 = 324\n324 - 8 = 316\n316 + 7 = 323\n323 - 3 =",
            "Response": " 320",
            "Extract-Response": "\n\n320"
        },
        {
            "Index": 300,
            "GT": 53,
            "Query": "6 * 2 + 4 * 6 + 1 * 8 + 7 - 3 + 5 =   ",
            "Injected CoT": "6 * 2 = 12\n4 * 6 = 24\n1 * 8 = 8\n12 + 24 = 36\n36 + 8 = 44\n44 + 7 = 51\n51 - 3 = 48\n48 + 5 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){\n            int x = i < 0 ? 0 : num1.charAt(i) - '0';\n            int y = j < 0 ? 0 : num2.charAt(j) - '0';\n            sb.append((x + y + carry) % 10);\n            carry = (x + y + carry) / 10;\n        }\n        return sb.reverse().toString();\n    }\n}"
        },
        {
            "Index": 301,
            "GT": -5,
            "Query": "1 * 5 + 6 + 5 + 9 - 4 - 2 - 3 * 8 =   ",
            "Injected CoT": "1 * 5 = 5\n5 + 6 = 11\n11 + 5 = 16\n16 + 9 = 25\n25 - 4 = 21\n21 - 2 = 19\n3 * 8 = 24\n19 - 24 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the task.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0"
        },
        {
            "Index": 305,
            "GT": -28,
            "Query": "9 - 4 * 6 + 2 + 7 + 1 - 8 * 3 + 1 =   ",
            "Injected CoT": "4 * 6 = 24\n9 - 24 = -15\n-15 + 2 = -13\n-13 + 7 = -6\n-6 + 1 = -5\n8 * 3 = 24\n-5 - 24 = -29\n-29 + 1 =",
            "Response": " -28",
            "Extract-Response": " -28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 306,
            "GT": 57,
            "Query": "6 + 4 * 1 + 4 * 9 + 5 + 5 + 6 - 5 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 9 = 36\n6 + 4 = 10\n10 + 36 = 46\n46 + 5 = 51\n51 + 5 = 56\n56 + 6 = 62\n62 - 5 =",
            "Response": " 57\n\n57",
            "Extract-Response": " 57\n\n*/"
        },
        {
            "Index": 308,
            "GT": -53,
            "Query": "7 - 4 - 9 - 7 * 9 + 6 * 2 + 3 + 1 =   ",
            "Injected CoT": "7 - 4 = 3\n3 - 9 = -6\n7 * 9 = 63\n-6 - 63 = -69\n6 * 2 = 12\n-69 + 12 = -57\n-57 + 3 = -54\n-54 + 1 =",
            "Response": " -53",
            "Extract-Response": " -53.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<string>& ops, int i, int j) {\n        if (i == j) {\n            return stoi(ops[i]);\n        }\n        int ans = 0;\n        for (int k = i; k < j; k++) {\n            if (ops[k] == \"+\") {\n                ans += calc(ops, i, k) + calc(ops, k + 1, j);\n            } else if (ops[k] == \"-\") {\n                ans += calc(ops, i, k) - calc(ops, k + 1, j);\n            } else if (ops[k] == \"*\") {\n                ans += calc(ops, i, k) * calc(ops, k + 1, j);\n            } else if (ops[k] == \"/\") {\n                ans += calc(ops, i, k) / calc(ops, k + 1, j);\n            }\n        }\n        return ans;\n    }\n    int evalRPN(vector<string>& ops) {\n        return calc(ops, 0, ops.size() - 1);\n    }\n};"
        },
        {
            "Index": 310,
            "GT": -13,
            "Query": "3 + 8 - 6 - 8 - 8 - 5 + 7 - 8 + 4 =   ",
            "Injected CoT": "3 + 8 = 11\n11 - 6 = 5\n5 - 8 = -3\n-3 - 8 = -11\n-11 - 5 = -16\n-16 + 7 = -9\n-9 - 8 = -17\n-17 + 4 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = nums[0];\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 311,
            "GT": 35,
            "Query": "3 - 5 - 8 * 2 + 6 * 8 - 8 + 4 + 9 =   ",
            "Injected CoT": "-8 * 2 = -16\n6 * 8 = 48\n-5 - 16 = -21\n-21 + 48 = 27\n-8 + 4 = -4\n-4 + 9 = 5\n3 + 5 =",
            "Response": " 8\n\n8",
            "Extract-Response": " 8"
        },
        {
            "Index": 312,
            "GT": -10,
            "Query": "1 * 1 - 2 * 6 + 9 - 6 - 5 * 1 + 3 =   ",
            "Injected CoT": "1 * 1 = 1\n2 * 6 = 12\n1 - 12 = -11\n-11 + 9 = -2\n-2 - 6 = -8\n5 * 1 = 5\n-8 - 5 = -13\n-13 + 3 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 315,
            "GT": -36,
            "Query": "7 - 7 - 2 - 5 + 7 - 5 - 4 * 6 - 7 =   ",
            "Injected CoT": "7 - 7 = 0\n0 - 2 = -2\n-2 - 5 = -7\n-7 + 7 = 0\n0 - 5 = -5\n-5 - 4 * 6 = -29\n-29 - 7 =",
            "Response": " -36",
            "Extract-Response": " -36\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <stdio.h>\n#include <sstream>\n#include <set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0)\n            return 0;\n        int i = 0;\n        int num = 0;\n        int sign = 1;\n        stack<int> st;\n        while(i < len){\n            if(s[i] >= '0' && s[i] <= '9'){\n                num = num * 10 + s[i] - '0';\n            }\n            else if(s[i] == '+'){\n                st.push(sign);\n                st.push(num);\n                num = 0;\n                sign = 1;\n            }\n            else if(s[i] == '-'){\n                st.push(sign);\n                st.push(num);\n                num = 0;\n                sign = -1;\n            }\n            else if(s[i] == '('){\n                st.push(sign);\n                st.push(num);\n                num = 0;\n                sign = 1;\n            }\n            else if(s[i] == ')'){\n                int cur = st.top();\n                st.pop();\n                int curSign = st.top();\n                st.pop();\n                num = curSign * num + cur;\n            }\n            i++;\n        }\n        return num;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    string s = \"(1+(4+5+2)-3)+(6+8)\";\n    int res = sol.calculate(s);\n    cout<<res<<endl;\n    return 0;\n}"
        },
        {
            "Index": 316,
            "GT": -13,
            "Query": "9 - 9 + 5 + 6 + 7 - 7 * 5 - 1 + 5 =   ",
            "Injected CoT": "9 - 9 = 0\n0 + 5 = 5\n5 + 6 = 11\n11 + 7 = 18\n7 * 5 = 35\n18 - 35 = -17\n-17 - 1 = -18\n-18 + 5 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 319,
            "GT": 24,
            "Query": "5 + 9 - 1 + 8 + 5 + 2 * 4 - 2 * 5 =   ",
            "Injected CoT": "2 * 4 = 8\n2 * 5 = 10\n5 + 9 = 14\n14 - 1 = 13\n13 + 8 = 21\n21 + 5 = 26\n26 - 10 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 321,
            "GT": -179,
            "Query": "1 + 7 * 2 - 6 * 5 * 6 - 9 - 7 + 2 =   ",
            "Injected CoT": "7 * 2 = 14\n6 * 5 = 30\n30 * 6 = 180\n1 + 14 = 15\n15 - 180 = -165\n-165 - 9 = -174\n-174 - 7 = -181\n-181 + 2 =",
            "Response": " -179",
            "Extract-Response": " -179.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 322,
            "GT": -112,
            "Query": "9 - 6 + 8 - 7 * 2 * 6 + 3 - 6 * 7 =   ",
            "Injected CoT": "-7 * 2 = -14\n-14 * 6 = -84\n9 - 6 = 3\n3 + 8 = 11\n11 - 84 = -73\n-73 + 3 = -70\n-6 * 7 = -42\n-70 - 42 =",
            "Response": " -112",
            "Extract-Response": " -112.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef operations(n):\n    # Write your code here\n    return 0"
        },
        {
            "Index": 325,
            "GT": 21,
            "Query": "3 + 1 - 6 - 9 + 7 * 4 + 5 - 5 + 4 =   ",
            "Injected CoT": "7 * 4 = 28\n3 + 1 = 4\n4 - 6 = -2\n-2 - 9 = -11\n-11 + 28 = 17\n17 + 5 = 22\n22 - 5 = 17\n17 + 4 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 326,
            "GT": 109,
            "Query": "1 - 9 + 8 - 6 + 3 * 5 * 7 + 7 + 3 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 7 = 105\n1 - 9 = -8\n-8 + 8 = 0\n0 - 6 = -6\n-6 + 105 = 99\n99 + 7 = 106\n106 + 3 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int num;\n    int sign = 1;\n\n    /* Reads and stores the string */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /* Iterates through each character of string */\n    for(i=0; i<len; i++)\n    {\n        /* If the current character is a digit then converts it\n         * into number\n         */\n        if(str[i] >= '0' && str[i] <= '9')\n        {\n            num = str[i] - '0';\n        }\n\n        /* If the current character is an operator, then perform\n         * the required operation\n         */\n        else\n        {\n            /* If the previous character is a number and current\n             * character is an operator, then calculate the result\n             */\n            if(i > 0 && (str[i] == '+' || str[i] == '-'))\n            {\n                result = (result * 10) + num;\n                result = result * sign;\n                sign = 1;\n            }\n\n            /* If the current character is '+', then update the sign\n             * to positive\n             */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n\n            /* If the current character is '-', then update the sign\n             * to negative\n             */\n            else if(str[i] == '-')\n            {\n                sign = -1;\n            }\n\n            /* If the current character is '*', then multiply the\n             * previous result with next number\n             */\n            else if(str[i] == '*')\n            {\n                result = result * num;\n            }\n\n            /* If the current character is '/', then divide the\n             * previous result with next number\n             */\n            else if(str[i] == '/')\n            {\n                result = result / num;\n            }\n\n            /* If the current character is '%', then calculate the\n             * modulus of previous result with next number\n             */\n            else if(str[i] == '%')\n            {\n                result = result % num;\n            }\n\n            /* If the current character is '^', then calculate the\n             * power of previous result with next number\n             */\n            else if(str[i] == '^')\n            {\n                result = pow(result, num);\n            }\n        }\n    }\n\n    /* If the string ends with a number */\n    if(i > 0 && (str[i-1] >= '0' && str[i-1] <= '9'))\n    {\n        result = (result * 10) + num;\n        result = result * sign;\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 327,
            "GT": 376,
            "Query": "4 + 6 * 7 + 4 - 9 - 1 + 8 * 6 * 7 =   ",
            "Injected CoT": "6 * 7 = 42\n4 + 42 = 46\n46 + 4 = 50\n50 - 9 = 41\n41 - 1 = 40\n8 * 6 = 48\n48 * 7 = 336\n40 + 336 =",
            "Response": " 376",
            "Extract-Response": "\n\n376"
        },
        {
            "Index": 328,
            "GT": 365,
            "Query": "8 * 8 * 1 + 8 * 8 * 5 - 8 - 3 - 8 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 1 = 64\n64 * 5 = 320\n8 * 8 = 64\n64 * 5 = 320\n64 + 320 = 384\n384 - 8 = 376\n376 - 3 = 373\n373 - 8 =",
            "Response": " 365\n\n365\n\n*/\n\n//Answer//\n\nlet a = 8;\nlet b = 8;\nlet c = 1;\nlet d = 5;\nlet e = 8;\nlet f = 8;\nlet g = 5;\n\nconsole.log(a * b * c + a * b * d - a - b - e * f * g);",
            "Extract-Response": " 365"
        },
        {
            "Index": 329,
            "GT": 47,
            "Query": "2 * 4 * 1 * 5 + 9 - 9 + 3 + 8 - 4 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 1 = 8\n8 * 5 = 40\n40 + 9 = 49\n49 - 9 = 40\n40 + 3 = 43\n43 + 8 = 51\n51 - 4 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= currentNumber;\n            currentNumber = 0;\n        } else if (s[i] == '/') {\n            operation /= currentNumber;\n            currentNumber = 0;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 331,
            "GT": -8,
            "Query": "3 * 2 * 2 - 7 - 7 - 4 + 9 - 8 - 3 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 2 = 12\n12 - 7 = 5\n5 - 7 = -2\n-2 - 4 = -6\n-6 + 9 = 3\n3 - 8 = -5\n-5 - 3 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 333,
            "GT": -946,
            "Query": "1 + 8 - 6 + 6 + 5 - 8 * 5 * 6 * 4 =   ",
            "Injected CoT": "-8 * 5 = -40\n-40 * 6 = -240\n-240 * 4 = -960\n1 + 8 = 9\n9 - 6 = 3\n3 + 6 = 9\n9 + 5 = 14\n14 - (-960) =",
            "Response": " 974",
            "Extract-Response": " 974\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentOperation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] >= '0' && s[i] <= '9') {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        } else {\n            if (currentOperation == '+') {\n                result += currentNumber;\n            } else if (currentOperation == '-') {\n                result -= currentNumber;\n            } else if (currentOperation == '*') {\n                result *= currentNumber;\n            } else if (currentOperation == '/') {\n                result /= currentNumber;\n            }\n            currentNumber = 0;\n            currentOperation = s[i];\n        }\n    }\n\n    if (currentOperation == '+') {\n        result += currentNumber;\n    } else if (currentOperation == '-') {\n        result -= currentNumber;\n    } else if (currentOperation == '*') {\n        result *= currentNumber;\n    } else if (currentOperation == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 334,
            "GT": -11,
            "Query": "9 - 5 - 8 * 5 + 4 + 9 * 4 - 5 * 3 =   ",
            "Injected CoT": "8 * 5 = 40\n9 - 5 = 4\n4 - 40 = -36\n9 * 4 = 36\n5 * 3 = 15\n-36 + 4 = -32\n-32 + 36 = 4\n4 + 15 =",
            "Response": " 19",
            "Extract-Response": "\n\n19."
        },
        {
            "Index": 335,
            "GT": -22,
            "Query": "8 - 4 * 3 - 7 * 4 + 8 * 2 + 3 - 9 =   ",
            "Injected CoT": "4 * 3 = 12\n7 * 4 = 28\n8 * 2 = 16\n8 - 12 = -4\n-4 - 28 = -32\n-32 + 16 = -16\n-16 + 3 = -13\n-13 - 9 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array can be negative or non-negative integers.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            res = max(res, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 336,
            "GT": -25,
            "Query": "1 + 4 * 5 + 6 * 3 - 3 * 3 * 7 - 1 =   ",
            "Injected CoT": "4 * 5 = 20\n6 * 3 = 18\n3 * 3 = 9\n9 * 7 = 63\n20 + 18 = 38\n38 - 63 = -25\n-25 - 1 = -26\n1 + (-26) =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\n\nThe number of operations won't exceed 1000.\nThe integers in the form (a * b) / c are between -1000 and 1000.\na, b, c and d are all integers.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < n; ++i) {\n            if(isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == n - 1) {\n                if(sign == '-') {\n                    st.push(-num);\n                }\n                else if(sign == '+') {\n                    st.push(num);\n                }\n                else if(sign == '*') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp * num);\n                }\n                else if(sign == '/') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 342,
            "GT": -50,
            "Query": "1 * 8 - 6 * 8 - 4 + 3 - 5 + 3 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n6 * 8 = 48\n8 - 48 = -40\n-40 - 4 = -44\n-44 + 3 = -41\n-41 - 5 = -46\n-46 + 3 = -43\n-43 - 7 =",
            "Response": " -50\n\n-50",
            "Extract-Response": " -50\n\n*/"
        },
        {
            "Index": 344,
            "GT": 18,
            "Query": "2 + 6 * 5 + 1 + 1 * 6 * 1 - 7 * 3 =   ",
            "Injected CoT": "6 * 5 = 30\n2 + 30 = 32\n1 * 6 = 6\n6 * 1 = 6\n7 * 3 = 21\n32 + 1 = 33\n33 + 6 = 39\n39 - 21 =",
            "Response": " 18",
            "Extract-Response": "\n\n18."
        },
        {
            "Index": 345,
            "GT": 114,
            "Query": "5 * 4 * 4 - 8 * 9 + 5 * 3 * 7 + 1 =   ",
            "Injected CoT": "5 * 4 = 20\n20 * 4 = 80\n8 * 9 = 72\n80 - 72 = 8\n5 * 3 = 15\n15 * 7 = 105\n8 + 105 = 113\n113 + 1 =",
            "Response": " 114",
            "Extract-Response": " 114\n</code>\n"
        },
        {
            "Index": 346,
            "GT": 40,
            "Query": "5 + 8 * 5 - 4 - 4 + 4 - 8 - 2 + 9 =   ",
            "Injected CoT": "8 * 5 = 40\n5 + 40 = 45\n45 - 4 = 41\n41 - 4 = 37\n37 + 4 = 41\n41 - 8 = 33\n33 - 2 = 31\n31 + 9 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += current;\n            current = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += current;\n            current = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += current;\n            current = 0;\n            sign = 1;\n        } else {\n            current = current * 10 + (c - '0') * sign;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 348,
            "GT": -28,
            "Query": "1 - 1 * 2 - 3 - 8 + 6 - 3 * 7 - 1 =   ",
            "Injected CoT": "1 * 2 = 2\n1 - 2 = -1\n-1 - 3 = -4\n-4 - 8 = -12\n-12 + 6 = -6\n3 * 7 = 21\n-6 - 21 = -27\n-27 - 1 =",
            "Response": " -28",
            "Extract-Response": " -28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 349,
            "GT": 387,
            "Query": "5 * 9 + 2 + 6 * 7 * 8 + 2 - 7 + 9 =   ",
            "Injected CoT": "5 * 9 = 45\n6 * 7 = 42\n42 * 8 = 336\n45 + 2 = 47\n336 + 47 = 383\n383 + 2 = 385\n385 - 7 = 378\n378 + 9 =",
            "Response": " 387",
            "Extract-Response": " 387\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i)\n    {\n        if (s[i] == ' ')\n            continue;\n        if (s[i] == '+')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        }\n        else\n        {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 351,
            "GT": 242,
            "Query": "4 + 5 * 5 * 9 + 4 * 1 * 4 - 8 + 5 =   ",
            "Injected CoT": "5 * 5 = 25\n25 * 9 = 225\n4 * 1 = 4\n4 * 4 = 16\n225 + 16 = 241\n-8 + 241 = 233\n233 + 5 =",
            "Response": " 238",
            "Extract-Response": " 238.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 352,
            "GT": 66,
            "Query": "5 * 8 + 9 - 4 - 2 * 3 + 5 * 4 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n40 + 9 = 49\n49 - 4 = 45\n2 * 3 = 6\n5 * 4 = 20\n45 - 6 = 39\n39 + 20 = 59\n59 + 7 =",
            "Response": " 66",
            "Extract-Response": " 66\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 353,
            "GT": 53,
            "Query": "6 * 9 - 6 - 7 + 9 * 2 + 5 - 8 - 3 =   ",
            "Injected CoT": "6 * 9 = 54\n9 * 2 = 18\n54 - 6 = 48\n48 - 7 = 41\n41 + 18 = 59\n59 + 5 = 64\n64 - 8 = 56\n56 - 3 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 354,
            "GT": -20,
            "Query": "9 - 3 + 7 + 3 - 4 * 5 - 6 - 7 - 3 =   ",
            "Injected CoT": "4 * 5 = 20\n9 - 3 = 6\n7 + 3 = 10\n10 - 20 = -10\n-10 - 6 = -16\n-16 - 6 = -22\n-22 - 7 = -29\n-29 - 3 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 100.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluateExpression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(stack.pop() - stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()"
        },
        {
            "Index": 355,
            "GT": 57,
            "Query": "6 * 3 * 4 + 2 + 1 * 3 - 6 * 4 + 4 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 4 = 72\n1 * 3 = 3\n6 * 4 = 24\n72 + 2 = 74\n74 + 3 = 77\n77 - 24 = 53\n53 + 4 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 356,
            "GT": 45,
            "Query": "3 - 3 + 4 + 3 + 9 * 3 + 1 + 4 + 6 =   ",
            "Injected CoT": "9 * 3 = 27\n3 - 3 = 0\n0 + 4 = 4\n4 + 3 = 7\n27 + 7 = 34\n34 + 1 = 35\n35 + 4 = 39\n39 + 6 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i,j,len,sum=0,temp;\n    gets(str);\n    len=strlen(str);\n    for(i=0;i<len;i++)\n    {\n        if(str[i]==' ')\n        {\n            continue;\n        }\n        else\n        {\n            temp=str[i]-48;\n            sum=sum+temp;\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}"
        },
        {
            "Index": 358,
            "GT": 237,
            "Query": "3 * 9 * 8 + 7 + 7 + 5 + 6 - 8 + 4 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 8 = 216\n216 + 7 = 223\n223 + 7 = 230\n230 + 5 = 235\n235 + 6 = 241\n241 - 8 = 233\n233 + 4 =",
            "Response": " 237",
            "Extract-Response": " 237\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 360,
            "GT": 1043,
            "Query": "9 + 9 * 7 + 8 * 5 * 3 * 8 + 2 + 9 =   ",
            "Injected CoT": "9 * 7 = 63\n8 * 5 = 40\n40 * 3 = 120\n120 * 8 = 960\n9 + 63 = 72\n960 + 72 = 1032\n1032 + 2 = 1034\n1034 + 9 =",
            "Response": " 1043\n\n1043\n\n*/",
            "Extract-Response": " 1043"
        },
        {
            "Index": 364,
            "GT": -60,
            "Query": "2 - 6 + 1 - 9 * 8 + 4 + 7 + 1 * 4 =   ",
            "Injected CoT": "9 * 8 = 72\n-6 + 1 = -5\n-5 - 72 = -77\n1 * 4 = 4\n4 + 7 = 11\n-77 + 11 = -66\n2 - 66 =",
            "Response": " -64",
            "Extract-Response": " -64.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 367,
            "GT": 122,
            "Query": "7 * 4 * 4 + 1 + 1 + 2 * 2 * 1 * 2 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 4 = 112\n2 * 2 = 4\n1 * 2 = 2\n4 * 2 = 8\n1 + 1 = 2\n2 + 8 = 10\n112 + 2 = 114\n114 + 10 =",
            "Response": " 124\n\n*/\n\npublic class Solution {\n    public int sumNumbers(TreeNode root) {\n        return sumNumbers(root, 0);\n    }\n    \n    public int sumNumbers(TreeNode root, int sum) {\n        if (root == null) {\n            return 0;\n        }\n        sum = sum * 10 + root.val;\n        if (root.left == null && root.right == null) {\n            return sum;\n        }\n        return sumNumbers(root.left, sum) + sumNumbers(root.right, sum);\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int sumNumbers(TreeNode root) {\n        return sumNumbers(root, 0);\n    }\n    \n    public int sumNumbers(TreeNode root, int sum) {\n        if (root == null) {\n            return 0;\n        }\n        sum = sum * 10 + root.val;\n        if (root.left == null && root.right == null) {\n            return sum;\n        }\n        return sumNumbers(root.left, sum) + sumNumbers(root.right, sum);\n    }\n}"
        },
        {
            "Index": 369,
            "GT": 146,
            "Query": "6 * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 3 = 144\n144 - 5 = 139\n139 + 5 = 144\n144 - 7 = 137\n137 + 4 = 141\n141 - 2 = 139\n139 + 7 =",
            "Response": " 146",
            "Extract-Response": "\n<code>int sum = 0;\nfor (int i = 0; i &lt;= 100; i++) {\n    sum += i * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7;\n}\nSystem.out.println(sum);\n</code>\n"
        },
        {
            "Index": 370,
            "GT": 20,
            "Query": "4 * 3 + 6 * 1 + 2 + 7 + 9 - 8 - 8 =   ",
            "Injected CoT": "4 * 3 = 12\n6 * 1 = 6\n12 + 6 = 18\n18 + 2 = 20\n20 + 7 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 8 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n*/\n\nclass Solution {\npublic:\n    int superDigit(string num, int k) {\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        sum *= k;\n        return superDigit(to_string(sum));\n    }\n    \n    int superDigit(string num) {\n        if (num.size() == 1) {\n            return num[0] - '0';\n        }\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        return superDigit(to_string(sum));\n    }\n};"
        },
        {
            "Index": 372,
            "GT": -88,
            "Query": "8 - 3 * 6 * 5 * 1 - 9 - 2 + 8 - 3 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 5 = 90\n90 * 1 = 90\n8 - 90 = -82\n-82 - 9 = -91\n-91 - 2 = -93\n-93 + 8 = -85\n-85 - 3 =",
            "Response": " -88",
            "Extract-Response": " -88.\n\nNote:\nThe number of operations is in the range [1, 10000].\nThe answer is guaranteed to be in the range of 32-bit integers.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 374,
            "GT": 2,
            "Query": "8 + 1 - 6 + 1 * 3 - 6 - 4 + 4 + 2 =   ",
            "Injected CoT": "1 * 3 = 3\n8 + 1 = 9\n9 - 6 = 3\n3 + 3 = 6\n6 - 6 = 0\n0 - 4 = -4\n-4 + 4 = 0\n0 + 2 =",
            "Response": " 2\n2 + 3 = 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        if (curr < 0) {\n            curr = 0;\n            ++result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 379,
            "GT": 38,
            "Query": "5 + 6 * 7 - 8 - 2 - 8 + 6 + 3 * 1 =   ",
            "Injected CoT": "6 * 7 = 42\n5 + 42 = 47\n47 - 8 = 39\n39 - 2 = 37\n37 - 8 = 29\n29 + 6 = 35\n3 * 1 = 3\n35 + 3 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 380,
            "GT": 127,
            "Query": "5 + 8 * 1 * 7 + 7 * 8 - 5 + 8 + 7 =   ",
            "Injected CoT": "8 * 1 = 8\n7 * 8 = 56\n5 + 8 = 13\n13 + 56 = 69\n69 - 5 = 64\n64 + 7 =",
            "Response": " 71\n\n71\n\n*/",
            "Extract-Response": " 71"
        },
        {
            "Index": 381,
            "GT": 89,
            "Query": "8 + 9 * 7 - 3 * 3 - 9 + 6 + 6 * 5 =   ",
            "Injected CoT": "9 * 7 = 63\n8 + 63 = 71\n3 * 3 = 9\n6 * 5 = 30\n6 + 30 = 36\n71 - 9 = 62\n62 - 9 = 53\n53 + 36 =",
            "Response": " 89",
            "Extract-Response": "\n\n89"
        },
        {
            "Index": 382,
            "GT": 15,
            "Query": "1 * 4 + 9 - 2 * 2 + 6 + 5 + 4 - 9 =   ",
            "Injected CoT": "1 * 4 = 4\n2 * 2 = 4\n4 + 9 = 13\n13 - 4 = 9\n6 + 5 = 11\n11 + 4 = 15\n15 - 9 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 383,
            "GT": 1251,
            "Query": "5 * 3 * 3 + 4 * 9 * 5 * 7 - 6 * 9 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 3 = 45\n4 * 9 = 36\n36 * 5 = 180\n180 * 7 = 1260\n6 * 9 = 54\n1260 - 54 =",
            "Response": " 1206\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n    \n    a = 5;\n    b = 3;\n    c = 3;\n    d = 4;\n    e = 9;\n    f = 5;\n    g = 7;\n    h = 6;\n    i = 9;\n    \n    result = a * b * c + d * e * f - h * i;\n    \n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
            "Extract-Response": "\n\n1206"
        },
        {
            "Index": 385,
            "GT": -73,
            "Query": "1 * 9 + 2 + 7 + 1 + 4 - 6 * 4 * 4 =   ",
            "Injected CoT": "1 * 9 = 9\n6 * 4 = 24\n24 * 4 = 96\n9 + 2 = 11\n11 + 7 = 18\n18 + 1 = 19\n19 + 4 = 23\n23 - 96 = -73\n-73 - 6 =",
            "Response": " -79",
            "Extract-Response": " -79.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int add(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        int len = len1 > len2 ? len1 : len2;\n        int carry = 0;\n        int sum = 0;\n        int i = 0;\n        for (i = 0; i < len; i++) {\n            int a = i < len1 ? num1[len1 - 1 - i] - '0' : 0;\n            int b = i < len2 ? num2[len2 - 1 - i] - '0' : 0;\n            sum = (a + b + carry) % 10;\n            carry = (a + b + carry) / 10;\n        }\n        if (carry) {\n            sum = carry;\n        }\n        string res = \"\";\n        while (sum) {\n            res = (char)(sum % 10 + '0') + res;\n            sum /= 10;\n        }\n        return stoi(res);\n    }\n    int multiply(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        int len = len1 + len2;\n        int carry = 0;\n        int sum = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int *res = new int[len];\n        for (i = 0; i < len; i++) {\n            res[i] = 0;\n        }\n        for (i = 0; i < len1; i++) {\n            carry = 0;\n            for (j = 0; j < len2; j++) {\n                sum = (num1[len1 - 1 - i] - '0') * (num2[len2 - 1 - j] - '0') + carry + res[i + j];\n                carry = sum / 10;\n                res[i + j] = sum % 10;\n            }\n            if (carry) {\n                res[i + j] = carry;\n            }\n        }\n        string str = \"\";\n        for (i = 0; i < len; i++) {\n            str = (char)(res[len - 1 - i] + '0') + str;\n        }\n        int index = 0;\n        while (str[index] == '0') {\n            index++;\n        }\n        str = str.substr(index);\n        return stoi(str);\n    }\n    int calculate(string s) {\n        int len = s.size();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int sign = 1;\n        int num = 0;\n        int res = 0;\n        string str = \"\";\n        for (i = 0; i < len; i++) {\n            if (s[i] == ' ') {\n                continue;\n            }\n            if (s[i] == '+') {\n                res = add(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = 1;\n            } else if (s[i] == '-') {\n                res = add(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = -1;\n            } else if (s[i] == '*') {\n                res = multiply(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = 1;\n            } else if (s[i] == '/') {\n                res = multiply(str, to_string(num));\n                num = 0;\n                str = \"\";\n                sign = -1;\n            } else {\n                num = num * 10 + s[i] - '0';\n            }\n        }\n        res = add(str, to_string(num));\n        return res;\n    }\n};"
        },
        {
            "Index": 386,
            "GT": 87,
            "Query": "6 * 7 + 6 * 8 - 2 - 6 + 4 * 1 + 1 =   ",
            "Injected CoT": "6 * 7 = 42\n6 * 8 = 48\n42 + 48 = 90\n4 * 1 = 4\n90 + 4 = 94\n2 - 6 = -4\n-4 + 1 = -3\n94 - 3 =",
            "Response": " 91",
            "Extract-Response": " 91.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 389,
            "GT": 211,
            "Query": "4 * 7 * 1 * 9 - 3 + 7 + 9 - 9 * 6 =   ",
            "Injected CoT": "4 * 7 = 28\n28 * 1 = 28\n28 * 9 = 252\n9 * 6 = 54\n252 - 3 = 249\n249 + 7 = 256\n256 + 9 = 265\n265 - 54 =",
            "Response": " 211",
            "Extract-Response": " 211\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * num;\n            num = 0;\n        }\n        else if (s[i] == '/')\n        {\n            result += sign * num;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * num;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 390,
            "GT": 45,
            "Query": "3 + 9 - 8 - 2 * 3 + 9 - 4 + 7 * 6 =   ",
            "Injected CoT": "2 * 3 = 6\n3 + 9 = 12\n12 - 8 = 4\n4 - 6 = -2\n-2 + 9 = 7\n7 - 4 = 3\n7 * 6 = 42\n3 + 42 =",
            "Response": " 45",
            "Extract-Response": " 45.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 391,
            "GT": 31,
            "Query": "8 * 5 - 1 - 4 * 5 + 3 + 7 + 6 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n4 * 5 = 20\n40 - 1 = 39\n39 - 20 = 19\n19 + 3 = 22\n22 + 7 = 29\n29 + 6 = 35\n35 - 4 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 392,
            "GT": 57,
            "Query": "2 * 3 * 7 + 3 - 2 + 1 + 7 + 9 - 3 =   ",
            "Injected CoT": "2 * 3 = 6\n6 * 7 = 42\n42 + 3 = 45\n45 - 2 = 43\n43 + 1 = 44\n44 + 7 = 51\n51 + 9 = 60\n60 - 3 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 393,
            "GT": 26,
            "Query": "4 + 1 * 2 - 9 * 4 + 7 * 6 + 5 + 9 =   ",
            "Injected CoT": "1 * 2 = 2\n4 + 2 = 6\n9 * 4 = 36\n7 * 6 = 42\n6 - 36 = -30\n-30 + 42 = 12\n12 + 5 = 17\n17 + 9 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, j = 1;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            j = 1;\n            continue;\n        }\n        sum = sum + (s[i] - '0') * j;\n        j++;\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 395,
            "GT": -28,
            "Query": "4 - 8 + 3 + 3 - 1 + 8 - 6 * 7 + 5 =   ",
            "Injected CoT": "6 * 7 = 42\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 3 = 2\n2 - 1 = 1\n1 + 8 = 9\n9 - 42 = -33\n-33 + 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 397,
            "GT": 52,
            "Query": "4 * 3 + 1 * 1 * 3 - 9 + 4 + 7 * 6 =   ",
            "Injected CoT": "4 * 3 = 12\n1 * 1 = 1\n12 * 3 = 36\n7 * 6 = 42\n36 + 1 * 3 = 39\n39 - 9 = 30\n30 + 4 = 34\n34 + 42 =",
            "Response": " 76",
            "Extract-Response": " 76.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int addStrings(string num1, string num2) {\n        int i = num1.size() - 1;\n        int j = num2.size() - 1;\n        int carry = 0;\n        int sum = 0;\n        while(i >= 0 || j >= 0 || carry) {\n            int a = i >= 0 ? num1[i--] - '0' : 0;\n            int b = j >= 0 ? num2[j--] - '0' : 0;\n            sum = (a + b + carry) % 10;\n            carry = (a + b + carry) / 10;\n            num1[i + 1] = sum + '0';\n        }\n        return stoi(num1);\n    }\n};"
        },
        {
            "Index": 400,
            "GT": 39,
            "Query": "6 * 6 - 2 + 5 - 1 + 1 + 4 - 2 - 2 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 2 = 34\n34 + 5 = 39\n39 - 1 = 38\n38 + 1 = 39\n39 + 4 = 43\n43 - 2 = 41\n41 - 2 =",
            "Response": " 39",
            "Extract-Response": "\n\n39."
        },
        {
            "Index": 401,
            "GT": 12,
            "Query": "4 - 4 + 3 - 1 + 5 * 1 - 8 + 9 + 4 =   ",
            "Injected CoT": "4 - 4 = 0\n0 + 3 = 3\n3 - 1 = 2\n5 * 1 = 5\n2 + 5 = 7\n7 - 8 = -1\n-1 + 9 = 8\n8 + 4 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 403,
            "GT": 53,
            "Query": "3 * 5 * 4 + 7 - 9 + 3 - 9 + 5 - 4 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 4 = 60\n60 + 7 = 67\n67 - 9 = 58\n58 + 3 = 61\n61 - 9 = 52\n52 + 5 = 57\n57 - 4 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 404,
            "GT": 100,
            "Query": "7 * 1 * 5 - 1 + 7 - 4 + 9 * 6 + 9 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 5 = 35\n35 - 1 = 34\n34 + 7 = 41\n41 - 4 = 37\n9 * 6 = 54\n37 + 54 = 91\n91 + 9 =",
            "Response": " 100",
            "Extract-Response": " 100\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 405,
            "GT": -1874,
            "Query": "9 - 5 - 9 * 3 * 2 * 5 * 7 + 6 + 6 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 2 = 54\n54 * 5 = 270\n270 * 7 = 1890\n-5 - 1890 = -1895\n-1895 + 6 = -1889\n-1889 + 6 =",
            "Response": " -1883\n\n-1883",
            "Extract-Response": " -1883\n\n*/"
        },
        {
            "Index": 406,
            "GT": 130,
            "Query": "6 * 5 * 4 + 6 + 6 + 8 - 7 - 8 + 5 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 4 = 120\n6 + 6 = 12\n12 + 8 = 20\n120 + 20 = 140\n140 - 7 = 133\n133 - 8 = 125\n125 + 5 =",
            "Response": " 130",
            "Extract-Response": "\n\n130."
        },
        {
            "Index": 407,
            "GT": 546,
            "Query": "9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 =   ",
            "Injected CoT": "9 * 9 = 81\n81 * 6 = 486\n4 * 9 = 36\n2 * 6 = 12\n486 + 8 = 494\n494 + 36 = 530\n530 + 4 = 534\n534 + 12 =",
            "Response": " 546\n\n546\n\n*/",
            "Extract-Response": "\n\n546"
        },
        {
            "Index": 408,
            "GT": 56,
            "Query": "6 * 9 * 1 - 5 + 2 * 3 - 5 - 2 + 8 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 1 = 54\n54 - 5 = 49\n2 * 3 = 6\n49 + 6 = 55\n55 - 5 = 50\n50 - 2 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= current;\n            current = 0;\n        } else if (s[i] == '/') {\n            operation /= current;\n            current = 0;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        }
    ]
}