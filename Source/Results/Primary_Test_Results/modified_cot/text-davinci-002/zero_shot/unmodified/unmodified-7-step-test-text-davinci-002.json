{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "unmodified",
    "Steps": 7,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\unmodified\\unmodified-7-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 0,
            "GT": -19,
            "Query": "2 - 1 * 6 * 4 + 1 * 4 + 4 - 5 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 4 = 24\n2 - 24 = -22\n1 * 4 = 4\n-22 + 4 = -18\n4 + 4 = 8\n-18 - 5 =",
            "Response": " -23\n\n-23",
            "Extract-Response": " -23\n\n*/"
        },
        {
            "Index": 3,
            "GT": 9,
            "Query": "2 * 6 + 4 + 8 - 4 + 2 - 7 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n12 + 4 = 16\n16 + 8 = 24\n24 - 4 = 20\n20 + 2 = 22\n22 - 7 = 15\n15 - 6 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 4,
            "GT": 70,
            "Query": "4 * 6 * 3 + 2 - 2 + 1 - 6 + 3 =   ",
            "Injected CoT": "4 * 6 = 24\n24 * 3 = 72\n72 + 2 = 74\n74 - 2 = 72\n72 + 1 = 73\n73 - 6 = 67\n67 + 3 =",
            "Response": " 70",
            "Extract-Response": " 70\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n\nusing namespace std;\n#define FOR(i,a,b) for(int i=a;i<b;i++)\n#define pb push_back\n#define mp make_pair\ntypedef long long LL;\ntypedef pair<int,int> PII;\n\nconst int maxn= (int)1e5+9;\nint n,m;\nint a[maxn];\nint main()\n{\n\t//freopen(\"test\",\"r\",stdin);\n\tcin>>n;\n\tint sum=0;\n\tFOR(i,0,n) {\n\t\tcin>>a[i];\n\t\tsum+=a[i];\n\t}\n\tint ans=0;\n\tint cur=0;\n\tFOR(i,0,n) {\n\t\tcur+=a[i];\n\t\tif(cur*2==sum) ans++;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}"
        },
        {
            "Index": 5,
            "GT": 228,
            "Query": "2 + 3 * 8 + 9 + 6 * 4 * 8 + 1 =   ",
            "Injected CoT": "3 * 8 = 24\n2 + 24 = 26\n4 * 8 = 32\n32 * 6 = 192\n192 * 8 = 1536\n9 + 1 = 10\n26 + 10 = 36\n36 + 1536 =",
            "Response": " 1572\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\tchar a[100], b[100];\n\t\n\twhile(scanf(\"%s %s\", a, b) != EOF)\n\t{\n\t\tsum = 0;\n\t\t\n\t\tfor(i = 0; i < strlen(a); i++)\n\t\t{\n\t\t\tif(a[i] >= '0' && a[i] <= '9')\n\t\t\t{\n\t\t\t\tsum = sum + a[i] - '0';\n\t\t\t}\n\t\t\telse if(a[i] >= 'A' && a[i] <= 'Z')\n\t\t\t{\n\t\t\t\tsum = sum + a[i] - 'A' + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\twhile(sum >= 10)\n\t\t{\n\t\t\tj = sum;\n\t\t\tsum = 0;\n\t\t\t\n\t\t\twhile(j != 0)\n\t\t\t{\n\t\t\t\tsum = sum + j % 10;\n\t\t\t\tj = j / 10;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < strlen(b); i++)\n\t\t{\n\t\t\tif(b[i] >= '0' && b[i] <= '9')\n\t\t\t{\n\t\t\t\tsum = sum + b[i] - '0';\n\t\t\t}\n\t\t\telse if(b[i] >= 'A' && b[i] <= 'Z')\n\t\t\t{\n\t\t\t\tsum = sum + b[i] - 'A' + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\twhile(sum >= 10)\n\t\t{\n\t\t\tj = sum;\n\t\t\tsum = 0;\n\t\t\t\n\t\t\twhile(j != 0)\n\t\t\t{\n\t\t\t\tsum = sum + j % 10;\n\t\t\t\tj = j / 10;\n\t\t\t}\n\t\t}\n\t\t\n\t\tprintf(\"%d\\n\", sum);\n\t}\n\t\n\treturn 0;\n}",
            "Extract-Response": "\n\n1572"
        },
        {
            "Index": 6,
            "GT": -81,
            "Query": "9 - 6 - 4 - 5 - 3 - 8 * 1 * 9 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 6 = 3\n3 - 4 = -1\n-1 - 5 = -6\n-6 - 3 = -9\n-9 - 8 = -17\n-17 * 9 =",
            "Response": " -153\n\n153\n\n*/",
            "Extract-Response": " 153"
        },
        {
            "Index": 7,
            "GT": 1,
            "Query": "4 - 9 + 2 * 3 + 4 - 5 - 8 + 9 =   ",
            "Injected CoT": "2 * 3 = 6\n4 - 9 = -5\n-5 + 6 = 1\n1 + 4 = 5\n5 - 5 = 0\n0 - 8 = -8\n-8 + 9 =",
            "Response": " 1\n1 + 2 = 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    bool isPositive = true;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += curr;\n            } else {\n                result -= curr;\n            }\n            curr = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += curr;\n            } else {\n                result -= curr;\n            }\n            curr = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += curr;\n            } else {\n                result -= curr;\n            }\n            curr = 0;\n            isPositive = false;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    if (isPositive) {\n        result += curr;\n    } else {\n        result -= curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 8,
            "GT": -4,
            "Query": "8 * 1 + 6 - 3 - 2 + 1 - 9 - 5 =   ",
            "Injected CoT": "8 * 1 = 8\n8 + 6 = 14\n14 - 3 = 11\n11 - 2 = 9\n9 + 1 = 10\n10 - 9 = 1\n1 - 5 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 10,
            "GT": -63,
            "Query": "2 - 8 - 5 - 5 + 3 + 4 - 6 * 9 =   ",
            "Injected CoT": "-6 * 9 = -54\n2 - 8 = -6\n-6 - 5 = -11\n-11 - 5 = -16\n-16 + 3 = -13\n-13 + 4 = -9\n-9 + (-54) =",
            "Response": " -63",
            "Extract-Response": " -63.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a+b+c, a*(b+c), (a+b)*c, a*b*c)"
        },
        {
            "Index": 11,
            "GT": -11,
            "Query": "5 * 1 - 4 - 5 - 6 - 1 + 3 - 3 =   ",
            "Injected CoT": "5 * 1 = 5\n5 - 4 = 1\n1 - 5 = -4\n-4 - 6 = -10\n-10 - 1 = -11\n-11 + 3 = -8\n-8 - 3 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 12,
            "GT": -138,
            "Query": "9 * 2 - 7 - 1 + 2 - 5 * 6 * 5 =   ",
            "Injected CoT": "9 * 2 = 18\n18 - 7 = 11\n11 - 1 = 10\n10 + 2 = 12\n5 * 6 = 30\n30 * 5 = 150\n12 - 150 =",
            "Response": " -138",
            "Extract-Response": " -138.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 13,
            "GT": 176,
            "Query": "4 * 3 + 5 * 5 * 6 + 4 + 5 * 2 =   ",
            "Injected CoT": "4 * 3 = 12\n5 * 5 = 25\n25 * 6 = 150\n5 * 2 = 10\n12 + 150 = 162\n162 + 4 = 166\n166 + 10 =",
            "Response": " 176",
            "Extract-Response": " 176\n</code>\n"
        },
        {
            "Index": 14,
            "GT": -33,
            "Query": "2 - 1 + 5 - 8 - 9 - 6 * 4 + 2 =   ",
            "Injected CoT": "6 * 4 = 24\n-1 + 5 = 4\n2 - 4 = -2\n-2 - 9 = -11\n-11 - 24 = -35\n-35 + 2 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            if (a[i] > a[j]) {\n                swap(a[i], a[j]);\n                ++result;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 16,
            "GT": 21,
            "Query": "7 * 2 + 8 - 5 + 2 + 8 - 6 * 1 =   ",
            "Injected CoT": "7 * 2 = 14\n14 + 8 = 22\n22 - 5 = 17\n17 + 2 = 19\n19 + 8 = 27\n6 * 1 = 6\n27 - 6 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 17,
            "GT": 36,
            "Query": "5 * 7 + 4 - 2 + 3 + 2 - 5 - 1 =   ",
            "Injected CoT": "5 * 7 = 35\n35 + 4 = 39\n39 - 2 = 37\n37 + 3 = 40\n40 + 2 = 42\n42 - 5 = 37\n37 - 1 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 21,
            "GT": 33,
            "Query": "9 - 4 + 7 - 6 + 2 * 9 * 1 + 9 =   ",
            "Injected CoT": "2 * 9 = 18\n9 - 4 = 5\n7 - 6 = 1\n5 + 1 = 6\n6 + 18 = 24\n24 + 1 = 25\n25 + 9 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define foreach(it,c) for(__typeof(c.begin()) it=c.begin(); it!=c.end(); ++it)\n\nclass InfixCalculator {\npublic:\n    int evaluate(string expression) {\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        int mul = 1;\n        for(int i=0; i<expression.size(); ++i) {\n            if(expression[i]==' ') continue;\n            if(expression[i]=='+') {\n                ans += sign*cur;\n                sign = 1;\n                cur = 0;\n            } else if(expression[i]=='-') {\n                ans += sign*cur;\n                sign = -1;\n                cur = 0;\n            } else if(expression[i]=='*') {\n                mul *= cur;\n                cur = 0;\n            } else {\n                cur *= 10;\n                cur += expression[i]-'0';\n            }\n        }\n        ans += sign*cur*mul;\n        return ans;\n    }\n};\n\nint main() {\n    InfixCalculator ic;\n    cout << ic.evaluate(\"3 + 4 * 2 - 1\") << endl;\n    cout << ic.evaluate(\"9 - 4 + 7 - 6 + 2 * 9 * 1 + 9\") << endl;\n    return 0;\n}"
        },
        {
            "Index": 22,
            "GT": 14,
            "Query": "2 + 5 + 2 + 6 - 1 + 6 - 8 + 2 =   ",
            "Injected CoT": "2 + 5 = 7\n7 + 2 = 9\n9 + 6 = 15\n15 - 1 = 14\n14 + 6 = 20\n20 - 8 = 12\n12 + 2 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the given array won't exceed 10000.\nAll the integers in the given array are in the range of [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 23,
            "GT": 13,
            "Query": "4 * 3 - 3 * 3 + 6 - 4 + 2 * 4 =   ",
            "Injected CoT": "4 * 3 = 12\n3 * 3 = 9\n12 - 9 = 3\n2 * 4 = 8\n6 - 4 = 2\n3 + 8 = 11\n11 + 2 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 24,
            "GT": 14,
            "Query": "5 * 1 + 4 * 9 - 7 - 2 * 5 * 2 =   ",
            "Injected CoT": "5 * 1 = 5\n4 * 9 = 36\n2 * 5 = 10\n10 * 2 = 20\n5 + 36 = 41\n41 - 7 = 34\n34 - 20 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 25,
            "GT": 30,
            "Query": "2 * 6 + 9 + 3 * 5 - 5 - 2 + 1 =   ",
            "Injected CoT": "2 * 6 = 12\n3 * 5 = 15\n12 + 9 = 21\n15 - 5 = 10\n10 - 2 = 8\n8 + 1 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 26,
            "GT": 58,
            "Query": "4 * 9 + 3 - 9 + 7 * 5 - 8 + 1 =   ",
            "Injected CoT": "4 * 9 = 36\n36 + 3 = 39\n7 * 5 = 35\n39 - 9 = 30\n30 + 35 = 65\n65 - 8 = 57\n57 + 1 =",
            "Response": " 58",
            "Extract-Response": " 58\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 27,
            "GT": 72,
            "Query": "5 + 5 * 2 * 9 - 1 - 5 * 4 - 2 =   ",
            "Injected CoT": "5 * 2 = 10\n10 * 9 = 90\n5 * 4 = 20\n5 + 90 = 95\n95 - 1 = 94\n94 - 20 = 74\n74 - 2 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    int currentOperator = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n            currentOperator = s[i];\n        } else if (s[i] == '*') {\n            currentOperator = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n            if (currentOperator == '*') {\n                currentNumber *= sign;\n                currentOperator = 0;\n            }\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 28,
            "GT": -24,
            "Query": "9 - 7 - 5 * 6 - 6 + 8 - 6 + 8 =   ",
            "Injected CoT": "-5 * 6 = -30\n9 - 7 - 30 - 6 + 8 - 6 + 8 =",
            "Response": " \n9 - 7 - 30 - 6 + 8 - 6 + 8 = \n9 - 7 - 30 = -24\n-24 + 8 - 6 + 8 = \n-24 + 8 - 6 + 8 = \n-24 + 8 = -16\n-16 + 8 = -8",
            "Extract-Response": " -8"
        },
        {
            "Index": 30,
            "GT": -5,
            "Query": "7 - 1 * 5 - 4 - 4 - 6 * 1 + 7 =   ",
            "Injected CoT": "1 * 5 = 5\n6 * 1 = 6\n7 - 5 = 2\n2 - 4 = -2\n-2 - 4 = -6\n-6 + 7 =",
            "Response": " 1\n\n1 + 1 = 2",
            "Extract-Response": " 2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer is  2\n\n1 + 1 = 2\nThe answer"
        },
        {
            "Index": 31,
            "GT": 124,
            "Query": "5 * 7 * 4 - 8 + 6 + 4 - 6 * 3 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 4 = 140\n6 * 3 = 18\n140 - 8 = 132\n132 + 4 = 136\n136 - 18 =",
            "Response": " 118",
            "Extract-Response": "\n\n118"
        },
        {
            "Index": 32,
            "GT": 73,
            "Query": "4 * 9 - 1 * 4 + 7 - 8 + 7 * 6 =   ",
            "Injected CoT": "4 * 9 = 36\n1 * 4 = 4\n7 * 6 = 42\n36 - 4 = 32\n32 + 7 = 39\n39 - 8 = 31\n31 + 42 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 33,
            "GT": 29,
            "Query": "4 * 6 + 9 - 4 - 1 - 5 + 2 + 4 =   ",
            "Injected CoT": "4 * 6 = 24\n24 + 9 = 33\n33 - 4 = 29\n29 - 1 = 28\n28 - 5 = 23\n23 + 2 = 25\n25 + 4 =",
            "Response": " 29",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 36,
            "GT": -2,
            "Query": "1 - 3 + 8 - 2 * 4 + 7 - 8 + 1 =   ",
            "Injected CoT": "-2 * 4 = -8\n1 - 3 + 8 - (-8) + 7 - 8 + 1 =",
            "Response": " \n1 - 3 + 8 + 8 + 7 - 8 + 1 = \n1 + 8 + 7 + 1 = \n17",
            "Extract-Response": "\n17\n\n*/"
        },
        {
            "Index": 37,
            "GT": 65,
            "Query": "4 * 7 + 7 * 6 + 2 * 4 - 6 - 7 =   ",
            "Injected CoT": "4 * 7 = 28\n7 * 6 = 42\n2 * 4 = 8\n28 + 42 = 70\n70 + 8 = 78\n78 - 6 = 72\n72 - 7 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};"
        },
        {
            "Index": 38,
            "GT": 18,
            "Query": "2 + 6 + 4 * 6 + 3 - 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 6 = 24\n2 + 6 = 8\n8 + 24 = 32\n32 + 3 = 35\n35 - 1 = 34\n34 - 8 = 26\n26 - 8 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 39,
            "GT": 262,
            "Query": "7 * 6 * 6 + 5 * 3 + 8 - 7 - 6 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 6 = 252\n5 * 3 = 15\n252 + 15 = 267\n267 + 8 = 275\n275 - 7 = 268\n268 - 6 =",
            "Response": " 262",
            "Extract-Response": " 262\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int operation = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            operation = 1;\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '/') {\n            operation = 2;\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    if (operation == 1) {\n        result *= sign;\n    } else if (operation == 2) {\n        result /= sign;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 40,
            "GT": 12,
            "Query": "5 * 5 - 5 - 8 - 1 * 5 + 5 * 1 =   ",
            "Injected CoT": "5 * 5 = 25\n25 - 5 = 20\n20 - 8 = 12\n1 * 5 = 5\n5 + 12 = 17\n5 * 1 = 5\n17 + 5 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 42,
            "GT": 28,
            "Query": "8 - 2 * 2 + 3 * 9 + 2 * 3 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n3 * 9 = 27\n2 * 3 = 6\n8 - 4 = 4\n4 + 27 = 31\n31 + 6 = 37\n37 - 9 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions will result in no division by zero and there is no contradiction.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 44,
            "GT": 1030,
            "Query": "9 * 5 * 1 + 7 * 5 * 7 * 4 + 5 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 1 = 45\n7 * 5 = 35\n35 * 7 = 245\n245 * 4 = 980\n980 + 45 =",
            "Response": " 1025\n1025 + 35 = 1060\n1060 + 245 = 1305\n1305 + 980 = 2285\n2285 + 1025 = 3310\n3310 + 1060 = 437\n\n4 * 3 * 7 * 2 + 3 * 7 * 3 * 6 + 7 * 3 * 7 * 8 =    \n4 * 3 = 12\n12 * 7 = 84\n84 * 2 = 168\n3 * 7 = 21\n21 * 3 = 63\n63 * 6 = 378\n7 * 3 = 21\n21 * 7 = 147\n147 * 8 = 1176\n1176 + 168 = 1344\n1344 + 378 = 1722\n1722 + 147 = 1869\n1869 + 1176 = 3045\n\n7 * 2 * 3 * 8 + 2 * 3 * 7 * 9 + 3 * 7 * 3 * 5 =    \n7 * 2 = 14\n14 * 3 = 42\n42 * 8 = 336\n2 * 3 = 6\n6 * 7 = 42\n42 * 9 = 378\n3 * 7 = 21\n21 * 3 = 63\n63 * 5 = 315\n336 + 378 = 714\n714 + 63 = 777\n777 + 315 = 1092\n1092 + 714 = 1806\n\n3 * 8 * 7 * 4 + 8 * 3 * 3 * 5 + 7 * 3 * 7 * 9 =    \n3 * 8 = 24\n24 * 7 = 168\n168 * 4 = 672\n8 * 3 = 24\n24 * 3 = 72\n72 * 5 = 360\n7 * 3 = 21\n21 * 7 = 147\n147 * 9 = 1323\n672 + 360 = 1032\n1032 + 1323 = 2355\n2355 + 1032 = 3387\n\n7 * 4 * 3 * 5 + 4 * 7 * 8 * 9 + 3 * 7 * 3 * 6 =    \n7 * 4 = 28\n28 * 3 = 84\n84 * 5 = 420\n4 * 7 = 28\n28 * 8 = 224\n224 * 9 = 2016\n3 * 7 = 21\n21 * 3 = 63\n63 * 6 = 378\n420 + 2016 = 2436\n2436 + 378 = 2814\n2814 + 84 = 2898\n\n3 * 5 * 7 * 8 + 5 * 3 * 3 * 6 + 7 * 3 * 7 * 4 =    \n3 * 5 = 15\n15 * 7 = 105\n105 * 8 = 840\n5 * 3 = 15\n15 * 3 = 45\n45 * 6 = 270\n7 * 3 = 21\n21 * 7 = 147\n147 * 4 = 588\n840 + 270 = 1110\n1110 + 588 = 1698\n1698 + 21 = 1719\n\n3 * 6 * 7 * 9 + 6 * 3 * 8 * 4 + 7 * 3 * 7 * 5 =    \n3 * 6 = 18\n18 * 7 = 126\n126 * 9 = 1134\n6 * 3 = 18\n18 * 8 = 144\n144 * 4 = 576\n7 * 3 = 21\n21 * 7 = 147\n147 * 5 = 735\n1134 + 576 = 1710\n1710 + 735 = 2445\n2445 + 126 = 2571\n\n3 * 9 * 7 * 4 + 9 * 3 * 5 * 6 + 7 * 3 * 7 * 8 =    \n3 * 9 = 27\n27 * 7 = 189\n189 * 4 = 756\n9 * 3 = 27\n27 * 5 = 135\n135 * 6 = 810\n7 * 3 = 21\n21 * 7 = 147\n147 * 8 = 1176\n756 + 810 = 1566\n1566 + 1176 = 2742\n2742 + 21 = 2763\n\n4 * 3 * 7 * 5 + 3 * 4 * 8 * 9 + 7 * 4 * 7 * 6 =    \n4 * 3 = 12\n12 * 7 = 84\n84 * 5 = 420\n3 * 4 = 12\n12 * 8 = 96\n96 * 9 = 864\n7 * 4 = 28\n28 * 7 = 196\n196 * 6 = 1176\n420 + 864 = 1284\n1284 + 1176 = 2460\n2460 + 196 = 2656\n\n5 * 4 * 3 * 6 + 4 * 5 * 9 * 8 + 3 * 5 * 7 * 9 =    \n5 * 4 = 20\n20 * 3 = 60\n60 * 6 = 360\n4 * 5 = 20\n20 * 9 = 180\n180 * 8 = 1440\n3 * 5 = 15\n15 * 7 = 105\n105 * 9 = 945\n360 + 1440 = 1800\n1800 + 945 = 2745\n2745 + 15 = 2760\n\n6 * 5 * 4 * 7 + 5 * 6 * 8 * 4 + 4 * 6 * 3 * 8 =    \n6 * 5 = 30\n30 * 4 = 120\n120 * 7 = 840\n5 * 6 = 30\n30 * 8 = 240\n240 * 4 = 960\n4 * 6 = 24\n24 * 3 = 72\n72 * 8 = 576\n840 + 960 = 1800\n1800 + 576 = 2376\n2376 + 30 = 2406\n\n7 * 6 * 5 * 8 + 6 * 7 * 4 * 9 + 5 * 6 * 4 * 7 =    \n7 * 6 = 42\n42 * 5 = 210\n210 * 8 = 1680\n6 * 7 = 42\n42 * 4 = 168\n168 * 9 = 1512\n5 * 6 = 30\n30 * 4 = 120\n120 * 7 = 840\n1680 + 1512 = 3192\n3192 + 840 = 4032\n4032 + 42 = 4074\n\n8 * 7 * 6 * 9 + 7 * 8 * 5 * 6 + 6 * 7 * 8 * 4 =    \n8 * 7 = 56\n56 * 6 = 336\n336 * 9 = 3024\n7 * 8 = 56\n56 * 5 = 280\n280 * 6 = 1680\n6 * 7 = 42\n42 * 8 = 336\n336 * 4 = 1344\n3024 + 1680 = 4704\n4704 + 1344 = 6048\n6048 + 56 = 6104\n\n9 * 8 * 7 * 4 + 8 * 9 * 6 * 5 + 7 * 8 * 9 * 6 =    \n9 * 8 = 72\n72 * 7 = 504\n504 * 4 = 2016\n8 * 9 = 72\n72 * 6 = 432\n432 * 5 = 2160\n7 * 8 = 56\n56 * 9 = 504\n504 * 6 = 3024\n2016 + 2160 = 4176\n4176 + 3024 = 7200\n7200 + 72 = 7272\n\n4 * 7 * 8 * 5 + 7 * 4 * 9 * 6 + 8 * 4 * 7 * 9 =    \n4 * 7 = 28\n28 * 8 = 224\n224 * 5 = 1120\n7 * 4 = 28\n28 * 9 = 252\n252 * 6 = 1512\n8 * 4 = 32\n32 * 7 = 224\n224 * 9 = 2016\n1120 + 1512 = 2632\n2632 + 2016 = 4648\n4648 + 28 = 4676\n\n5 * 8 * 4 * 6 + 8 * 5 * 7 * 9 + 4 * 5 * 8 * 7 =    \n5 * 8 = 40\n40 * 4 = 160\n160 * 6 = 960\n8 * 5 = 40\n40 * 7 = 280\n280 * 9 = 2520\n4 * 5 = 20\n20 * 8 = 160\n160 * 7 = 1120\n960 + 2520 = 3480\n3480 + 1120 = 4600\n4600 + 40 = 4640\n\n6 * 5 * 8 * 7 + 5 * 6 * 4 * 8 + 8 * 6 * 5 * 9 =    \n6 * 5 = 30\n30 * 8 = 240\n240 * 7 = 1680\n5 * 6 = 30\n30 * 4 = 120\n120 * 8 = 960\n8 * 6 = 48\n48 * 5 = 240\n240 * 9 = 2160\n1680 + 960 = 2640\n2640 + 2160 = 4800\n4800 + 30 = 4830\n\n7 * 6 * 5 * 8 + 6 * 7 * 9 * 4 + 5 * 6 * 7 * 8 =    \n7 * 6 = 42\n42 * 5 = 210\n210 * 8 = 1680\n6 * 7 = 42\n42 * 9 = 378\n378 * 4 = 1512\n5 * 6 = 30\n30 * 7 = 210\n210 * 8 = 1680\n1680 + 1512 = 3192\n3192 + 1680 = 4872\n4872 + 42 = 4914\n\n8 * 7 * 6 * 9 + 7 * 8 * 4 * 5 + 6 * 7 * 8 * 5 =    \n8 * 7 = 56\n56 * 6 = 336\n336 * 9 = 3024\n7 * 8 = 56\n56 * 4 = 224\n224 * 5 = 1120\n6 * 7 = 42\n42 * 8 = 336\n336 * 5 = 1680\n3024 + 1120 = 4144\n4144 + 1680 = 5824\n5824 + 56 = 5880\n\n9 * 8 * 7 *",
            "Extract-Response": "\n\n5880"
        },
        {
            "Index": 45,
            "GT": -123,
            "Query": "2 * 1 - 4 * 4 * 8 + 3 - 7 + 7 =   ",
            "Injected CoT": "2 * 1 = 2\n4 * 4 = 16\n16 * 8 = 128\n-128 + 3 = -125\n-125 - 7 = -132\n-132 + 7 =",
            "Response": " -125",
            "Extract-Response": " -125.\n\nNote:\n\nBoth input integers will be in the range [-2147483648, 2147483647].\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 46,
            "GT": 69,
            "Query": "6 * 8 + 4 * 9 - 3 + 1 - 7 - 6 =   ",
            "Injected CoT": "6 * 8 = 48\n4 * 9 = 36\n48 + 36 = 84\n84 - 3 = 81\n81 + 1 = 82\n82 - 7 = 75\n75 - 6 =",
            "Response": " 69",
            "Extract-Response": "\n69\n\n*/"
        },
        {
            "Index": 47,
            "GT": -9,
            "Query": "9 - 4 + 2 - 3 - 8 - 8 * 1 + 3 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 4 = 5\n5 + 2 = 7\n7 - 3 = 4\n4 - 8 = -4\n-4 - 8 = -12\n-12 + 3 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2147483648, 2147483647].\n */\n\npublic class LC_1052_Grumpy_Bookstore_Owner {\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\n        int maxSatisfied = 0;\n        int maxUnsatisfied = 0;\n        int curUnsatisfied = 0;\n        for (int i = 0; i < customers.length; i++) {\n            if (grumpy[i] == 0) {\n                maxSatisfied += customers[i];\n            } else {\n                curUnsatisfied += customers[i];\n            }\n            if (i >= X) {\n                curUnsatisfied -= grumpy[i - X] * customers[i - X];\n            }\n            maxUnsatisfied = Math.max(maxUnsatisfied, curUnsatisfied);\n        }\n        return maxSatisfied + maxUnsatisfied;\n    }\n}"
        },
        {
            "Index": 51,
            "GT": 0,
            "Query": "3 - 1 - 1 + 4 + 1 - 9 + 9 - 6 =   ",
            "Injected CoT": "3 - 1 = 2\n2 - 1 = 1\n1 + 4 = 5\n5 + 1 = 6\n6 - 9 = -3\n-3 + 9 = 6\n6 - 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,len,sum;\n    char str[100];\n    scanf(\"%d\",&n);\n    getchar();\n    for(i=0;i<n;i++)\n    {\n        gets(str);\n        len=strlen(str);\n        sum=0;\n        for(j=0;j<len;j++)\n        {\n            if(str[j]==' ')\n                continue;\n            else if(str[j]=='+')\n            {\n                for(k=j+1;k<len;k++)\n                {\n                    if(str[k]==' ')\n                        continue;\n                    else if(str[k]=='+')\n                        break;\n                    else\n                    {\n                        sum=sum+str[k]-48;\n                        j=k;\n                    }\n                }\n            }\n            else if(str[j]=='-')\n            {\n                for(k=j+1;k<len;k++)\n                {\n                    if(str[k]==' ')\n                        continue;\n                    else if(str[k]=='+')\n                        break;\n                    else\n                    {\n                        sum=sum-str[k]+48;\n                        j=k;\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 52,
            "GT": -17,
            "Query": "7 + 6 + 2 - 6 * 7 + 1 * 3 + 7 =   ",
            "Injected CoT": "6 * 7 = 42\n7 + 6 = 13\n13 + 2 = 15\n1 * 3 = 3\n42 - 15 = 27\n27 + 3 = 30\n30 + 7 =",
            "Response": " 37",
            "Extract-Response": " 37.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int cur = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + cur * sign;\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 54,
            "GT": 9,
            "Query": "1 * 3 * 4 + 6 + 9 - 9 - 6 - 3 =   ",
            "Injected CoT": "1 * 3 = 3\n3 * 4 = 12\n12 + 6 = 18\n18 + 9 = 27\n27 - 9 = 18\n18 - 6 = 12\n12 - 3 =",
            "Response": " 9\n\n9",
            "Extract-Response": " 9\n\n*/"
        },
        {
            "Index": 55,
            "GT": 9409,
            "Query": "3 - 2 + 8 * 4 * 3 * 7 * 7 * 2 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 3 = 96\n96 * 7 = 672\n672 * 7 = 4704\n4704 * 2 = 9408\n3 - 2 = 1\n1 + 9408 =",
            "Response": " 9409\n\n9409\n\n*/",
            "Extract-Response": "\n\n9409"
        },
        {
            "Index": 56,
            "GT": 17,
            "Query": "3 * 2 + 4 - 3 + 2 * 3 + 8 - 4 =   ",
            "Injected CoT": "3 * 2 = 6\n6 + 4 = 10\n10 - 3 = 7\n2 * 3 = 6\n6 + 8 = 14\n14 - 4 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 58,
            "GT": -7,
            "Query": "8 + 2 * 2 + 9 - 2 - 2 - 8 * 3 =   ",
            "Injected CoT": "2 * 2 = 4\n8 + 4 = 12\n12 + 9 = 21\n21 - 2 = 19\n19 - 2 = 17\n8 * 3 = 24\n17 - 24 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between [1, 10,000].\nThe answer is guaranteed to be fit in a 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 59,
            "GT": -11,
            "Query": "8 - 2 + 3 + 3 + 5 - 4 * 5 - 8 =   ",
            "Injected CoT": "4 * 5 = 20\n8 - 2 = 6\n6 + 3 = 9\n9 + 3 = 12\n12 + 5 = 17\n20 - 17 = 3\n3 - 8 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef arithmeticExpression(a):\n    # Write your code here\n    if len(a) == 1:\n        return True\n    else:\n        for i in range(1, len(a)):\n            if a[i] == a[i-1] * a[i-1]:\n                return False\n            if a[i] == a[i-1] + a[i-1]:\n                return False\n            if a[i] == a[i-1] - a[i-1]:\n                return False\n            if a[i] == a[i-1] / a[i-1]:\n                return False\n        return True"
        },
        {
            "Index": 60,
            "GT": 12,
            "Query": "1 * 7 - 1 * 1 * 5 * 1 + 8 + 2 =   ",
            "Injected CoT": "1 * 7 = 7\n1 * 1 = 1\n5 * 1 = 5\n1 * 5 = 5\n7 - 5 = 2\n2 + 8 = 10\n10 + 2 =",
            "Response": " 12\n\n1 * 7 - 1 * 1 * 5 * 1 + 8 + 2 = 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 61,
            "GT": 63,
            "Query": "3 * 8 * 2 + 6 + 7 + 8 + 1 - 7 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 2 = 48\n48 + 6 = 54\n54 + 7 = 61\n61 + 8 = 69\n69 + 1 = 70\n70 - 7 =",
            "Response": " 63",
            "Extract-Response": " 63\n</code>\n"
        },
        {
            "Index": 62,
            "GT": -75,
            "Query": "9 + 3 - 4 * 2 + 2 - 9 - 8 * 9 =   ",
            "Injected CoT": "4 * 2 = 8\n9 + 3 = 12\n12 - 8 = 4\n4 + 2 = 6\n6 - 9 = -3\n8 * 9 = 72\n-3 - 72 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 64,
            "GT": 42,
            "Query": "3 * 7 + 9 + 6 * 2 - 3 - 2 + 5 =   ",
            "Injected CoT": "3 * 7 = 21\n6 * 2 = 12\n21 + 9 = 30\n30 + 12 = 42\n42 - 3 = 39\n39 - 2 = 37\n37 + 5 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 65,
            "GT": 73,
            "Query": "3 * 9 + 1 + 1 * 5 * 8 - 4 + 9 =   ",
            "Injected CoT": "3 * 9 = 27\n1 * 5 = 5\n5 * 8 = 40\n27 + 1 = 28\n28 + 40 = 68\n68 - 4 = 64\n64 + 9 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 67,
            "GT": 33,
            "Query": "9 + 6 + 6 + 2 + 6 + 2 * 2 * 1 =   ",
            "Injected CoT": "2 * 2 = 4\n9 + 6 = 15\n15 + 6 = 21\n21 + 2 = 23\n23 + 4 = 27\n27 + 2 = 29\n29 * 1 =",
            "Response": " 29\n\n29\n\n*/",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 68,
            "GT": 160,
            "Query": "6 + 2 - 4 * 1 - 6 + 9 * 9 * 2 =   ",
            "Injected CoT": "4 * 1 = 4\n9 * 9 = 81\n81 * 2 = 162\n6 + 2 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 =",
            "Response": " 160\n\n160\n\n*/",
            "Extract-Response": "\n\n160"
        },
        {
            "Index": 71,
            "GT": 42,
            "Query": "9 - 4 * 3 + 3 - 3 * 1 + 5 * 9 =   ",
            "Injected CoT": "4 * 3 = 12\n9 - 12 = -3\n3 - 3 = 0\n1 * 3 = 3\n5 * 9 = 45\n-3 + 0 = -3\n-3 + 3 = 0\n0 + 45 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 76,
            "GT": 98,
            "Query": "7 * 7 + 3 * 5 * 5 - 4 * 5 - 6 =   ",
            "Injected CoT": "7 * 7 = 49\n3 * 5 = 15\n15 * 5 = 75\n4 * 5 = 20\n49 + 75 = 124\n124 - 20 = 104\n104 - 6 =",
            "Response": " 98",
            "Extract-Response": " 98.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 78,
            "GT": 154,
            "Query": "8 * 8 * 3 + 4 - 7 * 3 * 2 * 1 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 3 = 192\n7 * 3 = 21\n21 * 2 = 42\n42 * 1 = 42\n192 + 4 = 196\n196 - 42 =",
            "Response": " 154\n\n154 is the answer.",
            "Extract-Response": "\n\n154"
        },
        {
            "Index": 80,
            "GT": -43,
            "Query": "2 - 7 * 2 - 9 * 3 - 1 - 7 + 4 =   ",
            "Injected CoT": "7 * 2 = 14\n9 * 3 = 27\n2 - 14 = -12\n-12 - 27 = -39\n-39 - 1 = -40\n-40 - 7 = -47\n-47 + 4 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 81,
            "GT": 47,
            "Query": "2 - 3 + 9 * 2 * 2 * 1 + 3 + 9 =   ",
            "Injected CoT": "9 * 2 = 18\n18 * 2 = 36\n36 * 1 = 36\n2 - 3 = -1\n-1 + 36 = 35\n35 + 3 = 38\n38 + 9 =",
            "Response": " 47\n\n47 is the answer.",
            "Extract-Response": "\n\n47"
        },
        {
            "Index": 82,
            "GT": -28,
            "Query": "9 - 5 - 1 - 2 - 4 * 7 - 6 + 5 =   ",
            "Injected CoT": "4 * 7 = 28\n9 - 5 = 4\n4 - 1 = 3\n3 - 2 = 1\n1 - 28 = -27\n-27 - 6 = -33\n-33 + 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 83,
            "GT": -100,
            "Query": "6 * 8 - 8 - 1 + 5 - 9 * 8 * 2 =   ",
            "Injected CoT": "6 * 8 = 48\n9 * 8 = 72\n72 * 2 = 144\n48 - 8 = 40\n40 - 1 = 39\n39 + 5 = 44\n44 - 144 =",
            "Response": " -100",
            "Extract-Response": " -100.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2147483648, 2147483647].\n */\n\npublic class LC_849_MaximizeDistanceToClosestPerson {\n    public int maxDistToClosest(int[] seats) {\n        int max = 0;\n        int last = -1;\n        for (int i = 0; i < seats.length; i++) {\n            if (seats[i] == 1) {\n                if (last == -1) {\n                    max = i;\n                } else {\n                    max = Math.max(max, (i - last) / 2);\n                }\n                last = i;\n            }\n        }\n        max = Math.max(max, seats.length - 1 - last);\n        return max;\n    }\n}"
        },
        {
            "Index": 84,
            "GT": -16,
            "Query": "9 - 1 * 8 - 5 - 9 - 1 * 6 + 3 =   ",
            "Injected CoT": "1 * 8 = 8\n9 - 8 = 1\n1 - 5 = -4\n-4 - 9 = -13\n1 * 6 = 6\n-13 - 6 = -19\n-19 + 3 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 89,
            "GT": 108,
            "Query": "1 * 8 * 8 + 8 * 6 * 1 - 1 - 3 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 8 = 64\n8 * 6 = 48\n1 - 3 = -2\n64 + 48 = 112\n112 - 2 =",
            "Response": " 110\n\n*/\n\n// Solution\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\n\n    int result = solveMeFirst(n);\n    cout << result << endl;\n    return 0;\n}",
            "Extract-Response": "\n\n110"
        },
        {
            "Index": 90,
            "GT": -120,
            "Query": "1 * 1 - 3 * 6 * 7 + 3 * 1 + 2 =   ",
            "Injected CoT": "1 * 1 = 1\n3 * 6 = 18\n18 * 7 = 126\n1 - 126 = -125\n3 * 1 = 3\n-125 + 3 = -122\n-122 + 2 =",
            "Response": " -120\n\n1 * 1 - 3 * 6 * 7 + 3 * 1 + 2 = -120",
            "Extract-Response": " -120.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n\n        if(str[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            result = result * 10 + (str[i] - '0');\n        }\n    }\n\n    printf(\"Result = %d\", sign * result);\n\n    return 0;\n}"
        },
        {
            "Index": 93,
            "GT": 1725,
            "Query": "4 - 9 + 8 * 8 * 9 * 3 - 1 + 3 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 3 = 216\n4 - 9 = -5\n-5 + 72 = 67\n67 * 216 = 14472\n14472 - 1 = 14471\n14471 + 3 =",
            "Response": " 14474\n\n14474",
            "Extract-Response": " 14474\n\n*/"
        },
        {
            "Index": 94,
            "GT": 140,
            "Query": "5 * 6 * 5 * 1 - 8 * 2 + 7 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 5 = 150\n150 * 1 = 150\n8 * 2 = 16\n150 - 16 = 134\n134 + 7 = 141\n141 - 1 =",
            "Response": " 140",
            "Extract-Response": "\n<code>140\n</code>\n"
        },
        {
            "Index": 95,
            "GT": -47,
            "Query": "8 + 4 - 8 * 9 + 3 - 6 + 7 + 9 =   ",
            "Injected CoT": "8 + 4 = 12\n8 * 9 = 72\n12 - 72 = -60\n-60 + 3 = -57\n-57 - 6 = -63\n-63 + 7 = -56\n-56 + 9 =",
            "Response": " -47",
            "Extract-Response": " -47\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,r,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(r=1;r<=t;r++)\n    {\n        gets(s);\n        l=strlen(s);\n        sum=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]==' ')\n                continue;\n            else if(s[i]=='+')\n                continue;\n            else if(s[i]=='-')\n            {\n                sum=sum-s[i+1]-48;\n                i++;\n            }\n            else\n                sum=sum+s[i]-48;\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 97,
            "GT": -177,
            "Query": "7 - 5 * 6 * 5 - 6 * 7 + 7 + 1 =   ",
            "Injected CoT": "5 * 6 = 30\n7 - 30 = -23\n-23 * 5 = -115\n6 * 7 = 42\n-115 - 42 = -157\n-157 + 7 = -150\n-150 + 1 =",
            "Response": " -149\n\n-149\n\n*/",
            "Extract-Response": " -149"
        },
        {
            "Index": 98,
            "GT": 48,
            "Query": "7 + 6 + 1 * 3 * 9 + 5 - 3 + 6 =   ",
            "Injected CoT": "1 * 3 = 3\n9 * 3 = 27\n7 + 6 = 13\n13 + 27 = 40\n40 + 5 = 45\n45 - 3 = 42\n42 + 6 =",
            "Response": " 48",
            "Extract-Response": "\n\n48"
        },
        {
            "Index": 99,
            "GT": -44,
            "Query": "8 - 7 * 6 + 7 + 7 - 4 - 4 * 5 =   ",
            "Injected CoT": "7 * 6 = 42\n8 - 42 = -34\n4 * 5 = 20\n-34 - 7 = -41\n-41 + 7 = -34\n-34 - 4 = -38\n-38 - 20 =",
            "Response": " -58",
            "Extract-Response": " -58.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 100,
            "GT": 40,
            "Query": "4 * 8 - 2 * 3 * 8 + 7 * 1 * 8 =   ",
            "Injected CoT": "4 * 8 = 32\n2 * 3 = 6\n6 * 8 = 48\n32 - 48 = -16\n7 * 1 = 7\n7 * 8 = 56\n-16 + 56 =",
            "Response": " 40\n\n40\n\n*/",
            "Extract-Response": "\n\n40"
        },
        {
            "Index": 101,
            "GT": 232,
            "Query": "9 * 8 + 5 - 1 + 5 * 5 * 6 + 6 =   ",
            "Injected CoT": "9 * 8 = 72\n5 * 5 = 25\n25 * 6 = 150\n72 + 5 = 77\n77 - 1 = 76\n150 + 76 = 226\n226 + 6 =",
            "Response": " 232",
            "Extract-Response": " 232\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s,t,u,v,w,x,y,z,ans;\n    char ch[100];\n    scanf(\"%d\",&t);\n    for(u=1;u<=t;u++)\n    {\n        scanf(\"%s\",ch);\n        n=strlen(ch);\n        ans=0;\n        for(i=0;i<n;i++)\n        {\n            if(ch[i]=='1')\n            {\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='0')\n                    {\n                        for(k=j+1;k<n;k++)\n                        {\n                            if(ch[k]=='1')\n                            {\n                                for(l=k+1;l<n;l++)\n                                {\n                                    if(ch[l]=='0')\n                                    {\n                                        for(m=l+1;m<n;m++)\n                                        {\n                                            if(ch[m]=='1')\n                                            {\n                                                for(a=m+1;a<n;a++)\n                                                {\n                                                    if(ch[a]=='0')\n                                                    {\n                                                        for(b=a+1;b<n;b++)\n                                                        {\n                                                            if(ch[b]=='1')\n                                                            {\n                                                                for(c=b+1;c<n;c++)\n                                                                {\n                                                                    if(ch[c]=='0')\n                                                                    {\n                                                                        for(d=c+1;d<n;d++)\n                                                                        {\n                                                                            if(ch[d]=='1')\n                                                                            {\n                                                                                for(e=d+1;e<n;e++)\n                                                                                {\n                                                                                    if(ch[e]=='0')\n                                                                                    {\n                                                                                        for(f=e+1;f<n;f++)\n                                                                                        {\n                                                                                            if(ch[f]=='1')\n                                                                                            {\n                                                                                                for(g=f+1;g<n;g++)\n                                                                                                {\n                                                                                                    if(ch[g]=='0')\n                                                                                                    {\n                                                                                                        for(h=g+1;h<n;h++)\n                                                                                                        {\n                                                                                                            if(ch[h]=='1')\n                                                                                                            {\n                                                                                                                for(s=h+1;s<n;s++)\n                                                                                                                {\n                                                                                                                    if(ch[s]=='0')\n                                                                                                                    {\n                                                                                                                        for(v=s+1;v<n;v++)\n                                                                                                                        {\n                                                                                                                            if(ch[v]=='1')\n                                                                                                                            {\n                                                                                                                                for(w=v+1;w<n;w++)\n                                                                                                                                {\n                                                                                                                                    if(ch[w]=='0')\n                                                                                                                                    {\n                                                                                                                                        for(x=w+1;x<n;x++)\n                                                                                                                                        {\n                                                                                                                                            if(ch[x]=='1')\n                                                                                                                                            {\n                                                                                                                                                for(y=x+1;y<n;y++)\n                                                                                                                                                {\n                                                                                                                                                    if(ch[y]=='0')\n                                                                                                                                                    {\n                                                                                                                                                        for(z=y+1;z<n;z++)\n                                                                                                                                                        {\n                                                                                                                                                            if(ch[z]=='1')\n                                                                                                                                                            {\n                                                                                                                                                                ans++;\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
        },
        {
            "Index": 102,
            "GT": 626,
            "Query": "7 * 6 * 1 * 5 * 3 - 1 + 4 - 7 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 1 = 42\n42 * 5 = 210\n210 * 3 = 630\n630 - 1 = 629\n629 + 4 = 633\n633 - 7 =",
            "Response": " 626",
            "Extract-Response": " 626\n</code>\n"
        },
        {
            "Index": 104,
            "GT": -22,
            "Query": "6 * 1 * 4 - 7 * 7 + 5 - 8 + 6 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 4 = 24\n7 * 7 = 49\n24 - 49 = -25\n-25 + 5 = -20\n-20 - 8 = -28\n-28 + 6 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 500.\nEach node will have value between -10^9 and 10^9.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int &maxSum) {\n        if(root == NULL) {\n            return 0;\n        }\n        \n        int leftSum = maxPathSumHelper(root->left, maxSum);\n        int rightSum = maxPathSumHelper(root->right, maxSum);\n        \n        int currSum = root->val;\n        if(leftSum > 0) {\n            currSum += leftSum;\n        }\n        if(rightSum > 0) {\n            currSum += rightSum;\n        }\n        \n        if(currSum > maxSum) {\n            maxSum = currSum;\n        }\n        \n        return max(root->val, max(root->val + leftSum, root->val + rightSum));\n    }\n};"
        },
        {
            "Index": 106,
            "GT": 217,
            "Query": "6 * 5 * 1 * 7 - 5 + 3 + 3 + 6 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 1 = 30\n30 * 7 = 210\n210 - 5 = 205\n205 + 3 = 208\n208 + 3 = 211\n211 + 6 =",
            "Response": " 217",
            "Extract-Response": " 217\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ans += cur;\n            cur = 0;\n        } else if (s[i] == '-') {\n            ans += cur;\n            cur = 0;\n            ans -= 1;\n        } else if (s[i] == '*') {\n            ans *= cur;\n            cur = 0;\n        } else if (s[i] == '/') {\n            ans /= cur;\n            cur = 0;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    ans += cur;\n    cout << ans << endl;\n}"
        },
        {
            "Index": 108,
            "GT": -25,
            "Query": "4 - 5 + 6 + 1 - 9 - 2 * 9 - 4 =   ",
            "Injected CoT": "2 * 9 = 18\n4 - 5 = -1\n-1 + 6 = 5\n5 + 1 = 6\n6 - 9 = -3\n-3 - 18 = -21\n-21 - 4 =",
            "Response": " -25",
            "Extract-Response": " -25\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <functional>\n#include <stdio.h>\n#include <sstream>\n#include <fstream>\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n\nint main() {\n\tstring s;\n\tcin >> s;\n\n\tint ans = 0;\n\tint sign = 1;\n\tint cur = 0;\n\tfor (int i = 0; i < s.size(); ++i) {\n\t\tif (s[i] == '+' || s[i] == '-') {\n\t\t\tans += sign * cur;\n\t\t\tsign = (s[i] == '+') ? 1 : -1;\n\t\t\tcur = 0;\n\t\t} else {\n\t\t\tcur = cur * 10 + s[i] - '0';\n\t\t}\n\t}\n\tans += sign * cur;\n\tcout << ans << endl;\n\treturn 0;\n}"
        },
        {
            "Index": 109,
            "GT": -34,
            "Query": "9 + 3 * 6 - 6 - 5 * 9 - 9 - 1 =   ",
            "Injected CoT": "3 * 6 = 18\n9 + 18 = 27\n5 * 9 = 45\n27 - 6 = 21\n45 - 9 = 36\n21 - 36 = -15\n-15 - 1 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 110,
            "GT": 85,
            "Query": "6 + 5 * 1 + 5 * 6 * 3 - 7 - 9 =   ",
            "Injected CoT": "5 * 1 = 5\n6 + 5 = 11\n6 * 3 = 18\n5 * 18 = 90\n11 + 90 = 101\n101 - 7 = 94\n94 - 9 =",
            "Response": " 85\n\n85",
            "Extract-Response": " 85\n\n*/"
        },
        {
            "Index": 111,
            "GT": 28,
            "Query": "3 + 2 * 5 + 5 - 7 + 8 + 3 * 3 =   ",
            "Injected CoT": "2 * 5 = 10\n3 + 10 = 13\n13 + 5 = 18\n18 - 7 = 11\n11 + 8 = 19\n3 * 3 = 9\n19 + 9 =",
            "Response": " 28",
            "Extract-Response": "\n\n28"
        },
        {
            "Index": 112,
            "GT": -2,
            "Query": "5 - 5 + 6 * 2 - 7 + 3 - 9 - 1 =   ",
            "Injected CoT": "6 * 2 = 12\n5 - 5 = 0\n0 + 12 = 12\n12 - 7 = 5\n5 + 3 = 8\n8 - 9 = -1\n-1 - 1 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nInput/Output\n\n[execution time limit] 4 seconds (js)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n*/\n\nfunction expressionMatter(a, b, c) {\n    return Math.max(a + b + c, a * b * c, a * (b + c), (a + b) * c, a + b * c, a * b + c);\n}"
        },
        {
            "Index": 113,
            "GT": 276,
            "Query": "4 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =   ",
            "Injected CoT": "4 * 8 = 32\n32 * 8 = 256\n1 * 4 = 4\n4 * 1 = 4\n256 + 4 = 260\n260 + 7 = 267\n267 + 9 =",
            "Response": " 276\n\n*/\n\npublic class Main {\n    public static void main(String[] args) {\n        int a = 4;\n        int b = 8;\n        int c = 1;\n        int d = 7;\n        int e = 9;\n        int result = a * b * c * d * e;\n        System.out.println(result);\n    }\n}",
            "Extract-Response": " 276"
        },
        {
            "Index": 114,
            "GT": 43,
            "Query": "9 - 8 + 5 * 5 + 7 * 3 + 1 - 5 =   ",
            "Injected CoT": "5 * 5 = 25\n7 * 3 = 21\n-8 + 25 = 17\n17 + 21 = 38\n38 + 1 = 39\n39 - 5 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 115,
            "GT": 104,
            "Query": "4 * 5 + 6 * 4 + 5 * 6 + 5 * 6 =   ",
            "Injected CoT": "4 * 5 = 20\n6 * 4 = 24\n5 * 6 = 30\n5 * 6 = 30\n20 + 24 = 44\n44 + 30 = 74\n74 + 30 =",
            "Response": " 104",
            "Extract-Response": " 104\n</code>\n"
        },
        {
            "Index": 116,
            "GT": -84,
            "Query": "3 * 2 - 5 - 9 + 5 * 1 - 9 * 9 =   ",
            "Injected CoT": "3 * 2 = 6\n5 * 1 = 5\n9 * 9 = 81\n6 - 5 = 1\n1 - 9 = -8\n5 - 81 =",
            "Response": " -76",
            "Extract-Response": " -76.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
        },
        {
            "Index": 117,
            "GT": 396,
            "Query": "9 + 4 - 2 + 4 * 7 * 7 * 2 - 7 =   ",
            "Injected CoT": "4 * 7 = 28\n28 * 7 = 196\n196 * 2 = 392\n9 + 4 = 13\n13 - 2 = 11\n11 + 392 = 403\n403 - 7 =",
            "Response": " 396",
            "Extract-Response": " 396\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "5 + 6 + 6 - 6 * 6 + 1 * 5 * 5 =   ",
            "Injected CoT": "6 * 6 = 36\n5 * 5 = 25\n5 + 6 = 11\n11 + 6 = 17\n17 - 36 = -19\n-19 + 25 = 6\n6 + 1 = 7\n7 * 5 = 35\n35 + 6 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote:\nThe input is only given to initialize the map internally. You must solve this problem \"blindfolded\". In other words, you must find the answer using the map approach described in the problem statement. The judge's data does not contain the map.\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int> > a(n, vector<int>(m));\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            cin >> a[i][j];\n        }\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i][j] == 1) {\n                if (i == 0 && j == 0) {\n                    result += a[i][j];\n                } else if (i == 0) {\n                    result += a[i][j] + a[i][j - 1];\n                } else if (j == 0) {\n                    result += a[i][j] + a[i - 1][j];\n                } else {\n                    result += a[i][j] + a[i][j - 1] + a[i - 1][j] - a[i - 1][j - 1];\n                }\n            }\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 119,
            "GT": 17,
            "Query": "8 + 8 - 4 - 2 + 3 * 4 - 4 - 1 =   ",
            "Injected CoT": "8 + 8 = 16\n16 - 4 = 12\n12 - 2 = 10\n3 * 4 = 12\n10 + 12 = 22\n22 - 4 = 18\n18 - 1 =",
            "Response": " 17",
            "Extract-Response": " 17\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, num = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            result += num * sign;\n            num = 0;\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            result += num * sign;\n            num = 0;\n            sign = -1;\n        }\n        else\n        {\n            num = num * 10 + (input[i] - '0');\n        }\n    }\n\n    result += num * sign;\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 120,
            "GT": 66,
            "Query": "6 * 4 + 7 * 7 - 2 - 8 + 4 - 1 =   ",
            "Injected CoT": "6 * 4 = 24\n7 * 7 = 49\n24 + 49 = 73\n73 - 2 = 71\n71 - 8 = 63\n63 + 4 = 67\n67 - 1 =",
            "Response": " 66",
            "Extract-Response": " 66.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 10^4.\n-10^5 <= node.val <= 10^5\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        int sum = 0;\n        dfs(root, NULL, NULL, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, TreeNode* parent, TreeNode* grandparent, int& sum) {\n        if (!root) return;\n        if (grandparent && grandparent->val % 2 == 0) {\n            sum += root->val;\n        }\n        dfs(root->left, root, parent, sum);\n        dfs(root->right, root, parent, sum);\n    }\n};"
        },
        {
            "Index": 121,
            "GT": 45,
            "Query": "2 - 4 + 7 * 3 + 9 * 3 - 6 + 5 =   ",
            "Injected CoT": "7 * 3 = 21\n9 * 3 = 27\n2 - 4 = -2\n-2 + 21 = 19\n19 + 27 = 46\n46 - 6 = 40\n40 + 5 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+'||s[i]=='-')\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n    {\n        for(i=0;i<len;i++)\n        {\n            sum=sum*10+(s[i]-48);\n        }\n        printf(\"%d\",sum);\n    }\n    else\n    {\n        for(i=0;i<len;i++)\n        {\n            if(s[i]=='+')\n            {\n                flag=0;\n                continue;\n            }\n            if(s[i]=='-')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                sum=sum*10+(s[i]-48);\n            }\n            if(flag==1)\n            {\n                sum=sum-(s[i]-48);\n            }\n        }\n        printf(\"%d\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 123,
            "GT": 49,
            "Query": "7 * 4 + 4 + 6 * 3 - 6 + 5 * 1 =   ",
            "Injected CoT": "7 * 4 = 28\n6 * 3 = 18\n28 + 4 = 32\n32 + 18 = 50\n5 * 1 = 5\n50 + 5 = 55\n55 - 6 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            for(j=0;j<i;j++)\n            {\n                sum=sum+s[j]-48;\n            }\n            for(k=i+1;k<len;k++)\n            {\n                sum=sum+s[k]-48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n        else if(s[i]=='-')\n        {\n            for(l=0;l<i;l++)\n            {\n                sum=sum+s[l]-48;\n            }\n            for(m=i+1;m<len;m++)\n            {\n                sum=sum-s[m]+48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n        else if(s[i]=='*')\n        {\n            for(n=0;n<i;n++)\n            {\n                sum=sum+s[n]-48;\n            }\n            for(k=i+1;k<len;k++)\n            {\n                sum=sum*s[k]-48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n    }\n    return 0;\n}"
        },
        {
            "Index": 124,
            "GT": 129,
            "Query": "5 * 6 + 9 * 9 + 3 * 6 + 1 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n9 * 9 = 81\n3 * 6 = 18\n30 + 81 = 111\n111 + 18 = 129\n129 + 1 = 130\n130 - 1 =",
            "Response": " 129",
            "Extract-Response": " 129\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    printf(\"Enter a number: \");\n    gets(num);\n    for(i = 0; i < strlen(num); i++)\n    {\n        sum += pow((num[i] - '0'), 2);\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 126,
            "GT": 97,
            "Query": "6 * 6 + 1 * 8 - 6 + 5 + 9 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n1 * 8 = 8\n9 * 6 = 54\n36 + 8 = 44\n44 - 6 = 38\n38 + 5 = 43\n43 + 54 =",
            "Response": " 97",
            "Extract-Response": " 97\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<string> vs;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define foru(i,a,b) for(int i = int(a); i <= int(b); ++i)\n#define ford(i,b,a) for(int i = int(b); i >= int(a); --i)\n#define rep(i, n) for(int i = 0; i < int(n); ++i)\n#define all(a) a.begin(),a.end()\n#define size(a) int(a.size())\n#define fill(a,x) memset(a, (x), sizeof(a))\n#define mp(x,y) make_pair((x), (y))\n#define pb(x) push_back((x))\n#define fr first\n#define sc second\n#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)\n\nint read() {   int x;   scanf(\"%d\",&x);   return x;   }\nint read(int &x) {  scanf(\"%d\",&x);     return x;   }\nint readln() {  int x;  scanf(\"%d\\n\",&x);   return x;   }\nint readln(int &x) {   scanf(\"%d\\n\",&x);   return x;   }\n\nconst int MAX_N = 1000005;\nconst int oo = 0x3f3f3f3f;\n\nint n, m, k;\nint a[MAX_N], b[MAX_N];\n\nint main() {\n#ifndef ONLINE_JUDGE\n   freopen(\"1009.in\", \"r\", stdin);\n   freopen(\"1009.out\", \"w\", stdout);\n#endif\n   scanf(\"%d%d%d\", &n, &m, &k);\n   foru(i, 1, n) scanf(\"%d\", &a[i]);\n   foru(i, 1, m) scanf(\"%d\", &b[i]);\n   int i = 1, j = 1;\n   ll res = 0;\n   while (i <= n && j <= m) {\n      if (a[i] == b[j]) {\n         ++i;\n         ++j;\n      }\n      else {\n         if (a[i] < b[j]) {\n            ++i;\n            res += k;\n         }\n         else {\n            ++j;\n            res += k;\n         }\n      }\n   }\n   while (i <= n) {\n      ++i;\n      res += k;\n   }\n   while (j <= m) {\n      ++j;\n      res += k;\n   }\n   printf(\"%lld\\n\", res);\n   return 0;\n}"
        },
        {
            "Index": 127,
            "GT": 144,
            "Query": "8 * 2 * 4 * 2 + 9 * 3 - 8 - 3 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 4 = 64\n64 * 2 = 128\n9 * 3 = 27\n128 + 27 = 155\n155 - 8 = 147\n147 - 3 =",
            "Response": " 144",
            "Extract-Response": " 144\n</code>\n"
        },
        {
            "Index": 129,
            "GT": -9,
            "Query": "3 + 9 * 1 - 2 + 8 - 9 - 3 * 6 =   ",
            "Injected CoT": "9 * 1 = 9\n3 + 9 = 12\n12 - 2 = 10\n10 + 8 = 18\n18 - 9 = 9\n3 * 6 = 18\n9 - 18 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 132,
            "GT": 70,
            "Query": "7 - 6 * 1 - 8 + 1 + 8 * 9 + 4 =   ",
            "Injected CoT": "6 * 1 = 6\n7 - 6 = 1\n8 * 9 = 72\n1 - 8 = -7\n1 + (-7) = -6\n-6 + 72 = 66\n66 + 4 =",
            "Response": " 70",
            "Extract-Response": " 70.\n\nNote:\nThe length of the input array is less than 1000.\nThere is only one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 133,
            "GT": 161,
            "Query": "6 * 7 + 9 * 6 + 7 * 5 + 6 * 5 =   ",
            "Injected CoT": "6 * 7 = 42\n9 * 6 = 54\n7 * 5 = 35\n6 * 5 = 30\n42 + 54 = 96\n96 + 35 = 131\n131 + 30 =",
            "Response": " 161\n\n*/\n\npublic class MultiplyDigits {\n\tpublic static void main(String[] args) {\n\t\tint num = 12345;\n\t\tint sum = 0;\n\t\tint prod = 1;\n\t\twhile (num > 0) {\n\t\t\tprod = prod * (num % 10);\n\t\t\tnum = num / 10;\n\t\t\tsum = sum + prod;\n\t\t\tprod = 1;\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}",
            "Extract-Response": " 161"
        },
        {
            "Index": 134,
            "GT": 96,
            "Query": "8 * 9 + 8 + 4 + 1 * 4 * 1 * 3 =   ",
            "Injected CoT": "8 * 9 = 72\n1 * 4 = 4\n4 * 1 = 4\n4 * 3 = 12\n72 + 8 = 80\n80 + 4 = 84\n84 + 12 =",
            "Response": " 96\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, sum = 0, temp;\n    scanf(\"%d\", &n);\n    temp = n;\n    while (temp != 0)\n    {\n        sum = sum + temp % 10;\n        temp = temp / 10;\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Extract-Response": "\n\n96"
        },
        {
            "Index": 135,
            "GT": -50,
            "Query": "4 - 9 + 5 * 1 + 1 - 3 - 6 * 8 =   ",
            "Injected CoT": "5 * 1 = 5\n-6 * 8 = -48\n4 - 9 = -5\n-5 + 5 = 0\n0 + 1 = 1\n1 - 3 = -2\n-2 - 48 =",
            "Response": " -50",
            "Extract-Response": " -50.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 105.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluateExpression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()"
        },
        {
            "Index": 136,
            "GT": 14,
            "Query": "7 - 2 - 5 - 4 + 4 * 6 - 1 - 5 =   ",
            "Injected CoT": "7 - 2 = 5\n5 - 5 = 0\n0 - 4 = -4\n4 * 6 = 24\n-4 + 24 = 20\n20 - 1 = 19\n19 - 5 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 137,
            "GT": -273,
            "Query": "2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 =   ",
            "Injected CoT": "2 * 1 = 2\n9 * 1 = 9\n9 * 8 = 72\n72 * 4 = 288\n2 - 288 = -286\n-286 + 6 = -280\n-280 + 7 =",
            "Response": " -273\n\n2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 = -273",
            "Extract-Response": " -273.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,len,flag,sum;\n    while(gets(s))\n    {\n        sum=0;\n        flag=1;\n        len=strlen(s);\n        for(i=0;i<len;i++)\n        {\n            if(s[i]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(s[i]=='+')\n            {\n                flag=1;\n                continue;\n            }\n            if(s[i]=='-')\n            {\n                flag=0;\n                continue;\n            }\n            if(flag)\n            {\n                sum=sum*10+s[i]-'0';\n            }\n            else\n            {\n                sum=sum*10-s[i]-'0';\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 138,
            "GT": -10,
            "Query": "9 * 2 - 1 - 3 - 2 - 8 - 2 * 7 =   ",
            "Injected CoT": "9 * 2 = 18\n18 - 1 = 17\n17 - 3 = 14\n14 - 2 = 12\n12 - 8 = 4\n2 * 7 = 14\n4 - 14 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 139,
            "GT": -122,
            "Query": "1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =   ",
            "Injected CoT": "-7 * 7 = -49\n-8 * 9 = -72\n1 + 2 + 4 = 7\n-49 - 8 = -57\n-57 - 72 =",
            "Response": " -129",
            "Extract-Response": " -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 *"
        },
        {
            "Index": 141,
            "GT": 73,
            "Query": "4 + 8 * 7 + 8 + 3 + 5 - 7 + 4 =   ",
            "Injected CoT": "8 * 7 = 56\n4 + 56 = 60\n60 + 8 = 68\n68 + 3 = 71\n71 + 5 = 76\n76 - 7 = 69\n69 + 4 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        sum = 0;\n        l = strlen(s);\n        for(j = 0; j < l; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum * 10 + s[j] - '0';\n            }\n        }\n        for(j = j + 2; j < l; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum - s[j] + '0';\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 142,
            "GT": -1,
            "Query": "5 - 5 - 2 + 7 - 3 - 4 - 4 + 5 =   ",
            "Injected CoT": "5 - 5 = 0\n0 - 2 = -2\n-2 + 7 = 5\n5 - 3 = 2\n2 - 4 = -2\n-2 - 4 = -6\n-6 + 5 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9+7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 145,
            "GT": 42,
            "Query": "7 * 6 + 3 * 9 - 4 - 7 - 9 - 7 =   ",
            "Injected CoT": "7 * 6 = 42\n3 * 9 = 27\n42 + 27 = 69\n69 - 4 = 65\n65 - 7 = 58\n58 - 9 = 49\n49 - 7 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 146,
            "GT": 114,
            "Query": "7 * 8 * 1 * 2 + 8 - 2 - 8 + 4 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 1 = 56\n56 * 2 = 112\n112 + 8 = 120\n120 - 2 = 118\n118 - 8 = 110\n110 + 4 =",
            "Response": " 114\n\n114\n\n*/",
            "Extract-Response": "\n\n114"
        },
        {
            "Index": 148,
            "GT": -7,
            "Query": "6 * 3 - 4 * 8 + 2 + 4 - 8 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n4 * 8 = 32\n18 - 32 = -14\n2 + 4 = 6\n-14 + 6 = -8\n-8 - 8 = -16\n-16 + 9 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 150,
            "GT": 655,
            "Query": "7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 =   ",
            "Injected CoT": "7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 =",
            "Response": " 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = 655",
            "Extract-Response": " 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = 655\nThe answer is 655"
        },
        {
            "Index": 151,
            "GT": -79,
            "Query": "8 - 7 - 9 * 7 - 7 * 1 * 2 - 3 =   ",
            "Injected CoT": "9 * 7 = 63\n7 * 1 = 7\n7 * 2 = 14\n63 - 14 = 49\n8 - 7 = 1\n1 - 49 =",
            "Response": " -48",
            "Extract-Response": " -48\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 153,
            "GT": 45,
            "Query": "1 * 9 * 6 + 7 - 7 - 5 - 2 * 2 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 6 = 54\n54 + 7 = 61\n61 - 7 = 54\n54 - 5 = 49\n2 * 2 = 4\n49 - 4 =",
            "Response": " 45\n\n45",
            "Extract-Response": " 45\n\n*/"
        },
        {
            "Index": 155,
            "GT": 832,
            "Query": "6 * 5 * 7 * 4 - 5 + 9 - 4 - 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 7 = 210\n210 * 4 = 840\n840 - 5 = 835\n835 + 9 = 844\n844 - 4 = 840\n840 - 8 =",
            "Response": " 832",
            "Extract-Response": " 832\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num"
        },
        {
            "Index": 156,
            "GT": 45,
            "Query": "6 * 2 - 7 + 3 - 3 + 4 + 6 * 6 =   ",
            "Injected CoT": "6 * 2 = 12\n12 - 7 = 5\n5 + 3 = 8\n8 - 3 = 5\n5 + 4 = 9\n6 * 6 = 36\n9 + 36 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 157,
            "GT": 84,
            "Query": "8 * 7 - 9 + 6 * 9 - 5 - 6 * 2 =   ",
            "Injected CoT": "8 * 7 = 56\n6 * 9 = 54\n6 * 2 = 12\n56 - 9 = 47\n47 + 54 = 101\n101 - 5 = 96\n96 - 12 =",
            "Response": " 84",
            "Extract-Response": " 84\n</code>\n"
        },
        {
            "Index": 158,
            "GT": -6,
            "Query": "3 * 2 - 7 + 9 - 5 + 3 - 7 - 5 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 7 = -1\n-1 + 9 = 8\n8 - 5 = 3\n3 + 3 = 6\n6 - 7 = -1\n-1 - 5 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 159,
            "GT": -74,
            "Query": "3 + 4 - 5 - 8 - 7 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 8 = 56\n3 + 4 = 7\n7 - 5 = 2\n2 - 8 = -6\n-6 - 56 = -62\n-62 - 3 = -65\n-65 - 9 =",
            "Response": " -74",
            "Extract-Response": " -74.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 160,
            "GT": 49,
            "Query": "2 - 2 - 9 - 3 + 8 + 8 * 7 - 3 =   ",
            "Injected CoT": "2 - 2 = 0\n0 - 9 = -9\n-9 - 3 = -12\n-12 + 8 = -4\n-4 + 8 * 7 = 52\n52 - 3 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 161,
            "GT": -145,
            "Query": "8 - 5 - 3 * 4 - 6 * 4 * 6 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n6 * 4 = 24\n24 * 6 = 144\n5 + 12 = 17\n17 - 12 = 5\n8 - 5 = 3\n3 - 144 = -141\n-141 + 8 =",
            "Response": " -133",
            "Extract-Response": " -133.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if(!ops.empty() && ops.top() == '*') {\n                    ops.pop();\n                    nums.top() *= num;\n                } else if(!ops.empty() && ops.top() == '/') {\n                    ops.pop();\n                    nums.top() /= num;\n                } else {\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        if(!ops.empty() && ops.top() == '*') {\n            ops.pop();\n            nums.top() *= num;\n        } else if(!ops.empty() && ops.top() == '/') {\n            ops.pop();\n            nums.top() /= num;\n        } else {\n            nums.push(num);\n        }\n        int res = 0;\n        while(!ops.empty()) {\n            char op = ops.top();\n            ops.pop();\n            int n1 = nums.top();\n            nums.pop();\n            int n2 = nums.top();\n            nums.pop();\n            if(op == '+') {\n                res = n1 + n2;\n            } else {\n                res = n2 - n1;\n            }\n            nums.push(res);\n        }\n        return nums.top();\n    }\n};"
        },
        {
            "Index": 162,
            "GT": -1,
            "Query": "6 - 8 + 6 - 7 + 1 + 1 - 3 + 3 =   ",
            "Injected CoT": "6 - 8 = -2\n-2 + 6 = 4\n4 - 7 = -3\n-3 + 1 = -2\n-2 + 1 = -1\n-1 - 3 = -4\n-4 + 3 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (js)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n*/\n\nfunction arrayChange(a) {\n    let count = 0;\n    for (let i = 0; i < a.length - 1; i++) {\n        if (a[i] >= a[i + 1]) {\n            count += a[i] - a[i + 1] + 1;\n            a[i + 1] = a[i] + 1;\n        }\n    }\n    return count;\n}"
        },
        {
            "Index": 165,
            "GT": 154,
            "Query": "4 + 9 * 9 + 8 * 8 + 3 - 5 + 7 =   ",
            "Injected CoT": "9 * 9 = 81\n8 * 8 = 64\n4 + 81 = 85\n85 + 64 = 149\n149 + 3 = 152\n152 - 5 = 147\n147 + 7 =",
            "Response": " 154",
            "Extract-Response": " 154\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        if(str[i] == '+')\n        {\n            continue;\n        }\n\n        if(str[i] == '-')\n        {\n            continue;\n        }\n\n        sum = sum + (str[i] - '0') * pow(10, len - i - 1);\n    }\n\n    printf(\"The answer is  %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 166,
            "GT": -304,
            "Query": "9 * 2 - 7 - 5 * 7 * 1 * 3 * 3 =   ",
            "Injected CoT": "9 * 2 = 18\n7 * 1 = 7\n3 * 3 = 9\n7 * 7 = 49\n49 * 9 = 441\n441 * 5 = 2205\n18 - 7 = 11\n11 - 2205 =",
            "Response": " -2194",
            "Extract-Response": " -2194\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 1;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        result += sign * curr;\n        curr *= 2;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 167,
            "GT": 39,
            "Query": "6 * 6 + 7 - 3 - 4 - 6 + 5 + 4 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 7 = 43\n43 - 3 = 40\n40 - 4 = 36\n36 - 6 = 30\n30 + 5 = 35\n35 + 4 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 168,
            "GT": -8,
            "Query": "2 + 5 * 6 - 7 * 8 + 6 + 4 + 6 =   ",
            "Injected CoT": "5 * 6 = 30\n2 + 30 = 32\n7 * 8 = 56\n32 - 56 = -24\n-24 + 6 = -18\n-18 + 4 = -14\n-14 + 6 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 169,
            "GT": 43,
            "Query": "8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =   ",
            "Injected CoT": "8 * 8 = 64\n2 * 4 = 8\n1 * 8 = 8\n3 * 2 = 6\n8 - 6 = 2\n2 - 7 = -5\n64 - 8 - 5 =",
            "Response": " 51\n\n8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =    \n8 * 8 = 64\n2 * 4 = 8\n1 * 8 = 8\n3 * 2 = 6\n8 - 6 = 2\n2 - 7 = -5\n64 - 8 - 5 = 51\n\n8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =    \n8 * 8 = 64\n2 * 4 = 8\n1 * 8 = 8\n3 * 2 = 6\n8 - 6 = 2\n2 - 7 = -5\n64 - 8 - 5 = 51\n\n8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =    \n8 * 8 = 64\n2 * 4 = 8\n1 * 8 = 8\n3 * 2 = 6\n8 - 6 = 2\n2 - 7 = -5\n64 - 8 - 5 = 51",
            "Extract-Response": " 51"
        },
        {
            "Index": 170,
            "GT": -18,
            "Query": "7 - 8 * 2 - 9 + 1 + 4 - 7 + 2 =   ",
            "Injected CoT": "8 * 2 = 16\n7 - 16 = -9\n-9 - 9 = -18\n-18 + 1 = -17\n-17 + 4 = -13\n-13 - 7 = -20\n-20 + 2 =",
            "Response": " -18\n\n-18",
            "Extract-Response": "\n\n-18"
        },
        {
            "Index": 172,
            "GT": 12,
            "Query": "4 * 4 - 3 + 1 + 9 - 6 * 3 + 7 =   ",
            "Injected CoT": "4 * 4 = 16\n16 - 3 = 13\n13 + 1 = 14\n14 + 9 = 23\n6 * 3 = 18\n23 - 18 = 5\n5 + 7 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 173,
            "GT": -113,
            "Query": "6 * 4 + 5 - 5 - 4 * 4 * 9 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n4 * 4 = 16\n16 * 9 = 144\n24 + 5 = 29\n29 - 5 = 24\n24 - 144 = -120\n-120 + 7 =",
            "Response": " -113",
            "Extract-Response": " -113.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 174,
            "GT": 24,
            "Query": "5 + 8 + 9 + 2 * 3 - 5 - 2 + 3 =   ",
            "Injected CoT": "2 * 3 = 6\n5 + 8 = 13\n13 + 9 = 22\n22 + 6 = 28\n28 - 5 = 23\n23 - 2 = 21\n21 + 3 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 175,
            "GT": 1503,
            "Query": "1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 2 = 14\n14 * 9 = 126\n126 * 3 = 378\n378 * 4 = 1512\n1512 - 7 = 1505\n1505 - 2 =",
            "Response": " 1503\n\n1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 = 1503",
            "Extract-Response": "\n\n1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 = 1503"
        },
        {
            "Index": 176,
            "GT": 14,
            "Query": "1 * 5 + 7 - 2 + 4 * 3 - 9 + 1 =   ",
            "Injected CoT": "1 * 5 = 5\n4 * 3 = 12\n5 + 7 = 12\n12 - 2 = 10\n10 + 12 = 22\n22 - 9 = 13\n13 + 1 =",
            "Response": " 14",
            "Extract-Response": " 14\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n    op = '+';\n\n    for(i=0; i<len; i++)\n    {\n        if(isdigit(input[i]))\n        {\n            if(op == '+')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '-')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n            else if(op == '*')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '/')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n        }\n        else\n        {\n            if(op == '+')\n            {\n                result = num1 + num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '-')\n            {\n                result = num1 - num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '*')\n            {\n                result = num1 * num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '/')\n            {\n                result = num1 / num2;\n                num1 = result;\n                num2 = 0;\n            }\n\n            op = input[i];\n        }\n    }\n\n    if(op == '+')\n    {\n        result = num1 + num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '-')\n    {\n        result = num1 - num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '*')\n    {\n        result = num1 * num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '/')\n    {\n        result = num1 / num2;\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 180,
            "GT": 2536,
            "Query": "5 * 7 * 9 * 4 * 2 + 3 * 5 + 1 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 9 = 315\n315 * 4 = 1260\n1260 * 2 = 2520\n3 * 5 = 15\n2520 + 15 = 2535\n2535 + 1 =",
            "Response": " 2536\n\nThe smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is 2536.\n\n*/\n\npublic class Problem5 {\n\tpublic static void main(String[] args) {\n\t\tint smallest = 1;\n\t\tboolean found = false;\n\t\twhile (!found) {\n\t\t\tfor (int i = 1; i <= 20; i++) {\n\t\t\t\tif (smallest % i != 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == 20) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\tsmallest++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(smallest);\n\t}\n}",
            "Extract-Response": " 2520"
        },
        {
            "Index": 181,
            "GT": 1046,
            "Query": "9 * 4 * 7 * 4 + 1 + 2 + 7 * 5 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 7 = 252\n252 * 4 = 1008\n1 + 1008 = 1009\n1009 + 2 = 1011\n7 * 5 = 35\n1011 + 35 =",
            "Response": " 1046",
            "Extract-Response": " 1046\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int N, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum, len, flag;\n    char str[MAX_SIZE];\n    while(gets(str))\n    {\n        sum = 0;\n        len = strlen(str);\n        for(i = 0; i < len; i++)\n        {\n            if(str[i] == 'a' || str[i] == 'A')\n            {\n                sum = sum + 1;\n            }\n            else if(str[i] == 'b' || str[i] == 'B')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == 'c' || str[i] == 'C')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == 'd' || str[i] == 'D')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == 'e' || str[i] == 'E')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == 'f' || str[i] == 'F')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == 'g' || str[i] == 'G')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == 'h' || str[i] == 'H')\n            {\n                sum = sum + 8;\n            }\n            else if(str[i] == 'i' || str[i] == 'I')\n            {\n                sum = sum + 9;\n            }\n            else if(str[i] == 'j' || str[i] == 'J')\n            {\n                sum = sum + 10;\n            }\n            else if(str[i] == 'k' || str[i] == 'K')\n            {\n                sum = sum + 11;\n            }\n            else if(str[i] == 'l' || str[i] == 'L')\n            {\n                sum = sum + 12;\n            }\n            else if(str[i] == 'm' || str[i] == 'M')\n            {\n                sum = sum + 13;\n            }\n            else if(str[i] == 'n' || str[i] == 'N')\n            {\n                sum = sum + 14;\n            }\n            else if(str[i] == 'o' || str[i] == 'O')\n            {\n                sum = sum + 15;\n            }\n            else if(str[i] == 'p' || str[i] == 'P')\n            {\n                sum = sum + 16;\n            }\n            else if(str[i] == 'q' || str[i] == 'Q')\n            {\n                sum = sum + 17;\n            }\n            else if(str[i] == 'r' || str[i] == 'R')\n            {\n                sum = sum + 18;\n            }\n            else if(str[i] == 's' || str[i] == 'S')\n            {\n                sum = sum + 19;\n            }\n            else if(str[i] == 't' || str[i] == 'T')\n            {\n                sum = sum + 20;\n            }\n            else if(str[i] == 'u' || str[i] == 'U')\n            {\n                sum = sum + 21;\n            }\n            else if(str[i] == 'v' || str[i] == 'V')\n            {\n                sum = sum + 22;\n            }\n            else if(str[i] == 'w' || str[i] == 'W')\n            {\n                sum = sum + 23;\n            }\n            else if(str[i] == 'x' || str[i] == 'X')\n            {\n                sum = sum + 24;\n            }\n            else if(str[i] == 'y' || str[i] == 'Y')\n            {\n                sum = sum + 25;\n            }\n            else if(str[i] == 'z' || str[i] == 'Z')\n            {\n                sum = sum + 26;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 182,
            "GT": 130,
            "Query": "2 * 9 - 3 * 1 + 7 + 6 * 3 * 6 =   ",
            "Injected CoT": "2 * 9 = 18\n3 * 1 = 3\n6 * 3 = 18\n18 * 6 = 108\n18 - 3 = 15\n7 + 15 = 22\n22 + 108 =",
            "Response": " 130",
            "Extract-Response": "\n\n130"
        },
        {
            "Index": 187,
            "GT": 58,
            "Query": "7 * 7 + 7 - 2 + 4 * 2 - 2 - 2 =   ",
            "Injected CoT": "7 * 7 = 49\n49 + 7 = 56\n4 * 2 = 8\n56 + 8 = 64\n64 - 2 = 62\n62 - 2 =",
            "Response": " 60\n60 - 2 = 58",
            "Extract-Response": " 58\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d, e, f, g, h, i, j, k, l, m, n1, o, p, q, r, s, t, u, v, w, x, y, z;\n    cin >> n;\n    a = n / 100000;\n    b = (n / 10000) % 10;\n    c = (n / 1000) % 10;\n    d = (n / 100) % 10;\n    e = (n / 10) % 10;\n    f = n % 10;\n\n    int result = a + b + c + d + e + f;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 188,
            "GT": 34,
            "Query": "3 * 3 + 7 * 3 * 2 - 2 * 9 + 1 =   ",
            "Injected CoT": "3 * 3 = 9\n7 * 3 = 21\n21 * 2 = 42\n2 * 9 = 18\n9 + 42 = 51\n51 - 18 = 33\n33 + 1 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, len, sum = 0, num, sign = 1;\n    scanf(\"%s\", s);\n    len = strlen(s);\n    for(i = 0; i < len; i++)\n    {\n        if(s[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(s[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = s[i] - '0';\n            sum = sum + num * pow(3, len - i - 1) * sign;\n        }\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1034\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/"
        },
        {
            "Index": 190,
            "GT": 45,
            "Query": "6 * 5 + 7 - 1 + 4 - 2 - 1 + 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 + 7 = 37\n37 - 1 = 36\n36 + 4 = 40\n40 - 2 = 38\n38 - 1 = 37\n37 + 8 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        current += a;\n        result += sign * current;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 191,
            "GT": -17,
            "Query": "5 + 6 * 3 - 5 + 6 + 8 - 7 * 7 =   ",
            "Injected CoT": "6 * 3 = 18\n5 + 18 = 23\n23 - 5 = 18\n18 + 6 = 24\n24 + 8 = 32\n7 * 7 = 49\n32 - 49 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 192,
            "GT": 49,
            "Query": "6 * 6 - 1 + 5 - 7 + 7 * 1 + 9 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 1 = 35\n35 + 5 = 40\n40 - 7 = 33\n7 * 1 = 7\n33 + 7 = 40\n40 + 9 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 193,
            "GT": 70,
            "Query": "1 + 6 + 2 + 6 + 8 * 7 + 4 - 5 =   ",
            "Injected CoT": "8 * 7 = 56\n1 + 6 = 7\n7 + 2 = 9\n9 + 6 = 15\n15 + 56 = 71\n71 + 4 = 75\n75 - 5 =",
            "Response": " 70",
            "Extract-Response": " 70\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 194,
            "GT": 64,
            "Query": "9 * 6 * 1 - 1 + 7 - 2 + 2 + 4 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 1 = 54\n54 - 1 = 53\n53 + 7 = 60\n60 - 2 = 58\n58 + 2 = 60\n60 + 4 =",
            "Response": " 64\n\n64\n\n*/",
            "Extract-Response": "\n\n64"
        },
        {
            "Index": 195,
            "GT": 6,
            "Query": "8 - 7 + 5 - 8 * 1 + 5 + 1 + 2 =   ",
            "Injected CoT": "-7 + 8 = 1\n1 + 5 = 6\n6 - 8 = -2\n-2 * 1 = -2\n-2 + 5 = 3\n3 + 1 = 4\n4 + 2 =",
            "Response": " 6\n6",
            "Extract-Response": " 6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 196,
            "GT": -13,
            "Query": "6 - 9 - 7 - 5 + 8 - 4 * 1 - 2 =   ",
            "Injected CoT": "6 - 9 = -3\n-3 - 7 = -10\n-10 - 5 = -15\n-15 + 8 = -7\n-4 * 1 = -4\n-7 - (-4) = -3\n-3 - 2 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the given expression.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpressionEvaluation(a):\n    # Write your code here\n    return 0"
        },
        {
            "Index": 197,
            "GT": -27,
            "Query": "6 - 5 - 3 * 8 - 5 - 6 + 4 + 3 =   ",
            "Injected CoT": "3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =",
            "Response": "\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 = 24\n6 - 5 - 24 - 5 - 6 + 4 + 3 =\n3 * 8 =",
            "Extract-Response": "\n\n3 * 8 = 24"
        },
        {
            "Index": 198,
            "GT": 144,
            "Query": "1 + 5 * 3 * 9 - 6 + 3 * 4 + 2 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 9 = 135\n1 + 135 = 136\n136 - 6 = 130\n3 * 4 = 12\n130 + 12 = 142\n142 + 2 =",
            "Response": " 144",
            "Extract-Response": " 144\n</code>\n"
        },
        {
            "Index": 199,
            "GT": 33,
            "Query": "8 - 8 + 2 * 1 + 8 + 9 + 8 + 6 =   ",
            "Injected CoT": "2 * 1 = 2\n8 - 8 = 0\n0 + 2 = 2\n2 + 8 = 10\n10 + 9 = 19\n19 + 8 = 27\n27 + 6 =",
            "Response": " 33\n\n3.33\n\n33 / 10 = 3.3",
            "Extract-Response": " 3.3"
        },
        {
            "Index": 200,
            "GT": -53,
            "Query": "6 + 5 * 2 - 9 + 4 - 1 * 8 * 8 =   ",
            "Injected CoT": "5 * 2 = 10\n6 + 10 = 16\n16 - 9 = 7\n4 - 1 = 3\n8 * 8 = 64\n3 * 64 = 192\n7 - 192 =",
            "Response": " -185",
            "Extract-Response": " -185\n</code>\n"
        },
        {
            "Index": 201,
            "GT": 46,
            "Query": "2 + 6 * 4 + 2 * 4 + 6 + 5 + 1 =   ",
            "Injected CoT": "6 * 4 = 24\n2 * 4 = 8\n2 + 24 = 26\n26 + 8 = 34\n34 + 6 = 40\n40 + 5 = 45\n45 + 1 =",
            "Response": " 46\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                result += a[i];\n                a[i] = 0;\n                b[j] = 0;\n                break;\n            }\n        }\n    }\n\n    int max_a = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (a[i] > max_a) {\n            max_a = a[i];\n        }\n    }\n\n    int max_b = 0;\n    for (size_t i = 0; i < m; ++i) {\n        if (b[i] > max_b) {\n            max_b = b[i];\n        }\n    }\n\n    result += max(max_a, max_b);\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 203,
            "GT": 80,
            "Query": "2 * 7 * 6 - 5 - 6 + 7 - 3 + 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 6 = 84\n84 - 5 = 79\n79 - 6 = 73\n73 + 7 = 80\n80 - 3 = 77\n77 + 3 =",
            "Response": " 80",
            "Extract-Response": "\n\n80"
        },
        {
            "Index": 204,
            "GT": 393,
            "Query": "3 + 1 + 3 * 5 - 4 + 6 * 7 * 9 =   ",
            "Injected CoT": "3 + 1 = 4\n3 * 5 = 15\n4 + 15 = 19\n6 * 7 = 42\n42 * 9 = 378\n19 - 4 = 15\n15 + 378 =",
            "Response": " 393",
            "Extract-Response": "\n\n393"
        },
        {
            "Index": 205,
            "GT": 3,
            "Query": "5 - 5 + 9 - 3 + 3 - 4 - 9 + 7 =   ",
            "Injected CoT": "5 - 5 = 0\n0 + 9 = 9\n9 - 3 = 6\n6 + 3 = 9\n9 - 4 = 5\n5 - 9 = -4\n-4 + 7 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 207,
            "GT": 7,
            "Query": "4 + 3 - 9 + 8 - 1 - 6 + 9 - 1 =   ",
            "Injected CoT": "4 + 3 = 7\n7 - 9 = -2\n-2 + 8 = 6\n6 - 1 = 5\n5 - 6 = -1\n-1 + 9 = 8\n8 - 1 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 208,
            "GT": 116,
            "Query": "4 - 4 + 5 - 3 + 3 * 6 * 6 + 6 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 6 = 108\n4 - 4 = 0\n0 + 5 = 5\n5 - 3 = 2\n2 + 108 = 110\n110 + 6 =",
            "Response": " 116",
            "Extract-Response": " 116\n</code>\n"
        },
        {
            "Index": 209,
            "GT": -22,
            "Query": "5 - 7 - 3 * 5 - 3 - 6 + 9 - 5 =   ",
            "Injected CoT": "-3 * 5 = -15\n5 - 7 - 15 - 3 - 6 + 9 - 5 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if(sum > maxSum) {\n                maxSum = sum;\n            }\n            if(sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 211,
            "GT": 18,
            "Query": "6 * 4 - 5 * 5 + 8 + 8 + 7 - 4 =   ",
            "Injected CoT": "6 * 4 = 24\n5 * 5 = 25\n24 - 25 = -1\n8 + 8 = 16\n16 + 7 = 23\n-1 + 23 = 22\n22 - 4 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 212,
            "GT": -2942,
            "Query": "8 * 9 + 2 + 8 - 6 * 7 * 9 * 8 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 9 = 378\n8 * 9 = 72\n2 + 8 = 10\n378 + 72 = 450\n450 - 6 * 7 * 9 * 8 =",
            "Response": " -1\n\n-1",
            "Extract-Response": " -1.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    gets(str);\n\n    len = strlen(str);\n\n    if(str[0] == '-')\n    {\n        sign = -1;\n    }\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/' || str[i] == '%' || str[i] == '=')\n        {\n            continue;\n        }\n\n        result = result * 10 + (str[i] - '0');\n    }\n\n    printf(\"%d\\n\", result * sign);\n\n    return 0;\n}"
        },
        {
            "Index": 213,
            "GT": -28,
            "Query": "8 * 1 * 4 - 5 * 9 - 3 * 5 * 1 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 4 = 32\n5 * 9 = 45\n3 * 5 = 15\n15 * 1 = 15\n32 - 45 = -13\n-13 - 15 =",
            "Response": " -28\n\n8 * 1 * 4 - 5 * 9 - 3 * 5 * 1 = -28",
            "Extract-Response": " -28.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[input] array.integer b\n\nAn array of integers of the same length as a.\n\nGuaranteed constraints:\nb.length = a.length,\n-100 \u2264 b[i] \u2264 100.\n\n[output] integer\n\nThe value of the expression.\n\"\"\"\n\ndef exp(a, b):\n    return sum([a[i] * b[i] for i in range(len(a))])\n\ndef exp_eval(a, b):\n    return sum([a[i] * b[i] for i in range(len(a))])"
        },
        {
            "Index": 214,
            "GT": 79,
            "Query": "3 + 9 * 7 + 4 + 7 + 1 - 6 + 7 =   ",
            "Injected CoT": "9 * 7 = 63\n3 + 63 = 66\n66 + 4 = 70\n70 + 7 = 77\n77 + 1 = 78\n78 - 6 = 72\n72 + 7 =",
            "Response": " 79\n\n79",
            "Extract-Response": " 79\n\n*/"
        },
        {
            "Index": 216,
            "GT": 299,
            "Query": "6 + 6 * 7 * 7 - 5 + 6 - 5 + 3 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 7 = 294\n294 + 6 = 300\n300 - 5 = 295\n295 + 6 = 301\n301 - 5 = 296\n296 + 3 =",
            "Response": " 299\n\n299",
            "Extract-Response": " 299\n\n*/"
        },
        {
            "Index": 217,
            "GT": 177,
            "Query": "4 * 9 * 3 + 7 - 2 + 4 * 4 * 4 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 3 = 108\n4 * 4 = 16\n16 * 4 = 64\n108 + 64 = 172\n172 + 7 = 179\n179 - 2 =",
            "Response": " 177",
            "Extract-Response": " 177\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 218,
            "GT": 15,
            "Query": "3 * 5 - 6 + 2 + 5 - 9 + 4 * 2 =   ",
            "Injected CoT": "3 * 5 = 15\n15 - 6 = 9\n9 + 2 = 11\n11 + 5 = 16\n16 - 9 = 7\n4 * 2 = 8\n7 + 8 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 219,
            "GT": -1,
            "Query": "5 * 5 - 2 + 2 - 4 * 9 + 8 + 2 =   ",
            "Injected CoT": "5 * 5 = 25\n25 - 2 = 23\n23 + 2 = 25\n4 * 9 = 36\n25 - 36 = -11\n-11 + 8 = -3\n-3 + 2 =",
            "Response": " -1",
            "Extract-Response": " -1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 220,
            "GT": 22,
            "Query": "5 + 4 + 7 + 4 - 5 - 2 + 8 + 1 =   ",
            "Injected CoT": "5 + 4 = 9\n9 + 7 = 16\n16 + 4 = 20\n20 - 5 = 15\n15 - 2 = 13\n13 + 8 = 21\n21 + 1 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    bool negative = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (negative) {\n                result -= curr;\n            } else {\n                result += curr;\n            }\n            curr = 0;\n            negative = false;\n        } else if (s[i] == '-') {\n            negative = true;\n        } else {\n            curr *= 10;\n            curr += s[i] - '0';\n        }\n    }\n\n    if (negative) {\n        result -= curr;\n    } else {\n        result += curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 221,
            "GT": -37,
            "Query": "9 - 9 - 8 - 7 + 8 - 8 * 3 - 6 =   ",
            "Injected CoT": "9 - 9 = 0\n0 - 8 = -8\n-8 - 7 = -15\n-15 + 8 = -7\n-8 * 3 = -24\n-7 - 24 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0"
        },
        {
            "Index": 222,
            "GT": 11,
            "Query": "1 - 6 + 9 - 2 * 3 + 6 + 8 - 1 =   ",
            "Injected CoT": "-2 * 3 = -6\n1 - 6 + 9 - (-6) + 6 + 8 - 1 =",
            "Response": " \n1 - 6 + 9 + 6 + 8 - 1 = \n1 + 9 + 8 - 1 = \n17 + 7 = \n24",
            "Extract-Response": "\n24"
        },
        {
            "Index": 226,
            "GT": 39,
            "Query": "4 * 2 - 6 - 9 - 1 * 2 + 8 * 6 =   ",
            "Injected CoT": "4 * 2 = 8\n1 * 2 = 2\n8 * 6 = 48\n8 - 6 = 2\n2 - 9 = -7\n-7 - 2 = -9\n-9 + 48 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 227,
            "GT": 50,
            "Query": "4 * 8 + 8 - 4 - 2 * 7 + 7 * 4 =   ",
            "Injected CoT": "4 * 8 = 32\n32 + 8 = 40\n40 - 4 = 36\n2 * 7 = 14\n7 * 4 = 28\n14 + 28 = 42\n36 - 42 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 228,
            "GT": 83,
            "Query": "5 + 6 * 3 + 5 * 8 + 1 * 5 * 4 =   ",
            "Injected CoT": "6 * 3 = 18\n5 * 8 = 40\n1 * 5 = 5\n5 * 4 = 20\n18 + 5 + 40 + 20 =",
            "Response": " 83\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            result += a[i] * b[j];\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 83 ."
        },
        {
            "Index": 229,
            "GT": -11,
            "Query": "5 - 1 - 1 * 1 - 3 - 5 - 1 - 5 =   ",
            "Injected CoT": "1 * 1 = 1\n5 - 1 = 4\n4 - 1 = 3\n3 - 3 = 0\n0 - 5 = -5\n-5 - 1 = -6\n-6 - 5 =",
            "Response": " -11\n-11 - 1 = -12\n-12 - 5 = -17\n-17 - 1 = -18\n-18 - 5 = -23\n-23 - 1 = -24\n-24 - 5 = -29\n-29 - 1 = -30\n-30 - 5 = -35\n-35 - 1 = -36\n-36 - 5 = -41\n-41 - 1 = -42\n-42 - 5 = -47\n-47 - 1 = -48\n-48 - 5 = -53\n-53 - 1 = -54\n-54 - 5 = -59\n-59 - 1 = -60\n-60 - 5 = -65\n-65 - 1 = -66\n-66 - 5 = -71\n-71 - 1 = -72\n-72 - 5 = -77\n-77 - 1 = -78\n-78 - 5 = -83\n-83 - 1 = -84\n-84 - 5 = -89\n-89 - 1 = -90\n-90 - 5 = -95\n-95 - 1 = -96\n-96 - 5 = -101\n-101 - 1 = -102\n-102 - 5 = -107\n-107 - 1 = -108\n-108 - 5 = -113\n-113 - 1 = -114\n-114 - 5 = -119\n-119 - 1 = -120\n-120 - 5 = -125\n-125 - 1 = -126\n-126 - 5 = -131\n-131 - 1 = -132\n-132 - 5 = -137\n-137 - 1 = -138\n-138 - 5 = -143\n-143 - 1 = -144\n-144 - 5 = -149\n-149 - 1 = -150\n-150 - 5 = -155\n-155 - 1 = -156\n-156 - 5 = -161\n-161 - 1 = -162\n-162 - 5 = -167\n-167 - 1 = -168\n-168 - 5 = -173\n-173 - 1 = -174\n-174 - 5 = -179\n-179 - 1 = -180\n-180 - 5 = -185\n-185 - 1 = -186\n-186 - 5 = -191\n-191 - 1 = -192\n-192 - 5 = -197\n-197 - 1 = -198\n-198 - 5 = -203\n-203 - 1 = -204\n-204 - 5 = -209\n-209 - 1 = -210\n-210 - 5 = -215\n-215 - 1 = -216\n-216 - 5 = -221\n-221 - 1 = -222\n-222 - 5 = -227\n-227 - 1 = -228\n-228 - 5 = -233\n-233 - 1 = -234\n-234 - 5 = -239\n-239 - 1 = -240\n-240 - 5 = -245\n-245 - 1 = -246\n-246 - 5 = -251\n-251 - 1 = -252\n-252 - 5 = -257\n-257 - 1 = -258\n-258 - 5 = -263\n-263 - 1 = -264\n-264 - 5 = -269\n-269 - 1 = -270\n-270 - 5 = -275\n-275 - 1 = -276\n-276 - 5 = -281\n-281 - 1 = -282\n-282 - 5 = -287\n-287 - 1 = -288\n-288 - 5 = -293\n-293 - 1 = -294\n-294 - 5 = -299\n-299 - 1 = -300\n-300 - 5 = -305\n-305 - 1 = -306\n-306 - 5 = -311\n-311 - 1 = -312\n-312 - 5 = -317\n-317 - 1 = -318\n-318 - 5 = -323\n-323 - 1 = -324\n-324 - 5 = -329\n-329 - 1 = -330\n-330 - 5 = -335\n-335 - 1 = -336\n-336 - 5 = -341\n-341 - 1 = -342\n-342 - 5 = -347\n-347 - 1 = -348\n-348 - 5 = -353\n-353 - 1 = -354\n-354 - 5 = -359\n-359 - 1 = -360\n-360 - 5 = -365\n-365 - 1 = -366\n-366 - 5 = -371\n-371 - 1 = -372\n-372 - 5 = -377\n-377 - 1 = -378\n-378 - 5 = -383\n-383 - 1 = -384\n-384 - 5 = -389\n-389 - 1 = -390\n-390 - 5 = -395\n-395 - 1 = -396\n-396 - 5 = -401\n-401 - 1 = -402\n-402 - 5 = -407\n-407 - 1 = -408\n-408 - 5 = -413\n-413 - 1 = -414\n-414 - 5 = -419\n-419 - 1 = -420\n-420 - 5 = -425\n-425 - 1 = -426\n-426 - 5 = -431\n-431 - 1 = -432\n-432 - 5 = -437\n-437 - 1 = -438\n-438 - 5 = -443\n-443 - 1 = -444\n-444 - 5 = -449\n-449 - 1 = -450\n-450 - 5 = -455\n-455 - 1 = -456\n-456 - 5 = -461\n-461 - 1 = -462\n-462 - 5 = -467\n-467 - 1 = -468\n-468 - 5 = -473\n-473 - 1 = -474\n-474 - 5 = -479\n-479 - 1 = -480\n-480 - 5 = -485\n-485 - 1 = -486\n-486 - 5 = -491\n-491 - 1 = -492\n-492 - 5 = -497\n-497 - 1 = -498\n-498 - 5 = -503\n-503 - 1 = -504\n-504 - 5 = -509\n-509 - 1 = -510\n-510 - 5 = -515\n-515 - 1 = -516\n-516 - 5 = -521\n-521 - 1 = -522\n-522 - 5 = -527\n-527 - 1 = -528\n-528 - 5 = -533\n-533 - 1 = -534\n-534 - 5 = -539\n-539 - 1 = -540\n-540 - 5 = -545\n-545 - 1 = -546\n-546 - 5 = -551\n-551 - 1 = -552\n-552 - 5 = -557\n-557 - 1 = -558\n-558 - 5 = -563\n-563 - 1 = -564\n-564 - 5 = -569\n-569 - 1 = -570\n-570 - 5 = -575\n-575 - 1 = -576\n-576 - 5 = -581\n-581 - 1 = -582\n-582 - 5 = -587\n-587 - 1 = -588\n-588 - 5 = -593\n-593 - 1 = -594\n-594 - 5 = -599\n-599 - 1 = -600\n-600 - 5 = -605\n-605 - 1 = -606\n-606 - 5 = -611\n-611 - 1 = -612\n-612 - 5 = -617\n-617 - 1 = -618\n-618 - 5 = -623\n-623 - 1 = -624\n-624 - 5 = -629\n-629 - 1 = -630\n-630 - 5 = -635\n-635 - 1 = -636\n-636 - 5 = -641\n-641 - 1 = -642\n-642 - 5 = -647\n-647 - 1 = -648\n-648 - 5 = -653\n-653 - 1 = -654\n-654 - 5 = -659\n-659 - 1 = -660\n-660 - 5 = -665\n-665 - 1 = -666\n-666 - 5 = -671\n-671 - 1 = -672\n-672 - 5 = -677\n-677 - 1 = -678\n-678 - 5 = -683\n-683 - 1 = -684\n-684 - 5 = -689\n-689 - 1 = -690\n-690 - 5 = -695\n-695 - 1 = -696\n-696 - 5 = -701\n-701 - 1 = -702\n-702 - 5 = -707\n-707 - 1 = -708\n-708 - 5 = -713\n-713 - 1 = -714\n-714 - 5 = -719\n-719 - 1 = -720\n-720 - 5 = -725\n-725 - 1 = -726\n-726 - 5 = -731\n-731 - 1 = -732\n-732 - 5 = -737\n-737 - 1 = -738\n-738 - 5 = -743\n-743 - 1 = -744\n-744 -",
            "Extract-Response": " -744"
        },
        {
            "Index": 230,
            "GT": 70,
            "Query": "9 + 6 - 3 + 8 * 1 * 8 + 2 - 8 =   ",
            "Injected CoT": "8 * 1 = 8\n9 + 6 = 15\n15 - 3 = 12\n12 + 8 = 20\n20 * 8 = 160\n160 + 2 = 162\n162 - 8 =",
            "Response": " 154",
            "Extract-Response": " 154\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n\n                if(input[j] == '+' || input[j] == '-' || input[j] == '*')\n                {\n                    break;\n                }\n\n                num = input[j] - '0';\n\n                sum = sum * num;\n            }\n\n            i = j - 1;\n        }\n        else\n        {\n            num = input[i] - '0';\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 231,
            "GT": -17,
            "Query": "9 + 8 + 8 + 8 - 6 * 8 + 3 - 5 =   ",
            "Injected CoT": "9 + 8 = 17\n17 + 8 = 25\n25 + 8 = 33\n33 - 6 = 27\n27 * 8 = 216\n216 + 3 = 219\n219 - 5 =",
            "Response": " 214",
            "Extract-Response": " 214\n</code>\n"
        },
        {
            "Index": 232,
            "GT": 158,
            "Query": "6 + 6 * 8 + 7 * 9 + 9 + 8 * 4 =   ",
            "Injected CoT": "6 + 48 = 54\n7 * 9 = 63\n8 * 4 = 32\n6 * 8 = 48\n9 + 32 = 41\n54 + 63 = 117\n117 + 41 =",
            "Response": " 158\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); ++i) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); ++i) {\n        for (size_t j = i + 1; j < a.size(); ++j) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 0"
        },
        {
            "Index": 234,
            "GT": 3,
            "Query": "9 - 9 * 6 + 1 * 9 + 5 * 6 + 9 =   ",
            "Injected CoT": "9 * 6 = 54\n9 - 54 = -45\n1 * 9 = 9\n5 * 6 = 30\n-45 + 9 = -36\n-36 + 30 = -6\n-6 + 9 =",
            "Response": " 3\n\n3\n\n3 * 6 = 18\n3 - 18 = -15\n1 * 9 = 9\n5 * 6 = 30\n-15 + 9 = -6\n-6 + 30 = 24\n\n24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 235,
            "GT": -4,
            "Query": "8 - 8 + 1 * 9 - 3 - 6 - 2 - 2 =   ",
            "Injected CoT": "8 - 8 = 0\n0 + 1 = 1\n1 * 9 = 9\n9 - 3 = 6\n6 - 6 = 0\n0 - 2 = -2\n-2 - 2 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < nums.size(); i++) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 236,
            "GT": 41,
            "Query": "3 * 7 + 7 * 2 * 1 * 1 - 1 + 7 =   ",
            "Injected CoT": "3 * 7 = 21\n7 * 2 = 14\n14 * 1 = 14\n14 * 1 = 14\n21 + 14 = 35\n35 - 1 = 34\n34 + 7 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote: Please solve it without division and in O(n).\n\nFollow up:\nCould you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)\n\n*/\n\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        sumNumbers(root, sum, cur);\n        return sum;\n    }\n    \n    void sumNumbers(TreeNode* root, int &sum, int cur) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        sumNumbers(root->left, sum, cur);\n        sumNumbers(root->right, sum, cur);\n    }\n};"
        },
        {
            "Index": 238,
            "GT": 14,
            "Query": "1 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =   ",
            "Injected CoT": "1 * 3 = 3\n3 + 8 = 11\n11 + 8 = 19\n19 + 2 = 21\n21 - 5 = 16\n16 + 3 = 19\n19 - 5 =",
            "Response": " 14",
            "Extract-Response": " 14\n\n2 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n3 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n4 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n5 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n6 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n7 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n8 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n9 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n10 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n11 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n12 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n13 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n14 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n15 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n16 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n17 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n18 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n19 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n20 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n21 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n22 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n23 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n24 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n25 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n26 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n27 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n28 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n29 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n30 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n31 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n32 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n33 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n34 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n35 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n36 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n37 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n38 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n39 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n40 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n41 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n42 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n43 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n44 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n45 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n46 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n47 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n48 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n49 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n50 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n51 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n52 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n53 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n54 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n55 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n56 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n57 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n58 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n59 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n60 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n61 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n62 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n63 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n64 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n65 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n66 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n67 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n68 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n69 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n70 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n71 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n72 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n73 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n74 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n75 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n76 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n77 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer is  14\n\n78 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =     14\nThe answer"
        },
        {
            "Index": 239,
            "GT": -13422,
            "Query": "9 + 9 - 7 * 8 * 6 * 2 * 5 * 4 =   ",
            "Injected CoT": "-7 * 8 = -56\n-56 * 6 = -336\n-336 * 2 = -672\n-672 * 5 = -3360\n-3360 * 4 = -13440\n9 + 9 = 18\n18 - 13440 =",
            "Response": " -13422",
            "Extract-Response": " -13422\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488, n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499, n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510, n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521, n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532, n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543, n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554, n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565, n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576, n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587, n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598, n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609, n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620, n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631, n632, n633, n634, n635, n636, n637, n638, n639, n640, n641, n642, n643, n644, n645,"
        },
        {
            "Index": 240,
            "GT": 81,
            "Query": "7 * 9 - 1 + 4 - 3 + 8 + 6 + 4 =   ",
            "Injected CoT": "7 * 9 = 63\n63 - 1 = 62\n62 + 4 = 66\n66 - 3 = 63\n63 + 8 = 71\n71 + 6 = 77\n77 + 4 =",
            "Response": " 81",
            "Extract-Response": "\n\n81"
        },
        {
            "Index": 242,
            "GT": 62,
            "Query": "8 + 7 + 4 + 7 * 5 * 1 + 7 + 1 =   ",
            "Injected CoT": "5 * 1 = 5\n7 * 5 = 35\n8 + 7 = 15\n15 + 4 = 19\n19 + 35 = 54\n54 + 7 = 61\n61 + 1 =",
            "Response": " 62\n\n62\n\n*/",
            "Extract-Response": " 62."
        },
        {
            "Index": 243,
            "GT": 23,
            "Query": "7 + 8 + 4 - 4 + 1 - 2 + 1 + 8 =   ",
            "Injected CoT": "7 + 8 = 15\n15 + 4 = 19\n19 - 4 = 15\n15 + 1 = 16\n16 - 2 = 14\n14 + 1 = 15\n15 + 8 =",
            "Response": " 23\n\n23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 244,
            "GT": -35,
            "Query": "2 - 4 - 5 - 9 - 2 * 9 - 7 + 6 =   ",
            "Injected CoT": "2 * 9 = 18\n-4 - 5 = -9\n-9 - 9 = -18\n-18 - 7 = -25\n-25 + 6 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 245,
            "GT": 29,
            "Query": "5 + 6 - 5 + 5 + 9 + 4 + 3 + 2 =   ",
            "Injected CoT": "5 + 6 = 11\n11 - 5 = 6\n6 + 5 = 11\n11 + 9 = 20\n20 + 4 = 24\n24 + 3 = 27\n27 + 2 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s;\n    char ch[100];\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch);\n        s=0;\n        for(j=0;ch[j]!='\\0';j++)\n        {\n            if(ch[j]=='1')\n            {\n                s=s+2;\n            }\n            else if(ch[j]=='2')\n            {\n                s=s+5;\n            }\n            else if(ch[j]=='3')\n            {\n                s=s+5;\n            }\n            else if(ch[j]=='4')\n            {\n                s=s+4;\n            }\n            else if(ch[j]=='5')\n            {\n                s=s+5;\n            }\n            else if(ch[j]=='6')\n            {\n                s=s+6;\n            }\n            else if(ch[j]=='7')\n            {\n                s=s+3;\n            }\n            else if(ch[j]=='8')\n            {\n                s=s+7;\n            }\n            else if(ch[j]=='9')\n            {\n                s=s+6;\n            }\n            else if(ch[j]=='0')\n            {\n                s=s+6;\n            }\n        }\n        printf(\"%d leds\\n\",s);\n    }\n    return 0;\n}"
        },
        {
            "Index": 246,
            "GT": 68,
            "Query": "9 * 8 - 2 * 4 - 4 + 1 + 7 * 1 =   ",
            "Injected CoT": "9 * 8 = 72\n2 * 4 = 8\n7 * 1 = 7\n72 - 8 - 4 + 1 + 7 =",
            "Response": " 72 - 12 + 8 = 68",
            "Extract-Response": " 68\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == '+')\n            continue;\n        else if(str[i] == '-')\n        {\n            num = 0;\n            for(j = i + 1; j < len; j++)\n            {\n                if(str[j] == '+')\n                    break;\n                num = num * 10 + str[j] - '0';\n            }\n            sum -= num;\n            i = j;\n        }\n        else\n        {\n            num = 0;\n            for(j = i; j < len; j++)\n            {\n                if(str[j] == '+')\n                    break;\n                num = num * 10 + str[j] - '0';\n            }\n            sum += num;\n            i = j;\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/"
        },
        {
            "Index": 247,
            "GT": 66,
            "Query": "9 - 5 + 5 * 5 * 2 + 3 * 3 + 3 =   ",
            "Injected CoT": "5 * 5 = 25\n25 * 2 = 50\n3 * 3 = 9\n9 + 3 = 12\n9 - 5 = 4\n4 + 50 = 54\n54 + 12 = 66\n66 + 3 =",
            "Response": " 69",
            "Extract-Response": "\n\n69"
        },
        {
            "Index": 248,
            "GT": 73,
            "Query": "8 * 5 + 4 - 7 + 7 * 6 - 2 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n40 + 4 = 44\n7 * 6 = 42\n44 + 42 = 86\n86 - 2 = 84\n84 - 4 =",
            "Response": " 80",
            "Extract-Response": " 80\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', add the previously stored number to result\n     * If current character is '-', subtract the previously stored number from result\n     * If current character is '*', multiply the previously stored number with result\n     * If current character is '/', divide the previously stored number with result\n     * If current character is '%', take modulus using the previously stored number and result\n     * If current character is '^', raise power using the previously stored number and result\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add the previously stored number to result */\n        if(str[i] == '+')\n        {\n            result = result + num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '-', subtract the previously stored number from result */\n        else if(str[i] == '-')\n        {\n            result = result + num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '*', multiply the previously stored number with result */\n        else if(str[i] == '*')\n        {\n            result = result * num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '/', divide the previously stored number with result */\n        else if(str[i] == '/')\n        {\n            result = result / num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '%', take modulus using the previously stored number and result */\n        else if(str[i] == '%')\n        {\n            result = result % num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '^', raise power using the previously stored number and result */\n        else if(str[i] == '^')\n        {\n            result = pow(result, num);\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is a number */\n        else\n        {\n            /* Convert character to integer and store it in num */\n            num = num * 10 + (str[i] - '0');\n        }\n    }\n\n    /* If num is not equal to 0, then add it to result */\n    if(num != 0)\n    {\n        result = result + (sign * num);\n    }\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 249,
            "GT": 69,
            "Query": "1 * 8 + 8 + 4 * 2 * 7 - 8 + 5 =   ",
            "Injected CoT": "1 * 8 = 8\n4 * 2 = 8\n8 * 7 = 56\n8 + 8 = 16\n56 + 16 = 72\n72 - 8 = 64\n64 + 5 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n\n    /*\n     * Reads and stores the string into an array\n     */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n    sum = 0;\n\n    for(i=0; i<len; i++)\n    {\n        /*\n         * If the current character is '+' or '-'\n         * then skip it and continue\n         */\n        if(str[i] == '+' || str[i] == '-')\n        {\n            continue;\n        }\n\n        /*\n         * If the current character is '*' or '/'\n         * then skip it and continue\n         */\n        if(str[i] == '*' || str[i] == '/')\n        {\n            continue;\n        }\n\n        /*\n         * If the current character is '^' or '$'\n         * then skip it and continue\n         */\n        if(str[i] == '^' || str[i] == '$')\n        {\n            continue;\n        }\n\n        /*\n         * If the current character is '='\n         * then stop the loop\n         */\n        if(str[i] == '=')\n        {\n            break;\n        }\n\n        /*\n         * If the current character is a space\n         * then skip it and continue\n         */\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        /*\n         * If the current character is a number\n         * then convert it into integer and add\n         * it to the sum\n         */\n        if(str[i] >= '0' && str[i] <= '9')\n        {\n            num = str[i] - '0';\n            sum = sum + num;\n        }\n    }\n\n    printf(\"The answer is %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 250,
            "GT": -13,
            "Query": "2 + 4 - 4 * 1 * 1 + 3 - 6 * 3 =   ",
            "Injected CoT": "4 * 1 = 4\n2 + 4 = 6\n6 - 4 = 2\n2 + 3 = 5\n6 * 3 = 18\n5 - 18 =",
            "Response": " -13\n\n-13 is the answer.",
            "Extract-Response": " -13.\n\n*/"
        },
        {
            "Index": 251,
            "GT": 1023,
            "Query": "3 * 1 + 2 * 8 * 8 * 8 - 6 + 2 =   ",
            "Injected CoT": "3 * 1 = 3\n8 * 8 = 64\n64 * 8 = 512\n2 * 512 = 1024\n3 + 1024 = 1027\n1027 - 6 = 1021\n1021 + 2 =",
            "Response": " 1023\n\n1023\n*/\n\n// Solution #2\n// (A * B) * C - (A + B + C) + (A * B * C) = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C = 1023\n// A * B * C - A * B - A * C - B * C + A + B + C =",
            "Extract-Response": "\n1023"
        },
        {
            "Index": 252,
            "GT": -2,
            "Query": "3 - 5 * 6 + 2 * 8 + 7 - 1 + 3 =   ",
            "Injected CoT": "-5 * 6 = -30\n3 - (-30) = 33\n2 * 8 = 16\n7 + 16 = 23\n23 - 1 = 22\n22 + 3 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 253,
            "GT": -199,
            "Query": "8 + 7 * 2 - 9 * 6 * 4 * 1 - 5 =   ",
            "Injected CoT": "7 * 2 = 14\n9 * 6 = 54\n54 * 4 = 216\n216 * 1 = 216\n8 + 14 = 22\n22 - 216 = -194\n-194 - 5 =",
            "Response": " -199",
            "Extract-Response": " -199\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, sum = 0;\n    scanf(\"%s\", s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n            continue;\n        else if(s[i] == '-')\n        {\n            for(j = i + 1; j < n; j++)\n            {\n                if(s[j] == '+')\n                    break;\n            }\n            sum -= atoi(&s[i + 1]);\n            i = j - 1;\n        }\n        else\n            sum += atoi(&s[i]);\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 254,
            "GT": 76,
            "Query": "7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 =   ",
            "Injected CoT": "7 * 3 = 21\n6 * 6 = 36\n6 * 1 = 6\n21 + 8 = 29\n29 + 36 = 65\n65 + 6 = 71\n71 + 5 =",
            "Response": " 76\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 76",
            "Extract-Response": "\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 76"
        },
        {
            "Index": 255,
            "GT": 96,
            "Query": "6 * 4 + 8 - 1 * 8 + 4 * 3 * 6 =   ",
            "Injected CoT": "6 * 4 = 24\n24 + 8 = 32\n1 * 8 = 8\n4 * 3 = 12\n12 * 6 = 72\n32 - 8 = 24\n24 + 72 =",
            "Response": " 96",
            "Extract-Response": " 96\n</code>\n"
        },
        {
            "Index": 258,
            "GT": 176,
            "Query": "6 + 1 + 3 * 7 * 7 + 9 + 8 + 5 =   ",
            "Injected CoT": "3 * 7 = 21\n7 * 21 = 147\n6 + 1 = 7\n147 + 7 = 154\n154 + 9 = 163\n163 + 8 = 171\n171 + 5 =",
            "Response": " 176\n\n3 * 7 * 7 = 147\n7 * 21 = 147\n\n3 * 7 * 7 + 7 * 21 = 294",
            "Extract-Response": " 294\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <unordered_set>\n#include <unordered_map>\n#include <cstring>\n#include <iterator>\n#include <numeric>\n\nusing namespace std;\n\n#define REOPEN_READ freopen(\"/home/shen/Core/ACM/input.txt\", \"r\", stdin);\n#define REOPEN_WRITE freopen(\"/home/shen/Core/ACM/output.txt\", \"w\", stdout);\n\ntypedef long long int lld;\ntypedef pair<int, int> pii;\n\nint main(){\n    REOPEN_READ\n    // REOPEN_WRITE\n    int n;\n    scanf(\"%d\", &n);\n    int ans = 0;\n    for(int i = 1; i <= n; i++){\n        int t = i;\n        int sum = 0;\n        while(t){\n            sum += t % 10;\n            t /= 10;\n        }\n        ans += sum * sum;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}"
        },
        {
            "Index": 259,
            "GT": -78,
            "Query": "8 * 4 + 6 - 5 - 5 * 8 * 3 + 9 =   ",
            "Injected CoT": "8 * 4 = 32\n32 + 6 = 38\n5 * 8 = 40\n40 * 3 = 120\n38 - 5 = 33\n33 - 120 = -87\n-87 + 9 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\n\nThe expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 260,
            "GT": 1,
            "Query": "4 * 7 - 4 - 3 * 4 - 3 * 4 + 1 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 4 = 24\n3 * 4 = 12\n3 * 4 = 12\n12 + 12 = 24\n24 - 3 = 21\n21 + 1 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int maxSum = nums[0];\n        int curSum = nums[0];\n        for (int i = 1; i < nums.size(); i++) {\n            curSum = max(curSum + nums[i], nums[i]);\n            maxSum = max(maxSum, curSum);\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 261,
            "GT": 49,
            "Query": "8 + 7 * 2 * 1 + 1 * 5 * 4 + 7 =   ",
            "Injected CoT": "7 * 2 = 14\n14 * 1 = 14\n8 + 14 = 22\n1 * 5 = 5\n5 * 4 = 20\n14 + 20 = 34\n34 + 7 =",
            "Response": " 41\n\n41\n\n*/",
            "Extract-Response": "\n\n41"
        },
        {
            "Index": 262,
            "GT": 36,
            "Query": "8 * 2 - 6 - 3 + 8 + 4 * 5 + 1 =   ",
            "Injected CoT": "8 * 2 = 16\n16 - 6 = 10\n10 - 3 = 7\n7 + 8 = 15\n4 * 5 = 20\n15 + 20 = 35\n35 + 1 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 265,
            "GT": 29,
            "Query": "6 * 6 + 6 + 1 - 9 - 3 - 9 + 7 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n42 + 1 = 43\n43 - 9 = 34\n34 - 3 = 31\n31 - 9 = 22\n22 + 7 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    b = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    c = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    d = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    e = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    f = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    g = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    h = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    i = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    j = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    k = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    l = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    m = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    n = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    o = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    p = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    q = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    r = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    s = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    t = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    u = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    v = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    w = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    x = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    y = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    z = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 266,
            "GT": 153,
            "Query": "3 * 4 * 2 * 8 - 4 * 3 - 3 * 9 =   ",
            "Injected CoT": "3 * 4 = 12\n12 * 2 = 24\n24 * 8 = 192\n4 * 3 = 12\n3 * 9 = 27\n12 - 12 = 0\n192 - 27 =",
            "Response": " 165",
            "Extract-Response": " 165\n</code>\n"
        },
        {
            "Index": 267,
            "GT": 85,
            "Query": "1 + 5 + 6 - 3 * 2 + 9 * 8 + 7 =   ",
            "Injected CoT": "1 + 5 = 6\n6 + 6 = 12\n3 * 2 = 6\n9 * 8 = 72\n12 - 6 = 6\n6 + 72 = 78\n78 + 7 =",
            "Response": " 85",
            "Extract-Response": "\n\n85"
        },
        {
            "Index": 268,
            "GT": -18,
            "Query": "4 - 9 - 3 * 3 + 4 - 6 + 7 - 9 =   ",
            "Injected CoT": "3 * 3 = 9\n4 - 9 = -5\n-5 - 9 = -14\n-14 + 4 = -10\n-10 - 6 = -16\n-16 + 7 = -9\n-9 - 9 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, sign = 1;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            sign = -1;\n            continue;\n        }\n        sum = sum * 10 + s[i] - '0';\n        if(s[i + 1] == '+' || s[i + 1] == '-' || s[i + 1] == '\\0')\n        {\n            sum = sum * sign;\n            sign = 1;\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 269,
            "GT": 1144,
            "Query": "4 * 8 * 6 * 6 + 1 - 8 * 1 - 1 =   ",
            "Injected CoT": "4 * 8 = 32\n32 * 6 = 192\n192 * 6 = 1152\n1152 + 1 = 1153\n8 * 1 = 8\n1153 - 8 = 1145\n1145 - 1 =",
            "Response": " 1144\n\n1144\n\n*/",
            "Extract-Response": "\n\n1144"
        },
        {
            "Index": 273,
            "GT": -10,
            "Query": "2 - 5 * 8 - 5 + 8 - 5 + 5 * 6 =   ",
            "Injected CoT": "5 * 8 = 40\n2 - 40 = -38\n-38 - 5 = -43\n-43 + 8 = -35\n-35 - 5 = -40\n-40 + 5 = -35\n5 * 6 = 30\n-35 + 30 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int sumSubarrayMins(vector<int>& A) {\n        int n = A.size();\n        int res = 0;\n        stack<int> st;\n        for (int i = 0; i <= n; ++i) {\n            int cur = i == n ? 0 : A[i];\n            while (!st.empty() && A[st.top()] >= cur) {\n                int idx = st.top(); st.pop();\n                int left = st.empty() ? -1 : st.top();\n                res = (res + A[idx] * (idx - left) * (i - idx)) % mod;\n            }\n            st.push(i);\n        }\n        return res;\n    }\nprivate:\n    const int mod = 1e9 + 7;\n};"
        },
        {
            "Index": 274,
            "GT": 5,
            "Query": "4 - 1 + 1 + 8 - 5 - 2 * 2 + 2 =   ",
            "Injected CoT": "2 * 2 = 4\n4 - 1 = 3\n3 + 1 = 4\n4 + 8 = 12\n12 - 5 = 7\n7 - 4 = 3\n3 + 2 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define X first\n#define Y second\n#define pb push_back\n#define mp make_pair\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(), (x).end()\n#define debug(x) cerr << #x << \" = \" << x << endl\n#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        string s;\n        cin >> s;\n        int cur = 0;\n        int sign = 1;\n        int num = 0;\n        for (int j = 0; j < SZ(s); j++) {\n            if (s[j] == '+' || s[j] == '-') {\n                cur += sign * num;\n                num = 0;\n                sign = (s[j] == '+' ? 1 : -1);\n            } else if (s[j] == '*') {\n                cur *= num;\n                num = 0;\n            } else {\n                num = num * 10 + s[j] - '0';\n            }\n        }\n        cur += sign * num;\n        ans += cur;\n    }\n    cout << ans << endl;\n    return 0;\n}"
        },
        {
            "Index": 277,
            "GT": -638,
            "Query": "9 + 6 + 4 - 9 - 9 * 3 * 4 * 6 =   ",
            "Injected CoT": "9 + 6 = 15\n15 + 4 = 19\n9 * 3 = 27\n27 * 4 = 108\n108 * 6 = 648\n19 - 648 =",
            "Response": " -629",
            "Extract-Response": " -629\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,"
        },
        {
            "Index": 278,
            "GT": 47627,
            "Query": "3 * 6 * 3 * 6 * 7 * 3 * 7 - 1 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 3 = 54\n54 * 6 = 324\n324 * 7 = 2268\n2268 * 3 = 6804\n6804 * 7 = 47628\n47628 - 1 =",
            "Response": " 47627\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstring>\n#include <ctime>\n#include <cstdlib>\n#include <cassert>\n\nusing namespace std;\n\n#define mem(a, v) memset(a, v, sizeof (a))\n#define x first\n#define y second\n#define all(a) (a).begin(), (a).end()\n#define mp make_pair\n#define pb push_back\n#define sz(x) int((x).size())\n#define rep(i, n) for (int i = 0; i < int(n); i ++)\n#define repi(i, a, n) for (int i = (a); i < int(n); i ++)\n#define repe(x, v) for (auto x: (v))\n\nint main () {\n    std::ios_base::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    vector <int> a(n);\n    rep(i, n) {\n        cin >> a[i];\n    }\n    int ans = 0;\n    rep(i, n) {\n        int cur = a[i];\n        repi(j, i+1, n) {\n            cur = __gcd(cur, a[j]);\n            if (cur == 1) {\n                break;\n            }\n        }\n        if (cur != 1) {\n            ans = max(ans, cur);\n        }\n    }\n    cout << ans;\n    return 0;\n}",
            "Extract-Response": "\n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 - 1 = \n\n2 * 3"
        },
        {
            "Index": 280,
            "GT": -16,
            "Query": "8 + 7 + 6 + 2 - 3 * 8 - 8 - 7 =   ",
            "Injected CoT": "3 * 8 = 24\n8 + 7 = 15\n15 + 6 = 21\n21 + 2 = 23\n24 - 23 = 1\n1 - 8 = -7\n-7 - 7 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between [3, 104].\nEvery integer in the input array will be between [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 283,
            "GT": 9,
            "Query": "7 + 7 + 6 - 5 - 4 * 4 + 6 + 4 =   ",
            "Injected CoT": "4 * 4 = 16\n7 + 7 = 14\n14 + 6 = 20\n20 - 5 = 15\n15 - 16 = -1\n-1 + 6 = 5\n5 + 4 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 285,
            "GT": 10,
            "Query": "4 * 9 - 5 - 7 + 2 * 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 5 = 31\n31 - 7 = 24\n2 * 1 = 2\n24 + 2 = 26\n26 - 8 = 18\n18 - 8 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 286,
            "GT": 1973,
            "Query": "4 * 9 * 7 * 8 - 8 * 2 - 3 * 9 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 7 = 252\n252 * 8 = 2016\n8 * 2 = 16\n3 * 9 = 27\n2016 - 16 = 2000\n2000 - 27 =",
            "Response": " 1973",
            "Extract-Response": " 1973\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char num[MAX_SIZE];\n    int len, i, j, temp, result;\n\n    while(1){\n        gets(num);\n        if(num[0] == '0')\n            break;\n\n        len = strlen(num);\n        result = 0;\n\n        for(i=0, j=len-1; i<len; i++, j--){\n            temp = num[i] - '0';\n            result += temp * (pow(2, j) - 1);\n        }\n\n        printf(\"%d\\n\", result);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 287,
            "GT": 23,
            "Query": "4 * 7 - 9 + 8 + 9 - 8 - 4 - 1 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 9 = 19\n19 + 8 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 4 = 24\n24 - 1 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 288,
            "GT": 537,
            "Query": "7 * 3 * 7 * 4 + 9 - 6 * 9 - 6 =   ",
            "Injected CoT": "7 * 3 = 21\n21 * 7 = 147\n147 * 4 = 588\n588 + 9 = 597\n6 * 9 = 54\n597 - 54 = 543\n543 - 6 =",
            "Response": " 537",
            "Extract-Response": " 537\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int bracket = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '(') {\n            ++bracket;\n        } else if (s[i] == ')') {\n            --bracket;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            number = 0;\n            sign = -1;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 290,
            "GT": -18,
            "Query": "5 + 7 - 7 * 5 + 6 + 8 - 1 - 8 =   ",
            "Injected CoT": "7 * 5 = 35\n5 + 7 = 12\n12 - 35 = -23\n-23 + 6 = -17\n-17 + 8 = -9\n-9 - 1 = -10\n-10 - 8 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, n, a, b, c, d, e, f, g, h, j, k, l, m, o, p, q, r, t, u, v, w, x, y, z;\n    int sum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    int sum5 = 0;\n    int sum6 = 0;\n    int sum7 = 0;\n    int sum8 = 0;\n    int sum9 = 0;\n    int sum10 = 0;\n    int sum11 = 0;\n    int sum12 = 0;\n    int sum13 = 0;\n    int sum14 = 0;\n    int sum15 = 0;\n    int sum16 = 0;\n    int sum17 = 0;\n    int sum18 = 0;\n    int sum19 = 0;\n    int sum20 = 0;\n    int sum21 = 0;\n    int sum22 = 0;\n    int sum23 = 0;\n    int sum24 = 0;\n    int sum25 = 0;\n    int sum26 = 0;\n    int sum27 = 0;\n    int sum28 = 0;\n    int sum29 = 0;\n    int sum30 = 0;\n    int sum31 = 0;\n    int sum32 = 0;\n    int sum33 = 0;\n    int sum34 = 0;\n    int sum35 = 0;\n    int sum36 = 0;\n    int sum37 = 0;\n    int sum38 = 0;\n    int sum39 = 0;\n    int sum40 = 0;\n    int sum41 = 0;\n    int sum42 = 0;\n    int sum43 = 0;\n    int sum44 = 0;\n    int sum45 = 0;\n    int sum46 = 0;\n    int sum47 = 0;\n    int sum48 = 0;\n    int sum49 = 0;\n    int sum50 = 0;\n    int sum51 = 0;\n    int sum52 = 0;\n    int sum53 = 0;\n    int sum54 = 0;\n    int sum55 = 0;\n    int sum56 = 0;\n    int sum57 = 0;\n    int sum58 = 0;\n    int sum59 = 0;\n    int sum60 = 0;\n    int sum61 = 0;\n    int sum62 = 0;\n    int sum63 = 0;\n    int sum64 = 0;\n    int sum65 = 0;\n    int sum66 = 0;\n    int sum67 = 0;\n    int sum68 = 0;\n    int sum69 = 0;\n    int sum70 = 0;\n    int sum71 = 0;\n    int sum72 = 0;\n    int sum73 = 0;\n    int sum74 = 0;\n    int sum75 = 0;\n    int sum76 = 0;\n    int sum77 = 0;\n    int sum78 = 0;\n    int sum79 = 0;\n    int sum80 = 0;\n    int sum81 = 0;\n    int sum82 = 0;\n    int sum83 = 0;\n    int sum84 = 0;\n    int sum85 = 0;\n    int sum86 = 0;\n    int sum87 = 0;\n    int sum88 = 0;\n    int sum89 = 0;\n    int sum90 = 0;\n    int sum91 = 0;\n    int sum92 = 0;\n    int sum93 = 0;\n    int sum94 = 0;\n    int sum95 = 0;\n    int sum96 = 0;\n    int sum97 = 0;\n    int sum98 = 0;\n    int sum99 = 0;\n    int sum100 = 0;\n    int sum101 = 0;\n    int sum102 = 0;\n    int sum103 = 0;\n    int sum104 = 0;\n    int sum105 = 0;\n    int sum106 = 0;\n    int sum107 = 0;\n    int sum108 = 0;\n    int sum109 = 0;\n    int sum110 = 0;\n    int sum111 = 0;\n    int sum112 = 0;\n    int sum113 = 0;\n    int sum114 = 0;\n    int sum115 = 0;\n    int sum116 = 0;\n    int sum117 = 0;\n    int sum118 = 0;\n    int sum119 = 0;\n    int sum120 = 0;\n    int sum121 = 0;\n    int sum122 = 0;\n    int sum123 = 0;\n    int sum124 = 0;\n    int sum125 = 0;\n    int sum126 = 0;\n    int sum127 = 0;\n    int sum128 = 0;\n    int sum129 = 0;\n    int sum130 = 0;\n    int sum131 = 0;\n    int sum132 = 0;\n    int sum133 = 0;\n    int sum134 = 0;\n    int sum135 = 0;\n    int sum136 = 0;\n    int sum137 = 0;\n    int sum138 = 0;\n    int sum139 = 0;\n    int sum140 = 0;\n    int sum141 = 0;\n    int sum142 = 0;\n    int sum143 = 0;\n    int sum144 = 0;\n    int sum145 = 0;\n    int sum146 = 0;\n    int sum147 = 0;\n    int sum148 = 0;\n    int sum149 = 0;\n    int sum150 = 0;\n    int sum151 = 0;\n    int sum152 = 0;\n    int sum153 = 0;\n    int sum154 = 0;\n    int sum155 = 0;\n    int sum156 = 0;\n    int sum157 = 0;\n    int sum158 = 0;\n    int sum159 = 0;\n    int sum160 = 0;\n    int sum161 = 0;\n    int sum162 = 0;\n    int sum163 = 0;\n    int sum164 = 0;\n    int sum165 = 0;\n    int sum166 = 0;\n    int sum167 = 0;\n    int sum168 = 0;\n    int sum169 = 0;\n    int sum170 = 0;\n    int sum171 = 0;\n    int sum172 = 0;\n    int sum173 = 0;\n    int sum174 = 0;\n    int sum175 = 0;\n    int sum176 = 0;\n    int sum177 = 0;\n    int sum178 = 0;\n    int sum179 = 0;\n    int sum180 = 0;\n    int sum181 = 0;\n    int sum182 = 0;\n    int sum183 = 0;\n    int sum184 = 0;\n    int sum185 = 0;\n    int sum186 = 0;\n    int sum187 = 0;\n    int sum188 = 0;\n    int sum189 = 0;\n    int sum190 = 0;\n    int sum191 = 0;\n    int sum192 = 0;\n    int sum193 = 0;\n    int sum194 = 0;\n    int sum195 = 0;\n    int sum196 = 0;\n    int sum197 = 0;\n    int sum198 = 0;\n    int sum199 = 0;\n    int sum200 = 0;\n    int sum201 = 0;\n    int sum202 = 0;\n    int sum203 = 0;\n    int sum204 = 0;\n    int sum205 = 0;\n    int sum206 = 0;\n    int sum207 = 0;\n    int sum208 = 0;\n    int sum209 = 0;\n    int sum210 = 0;\n    int sum211 = 0;\n    int sum212 = 0;\n    int sum213 = 0;\n    int sum214 = 0;\n    int sum215 = 0;\n    int sum216 = 0;\n    int sum217 = 0;\n    int sum218 = 0;\n    int sum219 = 0;\n    int sum220 = 0;\n    int sum221 = 0;\n    int sum222 = 0;\n    int sum223 = 0;\n    int sum224 = 0;\n    int sum225 = 0;\n    int sum226 = 0;\n    int sum227 = 0;\n    int sum228 = 0;\n    int sum229 = 0;\n    int sum230 = 0;\n    int sum231 = 0;\n    int sum232 = 0;\n    int sum233 = 0;\n    int sum234 = 0;\n    int sum235 = 0;\n    int sum236 ="
        },
        {
            "Index": 292,
            "GT": 65,
            "Query": "9 * 6 - 9 + 9 + 1 + 5 - 4 + 9 =   ",
            "Injected CoT": "9 * 6 = 54\n54 - 9 = 45\n45 + 9 = 54\n54 + 1 = 55\n55 + 5 = 60\n60 - 4 = 56\n56 + 9 =",
            "Response": " 65",
            "Extract-Response": " 65\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 293,
            "GT": 32,
            "Query": "5 + 5 + 2 - 4 + 8 + 9 + 4 + 3 =   ",
            "Injected CoT": "5 + 5 = 10\n10 + 2 = 12\n12 - 4 = 8\n8 + 8 = 16\n16 + 9 = 25\n25 + 4 = 29\n29 + 3 =",
            "Response": " 32",
            "Extract-Response": " 32\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum of all integers = %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 294,
            "GT": -26,
            "Query": "3 - 5 * 6 - 9 - 3 + 2 + 7 + 4 =   ",
            "Injected CoT": "-5 * 6 = -30\n3 - (-30) = 33\n33 - 9 = 24\n24 - 3 = 21\n21 + 2 = 23\n23 + 7 = 30\n30 + 4 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define sz(v) (int)v.size()\n#define INF 1000000000\n\nvoid print_vi(VI v) {\n    for (int i = 0; i < sz(v); ++i) {\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n}\n\nint N;\nstring s;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.precision(10);\n\n    cin >> s;\n    N = sz(s);\n\n    int ans = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < N; ++i) {\n        if (s[i] == '+') {\n            ans += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    ans += sign * curr;\n    cout << ans << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 295,
            "GT": 21,
            "Query": "2 - 9 + 3 - 9 + 8 * 4 + 8 - 6 =   ",
            "Injected CoT": "8 * 4 = 32\n-9 + 3 = -6\n-6 - 9 = -15\n-15 + 2 = -13\n-13 + 32 = 19\n19 + 8 = 27\n27 - 6 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 297,
            "GT": 33,
            "Query": "9 + 9 + 3 + 5 + 8 * 1 + 1 - 2 =   ",
            "Injected CoT": "8 * 1 = 8\n9 + 9 = 18\n18 + 3 = 21\n21 + 5 = 26\n26 + 8 = 34\n34 + 1 = 35\n35 - 2 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else if(s[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 298,
            "GT": 73,
            "Query": "8 + 4 * 6 - 1 + 7 * 6 - 7 + 7 =   ",
            "Injected CoT": "4 * 6 = 24\n8 + 24 = 32\n7 * 6 = 42\n1 - 7 = -6\n42 + (-6) = 36\n36 + 7 = 43\n32 + 43 =",
            "Response": " 75",
            "Extract-Response": " 75.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; i++) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n            c = (c * 2) % mod;\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 300,
            "GT": 1113,
            "Query": "6 + 6 * 6 - 9 + 4 * 9 * 5 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n4 * 9 = 36\n36 * 5 = 180\n180 * 6 = 1080\n1080 + 42 = 1122\n1122 - 9 =",
            "Response": " 1113\n1113 + 4 = 1117",
            "Extract-Response": " 1117\n\n*/\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <set>\n#include <iomanip>\n#include <list>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <numeric>\n\n#include <cstdio>\n#include <cmath>\n#include <climits>\n#include <cstring>\n#include <cctype>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nconst int oo = (int)1e9;\nconst double eps = 1e-9;\n\n#define fill(a,x) memset(a, (x), sizeof(a))\n#define trace(x) cout << #x << \": \" << x << endl;\n#define trace2(x, y) cout << #x << \": \" << x << \" | \" << #y << \": \" << y << endl;\n\nint main() {\n  int n;\n  while(cin>>n && n) {\n    int sum = n;\n    while(n>9) {\n      int t = n;\n      n = 0;\n      while(t) {\n        n += t%10;\n        t /= 10;\n      }\n      sum += n;\n    }\n    cout<<sum<<endl;\n  }\n\treturn 0;\n}"
        },
        {
            "Index": 302,
            "GT": 39,
            "Query": "5 * 9 - 1 + 1 * 3 + 4 - 3 * 4 =   ",
            "Injected CoT": "5 * 9 = 45\n45 - 1 = 44\n1 * 3 = 3\n44 + 3 = 47\n4 - 3 = 1\n3 * 4 = 12\n47 - 12 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define inf 1061109567\n#define infll 10611408829LL\n#define si(x) scanf(\"%d\",&x)\n#define ss(x) scanf(\"%s\",x)\n#define sll(x) scanf(\"%lld\",&x)\n#define pi(x) printf(\"%d\\n\",x)\n#define pll(x) printf(\"%lld\\n\",x)\n#define pis(x) printf(\"%d \",x)\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define vii vector<pii>\n#define vvi vector<vi>\n\nint main() {\n    int n;\n    cin >> n;\n    int a[n];\n    for(int i=0; i<n; i++)\n        cin >> a[i];\n    int ans = 0;\n    for(int i=0; i<n; i++) {\n        int cur = a[i];\n        for(int j=i+1; j<n; j++) {\n            cur += a[j];\n            if(cur%9==0)\n                ans++;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}"
        },
        {
            "Index": 303,
            "GT": 116,
            "Query": "2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 6 = 120\n2 + 120 = 122\n122 * 1 = 122\n122 + 9 = 131\n131 - 6 = 125\n125 - 9 =",
            "Response": " 116\n\n2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 = 116",
            "Extract-Response": " 116"
        },
        {
            "Index": 304,
            "GT": -67,
            "Query": "6 - 1 + 1 - 7 + 1 - 8 * 8 - 3 =   ",
            "Injected CoT": "8 * 8 = 64\n-1 = -1\n1 = 1\n-7 = -7\n1 = 1\n-8 * 64 = -512\n-3 = -3\n6 + (-1) + 1 + (-7) + 1 + (-512) + (-3) =",
            "Response": " -515",
            "Extract-Response": " -515\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0, mul = 1;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n        else if(str[i] == '+')\n        {\n            sum += mul;\n            mul = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sum += mul;\n            mul = -1;\n        }\n        else if(str[i] == '*')\n        {\n            mul *= num;\n        }\n        else\n        {\n            num = str[i] - '0';\n            mul *= num;\n        }\n    }\n    sum += mul;\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}"
        },
        {
            "Index": 305,
            "GT": -63,
            "Query": "9 - 9 - 7 * 6 * 2 + 4 * 4 + 5 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 2 = 84\n9 - 9 = 0\n84 - 0 = 84\n4 * 4 = 16\n84 + 16 = 100\n100 + 5 =",
            "Response": " 105",
            "Extract-Response": "\n\n105"
        },
        {
            "Index": 306,
            "GT": 20,
            "Query": "9 * 4 - 8 + 1 - 6 - 8 + 1 + 4 =   ",
            "Injected CoT": "9 * 4 = 36\n36 - 8 = 28\n28 + 1 = 29\n29 - 6 = 23\n23 - 8 = 15\n15 + 1 = 16\n16 + 4 =",
            "Response": " 20\n\n20\n\n*/",
            "Extract-Response": "\n\n20"
        },
        {
            "Index": 307,
            "GT": 34,
            "Query": "6 * 9 - 4 + 9 + 7 - 2 * 2 * 8 =   ",
            "Injected CoT": "6 * 9 = 54\n2 * 2 = 4\n4 * 8 = 32\n54 - 4 = 50\n50 + 9 = 59\n59 + 7 = 66\n66 - 32 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define X first\n#define Y second\n#define pb push_back\n#define mp make_pair\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(), (x).end()\n#define debug(x) cerr << #x << \" = \" << x << endl\n#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    int ans = 0;\n    int cur = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '+') {\n            cur++;\n        } else {\n            cur--;\n        }\n        if (cur < 0) {\n            ans += i + 1;\n            cur = 0;\n        }\n    }\n    ans += n;\n    cout << ans << endl;\n    return 0;\n}"
        },
        {
            "Index": 309,
            "GT": -16,
            "Query": "2 - 2 * 4 - 8 - 4 + 3 + 8 - 9 =   ",
            "Injected CoT": "2 * 4 = 8\n2 - 8 = -6\n-6 - 4 = -10\n-10 + 3 = -7\n-7 + 8 = 1\n1 - 9 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 311,
            "GT": 46,
            "Query": "9 + 4 + 3 * 1 + 8 + 9 + 9 + 4 =   ",
            "Injected CoT": "3 * 1 = 3\n9 + 4 = 13\n13 + 3 = 16\n16 + 8 = 24\n24 + 9 = 33\n33 + 9 = 42\n42 + 4 =",
            "Response": " 46\n\n46\n\n*/",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 312,
            "GT": -14,
            "Query": "2 - 8 - 2 - 7 + 2 + 5 - 2 - 4 =   ",
            "Injected CoT": "-8 - 2 = -10\n-10 - 7 = -17\n-17 + 2 = -15\n-15 + 5 = -10\n-10 - 2 = -12\n-12 - 4 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 313,
            "GT": 104,
            "Query": "8 * 2 * 3 * 3 + 7 + 9 - 7 * 8 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 3 = 48\n48 * 3 = 144\n7 + 9 = 16\n7 * 8 = 56\n144 - 56 = 88\n16 + 88 =",
            "Response": " 104",
            "Extract-Response": " 104\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 315,
            "GT": 269,
            "Query": "9 - 3 + 5 * 7 * 9 - 7 * 8 + 4 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 9 = 315\n7 * 8 = 56\n315 - 56 = 259\n9 - 3 = 6\n259 + 6 = 265\n265 + 4 =",
            "Response": " 269",
            "Extract-Response": " 269\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 316,
            "GT": 39,
            "Query": "1 + 8 * 5 * 1 + 9 + 5 - 8 - 8 =   ",
            "Injected CoT": "8 * 5 = 40\n1 + 40 = 41\n41 * 1 = 41\n41 + 9 = 50\n50 + 5 = 55\n55 - 8 = 47\n47 - 8 =",
            "Response": " 39\n\n39\n\n*/",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 317,
            "GT": -43,
            "Query": "4 - 2 * 1 - 4 - 7 - 7 * 4 - 6 =   ",
            "Injected CoT": "2 * 1 = 2\n4 - 2 = 2\n7 * 4 = 28\n2 - 4 = -2\n-2 - 7 = -9\n-9 - 28 = -37\n-37 - 6 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 318,
            "GT": 649,
            "Query": "3 + 8 - 2 * 1 + 8 * 4 * 5 * 4 =   ",
            "Injected CoT": "2 * 1 = 2\n8 * 4 = 32\n32 * 5 = 160\n160 * 4 = 640\n3 + 8 = 11\n11 - 2 = 9\n9 + 640 =",
            "Response": " 649",
            "Extract-Response": " 649\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,"
        },
        {
            "Index": 320,
            "GT": -32,
            "Query": "8 - 8 + 3 - 3 - 7 - 1 - 6 * 4 =   ",
            "Injected CoT": "6 * 4 = 24\n8 - 8 = 0\n0 + 3 = 3\n3 - 3 = 0\n0 - 7 = -7\n-7 - 1 = -8\n-8 - 24 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperators(a):\n    # your code here\n    return sum(a)"
        },
        {
            "Index": 321,
            "GT": -79,
            "Query": "2 * 7 - 5 - 9 * 9 + 4 - 3 - 8 =   ",
            "Injected CoT": "2 * 7 = 14\n9 * 9 = 81\n14 - 5 = 9\n81 - 9 = 72\n72 + 4 = 76\n76 - 3 = 73\n73 - 8 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nThe answer is guaranteed to be less than 2 ^ 31 - 1.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 324,
            "GT": 15,
            "Query": "7 * 1 * 3 - 6 + 3 + 2 - 9 + 4 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 3 = 21\n21 - 6 = 15\n15 + 3 = 18\n18 + 2 = 20\n20 - 9 = 11\n11 + 4 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 325,
            "GT": -226,
            "Query": "1 + 7 + 5 - 3 - 6 * 8 * 5 + 4 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 5 = 240\n1 + 7 = 8\n8 + 5 = 13\n13 - 3 = 10\n10 - 240 = -230\n-230 + 4 =",
            "Response": " -226",
            "Extract-Response": " -226.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++){\n            if(s[i] >= '0' && s[i] <= '9'){\n                num = num * 10 + s[i] - '0';\n            }\n            else{\n                nums.push(num);\n                num = 0;\n                if(!ops.empty() && ops.top() == '*'){\n                    ops.pop();\n                    int a = nums.top();\n                    nums.pop();\n                    int b = nums.top();\n                    nums.pop();\n                    nums.push(a * b);\n                }\n                if(!ops.empty() && ops.top() == '/'){\n                    ops.pop();\n                    int a = nums.top();\n                    nums.pop();\n                    int b = nums.top();\n                    nums.pop();\n                    nums.push(b / a);\n                }\n                ops.push(s[i]);\n            }\n        }\n        nums.push(num);\n        while(!ops.empty()){\n            char op = ops.top();\n            ops.pop();\n            int a = nums.top();\n            nums.pop();\n            int b = nums.top();\n            nums.pop();\n            if(op == '+') nums.push(a + b);\n            else nums.push(b - a);\n        }\n        return nums.top();\n    }\n};"
        },
        {
            "Index": 326,
            "GT": 2,
            "Query": "3 - 8 - 2 * 3 + 8 * 6 - 7 * 5 =   ",
            "Injected CoT": "-2 * 3 = -6\n8 * 6 = 48\n7 * 5 = 35\n-6 - 5 = -11\n-11 + 48 = 37\n3 - 8 = -5\n-5 - 2 = -7\n-7 + 37 =",
            "Response": " 30",
            "Extract-Response": "\n\n30"
        },
        {
            "Index": 328,
            "GT": -18,
            "Query": "1 + 4 + 7 - 9 * 3 - 4 + 7 - 6 =   ",
            "Injected CoT": "-9 * 3 = -27\n1 + 4 + 7 - 27 - 4 + 7 - 6 =",
            "Response": "\n1 + 4 + 7 - 31 + 7 - 6 =\n1 + 11 - 6 =\n6",
            "Extract-Response": " 6."
        },
        {
            "Index": 330,
            "GT": 80,
            "Query": "9 * 9 - 5 + 6 * 5 - 6 - 4 * 5 =   ",
            "Injected CoT": "9 * 9 = 81\n81 - 5 = 76\n6 * 5 = 30\n30 - 6 = 24\n4 * 5 = 20\n24 - 20 = 4\n76 + 4 =",
            "Response": " 80",
            "Extract-Response": "\n\n80"
        },
        {
            "Index": 331,
            "GT": 133,
            "Query": "7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 4 = 140\n1 * 7 = 7\n7 * 4 = 28\n140 - 28 = 112\n3 * 7 = 21\n112 + 21 =",
            "Response": " 133\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 = 133",
            "Extract-Response": "\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 = 133"
        },
        {
            "Index": 332,
            "GT": 3,
            "Query": "7 * 1 - 6 - 6 + 9 - 1 - 8 + 8 =   ",
            "Injected CoT": "7 * 1 = 7\n7 - 6 = 1\n1 - 6 = -5\n-5 + 9 = 4\n4 - 1 = 3\n3 - 8 = -5\n-5 + 8 =",
            "Response": " 3\n3 + 3 = 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        result += s[i] - '0';\n    }\n\n    while (result >= 10) {\n        int newResult = 0;\n        while (result > 0) {\n            newResult += result % 10;\n            result /= 10;\n        }\n        result = newResult;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 334,
            "GT": 48,
            "Query": "8 + 8 * 4 + 5 - 5 + 7 - 3 + 4 =   ",
            "Injected CoT": "8 * 4 = 32\n32 + 8 = 40\n40 + 5 = 45\n45 - 5 = 40\n40 + 7 = 47\n47 - 3 = 44\n44 + 4 =",
            "Response": " 48",
            "Extract-Response": "\n\n48"
        },
        {
            "Index": 336,
            "GT": 10,
            "Query": "4 * 4 + 2 - 2 - 5 - 2 + 8 - 7 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 2 = 18\n18 - 2 = 16\n16 - 5 = 11\n11 - 2 = 9\n9 + 8 = 17\n17 - 7 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 341,
            "GT": 58,
            "Query": "4 * 2 - 3 * 4 + 6 * 5 * 2 + 2 =   ",
            "Injected CoT": "4 * 2 = 8\n3 * 4 = 12\n6 * 5 = 30\n30 * 2 = 60\n8 - 12 = -4\n-4 + 60 = 56\n56 + 2 =",
            "Response": " 58",
            "Extract-Response": " 58.\n\nNote:\n\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed.\n\nConsider extra cases:\n\nDid you consider the case of empty input string?\n\nFor the purpose of this problem, we define empty string as valid parentheses string.\n\n*/\n\nclass Solution {\n    public int calPoints(String[] ops) {\n        Stack<Integer> stack = new Stack<>();\n        for (String op : ops) {\n            if (op.equals(\"+\")) {\n                int top = stack.pop();\n                int newtop = top + stack.peek();\n                stack.push(top);\n                stack.push(newtop);\n            } else if (op.equals(\"C\")) {\n                stack.pop();\n            } else if (op.equals(\"D\")) {\n                stack.push(2 * stack.peek());\n            } else {\n                stack.push(Integer.valueOf(op));\n            }\n        }\n\n        int ans = 0;\n        for (int score : stack) {\n            ans += score;\n        }\n        return ans;\n    }\n}"
        },
        {
            "Index": 342,
            "GT": 164,
            "Query": "6 * 9 * 3 - 4 - 9 + 5 * 4 - 5 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 3 = 162\n162 - 4 = 158\n158 - 9 = 149\n5 * 4 = 20\n149 + 20 = 169\n169 - 5 =",
            "Response": " 164",
            "Extract-Response": " 164\n</code>\n"
        },
        {
            "Index": 343,
            "GT": 503,
            "Query": "3 - 9 + 2 + 4 + 8 * 9 * 7 - 1 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 7 = 504\n3 - 9 = -6\n-6 + 2 = -4\n-4 + 4 = 0\n0 + 504 = 504\n504 - 1 =",
            "Response": " 503",
            "Extract-Response": " 503\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, num = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            result += num * sign;\n            num = 0;\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else\n        {\n            num = num * 10 + (input[i] - '0');\n        }\n    }\n\n    result += num * sign;\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 344,
            "GT": 43,
            "Query": "9 + 9 * 3 + 9 + 3 + 4 - 1 * 9 =   ",
            "Injected CoT": "9 * 3 = 27\n9 + 27 = 36\n36 + 9 = 45\n45 + 3 = 48\n48 + 4 = 52\n1 * 9 = 9\n52 - 9 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,len,sum;\n    char str[100];\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%s\",str);\n        len=strlen(str);\n        sum=0;\n        for(j=0;j<len;j++)\n        {\n            if(str[j]=='+')\n                continue;\n            else if(str[j]=='-')\n            {\n                sum=sum-1;\n                continue;\n            }\n            else\n            {\n                sum=sum+str[j]-48;\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 348,
            "GT": -20,
            "Query": "2 + 8 - 3 * 4 - 7 - 7 - 4 * 1 =   ",
            "Injected CoT": "3 * 4 = 12\n4 * 1 = 4\n2 + 8 = 10\n10 - 12 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 - 4 =",
            "Response": " -20\n\n-20",
            "Extract-Response": " -20\n\n*/"
        },
        {
            "Index": 349,
            "GT": -75,
            "Query": "9 - 9 * 7 - 9 * 1 - 6 - 4 - 2 =   ",
            "Injected CoT": "9 * 7 = 63\n9 * 1 = 9\n63 - 9 = 54\n6 + 4 = 10\n54 - 10 = 44\n44 - 2 =",
            "Response": " 42\n\n42\n\n*/",
            "Extract-Response": "\n\n42"
        },
        {
            "Index": 351,
            "GT": 23,
            "Query": "1 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =   ",
            "Injected CoT": "1 * 7 = 7\n7 + 4 = 11\n11 + 5 = 16\n16 - 2 = 14\n14 + 6 = 20\n20 - 2 = 18\n18 + 5 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\n\n*/\n\nclass Solution {\npublic:\n    int cal(string s) {\n        int res = 0;\n        int sign = 1;\n        int num = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * num;\n                sign = 1;\n                num = 0;\n            } else if (s[i] == '-') {\n                res += sign * num;\n                sign = -1;\n                num = 0;\n            } else {\n                num = num * 10 + s[i] - '0';\n            }\n        }\n        res += sign * num;\n        return res;\n    }\n    int calculate(string s) {\n        int res = 0;\n        int sign = 1;\n        int num = 0;\n        int i = 0;\n        while (i < s.size()) {\n            if (s[i] == ' ') {\n                i++;\n                continue;\n            }\n            if (s[i] == '(') {\n                int j = i + 1;\n                int cnt = 1;\n                while (j < s.size() && cnt != 0) {\n                    if (s[j] == '(') cnt++;\n                    if (s[j] == ')') cnt--;\n                    j++;\n                }\n                res += sign * cal(s.substr(i + 1, j - i - 2));\n                i = j;\n            } else {\n                num = num * 10 + s[i] - '0';\n                i++;\n            }\n        }\n        res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 352,
            "GT": 42,
            "Query": "1 * 7 * 5 + 4 + 5 * 2 * 1 - 7 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 5 = 35\n5 * 2 = 10\n1 * 10 = 10\n35 + 4 = 39\n39 + 10 = 49\n49 - 7 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 354,
            "GT": 43,
            "Query": "6 - 2 + 4 + 8 + 4 + 9 + 2 * 7 =   ",
            "Injected CoT": "2 * 7 = 14\n6 - 2 = 4\n4 + 4 = 8\n8 + 8 = 16\n16 + 9 = 25\n25 + 14 =",
            "Response": " 39",
            "Extract-Response": "\n\n39."
        },
        {
            "Index": 356,
            "GT": 390,
            "Query": "9 * 1 + 6 * 7 * 9 + 6 * 1 - 3 =   ",
            "Injected CoT": "9 * 1 = 9\n6 * 7 = 42\n42 * 9 = 378\n6 * 1 = 6\n378 + 6 = 384\n384 - 3 =",
            "Response": " 381\n\n*/\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int num = c - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    num = num * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sign * num;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int num = c - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    num = num * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sign * num;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}"
        },
        {
            "Index": 357,
            "GT": 22,
            "Query": "4 + 7 - 5 - 7 - 4 + 4 * 7 - 1 =   ",
            "Injected CoT": "4 = 4\n7 = 7\n5 = 5\n7 = 7\n4 = 4\n4 * 7 = 28\n28 = 28\n4 + 7 = 11\n11 - 5 = 6\n6 - 7 = -1\n-1 - 4 = -5\n-5 + 28 = 23\n23 - 1 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        }
    ]
}