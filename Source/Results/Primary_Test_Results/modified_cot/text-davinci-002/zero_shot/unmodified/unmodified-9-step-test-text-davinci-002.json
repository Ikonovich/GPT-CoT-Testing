{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "unmodified",
    "Steps": 9,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\unmodified\\unmodified-9-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 0,
            "GT": 369,
            "Query": "1 * 2 + 7 * 6 * 9 - 2 - 1 - 1 - 1 - 6 =   ",
            "Injected CoT": "1 * 2 = 2\n7 * 6 = 42\n42 * 9 = 378\n2 + 378 = 380\n380 - 2 = 378\n378 - 1 = 377\n377 - 1 = 376\n376 - 1 = 375\n375 - 6 =",
            "Response": " 369\n2 + 369 = 371\n\n371 is the correct answer.",
            "Extract-Response": " 371.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiiii;\n    int jjjjj;\n    int kkkkk;\n    int lllll;\n    int mmmmmm;\n    int nnnnnn;\n    int oooooo;\n    int pppppp;\n    int qqqqqq;\n    int rrrrrr;\n    int ssssss;\n    int tttttt;\n    int uuuuuu;\n    int vvvvvv;\n    int wwwwww;\n    int xxxxxx;\n    int yyyyyy;\n    int zzzzzz;\n    int aaaaaaa;\n    int bbbbbbb;\n    int ccccccc;\n    int ddddddd;\n    int eeeeeee;\n    int fffffff;\n    int ggggggg;\n    int hhhhhhh;\n    int iiiiiii;\n    int jjjjjjj;\n    int kkkkkkk;\n    int lllllll;\n    int mmmmmm;\n    int nnnnnnn;\n    int ooooooo;\n    int ppppppp;\n    int qqqqqqq;\n    int rrrrrrr;\n    int sssssss;\n    int ttttttt;\n    int uuuuuuu;\n    int vvvvvvv;\n    int wwwwwww;\n    int xxxxxxx;\n    int yyyyyyy;\n    int zzzzzzz;\n    int aaaaaaaa;\n    int bbbbbbbb;\n    int cccccccc;\n    int dddddddd;\n    int eeeeeeee;\n    int ffffffff;\n    int gggggggg;\n    int hhhhhhhh;\n    int iiiiiiii;\n    int jjjjjjjj;\n    int kkkkkkkk;\n    int llllllll;\n    int mmmmmmmm;\n    int nnnnnnnn;\n    int oooooooo;\n    int pppppppp;\n    int qqqqqqqq;\n    int rrrrrrrr;\n    int ssssssss;\n    int tttttttt;\n    int uuuuuuuu;\n    int vvvvvvvv;\n    int wwwwwwww;\n    int xxxxxxxx;\n    int yyyyyyyy;\n    int zzzzzzzz;\n    int aaaaaaaaa;\n    int bbbbbbbbb;\n    int ccccccccc;\n    int ddddddddd;\n    int eeeeeeeee;\n    int fffffffff;\n    int ggggggggg;\n    int hhhhhhhhh;\n    int iiiiiiiii;\n    int jjjjjjjjj;\n    int kkkkkkkkk;\n    int lllllllll;\n    int mmmmmmmmm;\n    int nnnnnnnnn;\n    int ooooooooo;\n    int ppppppppp;\n    int qqqqqqqqq;\n    int rrrrrrrrr;\n    int sssssssss;\n    int ttttttttt;\n    int uuuuuuuuu;\n    int vvvvvvvvv;\n    int wwwwwwwww;\n    int xxxxxxxxx;\n    int yyyyyyyyy;\n    int zzzzzzzzz;\n    int aaaaaaaaaa;\n    int bbbbbbbbbb;\n    int cccccccccc;\n    int dddddddddd;\n    int eeeeeeeeee;\n    int ffffffffff;\n    int gggggggggg;\n    int hhhhhhhhhh;\n    int iiiiiiiiii;\n    int jjjjjjjjjj;\n    int kkkkkkkkkk;\n    int llllllllll;\n    int mmmmmmmmmm;\n    int nnnnnnnnnn;\n    int oooooooooo;\n    int pppppppppp;\n    int qqqqqqqqqq;\n    int rrrrrrrrrr;\n    int ssssssssss;\n    int tttttttttt;\n    int uuuuuuuuuu;\n    int vvvvvvvvvv;\n    int wwwwwwwwww;\n    int xxxxxxxxxx;\n    int yyyyyyyyyy;\n    int zzzzzzzzzz;\n    int aaaaaaaaaaa;\n    int bbbbbbbbbbb;\n    int ccccccccccc;\n    int ddddddddddd;\n    int eeeeeeeeeee;\n    int fffffffffff;\n    int ggggggggggg;\n    int hhhhhhhhhhh;\n    int iiiiiiiiiii;\n    int jjjjjjjjjjj;\n    int kkkkkkkkkkk;\n    int lllllllllll;\n    int mmmmmmmmmmm;\n    int nnnnnnnnnnn;\n    int ooooooooooo;\n    int ppppppppppp;\n    int qqqqqqqqqqq;\n    int rrrrrrrrrrr;\n    int sssssssssss;\n    int ttttttttttt;\n    int uuuuuuuuuuu;\n    int vvvvvvvvvvv;\n    int wwwwwwwwwww;\n    int xxxxxxxxxxx;\n    int yyyyyyyyyyy;\n    int zzzzzzzzzzz;\n    int aaaaaaaaaaaa;\n    int bbbbbbbbbbbb;\n    int cccccccccccc;\n    int dddddddddddd;\n    int eeeeeeeeeeee;\n    int ffffffffffff;\n    int gggggggggggg;\n    int hhhhhhhhhhhh;\n    int iiiiiiiiiiii;\n    int jjjjjjjjjjjj;\n    int kkkkkkkkkkkk;\n    int llllllllllll;\n    int mmmmmmmmmmmm;\n    int nnnnnnnnnnnn;\n    int oooooooooooo;\n    int pppppppppppp;\n    int qqqqqqqqqqqq;\n    int rrrrrrrrrrrr;\n    int ssssssssssss;\n    int tttttttttttt;\n    int uuuuuuuuuuuu;\n    int vvvvvvvvvvvv;\n    int wwwwwwwwwwww;\n    int xxxxxxxxxxxx;\n    int yyyyyyyyyyyy;\n    int zzzzzzzzzzzz;\n    int aaaaa"
        },
        {
            "Index": 2,
            "GT": 75,
            "Query": "5 + 8 * 5 + 4 * 8 + 9 - 9 - 7 + 9 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n4 * 8 = 32\n5 + 40 = 45\n45 + 32 = 77\n77 - 9 = 68\n68 - 7 = 61\n61 + 9 = 70\n70 - 4 =",
            "Response": " 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n75 - 9 = 66\n66 + 9 = 75\n",
            "Extract-Response": "\n66"
        },
        {
            "Index": 4,
            "GT": -957,
            "Query": "3 + 9 - 8 * 4 * 3 * 5 * 2 - 3 * 1 * 3 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 3 = 96\n96 * 5 = 480\n480 * 2 = 960\n3 * 1 = 3\n3 * 3 = 9\n9 + 960 = 969\n3 + 9 = 12\n12 - 969 =",
            "Response": " -957",
            "Extract-Response": " -957\n</code>\n"
        },
        {
            "Index": 6,
            "GT": 128,
            "Query": "5 * 9 + 7 + 6 * 8 + 7 * 6 - 2 - 2 * 6 =   ",
            "Injected CoT": "5 * 9 = 45\n6 * 8 = 48\n7 * 6 = 42\n2 * 6 = 12\n45 + 7 = 52\n48 + 42 = 90\n2 * 6 = 12\n52 + 90 = 142\n142 - 2 = 140\n140 - 12 =",
            "Response": " 128",
            "Extract-Response": " 128\n</code>\n"
        },
        {
            "Index": 8,
            "GT": 91,
            "Query": "9 + 5 * 5 + 9 * 6 - 1 * 7 + 2 + 3 + 5 =   ",
            "Injected CoT": "5 * 5 = 25\n9 * 6 = 54\n1 * 7 = 7\n9 + 25 = 34\n34 + 54 = 88\n88 - 7 = 81\n81 + 2 = 83\n83 + 3 = 86\n86 + 5 =",
            "Response": " 91\n91 = 91",
            "Extract-Response": " 91\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 1; i <= n; ++i) {\n        int number = i;\n        int sum = i;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        if (sum == n) {\n            result = i;\n            break;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 9,
            "GT": 2,
            "Query": "3 + 6 * 6 - 6 * 6 - 4 - 1 * 2 + 6 - 1 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n3 + 36 = 39\n39 - 36 = 3\n3 - 4 = -1\n1 * 2 = 2\n-1 + 6 = 5\n5 - 1 =",
            "Response": " 4\n4 + 2 = 6\n6 - 6 = 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 11,
            "GT": 18,
            "Query": "5 - 1 * 8 - 1 + 8 + 6 + 1 + 6 + 7 - 6 =   ",
            "Injected CoT": "1 * 8 = 8\n5 - 8 = -3\n-3 - 1 = -4\n-4 + 8 = 4\n4 + 6 = 10\n10 + 1 = 11\n11 + 6 = 17\n17 + 7 = 24\n24 - 6 =",
            "Response": " 18",
            "Extract-Response": "\n\n18."
        },
        {
            "Index": 14,
            "GT": -68,
            "Query": "9 + 1 - 9 * 9 + 9 - 1 * 4 - 9 + 4 + 3 =   ",
            "Injected CoT": "9 * 9 = 81\n1 * 4 = 4\n9 * 81 = 729\n729 - 9 = 720\n720 - 4 = 716\n716 - 9 = 707\n707 + 4 = 711\n711 + 3 =",
            "Response": " 714\n\n7 + 1 - 9 * 9 + 9 - 1 * 4 - 9 + 4 + 3 = 714",
            "Extract-Response": " 714\n\n*/"
        },
        {
            "Index": 15,
            "GT": 60,
            "Query": "2 * 2 * 7 - 6 + 7 * 7 - 2 - 3 + 3 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n4 * 7 = 28\n28 - 6 = 22\n7 * 7 = 49\n2 - 2 = 0\n3 - 3 = 0\n0 + 0 = 0\n49 - 0 = 49\n49 - 9 = 40\n22 + 40 =",
            "Response": " 62",
            "Extract-Response": " 62.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 16,
            "GT": 737,
            "Query": "2 * 6 + 1 * 6 + 4 * 9 * 4 * 5 - 5 + 4 =   ",
            "Injected CoT": "2 * 6 = 12\n1 * 6 = 6\n4 * 9 = 36\n36 * 4 = 144\n144 * 5 = 720\n12 + 6 = 18\n18 + 720 = 738\n738 - 5 = 733\n733 + 4 =",
            "Response": " 737",
            "Extract-Response": " 737.\n\nNote:\n\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        string res(len1 + len2, '0');\n        for (int i = len1 - 1; i >= 0; --i) {\n            int carry = 0;\n            for (int j = len2 - 1; j >= 0; --j) {\n                int tmp = (res[i + j + 1] - '0') + (num1[i] - '0') * (num2[j] - '0') + carry;\n                res[i + j + 1] = tmp % 10 + '0';\n                carry = tmp / 10;\n            }\n            res[i] += carry;\n        }\n        size_t startpos = res.find_first_not_of(\"0\");\n        if (string::npos != startpos) {\n            return res.substr(startpos);\n        }\n        return \"0\";\n    }\n};"
        },
        {
            "Index": 18,
            "GT": 15,
            "Query": "8 * 7 - 6 - 6 - 3 * 1 - 8 - 6 - 9 - 3 =   ",
            "Injected CoT": "8 * 7 = 56\n56 - 6 = 50\n50 - 6 = 44\n3 * 1 = 3\n44 - 3 = 41\n41 - 8 = 33\n33 - 6 = 27\n27 - 9 = 18\n18 - 3 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] > a[j]) {\n                swap(a[i], a[j]);\n                result++;\n            }\n        }\n    }\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 20,
            "GT": -238,
            "Query": "3 * 9 - 1 * 1 * 6 * 6 * 1 * 7 - 7 - 6 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 6 = 36\n36 * 1 = 36\n36 * 7 = 252\n252 + 7 = 259\n3 * 9 = 27\n259 - 27 =",
            "Response": " 232\n\n232\n\n*/",
            "Extract-Response": " 232"
        },
        {
            "Index": 22,
            "GT": -4,
            "Query": "7 + 1 + 6 + 3 - 3 + 2 + 1 - 8 - 8 - 5 =   ",
            "Injected CoT": "7 + 1 = 8\n8 + 6 = 14\n14 + 3 = 17\n17 - 3 = 14\n14 + 2 = 16\n16 + 1 = 17\n17 - 8 = 9\n9 - 8 = 1\n1 - 5 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n        }\n        return (int) (ans % mod);\n    }\n};"
        },
        {
            "Index": 23,
            "GT": -114,
            "Query": "3 - 3 * 4 * 4 - 6 * 8 * 1 - 5 * 6 + 9 =   ",
            "Injected CoT": "3 * 4 = 12\n12 * 4 = 48\n6 * 8 = 48\n48 * 1 = 48\n5 * 6 = 30\n48 + 48 = 96\n96 - 30 = 66\n66 - 5 = 61\n61 + 9 =",
            "Response": " 70",
            "Extract-Response": " 70.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 10^4.\nThe value of nodes is between -10^5 and 10^5.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumRootToLeaf(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 2 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};"
        },
        {
            "Index": 28,
            "GT": -27,
            "Query": "3 + 9 - 8 - 6 - 6 * 2 * 3 + 1 + 7 + 3 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 3 = 36\n3 + 9 = 12\n12 - 8 = 4\n4 - 6 = -2\n-2 - 36 = -38\n-38 + 1 = -37\n-37 + 7 = -30\n-30 + 3 =",
            "Response": " -27",
            "Extract-Response": " -27.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <functional>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int cur = 0;\n    int ans = 0;\n    int sign = 1;\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            ans += cur;\n            cur = 0;\n            sign = 1;\n        } else if (c == '-') {\n            ans += cur;\n            cur = 0;\n            sign = -1;\n        } else if (c == '*') {\n            ans += cur;\n            cur = 0;\n            sign = 1;\n        } else {\n            cur = cur * 10 + (c - '0');\n        }\n    }\n    ans += cur;\n    cout << ans << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 29,
            "GT": -146,
            "Query": "2 - 7 + 3 - 1 * 8 - 9 - 8 * 8 * 2 + 1 =   ",
            "Injected CoT": "8 * 2 = 16\n-8 * 16 = -128\n-128 - 9 = -137\n-137 - 8 = -145\n-145 * 1 = -145\n-145 + 3 = -142\n-142 - 7 = -149\n-149 + 2 = -147\n-147 + 1 =",
            "Response": " -146",
            "Extract-Response": " -146\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24,"
        },
        {
            "Index": 31,
            "GT": 18,
            "Query": "6 * 4 + 1 - 2 * 3 * 9 + 7 * 7 - 5 + 3 =   ",
            "Injected CoT": "6 * 4 = 24\n2 * 3 = 6\n6 * 9 = 54\n24 + 1 = 25\n54 - 6 = 48\n7 * 7 = 49\n48 + 49 = 97\n97 - 5 = 92\n92 + 3 =",
            "Response": " 95",
            "Extract-Response": " 95\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 34,
            "GT": -1,
            "Query": "2 * 5 * 3 - 3 + 5 - 1 - 4 * 8 + 3 - 3 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 3 = 30\n30 - 3 = 27\n27 + 5 = 32\n32 - 1 = 31\n31 - 4 * 8 = -1\n-1 + 3 = 2\n2 - 3 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\nThe number of operations is between [1, 10000].\nThe answer is guaranteed to be -30000.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < len; i++) {\n            if(isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == len - 1) {\n                if(sign == '-') {\n                    st.push(-num);\n                }\n                if(sign == '+') {\n                    st.push(num);\n                }\n                if(sign == '*') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp * num);\n                }\n                if(sign == '/') {\n                    int tmp = st.top();\n                    st.pop();\n                    st.push(tmp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 35,
            "GT": 97,
            "Query": "4 + 5 * 4 + 4 * 9 + 8 * 3 + 1 + 8 + 4 =   ",
            "Injected CoT": "5 * 4 = 20\n4 + 20 = 24\n9 * 4 = 36\n24 + 36 = 60\n8 * 3 = 24\n1 + 24 = 25\n25 + 8 = 33\n33 + 4 =",
            "Response": " 37\n\n37\n\n*/",
            "Extract-Response": "\n\n37"
        },
        {
            "Index": 37,
            "GT": -45,
            "Query": "3 - 2 * 4 * 6 - 3 - 4 + 1 * 5 - 2 + 4 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 6 = 48\n3 - 48 = -45\n-45 - 3 = -48\n-48 - 4 = -52\n1 * 5 = 5\n-52 + 5 = -47\n-47 - 2 = -49\n-49 + 4 =",
            "Response": " -45",
            "Extract-Response": " -45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 38,
            "GT": 107,
            "Query": "4 - 1 * 6 + 1 * 2 + 3 * 2 * 9 * 2 - 1 =   ",
            "Injected CoT": "1 * 6 = 6\n3 * 2 = 6\n6 * 9 = 54\n54 * 2 = 108\n4 - 6 = -2\n-2 + 1 = -1\n-1 + 2 = 1\n1 + 108 = 109\n109 - 1 =",
            "Response": " 108\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int size, sum;\n    int num[MAX_SIZE];\n    int num_2[MAX_SIZE];\n    int num_3[MAX_SIZE];\n    int num_4[MAX_SIZE];\n    int num_5[MAX_SIZE];\n    int num_6[MAX_SIZE];\n    int num_7[MAX_SIZE];\n    int num_8[MAX_SIZE];\n    int num_9[MAX_SIZE];\n    int num_10[MAX_SIZE];\n    int num_11[MAX_SIZE];\n    int num_12[MAX_SIZE];\n    int num_13[MAX_SIZE];\n    int num_14[MAX_SIZE];\n    int num_15[MAX_SIZE];\n    int num_16[MAX_SIZE];\n    int num_17[MAX_SIZE];\n    int num_18[MAX_SIZE];\n    int num_19[MAX_SIZE];\n    int num_20[MAX_SIZE];\n    int num_21[MAX_SIZE];\n    int num_22[MAX_SIZE];\n    int num_23[MAX_SIZE];\n    int num_24[MAX_SIZE];\n    int num_25[MAX_SIZE];\n    int num_26[MAX_SIZE];\n    int num_27[MAX_SIZE];\n    int num_28[MAX_SIZE];\n    int num_29[MAX_SIZE];\n    int num_30[MAX_SIZE];\n    int num_31[MAX_SIZE];\n    int num_32[MAX_SIZE];\n    int num_33[MAX_SIZE];\n    int num_34[MAX_SIZE];\n    int num_35[MAX_SIZE];\n    int num_36[MAX_SIZE];\n    int num_37[MAX_SIZE];\n    int num_38[MAX_SIZE];\n    int num_39[MAX_SIZE];\n    int num_40[MAX_SIZE];\n    int num_41[MAX_SIZE];\n    int num_42[MAX_SIZE];\n    int num_43[MAX_SIZE];\n    int num_44[MAX_SIZE];\n    int num_45[MAX_SIZE];\n    int num_46[MAX_SIZE];\n    int num_47[MAX_SIZE];\n    int num_48[MAX_SIZE];\n    int num_49[MAX_SIZE];\n    int num_50[MAX_SIZE];\n    int num_51[MAX_SIZE];\n    int num_52[MAX_SIZE];\n    int num_53[MAX_SIZE];\n    int num_54[MAX_SIZE];\n    int num_55[MAX_SIZE];\n    int num_56[MAX_SIZE];\n    int num_57[MAX_SIZE];\n    int num_58[MAX_SIZE];\n    int num_59[MAX_SIZE];\n    int num_60[MAX_SIZE];\n    int num_61[MAX_SIZE];\n    int num_62[MAX_SIZE];\n    int num_63[MAX_SIZE];\n    int num_64[MAX_SIZE];\n    int num_65[MAX_SIZE];\n    int num_66[MAX_SIZE];\n    int num_67[MAX_SIZE];\n    int num_68[MAX_SIZE];\n    int num_69[MAX_SIZE];\n    int num_70[MAX_SIZE];\n    int num_71[MAX_SIZE];\n    int num_72[MAX_SIZE];\n    int num_73[MAX_SIZE];\n    int num_74[MAX_SIZE];\n    int num_75[MAX_SIZE];\n    int num_76[MAX_SIZE];\n    int num_77[MAX_SIZE];\n    int num_78[MAX_SIZE];\n    int num_79[MAX_SIZE];\n    int num_80[MAX_SIZE];\n    int num_81[MAX_SIZE];\n    int num_82[MAX_SIZE];\n    int num_83[MAX_SIZE];\n    int num_84[MAX_SIZE];\n    int num_85[MAX_SIZE];\n    int num_86[MAX_SIZE];\n    int num_87[MAX_SIZE];\n    int num_88[MAX_SIZE];\n    int num_89[MAX_SIZE];\n    int num_90[MAX_SIZE];\n    int num_91[MAX_SIZE];\n    int num_92[MAX_SIZE];\n    int num_93[MAX_SIZE];\n    int num_94[MAX_SIZE];\n    int num_95[MAX_SIZE];\n    int num_96[MAX_SIZE];\n    int num_97[MAX_SIZE];\n    int num_98[MAX_SIZE];\n    int num_99[MAX_SIZE];\n    int num_100[MAX_SIZE];\n    int num_101[MAX_SIZE];\n    int num_102[MAX_SIZE];\n    int num_103[MAX_SIZE];\n    int num_104[MAX_SIZE];\n    int num_105[MAX_SIZE];\n    int num_106[MAX_SIZE];\n    int num_107[MAX_SIZE];\n    int num_108[MAX_SIZE];\n    int num_109[MAX_SIZE];\n    int num_110[MAX_SIZE];\n    int num_111[MAX_SIZE];\n    int num_112[MAX_SIZE];\n    int num_113[MAX_SIZE];\n    int num_114[MAX_SIZE];\n    int num_115[MAX_SIZE];\n    int num_116[MAX_SIZE];\n    int num_117[MAX_SIZE];\n    int num_118[MAX_SIZE];\n    int num_119[MAX_SIZE];\n    int num_120[MAX_SIZE];\n    int num_121[MAX_SIZE];\n    int num_122[MAX_SIZE];\n    int num_123[MAX_SIZE];\n    int num_124[MAX_SIZE];\n    int num_125[MAX_SIZE];\n    int num_126[MAX_SIZE];\n    int num_127[MAX_SIZE];\n    int num_128[MAX_SIZE];\n    int num_129[MAX_SIZE];\n    int num_130[MAX_SIZE];\n    int num_131[MAX_SIZE];\n    int num_132[MAX_SIZE];\n    int num_133[MAX_SIZE];\n    int num_134[MAX_SIZE];\n    int num_135[MAX_SIZE];\n    int num_136[MAX_SIZE];\n    int num_137[MAX_SIZE];\n    int num_138[MAX_SIZE];\n    int num_139[MAX_SIZE];\n    int num_140[MAX_SIZE];\n    int num_141[MAX_SIZE];\n    int num_142[MAX_SIZE];\n    int num_143[MAX_SIZE];\n    int num_144[MAX_SIZE];\n    int num_145[MAX_SIZE];\n    int num_146[MAX_SIZE];\n    int num_147[MAX_SIZE];\n    int num_148[MAX_SIZE];\n    int num_149[MAX_SIZE];\n    int num_150[MAX_SIZE];\n    int num_151[MAX_SIZE];\n    int num_152[MAX_SIZE];\n    int num_153[MAX_SIZE];\n    int num_154[MAX_SIZE];\n    int num_155[MAX_SIZE];\n    int num_156[MAX_SIZE];\n    int num_157[MAX_SIZE];\n    int num_158[MAX_SIZE];\n    int num_159[MAX_SIZE];\n    int num_160[MAX_SIZE];\n    int num_161[MAX_SIZE];\n    int num_162[MAX_SIZE];\n    int num_163[MAX_SIZE];\n    int num_164[MAX_SIZE];\n    int num_165[MAX_SIZE];\n    int num_166[MAX_SIZE];\n    int num_167[MAX_SIZE];\n    int num_168[MAX_SIZE];\n    int num_169[MAX_SIZE];\n    int num_170[MAX_SIZE];\n    int num_171[MAX_SIZE];\n    int num_172[MAX_SIZE];\n",
            "Extract-Response": "\n\n
        },
        {
            "Index": 40,
            "GT": -4,
            "Query": "1 * 8 * 5 - 9 - 5 * 7 - 8 + 3 - 1 + 6 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 5 = 40\n40 - 9 = 31\n5 * 7 = 35\n31 - 35 = -4\n-4 - 8 = -12\n-12 + 3 = -9\n-9 - 1 = -10\n-10 + 6 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 43,
            "GT": 36,
            "Query": "2 - 5 * 4 + 5 * 6 - 4 + 5 * 6 + 7 - 9 =   ",
            "Injected CoT": "5 * 4 = 20\n5 * 6 = 30\n5 * 6 = 30\n2 - 20 = -18\n-18 + 30 = 12\n12 - 4 = 8\n8 + 30 = 38\n38 + 7 = 45\n45 - 9 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 44,
            "GT": 74,
            "Query": "4 * 4 + 4 * 9 + 3 * 3 - 5 + 7 + 7 + 4 =   ",
            "Injected CoT": "4 * 4 = 16\n4 * 9 = 36\n3 * 3 = 9\n16 + 36 = 52\n52 + 9 = 61\n61 - 5 = 56\n56 + 7 = 63\n63 + 7 = 70\n70 + 4 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) == 1)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 45,
            "GT": 281,
            "Query": "8 * 4 * 9 - 1 - 2 * 9 + 8 + 6 + 4 - 6 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 9 = 288\n2 * 9 = 18\n1 - 18 = -17\n-17 + 8 = -9\n-9 + 6 = -3\n-3 + 4 = 1\n288 - 1 = 287\n287 + 1 =",
            "Response": " 288",
            "Extract-Response": "\n<blockquote class=\"spoiler\">\n<p> <span class=\"math-container\">$288$</span></p>\n</blockquote>\n"
        },
        {
            "Index": 47,
            "GT": -11,
            "Query": "1 - 6 + 1 - 3 * 4 + 6 + 4 - 1 * 4 - 1 =   ",
            "Injected CoT": "-3 * 4 = -12\n1 - 6 + 1 - 12 + 6 + 4 - 1 * 4 - 1 = \n-1 * 4 = -4\n1 - 6 + 1 - 12 + 6 + 4 - 4 - 1 = \n-6 + 1 = -5\n-5 - 12 = -17\n-17 + 6 = -11\n-11 + 4 = -7\n-7 - 1 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 49,
            "GT": 32,
            "Query": "7 + 4 - 7 + 9 + 2 * 9 - 6 + 8 - 4 + 3 =   ",
            "Injected CoT": "2 * 9 = 18\n7 + 4 = 11\n11 - 7 = 4\n4 + 9 = 13\n13 + 18 = 31\n31 - 6 = 25\n25 + 8 = 33\n33 - 4 = 29\n29 + 3 =",
            "Response": " 32",
            "Extract-Response": " 32.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 50,
            "GT": 17,
            "Query": "9 - 2 * 6 + 3 - 9 + 1 + 3 * 9 * 1 - 2 =   ",
            "Injected CoT": "2 * 6 = 12\n9 - 12 = -3\n-3 + 3 = 0\n0 - 9 = -9\n-9 + 1 = -8\n3 * 9 = 27\n27 * 1 = 27\n-8 + 27 = 19\n19 - 2 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '*') {\n                int num = nums.top();\n                nums.pop();\n                while (s[i + 1] == ' ') i++;\n                int cur = s[++i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[++i] - '0';\n                }\n                nums.push(num * cur);\n            } else if (s[i] == '/') {\n                int num = nums.top();\n                nums.pop();\n                while (s[i + 1] == ' ') i++;\n                int cur = s[++i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[++i] - '0';\n                }\n                nums.push(num / cur);\n            } else {\n                int cur = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[++i] - '0';\n                }\n                nums.push(cur);\n            }\n        }\n        while (!nums.empty()) {\n            result += nums.top() * sign;\n            nums.pop();\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 51,
            "GT": 471,
            "Query": "9 * 3 * 5 * 1 + 1 * 7 * 8 * 6 - 7 + 7 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 5 = 135\n135 * 1 = 135\n1 * 7 = 7\n7 * 8 = 56\n56 * 6 = 336\n135 + 336 = 471\n471 - 7 = 464\n464 + 7 =",
            "Response": " 471",
            "Extract-Response": " 471\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <bitset>\n#include <map>\n#include <set>\nusing namespace std;\n#define SIZE 10000002\n\nint main()\n{\n    //freopen(\"/Users/mahbubrana/Desktop/input.txt\", \"r\", stdin);\n    int n, i, j, caseNo = 0, len, ans;\n    string str;\n    char ch;\n    while(cin >> n)\n    {\n        if(n == 0)\n            break;\n        cin >> str;\n        len = str.size();\n        ans = 0;\n        for(i = 0; i < len; i++)\n        {\n            if(str[i] == '+' || str[i] == '-')\n                continue;\n            ch = str[i];\n            for(j = i + 1; j < len; j++)\n            {\n                if(str[j] == '+' || str[j] == '-')\n                    break;\n                if(str[j] == ch)\n                    break;\n                ch = str[j];\n            }\n            if(j == len)\n                ans++;\n            i = j - 1;\n        }\n        printf(\"Case %d: %d\\n\", ++caseNo, ans);\n    }\n    return 0;\n}"
        },
        {
            "Index": 52,
            "GT": 93,
            "Query": "8 * 5 - 3 + 5 * 5 - 9 - 5 - 4 + 7 * 7 =   ",
            "Injected CoT": "8 * 5 = 40\n40 - 3 = 37\n5 * 5 = 25\n37 + 25 = 62\n62 - 9 = 53\n53 - 5 = 48\n48 - 4 = 44\n7 * 7 = 49\n44 + 49 =",
            "Response": " 93",
            "Extract-Response": " 93.\n\nNote:\nThe length of given array won't exceed 100.\nElements in given array will be in range [-100, 100].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 53,
            "GT": 57,
            "Query": "3 * 3 * 6 - 4 - 2 * 5 + 7 - 1 + 9 + 2 =   ",
            "Injected CoT": "3 * 3 = 9\n9 * 6 = 54\n2 * 5 = 10\n54 - 4 = 50\n50 - 10 = 40\n40 + 7 = 47\n47 - 1 = 46\n46 + 9 = 55\n55 + 2 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 55,
            "GT": -9,
            "Query": "6 - 3 * 4 - 2 + 2 * 1 - 5 + 6 - 3 - 1 =   ",
            "Injected CoT": "3 * 4 = 12\n6 - 12 = -6\n-6 - 2 = -8\n2 * 1 = 2\n-8 + 2 = -6\n-6 - 5 = -11\n-11 + 6 = -5\n-5 - 3 = -8\n-8 - 1 =",
            "Response": " -9\n-9 = -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
        },
        {
            "Index": 58,
            "GT": 157,
            "Query": "5 * 3 * 8 + 4 + 4 * 8 + 3 - 6 + 1 + 3 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 8 = 120\n4 * 8 = 32\n120 + 32 = 152\n3 - 6 = -3\n-3 + 1 = -2\n-2 + 3 = 1\n152 + 1 =",
            "Response": " 153\n\n153\n\n*/",
            "Extract-Response": " 153."
        },
        {
            "Index": 65,
            "GT": 32,
            "Query": "6 * 5 * 1 + 1 + 5 - 2 * 3 + 2 * 5 - 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 1 = 30\n2 * 3 = 6\n2 * 5 = 10\n30 + 1 = 31\n31 + 5 = 36\n36 - 6 = 30\n30 + 10 = 40\n40 - 8 =",
            "Response": " 32",
            "Extract-Response": " 32\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 66,
            "GT": -89,
            "Query": "4 - 5 - 4 * 5 - 8 * 3 - 9 + 5 - 5 * 8 =   ",
            "Injected CoT": "4 - 5 = -1\n-1 - 4 * 5 = -21\n-21 - 8 * 3 = -45\n-45 - 9 = -54\n-54 + 5 = -49\n-49 - 5 * 8 =",
            "Response": " -169",
            "Extract-Response": " -169.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 100,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\"\"\"\n\ndef calculate(a):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(calculate([5, 3, 2, 1, 1]))\n\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert calculate([5, 3, 2, 1, 1]) == 14\n\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
        },
        {
            "Index": 73,
            "GT": 68,
            "Query": "7 * 4 - 7 + 9 + 7 + 1 * 2 * 2 + 9 * 3 =   ",
            "Injected CoT": "7 * 4 = 28\n28 - 7 = 21\n1 * 2 = 2\n2 * 2 = 4\n9 * 3 = 27\n21 + 9 = 30\n30 + 7 = 37\n37 + 4 =",
            "Response": " 41\n41 + 2 = 43",
            "Extract-Response": " 43\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    printf(\"Enter a number: \");\n    scanf(\"%s\", num);\n    for(i = 0; i < strlen(num); i++)\n    {\n        sum += num[i] - '0';\n    }\n    printf(\"The sum of digits is %d\\n\", sum);\n    while(sum > 9)\n    {\n        int temp = 0;\n        while(sum > 0)\n        {\n            temp += sum % 10;\n            sum /= 10;\n        }\n        sum = temp;\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 74,
            "GT": 33,
            "Query": "4 * 9 - 5 + 7 + 4 + 2 - 5 - 1 - 7 + 2 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 5 = 31\n31 + 7 = 38\n38 + 4 = 42\n42 + 2 = 44\n44 - 5 = 39\n39 - 1 = 38\n38 - 7 = 31\n31 + 2 =",
            "Response": " 33",
            "Extract-Response": " 33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the string from user.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterates through the string and\n     * finds the sum of all numeric digits.\n     */\n    for(i=0; i<len; i++)\n    {\n        if(isdigit(str[i]))\n        {\n            sum += (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all numeric digits: %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 78,
            "GT": -10,
            "Query": "7 - 1 + 6 - 2 - 2 * 7 * 1 - 2 - 7 + 3 =   ",
            "Injected CoT": "7 - 1 = 6\n6 + 6 = 12\n2 * 7 = 14\n14 * 1 = 14\n12 - 14 = -2\n-2 - 2 = -4\n-4 - 7 = -11\n-11 + 3 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 84,
            "GT": 15,
            "Query": "7 + 2 - 5 - 8 + 3 + 5 * 5 - 9 - 8 + 8 =   ",
            "Injected CoT": "5 * 5 = 25\n7 + 2 = 9\n9 - 5 = 4\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 25 = 24\n24 - 9 = 15\n15 - 8 = 7\n7 + 8 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 85,
            "GT": 23,
            "Query": "9 * 8 - 4 * 6 - 7 + 3 * 7 * 3 - 9 * 9 =   ",
            "Injected CoT": "9 * 8 = 72\n4 * 6 = 24\n3 * 7 = 21\n21 * 3 = 63\n9 * 9 = 81\n72 - 24 = 48\n48 - 7 = 41\n41 + 63 = 104\n104 - 81 =",
            "Response": " 23",
            "Extract-Response": "\n\n23."
        },
        {
            "Index": 86,
            "GT": 54,
            "Query": "5 * 8 + 2 * 2 * 4 - 8 - 5 + 2 + 2 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n2 * 2 = 4\n4 * 4 = 16\n40 + 16 = 56\n56 - 8 = 48\n48 - 5 = 43\n43 + 2 = 45\n45 + 2 = 47\n47 + 7 =",
            "Response": " 54",
            "Extract-Response": " 54.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expression always results in an integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    nums.push(applyOp(op1, op2, ops.top()));\n                    ops.pop();\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            nums.push(applyOp(op1, op2, ops.top()));\n            ops.pop();\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 88,
            "GT": -32,
            "Query": "3 - 6 - 1 * 5 * 5 + 9 - 8 * 1 + 4 - 9 =   ",
            "Injected CoT": "1 * 5 = 5\n6 - 5 = 1\n8 * 1 = 8\n9 - 8 = 1\n1 + 1 = 2\n2 - 5 = -3\n-3 - 4 = -7\n-7 - 9 =",
            "Response": " -16\n-16 + 1 = -15",
            "Extract-Response": " -15.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < nums.size(); i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 89,
            "GT": 40,
            "Query": "8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =   ",
            "Injected CoT": "1 * 5 = 5\n1 * 3 = 3\n3 * 2 = 6\n8 + 5 = 13\n13 + 3 = 16\n16 + 1 = 17\n17 + 9 = 26\n26 + 8 = 34\n34 + 6 =",
            "Response": " 40\n\n40\n\n*/",
            "Extract-Response": "\n\n40"
        },
        {
            "Index": 90,
            "GT": 39,
            "Query": "9 - 2 + 6 + 2 * 6 * 2 + 7 + 5 - 9 - 1 =   ",
            "Injected CoT": "2 * 6 = 12\n12 * 2 = 24\n9 - 2 = 7\n7 + 6 = 13\n13 + 24 = 37\n37 + 7 = 44\n44 + 5 = 49\n49 - 9 = 40\n40 - 1 =",
            "Response": " 39",
            "Extract-Response": "\n\n39."
        },
        {
            "Index": 91,
            "GT": -40,
            "Query": "1 - 6 * 7 - 1 + 1 - 2 + 3 + 4 - 2 - 2 =   ",
            "Injected CoT": "-6 * 7 = -42\n1 - (-42) = 43\n43 + 1 = 44\n44 - 2 = 42\n42 + 3 = 45\n45 + 4 = 49\n49 - 2 = 47\n47 - 2 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            result -= i;\n        } else {\n            result += i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 92,
            "GT": -365,
            "Query": "6 - 6 * 9 * 6 - 8 * 7 + 6 - 7 + 3 + 7 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 6 = 324\n8 * 7 = 56\n324 - 56 = 268\n6 - 7 = -1\n-1 + 3 = 2\n2 + 7 = 9\n268 - 9 =",
            "Response": " 259",
            "Extract-Response": " 259.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {\n        int sum = 0;\n        for(int i = 0; i < A.size(); i++) {\n            if(A[i] % 2 == 0) {\n                sum += A[i];\n            }\n        }\n        int result = 0;\n        for(int i = 0; i < queries.size(); i++) {\n            int val = queries[i][0];\n            int index = queries[i][1];\n            if(A[index] % 2 == 0) {\n                sum -= A[index];\n            }\n            A[index] += val;\n            if(A[index] % 2 == 0) {\n                sum += A[index];\n            }\n            result += sum;\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 93,
            "GT": 22,
            "Query": "9 + 8 + 6 * 9 + 3 - 9 - 9 * 4 - 6 - 1 =   ",
            "Injected CoT": "6 * 9 = 54\n9 + 8 = 17\n17 + 54 = 71\n71 + 3 = 74\n9 - 9 = 0\n4 * 9 = 36\n0 - 36 = -36\n-36 - 6 = -42\n-42 - 1 = -43\n74 + (-43) =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\n\nThe length of the input array is [1, 10].\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
        },
        {
            "Index": 94,
            "GT": 539,
            "Query": "6 * 7 * 4 + 2 + 4 + 5 * 1 + 8 * 9 * 5 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 4 = 168\n5 * 1 = 5\n8 * 9 = 72\n72 * 5 = 360\n168 + 2 = 170\n170 + 4 = 174\n174 + 5 = 179\n179 + 360 =",
            "Response": " 539\n539 + 42 = 581\n\n5 * 8 * 9 + 7 * 6 * 4 + 1 + 2 + 5 * 4 =    \n5 * 8 = 40\n40 * 9 = 360\n7 * 6 = 42\n42 * 4 = 168\n5 * 4 = 20\n360 + 40 = 400\n400 + 168 = 568\n568 + 20 = 588\n588 + 42 = 630\n630 + 1 = 631\n631 + 2 = 633",
            "Extract-Response": " 633\n\n*/"
        },
        {
            "Index": 97,
            "GT": -7,
            "Query": "8 - 9 * 6 - 9 + 6 + 8 * 5 - 1 + 3 * 1 =   ",
            "Injected CoT": "9 * 6 = 54\n8 - 54 = -46\n-46 - 9 = -55\n-55 + 6 = -49\n8 * 5 = 40\n-49 + 40 = -9\n-1 + 3 = 2\n-9 + 2 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 99,
            "GT": 52,
            "Query": "1 + 1 + 5 - 4 - 3 - 7 + 8 + 3 + 6 * 8 =   ",
            "Injected CoT": "6 * 8 = 48\n1 + 1 = 2\n2 + 5 = 7\n7 - 4 = 3\n3 - 3 = 0\n0 - 7 = -7\n-7 + 8 = 1\n1 + 3 = 4\n4 + 48 =",
            "Response": " 52",
            "Extract-Response": "\n\n52"
        },
        {
            "Index": 101,
            "GT": -961,
            "Query": "8 + 7 * 7 - 1 - 3 * 7 * 6 * 8 - 1 * 9 =   ",
            "Injected CoT": "7 * 7 = 49\n8 + 49 = 57\n7 * 6 = 42\n42 * 8 = 336\n336 * 3 = 1008\n1 * 9 = 9\n1008 - 9 = 999\n57 - 1 = 56\n56 - 999 =",
            "Response": " -943\n\n-943",
            "Extract-Response": " -943\n\n*/"
        },
        {
            "Index": 102,
            "GT": -27,
            "Query": "3 - 6 - 6 + 7 - 6 * 5 + 2 + 5 + 3 - 5 =   ",
            "Injected CoT": "3 - 6 = -3\n-3 - 6 = -9\n-9 + 7 = -2\n-6 * 5 = -30\n-2 - 30 = -32\n-32 + 2 = -30\n-30 + 5 = -25\n-25 + 3 = -22\n-22 - 5 =",
            "Response": " -27",
            "Extract-Response": " -27.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int current = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 103,
            "GT": 13,
            "Query": "8 + 4 * 6 - 9 + 4 - 4 - 2 - 1 * 2 * 4 =   ",
            "Injected CoT": "4 * 6 = 24\n8 + 24 = 32\n32 - 9 = 23\n23 + 4 = 27\n27 - 4 = 23\n23 - 2 = 21\n1 * 2 = 2\n2 * 4 = 8\n21 - 8 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 107,
            "GT": 1710,
            "Query": "7 - 9 * 1 * 1 - 8 - 8 + 6 * 9 * 4 * 8 =   ",
            "Injected CoT": "9 * 1 = 9\n1 * 9 = 9\n6 * 9 = 54\n4 * 54 = 216\n216 * 8 = 1728\n7 - 9 = -2\n-2 * 1 = -2\n-2 * 1 = -2\n-2 - 8 = -10\n-10 - 8 = -18\n54 * 216 = 11664\n11664 + 6 = 11670\n11670 * 8 = 93360\n-18 + 93360 =",
            "Response": " 93342\n93342 + 1728 = 95070\n95070 + 9 = 95079\n95079 + 9 = 95088\n95088 + 9 = 95097\n95097 + 9 = 95106\n95106 + 9 = 95115\n95115 + 9 = 95124\n95124 + 9 = 95133\n95133 + 9 = 95142\n95142 + 9 = 95150\n95150 + 9 = 95159\n95159 + 9 = 95168\n95168 + 9 = 95177\n95177 + 9 = 95186\n95186 + 9 = 95195\n95195 + 9 = 95204\n95204 + 9 = 95213\n95213 + 9 = 95222\n95222 + 9 = 95231\n95231 + 9 = 95240\n95240 + 9 = 95249\n95249 + 9 = 95258\n95258 + 9 = 95267\n95267 + 9 = 95276\n95276 + 9 = 95285\n95285 + 9 = 95294\n95294 + 9 = 95303\n95303 + 9 = 95312\n95312 + 9 = 95321\n95321 + 9 = 95330\n95330 + 9 = 95339\n95339 + 9 = 95348\n95348 + 9 = 95357\n95357 + 9 = 95366\n95366 + 9 = 95375\n95375 + 9 = 95384\n95384 + 9 = 95393\n95393 + 9 = 95402\n95402 + 9 = 95411\n95411 + 9 = 95420\n95420 + 9 = 95429\n95429 + 9 = 95438\n95438 + 9 = 95447\n95447 + 9 = 95456\n95456 + 9 = 95465\n95465 + 9 = 95474\n95474 + 9 = 95483\n95483 + 9 = 95492\n95492 + 9 = 95501\n95501 + 9 = 95510\n95510 + 9 = 95519\n95519 + 9 = 95528\n95528 + 9 = 95537\n95537 + 9 = 95546\n95546 + 9 = 95555\n95555 + 9 = 95564\n95564 + 9 = 95573\n95573 + 9 = 95582\n95582 + 9 = 95591\n95591 + 9 = 95600\n95600 + 9 = 95609\n95609 + 9 = 95618\n95618 + 9 = 95627\n95627 + 9 = 95636\n95636 + 9 = 95645\n95645 + 9 = 95654\n95654 + 9 = 95663\n95663 + 9 = 95672\n95672 + 9 = 95681\n95681 + 9 = 95690\n95690 + 9 = 95699\n95699 + 9 = 95708\n95708 + 9 = 95717\n95717 + 9 = 95726\n95726 + 9 = 95735\n95735 + 9 = 95744\n95744 + 9 = 95753\n95753 + 9 = 95762\n95762 + 9 = 95771\n95771 + 9 = 95780\n95780 + 9 = 95789\n95789 + 9 = 95798\n95798 + 9 = 95807\n95807 + 9 = 95816\n95816 + 9 = 95825\n95825 + 9 = 95834\n95834 + 9 = 95843\n95843 + 9 = 95852\n95852 + 9 = 95861\n95861 + 9 = 95870\n95870 + 9 = 95879\n95879 + 9 = 95888\n95888 + 9 = 95897\n95897 + 9 = 95906\n95906 + 9 = 95915\n95915 + 9 = 95924\n95924 + 9 = 95933\n95933 + 9 = 95942\n95942 + 9 = 95951\n95951 + 9 = 95960\n95960 + 9 = 95969\n95969 + 9 = 95978\n95978 + 9 = 95987\n95987 + 9 = 95996\n95996 + 9 = 96005\n96005 + 9 = 96014\n96014 + 9 = 96023\n96023 + 9 = 96032\n96032 + 9 = 96041\n96041 + 9 = 96050\n96050 + 9 = 96059\n96059 + 9 = 96068\n96068 + 9 = 96077\n96077 + 9 = 96086\n96086 + 9 = 96095\n96095 + 9 = 96104\n96104 + 9 = 96113\n96113 + 9 = 96122\n96122 + 9 = 96131\n96131 + 9 = 96140\n96140 + 9 = 96149\n96149 + 9 = 96158\n96158 + 9 = 96167\n96167 + 9 = 96176\n96176 + 9 = 96185\n96185 + 9 = 96194\n96194 + 9 = 96203\n96203 + 9 = 96212\n96212 + 9 = 96221\n96221 + 9 = 96230\n96230 + 9 = 96239\n96239 + 9 = 96248\n96248 + 9 = 96257\n96257 + 9 = 96266\n96266 + 9 = 96275\n96275 + 9 = 96284\n96284 + 9 = 96293\n96293 + 9 = 96302\n96302 + 9 = 96311\n96311 + 9 = 96320\n96320 + 9 = 96329\n96329 + 9 = 96338\n96338 + 9 = 96347\n96347 + 9 = 96356\n96356 + 9 = 96365\n96365 + 9 = 96374\n96374 + 9 = 96383\n96383 + 9 = 96392\n96392 + 9 = 96401\n96401 + 9 = 96410\n96410 + 9 = 96419\n96419 + 9 = 96428\n96428 + 9 = 96437\n96437 + 9 = 96446\n96446 + 9 = 96455\n96455 + 9 = 96464\n96464 + 9 = 96473\n96473 + 9 = 96482\n96482 + 9 = 96491\n96491 + 9 = 96500\n96500 + 9 = 96509\n96509 + 9 = 96518\n96518 + 9 = 96527\n96527 + 9 = 96536\n96536 + 9 = 96545\n96545 + 9 = 96554\n96554 + 9 = 96563\n96563 + 9 = 96572\n96572 + 9 = 96581\n96581 + 9 = 96590\n96590 + 9 = 96599\n96599 + 9 = 96608\n96608 + 9 = 96617\n96617 + 9 = 96626\n96626 + 9 = 96635\n96635 + 9 = 96644\n96644 + 9 = 96653\n96653 + 9 = 96662\n96662 + 9 = 96671\n96671 + 9 = 96680\n96680 + 9 = 96689\n96689 + 9 = 96698\n96698 + 9 = 96707\n96707 + 9 = 96716\n96716 + 9 = 96725\n96725 + 9 = 96734\n96734 + 9 = 96743\n96743 + 9 = 96752\n96752 + 9 = 96761\n96761 + 9 = 96770\n96770 + 9 = 96779\n96779 + 9 = 96788\n96788 + 9 = 96797\n96797 + 9 = 96806\n96806 + 9 = 96815\n96815 + 9 = 96824\n96824 + 9 = 96833\n96833 + 9 = 96842\n96842 + 9 = 96851\n96851 + 9 = 96860\n96860 + 9 = 96869\n96869 + 9 = 96878\n96878 + 9 = 96887\n96887 + 9 = 96896\n96896 + 9 = 96905\n96905 + 9 = 96914\n96914 + 9 = 96923\n96923 + 9 = 96932\n96932 + 9 = 96941\n96941 + 9 = 96950\n96950 + 9 = 96959\n96959 + 9 = 96968\n96968 + 9 = 96977\n96977 + 9 = 96986\n96986 + 9 = 96995\n96995 + 9 = 97004\n97004 + 9 = 97013\n97013 + 9 = 97022\n97022 + 9 = 97031\n97031 + 9 = 97040\n97040 + 9 = 97049\n97049 + 9 = 97058\n97058 + 9 = 97067\n97067 + 9 = 97076\n97076 + 9",
            "Extract-Response": "\n\nThe answer is 97076 + 9 = 97085"
        },
        {
            "Index": 108,
            "GT": -22,
            "Query": "9 - 8 - 4 * 7 + 4 + 3 + 9 + 1 - 5 - 7 =   ",
            "Injected CoT": "4 * 7 = 28\n-8 + 9 = 1\n1 - 28 = -27\n-27 + 4 = -23\n-23 + 3 = -20\n-20 + 9 = -11\n-11 + 1 = -10\n-10 - 5 = -15\n-15 - 7 =",
            "Response": " -22",
            "Extract-Response": " -22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    for (char c: s) {\n        if (c == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (c == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + (c - '0');\n        }\n    }\n    result += sign * currentNumber;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 110,
            "GT": -2,
            "Query": "4 - 3 * 5 + 1 - 3 + 1 * 6 + 7 + 7 - 9 =   ",
            "Injected CoT": "3 * 5 = 15\n4 - 15 = -11\n1 * 6 = 6\n-11 + 1 = -10\n-10 - 3 = -13\n-13 + 6 = -7\n-7 + 7 = 0\n0 - 9 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 111,
            "GT": 1,
            "Query": "4 * 9 - 5 - 8 + 4 - 9 * 2 - 2 - 6 * 1 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 5 = 31\n31 - 8 = 23\n23 + 4 = 27\n9 * 2 = 18\n27 - 18 = 9\n2 - 6 = -4\n9 * -4 =",
            "Response": " -36",
            "Extract-Response": " -36.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef exp(a):\n    # your code here\n    return"
        },
        {
            "Index": 115,
            "GT": 24,
            "Query": "5 - 1 * 7 - 1 * 3 * 1 + 6 + 7 * 3 + 2 =   ",
            "Injected CoT": "1 * 7 = 7\n3 * 1 = 3\n7 * 3 = 21\n5 - 7 = -2\n-2 - 3 = -5\n-5 + 6 = 1\n1 + 7 = 8\n8 * 3 = 24\n24 + 2 =",
            "Response": " 26\n\n26",
            "Extract-Response": " 26\n\n*/"
        },
        {
            "Index": 116,
            "GT": -14,
            "Query": "8 - 1 - 3 - 3 * 8 + 5 + 3 - 3 * 1 + 1 =   ",
            "Injected CoT": "3 * 8 = 24\n8 - 1 = 7\n7 - 3 = 4\n4 - 24 = -20\n-20 + 5 = -15\n-15 + 3 = -12\n-12 - 3 = -15\n-15 * 1 = -15\n-15 + 1 =",
            "Response": " -14\n\n-14",
            "Extract-Response": " -14"
        },
        {
            "Index": 117,
            "GT": -36,
            "Query": "6 - 9 * 7 + 8 - 6 - 2 + 4 + 1 + 8 * 2 =   ",
            "Injected CoT": "9 * 7 = 63\n6 - 63 = -57\n-57 + 8 = -49\n-49 - 6 = -55\n-55 - 2 = -57\n-57 + 4 = -53\n-53 + 1 = -52\n8 * 2 = 16\n-52 + 16 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 118,
            "GT": 185,
            "Query": "7 - 2 - 5 + 7 * 4 * 7 - 4 * 6 + 5 + 8 =   ",
            "Injected CoT": "7 - 2 = 5\n5 - 5 = 0\n7 * 4 = 28\n28 * 7 = 196\n4 * 6 = 24\n196 - 24 = 172\n0 + 5 = 5\n5 + 8 =",
            "Response": " 13\n172 + 13 = 185",
            "Extract-Response": " 185\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 119,
            "GT": 69,
            "Query": "6 - 8 * 3 + 1 - 7 - 5 + 7 * 8 + 6 * 7 =   ",
            "Injected CoT": "8 * 3 = 24\n6 - 24 = -18\n-18 + 1 = -17\n-17 - 7 = -24\n-24 - 5 = -29\n7 * 8 = 56\n6 * 7 = 42\n-29 + 56 = 27\n27 + 42 =",
            "Response": " 69",
            "Extract-Response": "\n69\n\n*/"
        },
        {
            "Index": 120,
            "GT": 53,
            "Query": "2 * 5 * 9 - 8 - 8 + 7 * 2 - 5 - 5 * 6 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 9 = 90\n90 - 8 = 82\n82 - 8 = 74\n7 * 2 = 14\n74 + 14 = 88\n88 - 5 = 83\n5 * 6 = 30\n83 - 30 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    nums.push(applyOp(op1, op2, ops.top()));\n                    ops.pop();\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            nums.push(applyOp(op1, op2, ops.top()));\n            ops.pop();\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 121,
            "GT": -121,
            "Query": "4 * 3 - 1 * 7 - 5 * 5 * 6 + 2 * 2 * 6 =   ",
            "Injected CoT": "4 * 3 = 12\n1 * 7 = 7\n5 * 5 = 25\n25 * 6 = 150\n2 * 2 = 4\n4 * 6 = 24\n12 - 7 = 5\n5 - 150 = -145\n-145 + 24 =",
            "Response": " -121",
            "Extract-Response": " -121.\n\nNote:\n\nThere will only be '+', '-', '*', '/' operators considered for this kata.\nThe input is always valid.\nDo not modify the order of operations.\n\n*/\n\nfunction calculate(s) {\n  let arr = s.split('');\n  let num = '';\n  let stack = [];\n  let ops = {\n    '+': (a, b) => a + b,\n    '-': (a, b) => a - b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n  };\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === ' ') continue;\n    if (arr[i] in ops) {\n      let b = stack.pop();\n      let a = stack.pop();\n      stack.push(ops[arr[i]](a, b));\n    } else {\n      num += arr[i];\n      if (i === arr.length - 1 || arr[i + 1] in ops) {\n        stack.push(parseInt(num));\n        num = '';\n      }\n    }\n  }\n  return stack[0];\n}"
        },
        {
            "Index": 122,
            "GT": 2,
            "Query": "4 - 1 - 5 - 2 * 4 + 1 - 7 * 3 + 8 * 4 =   ",
            "Injected CoT": "2 * 4 = 8\n-1 * 8 = -8\n-5 - 8 = -13\n-13 + 1 = -12\n-7 * 3 = -21\n8 * 4 = 32\n-12 - 21 = -33\n-33 + 32 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\nThe length of the given array is positive and will not exceed 10^4\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};"
        },
        {
            "Index": 123,
            "GT": 127,
            "Query": "6 + 4 * 1 * 4 * 5 - 3 + 3 * 8 * 2 - 4 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 4 = 16\n16 * 5 = 80\n6 + 80 = 86\n8 * 2 = 16\n3 * 16 = 48\n48 + 3 = 51\n86 - 51 = 35\n35 - 4 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\n\nYou may assume that the expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 124,
            "GT": -65,
            "Query": "4 - 7 + 2 * 3 + 7 - 5 - 9 * 7 - 2 - 5 =   ",
            "Injected CoT": "2 * 3 = 6\n-9 * 7 = -63\n4 - 7 = -3\n-3 + 6 = 3\n3 + 7 = 10\n10 - 5 = 5\n5 - 63 = -58\n-58 - 2 = -60\n-60 - 5 =",
            "Response": " -65",
            "Extract-Response": " -65.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    return sum(a)"
        },
        {
            "Index": 125,
            "GT": -71,
            "Query": "6 - 4 * 4 - 7 - 5 * 1 - 9 - 6 * 8 + 8 =   ",
            "Injected CoT": "4 * 4 = 16\n6 - 16 = -10\n-10 - 7 = -17\n5 * 1 = 5\n-17 - 5 = -22\n6 * 8 = 48\n-22 - 9 = -31\n-31 - 48 = -79\n-79 + 8 =",
            "Response": " -71",
            "Extract-Response": " -71.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 131,
            "GT": -544,
            "Query": "3 + 6 + 7 - 6 * 2 * 8 * 6 + 1 + 7 + 8 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 8 = 96\n96 * 6 = 576\n3 + 6 = 9\n9 + 7 = 16\n16 - 576 = -560\n-560 + 1 = -559\n-559 + 7 = -552\n-552 + 8 =",
            "Response": " -544",
            "Extract-Response": " -544\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 133,
            "GT": 89,
            "Query": "9 * 7 - 1 - 8 + 3 * 3 + 6 + 7 * 4 - 8 =   ",
            "Injected CoT": "9 * 7 = 63\n63 - 1 = 62\n62 - 8 = 54\n3 * 3 = 9\n54 + 9 = 63\n63 + 6 = 69\n7 * 4 = 28\n69 + 28 = 97\n97 - 8 =",
            "Response": " 89",
            "Extract-Response": "\n\n89"
        },
        {
            "Index": 134,
            "GT": 19,
            "Query": "2 + 7 + 2 - 7 + 1 - 7 + 7 - 4 + 2 * 9 =   ",
            "Injected CoT": "2 + 7 = 9\n9 + 2 = 11\n11 - 7 = 4\n4 + 1 = 5\n5 - 7 = -2\n-2 + 7 = 5\n5 - 4 = 1\n2 * 9 = 18\n1 + 18 =",
            "Response": " 19",
            "Extract-Response": "\n\n19"
        },
        {
            "Index": 136,
            "GT": 65,
            "Query": "7 * 6 + 5 + 3 + 2 * 6 - 9 + 8 + 9 - 5 =   ",
            "Injected CoT": "7 * 6 = 42\n2 * 6 = 12\n42 + 5 = 47\n47 + 3 = 50\n50 + 12 = 62\n62 - 9 = 53\n53 + 8 = 61\n61 + 9 = 70\n70 - 5 =",
            "Response": " 65",
            "Extract-Response": " 65\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 137,
            "GT": 25,
            "Query": "3 * 5 * 2 * 1 + 6 - 6 - 3 + 6 - 7 - 1 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 2 = 30\n30 * 1 = 30\n30 + 6 = 36\n36 - 6 = 30\n30 - 3 = 27\n27 + 6 = 33\n33 - 7 = 26\n26 - 1 =",
            "Response": " 25\n\n25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 139,
            "GT": -83,
            "Query": "5 - 6 * 3 - 4 - 9 * 9 + 6 + 8 - 3 + 4 =   ",
            "Injected CoT": "-6 * 3 = -18\n5 - (-18) - 4 - 9 * 9 + 6 + 8 - 3 + 4 = \n-9 * 9 = -81\n5 - (-18) - 4 - 81 + 6 + 8 - 3 + 4 = \n5 - (-18) = 23\n23 - 4 = 19\n19 + 6 = 25\n25 + 8 = 33\n33 - 3 = 30\n30 + 4 =",
            "Response": " 34",
            "Extract-Response": " 34.\n\nNote:\nThe number of operations is between 1 and 1000.\nThe answer is guaranteed to be fitted in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 140,
            "GT": -100,
            "Query": "2 + 2 - 4 - 1 - 2 * 7 * 8 + 5 + 2 + 6 =   ",
            "Injected CoT": "2 + 2 = 4\n4 - 4 = 0\n0 - 1 = -1\n2 * 7 = 14\n14 * 8 = 112\n-1 - 112 = -113\n-113 + 5 = -108\n-108 + 2 = -106\n-106 + 6 =",
            "Response": " -100",
            "Extract-Response": " -100.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 142,
            "GT": 59,
            "Query": "6 + 5 * 4 + 6 * 7 + 4 - 3 - 6 * 1 - 4 =   ",
            "Injected CoT": "5 * 4 = 20\n6 * 7 = 42\n6 * 1 = 6\n6 + 20 = 26\n26 + 42 = 68\n68 + 4 = 72\n72 - 3 = 69\n69 - 6 = 63\n63 - 4 =",
            "Response": " 59",
            "Extract-Response": "\n\n59"
        },
        {
            "Index": 143,
            "GT": 21,
            "Query": "7 * 6 + 4 - 9 + 7 - 3 * 7 + 4 - 5 - 1 =   ",
            "Injected CoT": "7 * 6 = 42\n42 + 4 = 46\n46 - 9 = 37\n37 + 7 = 44\n3 * 7 = 21\n44 - 21 = 23\n23 + 4 = 27\n27 - 5 = 22\n22 - 1 =",
            "Response": " 21",
            "Extract-Response": "\n\n21"
        },
        {
            "Index": 144,
            "GT": 270,
            "Query": "8 + 8 - 6 - 8 * 8 + 3 * 3 + 5 * 7 * 9 =   ",
            "Injected CoT": "8 + 8 = 16\n16 - 6 = 10\n8 * 8 = 64\n10 - 64 = -54\n3 * 3 = 9\n5 * 7 = 35\n35 * 9 = 315\n-54 + 9 = -45\n-45 + 315 =",
            "Response": " 270",
            "Extract-Response": "\n\n270."
        },
        {
            "Index": 145,
            "GT": 157,
            "Query": "1 + 1 + 6 + 5 * 7 * 2 + 6 + 1 + 9 * 8 =   ",
            "Injected CoT": "5 * 7 = 35\n9 * 8 = 72\n1 + 1 = 2\n6 + 1 = 7\n2 + 6 = 8\n35 * 2 = 70\n8 + 70 = 78\n78 + 7 = 85\n85 + 72 =",
            "Response": " 157\n2 + 157 = 159",
            "Extract-Response": " 159\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    printf(\"Enter a number: \");\n    gets(num);\n    for(i = 0; i < strlen(num); i++)\n    {\n        sum += num[i] - '0';\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 146,
            "GT": 31,
            "Query": "9 + 7 * 7 - 8 - 2 + 1 - 7 + 6 - 8 - 9 =   ",
            "Injected CoT": "7 * 7 = 49\n9 + 49 = 58\n58 - 8 = 50\n50 - 2 = 48\n48 + 1 = 49\n49 - 7 = 42\n42 + 6 = 48\n48 - 8 = 40\n40 - 9 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the given array is positive and will not exceed 10^5\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};"
        },
        {
            "Index": 149,
            "GT": -12,
            "Query": "6 + 8 - 5 * 2 + 7 - 4 - 8 - 6 + 2 - 7 =   ",
            "Injected CoT": "5 * 2 = 10\n6 + 8 = 14\n14 - 10 = 4\n4 + 7 = 11\n11 - 4 = 7\n7 - 8 = -1\n-1 - 6 = -7\n-7 + 2 = -5\n-5 - 7 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 152,
            "GT": -29,
            "Query": "6 * 6 - 7 - 5 * 6 + 1 - 2 - 6 * 4 - 3 =   ",
            "Injected CoT": "6 * 6 = 36\n5 * 6 = 30\n6 * 4 = 24\n36 - 7 = 29\n29 - 30 = -1\n-1 + 1 = 0\n0 - 2 = -2\n-2 - 24 = -26\n-26 - 3 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nIn each operation, you can choose any node of the tree and change it to any value.\nThe given tree is a binary search tree.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxProduct(TreeNode* root) {\n        int sum = 0;\n        int max_product = 0;\n        int n = dfs(root, sum);\n        max_product = max(max_product, max_product_helper(root, sum, n));\n        return max_product;\n    }\n    \n    int dfs(TreeNode* root, int& sum) {\n        if (!root) return 0;\n        int left = dfs(root->left, sum);\n        int right = dfs(root->right, sum);\n        sum += root->val;\n        return left + right + 1;\n    }\n    \n    int max_product_helper(TreeNode* root, int sum, int n) {\n        if (!root) return 0;\n        int left = max_product_helper(root->left, sum, n);\n        int right = max_product_helper(root->right, sum, n);\n        return max(left, max(right, (sum - root->val) * root->val));\n    }\n};"
        },
        {
            "Index": 154,
            "GT": 16,
            "Query": "6 + 3 + 3 * 2 * 2 + 7 + 4 - 7 * 1 - 9 =   ",
            "Injected CoT": "3 * 2 = 6\n2 * 2 = 4\n6 * 4 = 24\n6 + 3 = 9\n9 + 24 = 33\n33 + 7 = 40\n40 + 4 = 44\n7 * 1 = 7\n44 - 7 = 37\n37 - 9 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe input string will always be valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 157,
            "GT": 60,
            "Query": "6 - 2 + 3 + 3 - 4 - 7 + 6 * 9 + 3 + 4 =   ",
            "Injected CoT": "6 - 2 = 4\n4 + 3 = 7\n7 + 3 = 10\n10 - 4 = 6\n6 - 7 = -1\n6 * 9 = 54\n-1 + 54 = 53\n53 + 3 = 56\n56 + 4 =",
            "Response": " 60",
            "Extract-Response": " 60\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 158,
            "GT": 25,
            "Query": "6 * 3 - 2 + 6 + 1 - 8 + 1 * 6 - 5 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n18 - 2 = 16\n16 + 6 = 22\n22 + 1 = 23\n23 - 8 = 15\n1 * 6 = 6\n15 + 6 = 21\n21 - 5 = 16\n16 + 9 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 162,
            "GT": -13,
            "Query": "2 * 1 + 5 - 5 - 9 - 6 * 5 + 5 * 6 - 6 =   ",
            "Injected CoT": "2 * 1 = 2\n6 * 5 = 30\n5 * 6 = 30\n2 + 5 = 7\n7 - 5 = 2\n2 - 9 = -7\n-7 - 30 = -37\n-37 + 30 = -7\n-7 + 30 = 23\n23 - 6 = 17\n17 + 30 = 47\n47 - 6 = 41\n41 - 6 =",
            "Response": " 35\n35 - 6 = 29\n29 - 6 = 23\n23 - 6 = 17\n17 - 6 = 11\n11 - 6 = 5\n5 - 6 = -1",
            "Extract-Response": " -1\n\n*/"
        },
        {
            "Index": 163,
            "GT": 132,
            "Query": "4 - 6 + 7 + 9 * 3 * 5 - 6 + 1 - 2 - 1 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 5 = 135\n4 - 6 = -2\n-2 + 7 = 5\n5 + 135 = 140\n140 - 6 = 134\n134 + 1 = 135\n135 - 2 = 133\n133 - 1 =",
            "Response": " 132",
            "Extract-Response": " 132\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '*') {\n                current *= result;\n            } else {\n                current += result;\n            }\n            result = 0;\n            operation = s[i];\n        } else {\n            result = result * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '*') {\n        current *= result;\n    } else {\n        current += result;\n    }\n\n    cout << current << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 164,
            "GT": 199,
            "Query": "8 - 8 + 8 * 5 * 1 * 5 + 3 - 6 + 3 - 1 =   ",
            "Injected CoT": "8 - 8 = 0\n5 * 1 = 5\n5 * 5 = 25\n0 + 25 = 25\n25 + 3 = 28\n28 - 6 = 22\n22 + 3 = 25\n25 - 1 =",
            "Response": " 24\n\n24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 165,
            "GT": -58,
            "Query": "8 - 7 * 9 + 5 - 3 - 6 - 2 + 4 - 6 + 5 =   ",
            "Injected CoT": "7 * 9 = 63\n8 - 63 = -55\n-55 + 5 = -50\n-50 - 3 = -53\n-53 - 6 = -59\n-59 - 2 = -61\n-61 + 4 = -57\n-57 - 6 = -63\n-63 + 5 =",
            "Response": " -58",
            "Extract-Response": " -58.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 167,
            "GT": -351,
            "Query": "3 - 7 * 8 * 6 - 2 - 2 * 1 - 1 * 2 * 7 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 6 = 336\n3 - 336 = -333\n2 * 1 = 2\n-2 - 2 = -4\n1 * 2 = 2\n2 * 7 = 14\n-4 - 14 =",
            "Response": " -18\n-333 - 18 = -351\n\n-351",
            "Extract-Response": " -351\n\n*/"
        },
        {
            "Index": 168,
            "GT": 36,
            "Query": "1 * 9 + 3 * 8 - 1 + 7 + 2 + 5 - 4 - 6 =   ",
            "Injected CoT": "1 * 9 = 9\n3 * 8 = 24\n9 + 24 = 33\n33 + 7 = 40\n40 + 2 = 42\n42 + 5 = 47\n-4 - 6 = -10\n47 - 10 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 171,
            "GT": -30,
            "Query": "3 + 9 - 5 * 7 + 4 - 5 + 3 - 9 + 6 - 6 =   ",
            "Injected CoT": "5 * 7 = 35\n3 + 9 = 12\n12 - 35 = -23\n-23 + 4 = -19\n-19 - 5 = -24\n-24 + 3 = -21\n-21 - 9 = -30\n-30 + 6 = -24\n-24 - 6 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 175,
            "GT": -56,
            "Query": "1 - 6 - 8 * 3 - 7 + 4 * 9 - 8 * 6 - 8 =   ",
            "Injected CoT": "-8 * 3 = -24\n-6 - 24 = -30\n4 * 9 = 36\n-8 * 6 = -48\n-30 + 36 = 6\n6 - 7 = -1\n-1 - 8 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 176,
            "GT": 10,
            "Query": "8 - 9 - 4 * 9 - 7 - 2 * 3 + 4 * 5 * 3 =   ",
            "Injected CoT": "4 * 5 = 20\n9 * 4 = 36\n3 * 20 = 60\n20 - 9 = 11\n36 - 7 = 29\n2 * 3 = 6\n60 + 29 = 89\n89 - 6 = 83\n8 - 83 =",
            "Response": " -75\n3 - 11 = -8\n-8 - 75 = -83",
            "Extract-Response": " -83\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 177,
            "GT": 30,
            "Query": "8 + 2 + 2 + 1 - 3 - 4 + 7 - 1 + 9 + 9 =   ",
            "Injected CoT": "8 + 2 = 10\n10 + 2 = 12\n12 + 1 = 13\n13 - 3 = 10\n10 - 4 = 6\n6 + 7 = 13\n13 - 1 = 12\n12 + 9 = 21\n21 + 9 =",
            "Response": " 30",
            "Extract-Response": " 30\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int prev = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        cin >> curr;\n        if (curr > prev) {\n            result += curr - prev;\n        }\n        prev = curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 183,
            "GT": 26,
            "Query": "6 * 9 - 6 + 2 - 8 * 3 + 4 + 2 + 1 - 7 =   ",
            "Injected CoT": "6 * 9 = 54\n54 - 6 = 48\n48 + 2 = 50\n8 * 3 = 24\n50 - 24 = 26\n26 + 4 = 30\n30 + 2 = 32\n32 + 1 = 33\n33 - 7 =",
            "Response": " 26",
            "Extract-Response": " 26.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 184,
            "GT": -84,
            "Query": "7 - 9 * 2 - 8 * 9 - 6 - 6 * 1 + 8 + 3 =   ",
            "Injected CoT": "9 * 2 = 18\n8 * 9 = 72\n6 * 1 = 6\n18 * -1 = -18\n72 * -1 = -72\n6 * -1 = -6\n7 + -18 = -11\n-11 + -72 = -83\n-83 + -6 = -89\n-89 + 8 = -81\n-81 + 3 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int cal(string s, int i, int j, int sign) {\n        if (i > j) return 0;\n        int num = 0;\n        while (i <= j && s[i] != '+' && s[i] != '-' && s[i] != '*') {\n            num = num * 10 + s[i++] - '0';\n        }\n        int left = cal(s, i + 1, j, s[i] == '-' ? -1 : 1);\n        while (i <= j) {\n            if (s[i] == '+' || s[i] == '-') {\n                return num + sign * left;\n            } else if (s[i] == '*') {\n                int right = cal(s, i + 2, j, sign);\n                return num * sign * right;\n            }\n            i++;\n        }\n        return num * sign;\n    }\n    int calculate(string s) {\n        return cal(s, 0, s.size() - 1, 1);\n    }\n};"
        },
        {
            "Index": 185,
            "GT": -17,
            "Query": "1 - 9 + 2 + 4 - 6 + 9 + 3 * 6 - 6 * 6 =   ",
            "Injected CoT": "3 * 6 = 18\n6 * 6 = 36\n1 - 9 = -8\n-8 + 2 = -6\n-6 + 4 = -2\n-2 - 6 = -8\n-8 + 9 = 1\n1 + 18 = 19\n19 - 36 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 187,
            "GT": -100,
            "Query": "5 - 3 * 2 * 4 - 1 * 7 - 3 - 8 * 9 + 1 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 4 = 24\n1 * 7 = 7\n8 * 9 = 72\n5 - 24 = -19\n-19 - 7 = -26\n-26 - 3 = -29\n-29 - 72 = -101\n-101 + 1 =",
            "Response": " -100",
            "Extract-Response": " -100.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 188,
            "GT": -18,
            "Query": "5 - 8 * 4 + 7 - 2 - 3 - 4 + 3 + 5 + 3 =   ",
            "Injected CoT": "-8 * 4 = -32\n5 - (-32) = 37\n37 + 7 = 44\n44 - 2 = 42\n42 - 3 = 39\n39 - 4 = 35\n35 + 3 = 38\n38 + 5 = 43\n43 + 3 =",
            "Response": " 46",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 189,
            "GT": 41,
            "Query": "3 + 2 + 9 + 1 * 8 * 4 + 3 + 5 - 6 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 4 = 32\n3 + 2 = 5\n5 + 9 = 14\n14 + 1 = 15\n15 + 32 = 47\n47 + 3 = 50\n50 + 5 = 55\n55 - 6 = 49\n49 - 7 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 191,
            "GT": 375,
            "Query": "8 * 7 * 5 - 2 + 2 * 6 * 8 - 2 * 3 + 7 =   ",
            "Injected CoT": "8 * 7 = 56\n56 * 5 = 280\n2 * 6 = 12\n12 * 8 = 96\n280 - 2 = 278\n96 + 278 = 374\n2 * 3 = 6\n374 - 6 = 368\n368 + 7 =",
            "Response": " 375",
            "Extract-Response": " 375\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            flag=1;\n            continue;\n        }\n        if(s[i]=='-')\n        {\n            flag=2;\n            continue;\n        }\n        if(s[i]=='*')\n        {\n            flag=3;\n            continue;\n        }\n        if(s[i]=='/')\n        {\n            flag=4;\n            continue;\n        }\n        if(s[i]=='%')\n        {\n            flag=5;\n            continue;\n        }\n        if(s[i]=='^')\n        {\n            flag=6;\n            continue;\n        }\n        if(s[i]=='=')\n        {\n            flag=7;\n            continue;\n        }\n        if(flag==1)\n        {\n            sum=sum+s[i]-48;\n            flag=0;\n        }\n        if(flag==2)\n        {\n            sum=sum-s[i]-48;\n            flag=0;\n        }\n        if(flag==3)\n        {\n            sum=sum*s[i]-48;\n            flag=0;\n        }\n        if(flag==4)\n        {\n            sum=sum/s[i]-48;\n            flag=0;\n        }\n        if(flag==5)\n        {\n            sum=sum%s[i]-48;\n            flag=0;\n        }\n        if(flag==6)\n        {\n            sum=pow(sum,s[i]-48);\n            flag=0;\n        }\n        if(flag==7)\n        {\n            printf(\"The answer is  %d\\n\",sum);\n            break;\n        }\n    }\n    return 0;\n}"
        },
        {
            "Index": 192,
            "GT": 1507,
            "Query": "7 * 9 * 8 * 3 - 8 - 3 + 8 - 1 + 3 - 4 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 8 = 504\n504 * 3 = 1512\n1512 - 8 = 1504\n1504 - 3 = 1501\n1501 + 8 = 1509\n1509 - 1 = 1508\n1508 + 3 = 1511\n1511 - 4 =",
            "Response": " 1507",
            "Extract-Response": " 1507\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <time.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i"
        },
        {
            "Index": 194,
            "GT": 111,
            "Query": "1 * 5 + 2 + 8 * 9 + 3 + 6 - 1 + 4 * 6 =   ",
            "Injected CoT": "1 * 5 = 5\n8 * 9 = 72\n4 * 6 = 24\n5 + 2 = 7\n72 + 3 = 75\n6 - 1 = 5\n24 + 4 = 28\n5 + 75 = 80\n80 + 28 =",
            "Response": " 108",
            "Extract-Response": "\n\n108"
        },
        {
            "Index": 195,
            "GT": 5,
            "Query": "2 * 2 * 4 - 5 * 1 + 3 * 1 - 9 - 9 + 9 =   ",
            "Injected CoT": "2 * 2 = 4\n4 * 4 = 16\n5 * 1 = 5\n3 * 1 = 3\n9 + 9 = 18\n18 - 5 = 13\n13 + 3 = 16\n16 - 9 = 7\n7 - 9 = -2\n-2 + 9 = 7\n16 + 7 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 196,
            "GT": 27,
            "Query": "7 + 5 + 7 + 2 + 4 - 3 + 7 - 7 - 2 + 7 =   ",
            "Injected CoT": "7 + 5 = 12\n12 + 7 = 19\n19 + 2 = 21\n21 + 4 = 25\n25 - 3 = 22\n22 + 7 = 29\n29 - 7 = 22\n22 - 2 = 20\n20 + 7 =",
            "Response": " 27",
            "Extract-Response": " 27.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the string from user.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string and check for numeric characters.\n     */\n    for(i = 0; i < len; i++)\n    {\n        /*\n         * If the current character is numeric,\n         * then convert it to integer and add it to sum.\n         */\n        if(isdigit(str[i]))\n        {\n            sum += (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all digits = %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 198,
            "GT": 22,
            "Query": "8 + 2 + 1 + 8 + 3 - 4 - 5 + 2 * 3 + 3 =   ",
            "Injected CoT": "2 * 3 = 6\n8 + 2 + 1 + 8 + 3 - 4 - 5 + 6 + 3 =",
            "Response": "    \n8 + 2 + 1 + 8 + 3 - 4 - 5 + 6 =    \n8 + 2 + 1 + 8 + 3 - 4 - 5 =    \n8 + 2 + 1 + 8 + 3 - 4 =    \n8 + 2 + 1 + 8 + 3 =    \n8 + 2 + 1 + 8 =    \n8 + 2 + 1 =    \n8 + 2 =    \n10",
            "Extract-Response": "\n10"
        },
        {
            "Index": 200,
            "GT": -81,
            "Query": "7 - 7 * 5 - 8 - 6 - 3 - 4 * 7 - 8 * 1 =   ",
            "Injected CoT": "7 * 5 = 35\n35 - 7 = 28\n28 - 8 = 20\n20 - 6 = 14\n14 - 3 = 11\n4 * 7 = 28\n8 * 1 = 8\n28 + 8 = 36\n36 + 11 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int current = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = s[i] == '+' ? 1 : -1;\n        } else if (s[i] == '*') {\n            int next = 0;\n            while (s[i + 1] >= '0' && s[i + 1] <= '9') {\n                next = next * 10 + s[i + 1] - '0';\n                ++i;\n            }\n            current *= next;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n    result += sign * current;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 202,
            "GT": -6,
            "Query": "4 * 8 + 7 - 5 - 6 + 6 - 7 * 4 - 8 - 4 =   ",
            "Injected CoT": "4 * 8 = 32\n32 + 7 = 39\n39 - 5 = 34\n34 - 6 = 28\n28 + 6 = 34\n7 * 4 = 28\n34 - 28 = 6\n6 - 8 = -2\n-2 - 4 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 207,
            "GT": 318,
            "Query": "5 * 6 * 3 * 4 + 5 + 4 - 6 * 8 + 2 - 5 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 3 = 90\n90 * 4 = 360\n360 + 5 = 365\n365 + 4 = 369\n6 * 8 = 48\n369 - 48 = 321\n321 + 2 = 323\n323 - 5 =",
            "Response": " 318",
            "Extract-Response": " 318\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prev_sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr * sign;\n            curr = 0;\n            prev_sign = sign;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += curr * sign;\n            curr = 0;\n            prev_sign = sign;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 209,
            "GT": 20,
            "Query": "4 + 5 * 6 - 2 * 7 - 9 + 7 + 8 - 5 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n4 + 30 = 34\n2 * 7 = 14\n34 - 14 = 20\n20 - 9 = 11\n11 + 7 = 18\n18 + 8 = 26\n26 - 5 = 21\n21 - 1 =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <functional>\n#include <bitset>\n#include <sstream>\n#include <stack>\n\nusing namespace std;\n\n#define endl '\\n'\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int cur = 0;\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        int x;\n        cin >> x;\n        cur += x;\n        ans = max(ans, cur);\n        if (cur < 0)\n            cur = 0;\n    }\n    cout << ans << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 210,
            "GT": 1278,
            "Query": "9 * 6 * 4 * 6 - 3 + 3 + 7 * 2 - 4 * 8 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 4 = 216\n216 * 6 = 1296\n7 * 2 = 14\n4 * 8 = 32\n1296 - 3 = 1293\n1293 + 3 = 1296\n1296 + 14 = 1310\n1310 - 32 =",
            "Response": " 1278",
            "Extract-Response": "\n\n1278"
        },
        {
            "Index": 212,
            "GT": 702,
            "Query": "8 * 2 * 8 * 5 - 5 + 7 * 9 + 2 + 2 * 1 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 8 = 128\n128 * 5 = 640\n640 - 5 = 635\n7 * 9 = 63\n2 * 1 = 2\n63 + 2 = 65\n635 + 65 =",
            "Response": " 700",
            "Extract-Response": " 700\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int current = 0;\n    int currentOperator = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += currentOperator * current;\n            current = 0;\n            currentOperator = 1;\n        } else if (s[i] == '-') {\n            result += currentOperator * current;\n            current = 0;\n            currentOperator = -1;\n        } else if (s[i] == '*') {\n            current *= s[i + 1] - '0';\n            ++i;\n        } else if (s[i] == '/') {\n            current /= s[i + 1] - '0';\n            ++i;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += currentOperator * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 213,
            "GT": 43,
            "Query": "6 * 6 + 6 + 4 - 8 + 7 - 1 * 2 - 1 + 1 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n42 + 4 = 46\n46 - 8 = 38\n38 + 7 = 45\n45 - 1 * 2 = 43\n43 - 1 = 42\n42 + 1 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 214,
            "GT": 134,
            "Query": "8 * 7 + 9 + 8 * 9 + 9 - 4 - 6 + 1 - 3 =   ",
            "Injected CoT": "8 * 7 = 56\n8 * 9 = 72\n56 + 9 = 65\n72 + 9 = 81\n65 + 81 = 146\n146 - 4 = 142\n142 - 6 = 136\n136 + 1 = 137\n137 - 3 =",
            "Response": " 134",
            "Extract-Response": " 134\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 215,
            "GT": -99,
            "Query": "7 * 5 * 7 + 4 * 4 - 9 * 5 * 8 - 5 + 5 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 7 = 245\n4 * 4 = 16\n9 * 5 = 45\n45 * 8 = 360\n245 - 360 = -115\n-115 - 5 = -120\n-120 + 5 =",
            "Response": " -115",
            "Extract-Response": " -115.\n\nNote:\n\nBoth input strings will not have leading or trailing spaces.\nBoth input strings will only contain numerical characters '0' - '9'.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 216,
            "GT": 27,
            "Query": "8 + 5 + 6 + 3 - 1 + 6 + 3 * 3 - 8 - 1 =   ",
            "Injected CoT": "3 * 3 = 9\n8 + 5 = 13\n13 + 6 = 19\n19 + 3 = 22\n22 - 1 = 21\n21 + 6 = 27\n27 - 8 = 19\n19 - 1 = 18\n18 + 9 =",
            "Response": " 27",
            "Extract-Response": "\n\n27"
        },
        {
            "Index": 217,
            "GT": 59,
            "Query": "2 - 2 * 9 + 7 + 7 * 6 + 3 + 2 * 8 + 7 =   ",
            "Injected CoT": "2 * 9 = 18\n2 - 18 = -16\n7 * 6 = 42\n2 * 8 = 16\n-16 + 7 + 42 + 3 + 16 + 7 =",
            "Response": "\n7 + 7 = 14\n14 + 3 = 17\n17 + 42 = 59\n59 - 16 = 43\n43 - 18 = 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 220,
            "GT": -79,
            "Query": "5 + 1 + 2 - 5 * 4 - 2 - 6 + 5 - 8 * 8 =   ",
            "Injected CoT": "5 + 1 = 6\n6 + 2 = 8\n5 * 4 = 20\n20 - 8 = 12\n12 - 2 = 10\n10 - 6 = 4\n4 + 5 = 9\n8 * 8 = 64\n9 - 64 =",
            "Response": " -55",
            "Extract-Response": " -55.\n\nNote:\n\nThe expression is always valid.\nEvaluate the expression to find the answer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(ans);\n                st.push(sign);\n                ans = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                ans += sign * cur;\n                cur = 0;\n                ans *= st.top();\n                st.pop();\n                ans += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        ans += sign * cur;\n        return ans;\n    }\n};"
        },
        {
            "Index": 223,
            "GT": 11,
            "Query": "5 - 3 - 3 + 6 - 3 * 5 * 1 + 8 * 2 + 5 =   ",
            "Injected CoT": "5 - 3 = 2\n2 - 3 = -1\n-1 + 6 = 5\n5 - 3 * 5 * 1 = -10\n-10 + 8 * 2 = 6\n6 + 5 =",
            "Response": " 11",
            "Extract-Response": "\n\n11"
        },
        {
            "Index": 226,
            "GT": -2,
            "Query": "5 - 4 + 2 * 4 - 5 - 3 - 1 + 5 - 4 - 3 =   ",
            "Injected CoT": "2 * 4 = 8\n5 - 4 = 1\n1 + 8 = 9\n9 - 5 = 4\n4 - 3 = 1\n1 - 1 = 0\n0 + 5 = 5\n5 - 4 = 1\n1 - 3 =",
            "Response": " -2\n-2 + 5 = 3",
            "Extract-Response": " 3.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 227,
            "GT": 119,
            "Query": "7 * 4 - 1 + 6 + 9 * 7 + 2 + 5 + 2 * 8 =   ",
            "Injected CoT": "7 * 4 = 28\n9 * 7 = 63\n2 * 8 = 16\n28 - 1 = 27\n27 + 6 = 33\n33 + 63 = 96\n96 + 5 = 101\n101 + 16 =",
            "Response": " 117",
            "Extract-Response": " 117\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int current = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += current;\n            current = 0;\n        } else if (s[i] == '*') {\n            int next = 0;\n            while (i + 1 < s.size() && s[i + 1] != '+' && s[i + 1] != '*') {\n                next = next * 10 + s[i + 1] - '0';\n                ++i;\n            }\n            current *= next;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 233,
            "GT": -144,
            "Query": "9 - 9 * 8 + 1 - 6 + 5 - 1 - 9 * 8 - 8 =   ",
            "Injected CoT": "9 * 8 = 72\n9 - 72 = -63\n-63 + 1 = -62\n-62 - 6 = -68\n-68 + 5 = -63\n-63 - 1 = -64\n-9 * 8 = -72\n-64 - 72 = -136\n-136 - 8 =",
            "Response": " -144",
            "Extract-Response": " -144\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    for (char c: s) {\n        if (c == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (c == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + (c - '0');\n        }\n    }\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 234,
            "GT": -19,
            "Query": "4 + 1 * 2 * 4 - 3 + 6 - 4 * 8 + 6 - 8 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 4 = 8\n4 + 8 = 12\n12 - 3 = 9\n9 + 6 = 15\n4 * 8 = 32\n15 - 32 = -17\n-17 + 6 = -11\n-11 - 8 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 235,
            "GT": 105,
            "Query": "2 - 2 - 3 * 1 + 3 + 9 * 9 - 3 + 9 * 3 =   ",
            "Injected CoT": "3 * 1 = 3\n2 - 2 = 0\n0 - 3 = -3\n9 * 9 = 81\n-3 + 81 = 78\n9 * 3 = 27\n78 + 27 =",
            "Response": " 105",
            "Extract-Response": "\n\n105"
        },
        {
            "Index": 237,
            "GT": -98,
            "Query": "4 + 1 * 1 - 9 * 1 - 6 * 2 * 8 + 3 - 1 =   ",
            "Injected CoT": "1 * 1 = 1\n9 * 1 = 9\n2 * 8 = 16\n6 * 16 = 96\n4 + 1 = 5\n5 - 1 = 4\n4 - 9 = -5\n-5 - 96 = -101\n-101 + 3 = -98\n-98 - 1 =",
            "Response": " -99\n\n-99",
            "Extract-Response": " -99"
        },
        {
            "Index": 238,
            "GT": -127,
            "Query": "8 - 9 * 9 - 6 * 4 - 2 * 9 + 8 - 4 * 5 =   ",
            "Injected CoT": "9 * 9 = 81\n6 * 4 = 24\n2 * 9 = 18\n4 * 5 = 20\n81 * -1 = -81\n24 * -1 = -24\n18 * -1 = -18\n-81 - 24 = -105\n-105 - 20 = -125\n-125 + 8 = -117\n-117 - 20 =",
            "Response": " -137\n-137 + 18 = -119\n-119 - 24 = -143\n-143 + 81 = -62\n-62 + 20 = -42\n-42 + 9 = -33\n-33 + 24 = -9\n-9 + 18 = 9",
            "Extract-Response": " 9\n\n*/"
        },
        {
            "Index": 239,
            "GT": -5,
            "Query": "1 - 7 + 9 - 6 - 3 + 4 + 4 + 2 - 2 - 7 =   ",
            "Injected CoT": "-7 + 9 = 2\n2 - 6 = -4\n-4 - 3 = -7\n-7 + 4 = -3\n-3 + 4 = 1\n1 + 2 = 3\n3 - 2 = 1\n1 - 7 = -6\n-6 - 7 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 240,
            "GT": 125,
            "Query": "6 * 9 * 2 - 4 - 6 * 2 + 6 * 6 + 2 - 5 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 2 = 108\n6 * 2 = 12\n108 - 4 = 104\n104 - 12 = 92\n6 * 6 = 36\n92 + 36 = 128\n2 - 5 = -3\n128 - 3 =",
            "Response": " 125",
            "Extract-Response": "\n\n125"
        },
        {
            "Index": 241,
            "GT": 18,
            "Query": "5 + 6 * 2 - 2 + 1 + 7 - 7 + 9 + 2 - 9 =   ",
            "Injected CoT": "6 * 2 = 12\n5 + 12 = 17\n17 - 2 = 15\n15 + 1 = 16\n16 + 7 = 23\n23 - 7 = 16\n16 + 9 = 25\n25 + 2 = 27\n27 - 9 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 243,
            "GT": -29,
            "Query": "7 + 2 - 6 + 5 - 6 + 2 + 9 - 2 * 7 * 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 3 = 42\n7 + 2 = 9\n9 - 6 = 3\n3 + 5 = 8\n8 - 6 = 2\n2 + 2 = 4\n4 + 9 = 13\n13 - 42 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        int res = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 245,
            "GT": 25,
            "Query": "5 - 8 + 6 - 9 + 6 * 3 + 9 + 4 + 9 - 9 =   ",
            "Injected CoT": "6 * 3 = 18\n5 - 8 = -3\n-3 + 6 = 3\n3 - 9 = -6\n-6 + 18 = 12\n12 + 9 = 21\n21 + 4 = 25\n25 + 9 = 34\n34 - 9 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 246,
            "GT": 43,
            "Query": "3 + 5 + 7 + 1 * 9 + 1 + 4 + 2 + 5 + 7 =   ",
            "Injected CoT": "1 * 9 = 9\n3 + 5 = 8\n8 + 7 = 15\n15 + 9 = 24\n24 + 1 = 25\n25 + 4 = 29\n29 + 2 = 31\n31 + 5 = 36\n36 + 7 =",
            "Response": " 43\n\n43 is the checksum, which can be used to verify the ISBN number.\n\n*/\n\n#include <stdio.h>\n\nint main(void)\n{\n    int gsi, group, publisher, item, check;\n    int d, i1, i2, i3, i4, i5, j1, j2, j3, j4, j5, first_sum, second_sum, total;\n\n    printf(\"Enter ISBN: \");\n    scanf(\"%d-%d-%d-%d-%d\", &gsi, &group, &publisher, &item, &check);\n\n    d = gsi / 100;\n    i1 = gsi / 10 % 10;\n    i2 = gsi % 10;\n    j1 = group / 10000;\n    j2 = group / 1000 % 10;\n    j3 = group / 100 % 10;\n    j4 = group / 10 % 10;\n    j5 = group % 10;\n    first_sum = d + i1 + i2 + j1 + j2 + j3 + j4 + j5;\n    second_sum = d * 3 + i1 * 2 + i2 * 1 + j1 * 5 + j2 * 4 + j3 * 3 + j4 * 2 + j5 * 1;\n    total = first_sum + second_sum;\n\n    if (total % 10 == 0)\n    {\n        printf(\"YES\\n\");\n    }\n    else\n    {\n        printf(\"NO\\n\");\n    }\n\n    return 0;\n}",
            "Extract-Response": "\n\nNO"
        },
        {
            "Index": 247,
            "GT": 34,
            "Query": "2 * 3 * 2 + 5 - 4 - 5 - 1 + 3 + 6 * 4 =   ",
            "Injected CoT": "2 * 3 = 6\n6 * 2 = 12\n12 + 5 = 17\n17 - 4 = 13\n13 - 5 = 8\n8 - 1 = 7\n7 + 3 = 10\n6 * 4 = 24\n10 + 24 =",
            "Response": " 34",
            "Extract-Response": " 34.\n\nInput:\nThe first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains a string S.\n\nOutput:\nFor each test case in a new line print the required answer.\n\nConstraints:\n1<=T<=100\n1<=length of string<=100\n\nExample:\nInput:\n2\n1+2*3*2+5-4-5-1+3+6*4\n2+5*3+5-4-5-1+3+6\nOutput:\n34\n23\n\nExplanation:\nFor first test case\n1+2*3*2+5-4-5-1+3+6*4 = 1 + 2 * 3 * 2 + 5 - 4 - 5 - 1 + 3 + 6 * 4 = 34\nFor second test case\n2+5*3+5-4-5-1+3+6 = 2 + 5 * 3 + 5 - 4 - 5 - 1 + 3 + 6 = 23\n*/\n\n#include <iostream>\n#include <string>\n#include <stack>\n#include <cmath>\nusing namespace std;\n\nint main() {\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t    string s;\n\t    cin>>s;\n\t    stack<int> st;\n\t    int res=0;\n\t    int n=s.length();\n\t    for(int i=0;i<n;i++){\n\t        if(s[i]=='+'){\n\t            int a=st.top();\n\t            st.pop();\n\t            int b=st.top();\n\t            st.pop();\n\t            st.push(a+b);\n\t        }\n\t        else if(s[i]=='-'){\n\t            int a=st.top();\n\t            st.pop();\n\t            int b=st.top();\n\t            st.pop();\n\t            st.push(b-a);\n\t        }\n\t        else if(s[i]=='*'){\n\t            int a=st.top();\n\t            st.pop();\n\t            int b=st.top();\n\t            st.pop();\n\t            st.push(a*b);\n\t        }\n\t        else if(s[i]=='/'){\n\t            int a=st.top();\n\t            st.pop();\n\t            int b=st.top();\n\t            st.pop();\n\t            st.push(b/a);\n\t        }\n\t        else{\n\t            st.push(s[i]-'0');\n\t        }\n\t    }\n\t    cout<<st.top()<<endl;\n\t}\n\treturn 0;\n}"
        },
        {
            "Index": 248,
            "GT": -36,
            "Query": "4 * 2 + 2 - 6 * 1 * 9 + 2 + 4 - 4 + 6 =   ",
            "Injected CoT": "4 * 2 = 8\n6 * 1 = 6\n6 * 9 = 54\n2 - 54 = -52\n8 + 2 = 10\n10 + 4 = 14\n14 - 4 = 10\n10 + 6 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 249,
            "GT": -81,
            "Query": "3 * 1 - 7 * 3 * 4 - 1 - 8 + 8 - 5 + 6 =   ",
            "Injected CoT": "3 * 1 = 3\n7 * 3 = 21\n21 * 4 = 84\n3 - 84 = -81\n-81 - 1 = -82\n-82 - 8 = -90\n-90 + 8 = -82\n-82 - 5 = -87\n-87 + 6 =",
            "Response": " -81",
            "Extract-Response": " -81.\n\nNote:\nThe sum of the integers in the array will not exceed 1000.\nIf the number of integers is multiple of 2, then the answer is guaranteed to be an integer.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 251,
            "GT": -78,
            "Query": "1 * 4 * 9 + 6 * 8 - 4 * 5 * 9 + 6 * 3 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 9 = 36\n6 * 8 = 48\n4 * 5 = 20\n20 * 9 = 180\n6 * 3 = 18\n36 + 48 = 84\n84 - 180 = -96\n-96 + 18 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\n\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 253,
            "GT": -3,
            "Query": "5 + 4 * 1 - 3 - 8 - 9 + 1 * 1 * 4 * 2 =   ",
            "Injected CoT": "4 * 1 = 4\n5 + 4 = 9\n9 - 3 = 6\n6 - 8 = -2\n-2 - 9 = -11\n1 * 1 = 1\n1 * 4 = 4\n4 * 2 = 8\n-11 + 8 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 257,
            "GT": -56,
            "Query": "8 * 9 - 8 + 8 - 3 - 2 * 7 * 8 - 5 - 8 =   ",
            "Injected CoT": "8 * 9 = 72\n2 * 7 = 14\n14 * 8 = 112\n72 - 8 = 64\n64 + 8 = 72\n72 - 3 = 69\n69 - 112 = -43\n-43 - 5 = -48\n-48 - 8 =",
            "Response": " -56",
            "Extract-Response": " -56.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nThe answer is guaranteed to fit in a 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 258,
            "GT": 49,
            "Query": "9 * 8 - 6 * 6 + 9 + 7 - 4 - 2 - 5 + 8 =   ",
            "Injected CoT": "9 * 8 = 72\n6 * 6 = 36\n72 - 36 = 36\n36 + 9 = 45\n45 + 7 = 52\n52 - 4 = 48\n48 - 2 = 46\n46 - 5 = 41\n41 + 8 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    bool sign = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (sign) {\n                result += curr;\n            } else {\n                result -= curr;\n            }\n            curr = 0;\n            sign = true;\n        } else if (s[i] == '+') {\n            if (sign) {\n                result += curr;\n            } else {\n                result -= curr;\n            }\n            curr = 0;\n            sign = true;\n        } else if (s[i] == '-') {\n            if (sign) {\n                result += curr;\n            } else {\n                result -= curr;\n            }\n            curr = 0;\n            sign = false;\n        } else {\n            curr *= 10;\n            curr += s[i] - '0';\n        }\n    }\n\n    if (sign) {\n        result += curr;\n    } else {\n        result -= curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 259,
            "GT": 18,
            "Query": "8 + 6 + 1 + 2 - 7 * 1 + 7 - 8 + 4 + 5 =   ",
            "Injected CoT": "7 * 1 = 7\n8 + 6 = 14\n14 + 1 = 15\n15 + 2 = 17\n17 - 7 = 10\n10 + 7 = 17\n17 - 8 = 9\n9 + 4 = 13\n13 + 5 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 260,
            "GT": 78,
            "Query": "6 * 7 - 2 + 8 - 6 + 8 + 7 + 7 + 8 + 6 =   ",
            "Injected CoT": "6 * 7 = 42\n42 - 2 = 40\n40 + 8 = 48\n48 - 6 = 42\n42 + 8 = 50\n50 + 7 = 57\n57 + 7 = 64\n64 + 8 = 72\n72 + 6 =",
            "Response": " 78",
            "Extract-Response": " 78\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 265,
            "GT": 98,
            "Query": "2 + 8 * 8 + 4 + 9 + 5 + 8 + 9 - 1 * 3 =   ",
            "Injected CoT": "8 * 8 = 64\n2 + 64 = 66\n66 + 4 = 70\n70 + 9 = 79\n79 + 5 = 84\n84 + 8 = 92\n92 + 9 = 101\n1 * 3 = 3\n101 - 3 =",
            "Response": " 98\n\n98 is the answer.",
            "Extract-Response": " 98.\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"%d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 266,
            "GT": 1774,
            "Query": "8 + 3 * 2 * 7 + 1 - 5 + 8 * 6 * 9 * 4 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 7 = 42\n8 + 42 = 50\n50 + 1 = 51\n51 - 5 = 46\n6 * 9 = 54\n54 * 4 = 216\n8 * 216 = 1728\n46 + 1728 =",
            "Response": " 1774",
            "Extract-Response": " 1774\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int current = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 268,
            "GT": -269,
            "Query": "3 * 8 - 5 * 4 - 8 - 1 - 6 * 9 * 5 + 6 =   ",
            "Injected CoT": "3 * 8 = 24\n5 * 4 = 20\n6 * 9 = 54\n54 * 5 = 270\n270 * 6 = 1620\n24 - 20 = 4\n4 - 8 = -4\n-4 - 1 = -5\n-5 - 1620 = -1625\n-1625 + 6 =",
            "Response": " -1619",
            "Extract-Response": " -1619.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 269,
            "GT": -105,
            "Query": "2 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =   ",
            "Injected CoT": "5 * 9 = 45\n-5 * 9 = -45\n7 * 2 = 14\n5 * 4 = 20\n20 * 4 = 80\n2 - 5 = -3\n-3 + 9 = 6\n6 - 45 = -39\n-39 + 14 = -25\n-25 - 80 =",
            "Response": " -105",
            "Extract-Response": " -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =     -105\nThe answer is  -105\n\n3 - 5 + 9 - 5 * 9 + 7 *"
        },
        {
            "Index": 273,
            "GT": 12,
            "Query": "6 - 9 + 6 - 3 + 1 + 5 + 7 * 2 - 5 - 3 =   ",
            "Injected CoT": "7 * 2 = 14\n-9 + 6 = -3\n6 - 3 = 3\n3 + 1 = 4\n4 + 5 = 9\n-3 + 9 = 6\n6 + 14 = 20\n20 - 5 = 15\n15 - 3 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 275,
            "GT": 69,
            "Query": "9 + 3 * 8 + 7 - 8 + 3 + 9 * 2 + 4 * 4 =   ",
            "Injected CoT": "3 * 8 = 24\n9 + 24 = 33\n33 + 7 = 40\n40 - 8 = 32\n32 + 3 = 35\n9 * 2 = 18\n4 * 4 = 16\n18 + 16 = 34\n35 + 34 =",
            "Response": " 69",
            "Extract-Response": "\n\n69"
        },
        {
            "Index": 281,
            "GT": 15,
            "Query": "4 + 3 * 6 + 4 - 3 + 4 - 5 - 1 - 4 - 2 =   ",
            "Injected CoT": "3 * 6 = 18\n4 + 18 = 22\n22 + 4 = 26\n26 - 3 = 23\n23 + 4 = 27\n27 - 5 = 22\n22 - 1 = 21\n21 - 4 = 17\n17 - 2 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 282,
            "GT": 38,
            "Query": "6 * 8 - 7 - 9 + 4 - 3 + 3 - 3 + 6 - 1 =   ",
            "Injected CoT": "6 * 8 = 48\n48 - 7 = 41\n41 - 9 = 32\n32 + 4 = 36\n36 - 3 = 33\n33 + 3 = 36\n36 - 3 = 33\n33 + 6 = 39\n39 - 1 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 286,
            "GT": 90,
            "Query": "2 - 3 + 9 + 2 * 2 * 3 + 8 * 7 + 7 * 2 =   ",
            "Injected CoT": "2 * 2 = 4\n-3 + 9 = 6\n4 * 3 = 12\n8 * 7 = 56\n7 * 2 = 14\n12 + 56 = 68\n68 + 14 = 82\n2 - 3 = -1\n-1 + 82 =",
            "Response": " 81",
            "Extract-Response": "\n<code>81\n</code>\n"
        },
        {
            "Index": 288,
            "GT": 25,
            "Query": "8 - 4 - 8 + 7 + 8 - 5 + 5 - 2 + 4 * 4 =   ",
            "Injected CoT": "4 * 4 = 16\n8 - 4 = 4\n4 - 8 = -4\n-4 + 7 = 3\n3 + 8 = 11\n11 - 5 = 6\n6 + 5 = 11\n11 - 2 = 9\n9 + 16 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 289,
            "GT": -62,
            "Query": "3 - 3 - 2 * 2 * 4 * 4 + 2 * 7 - 6 - 6 =   ",
            "Injected CoT": "2 * 2 = 4\n4 * 4 = 16\n16 * 2 = 32\n3 - 3 = 0\n0 - 32 = -32\n2 * 7 = 14\n-32 + 14 = -18\n-6 - 6 = -12\n-18 - 12 =",
            "Response": " -30",
            "Extract-Response": " -30\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n                sign = -1;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else if (s[i] == '*') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '/') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 290,
            "GT": 35,
            "Query": "3 + 7 - 5 * 4 - 6 + 2 + 5 + 4 * 9 + 8 =   ",
            "Injected CoT": "5 * 4 = 20\n3 + 7 = 10\n10 - 20 = -10\n-10 - 6 = -16\n-16 + 2 = -14\n-14 + 5 = -9\n4 * 9 = 36\n-9 + 36 = 27\n27 + 8 =",
            "Response": " 35",
            "Extract-Response": " 35.\n\nNote:\nThe division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12.\nEvery operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.\nYou cannot concatenate numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        stack<int> s;\n        for(int i=0;i<ops.size();i++)\n        {\n            if(ops[i]==\"+\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.push(a);\n                s.push(a+b);\n            }\n            else if(ops[i]==\"D\")\n            {\n                int a=s.top();\n                s.push(2*a);\n            }\n            else if(ops[i]==\"C\")\n            {\n                s.pop();\n            }\n            else\n            {\n                s.push(stoi(ops[i]));\n            }\n        }\n        int sum=0;\n        while(!s.empty())\n        {\n            sum+=s.top();\n            s.pop();\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 291,
            "GT": -74,
            "Query": "2 * 5 + 8 - 7 + 5 - 6 * 2 * 8 + 8 - 2 =   ",
            "Injected CoT": "2 * 5 = 10\n10 + 8 = 18\n18 - 7 = 11\n11 + 5 = 16\n6 * 2 = 12\n12 * 8 = 96\n96 - 16 = 80\n80 + 8 = 88\n88 - 2 =",
            "Response": " 86",
            "Extract-Response": " 86\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <unordered_set>\n#include <cassert>\n\nusing namespace std;\n\n#define REOPEN_READ freopen(\"/home/shen/Core/ACM/input.txt\", \"r\", stdin);\n#define REOPEN_WRITE freopen(\"/home/shen/Core/ACM/output.txt\", \"w\", stdout);\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> stk;\n        for(auto & s : tokens){\n            if(s == \"+\"){\n                int a = stk.top();\n                stk.pop();\n                int b = stk.top();\n                stk.pop();\n                stk.push(a + b);\n            }else if(s == \"-\"){\n                int a = stk.top();\n                stk.pop();\n                int b = stk.top();\n                stk.pop();\n                stk.push(b - a);\n            }else if(s == \"*\"){\n                int a = stk.top();\n                stk.pop();\n                int b = stk.top();\n                stk.pop();\n                stk.push(a * b);\n            }else if(s == \"/\"){\n                int a = stk.top();\n                stk.pop();\n                int b = stk.top();\n                stk.pop();\n                stk.push(b / a);\n            }else{\n                stk.push(atoi(s.c_str()));\n            }\n        }\n        return stk.top();\n    }\n};\n\nint main(){\n    REOPEN_READ\n    //REOPEN_WRITE\n    Solution s;\n    vector<string> v = {\"4\", \"13\", \"5\", \"/\", \"+\"};\n    cout << s.evalRPN(v) << endl;\n    return 0;\n}"
        },
        {
            "Index": 292,
            "GT": 306,
            "Query": "9 - 8 * 1 * 5 - 8 + 1 * 8 * 7 * 6 + 9 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 8 = 1\n1 * 5 = 5\n1 - 5 = -4\n8 * 7 = 56\n56 * 6 = 336\n8 * 336 = 2688\n-4 + 2688 = 2684\n2684 - 8 = 2676\n2676 + 9 =",
            "Response": " 2685\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n\tint num[10];\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n\tint a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n\tint sum, sum1;\n\tchar str[100];\n\tchar str1[100];\n\tchar str2[100];\n\tchar str3[100];\n\tchar str4[100];\n\tchar str5[100];\n\tchar str6[100];\n\tchar str7[100];\n\tchar str8[100];\n\tchar str9[100];\n\tchar str10[100];\n\tchar str11[100];\n\tchar str12[100];\n\tchar str13[100];\n\tchar str14[100];\n\tchar str15[100];\n\tchar str16[100];\n\tchar str17[100];\n\tchar str18[100];\n\tchar str19[100];\n\tchar str20[100];\n\tchar str21[100];\n\tchar str22[100];\n\tchar str23[100];\n\tchar str24[100];\n\tchar str25[100];\n\tchar str26[100];\n\tchar str27[100];\n\tchar str28[100];\n\tchar str29[100];\n\tchar str30[100];\n\tchar str31[100];\n\tchar str32[100];\n\tchar str33[100];\n\tchar str34[100];\n\tchar str35[100];\n\tchar str36[100];\n\tchar str37[100];\n\tchar str38[100];\n\tchar str39[100];\n\tchar str40[100];\n\tchar str41[100];\n\tchar str42[100];\n\tchar str43[100];\n\tchar str44[100];\n\tchar str45[100];\n\tchar str46[100];\n\tchar str47[100];\n\tchar str48[100];\n\tchar str49[100];\n\tchar str50[100];\n\tchar str51[100];\n\tchar str52[100];\n\tchar str53[100];\n\tchar str54[100];\n\tchar str55[100];\n\tchar str56[100];\n\tchar str57[100];\n\tchar str58[100];\n\tchar str59[100];\n\tchar str60[100];\n\tchar str61[100];\n\tchar str62[100];\n\tchar str63[100];\n\tchar str64[100];\n\tchar str65[100];\n\tchar str66[100];\n\tchar str67[100];\n\tchar str68[100];\n\tchar str69[100];\n\tchar str70[100];\n\tchar str71[100];\n\tchar str72[100];\n\tchar str73[100];\n\tchar str74[100];\n\tchar str75[100];\n\tchar str76[100];\n\tchar str77[100];\n\tchar str78[100];\n\tchar str79[100];\n\tchar str80[100];\n\tchar str81[100];\n\tchar str82[100];\n\tchar str83[100];\n\tchar str84[100];\n\tchar str85[100];\n\tchar str86[100];\n\tchar str87[100];\n\tchar str88[100];\n\tchar str89[100];\n\tchar str90[100];\n\tchar str91[100];\n\tchar str92[100];\n\tchar str93[100];\n\tchar str94[100];\n\tchar str95[100];\n\tchar str96[100];\n\tchar str97[100];\n\tchar str98[100];\n\tchar str99[100];\n\tchar str100[100];\n\tchar str101[100];\n\tchar str102[100];\n\tchar str103[100];\n\tchar str104[100];\n\tchar str105[100];\n\tchar str106[100];\n\tchar str107[100];\n\tchar str108[100];\n\tchar str109[100];\n\tchar str110[100];\n\tchar str111[100];\n\tchar str112[100];\n\tchar str113[100];\n\tchar str114[100];\n\tchar str115[100];\n\tchar str116[100];\n\tchar str117[100];\n\tchar str118[100];\n\tchar str119[100];\n\tchar str120[100];\n\tchar str121[100];\n\tchar str122[100];\n\tchar str123[100];\n\tchar str124[100];\n\tchar str125[100];\n\tchar str126[100];\n\tchar str127[100];\n\tchar str128[100];\n\tchar str129[100];\n\tchar str130[100];\n\tchar str131[100];\n\tchar str132[100];\n\tchar str133[100];\n\tchar str134[100];\n\tchar str135[100];\n\tchar str136[100];\n\tchar str137[100];\n\tchar str138[100];\n\tchar str139[100];\n\tchar str140[100];\n\tchar str141[100];\n\tchar str142[100];\n\tchar str143[100];\n\tchar str144[100];\n\tchar str145[100];\n\tchar str146[100];\n\tchar str147[100];\n\tchar str148[100];\n\tchar str149[100];\n\tchar str150[100];\n\tchar str151[100];\n\tchar str152[100];\n\tchar str153[100];\n\tchar str154[100];\n\tchar str155[100];\n\tchar str156[100];\n\tchar str157[100];\n\tchar str158[100];\n\tchar str159[100];\n\tchar str160[100];\n\tchar str161[100];\n\tchar str162[100];\n\tchar str163[100];\n\tchar str164[100];\n\tchar str165[100];\n\tchar str166[100];\n\tchar str167[100];\n\tchar str168[100];\n\tchar str169[100];\n\tchar str170[100];\n\tchar str171[100];\n\tchar str172[100];\n\tchar str173[100];\n\tchar str174[100];\n\tchar str175[100];\n\tchar str176[100];\n\tchar str177[100];\n\tchar str178[100];\n\tchar str179[100];\n\tchar str180[100];\n\tchar str181[100];\n\tchar str182[100];\n\tchar str183[100];\n\tchar str184[100];\n\tchar str185[100];\n\tchar str186[100];\n\tchar str187[100];\n\tchar str188[100];\n\tchar str189[100];\n\tchar str190[100];\n\tchar str191[100];\n\tchar str192[100];\n\tchar str193[100];\n\tchar str194[100];\n\tchar str195[100];\n\tchar str196[100];\n\tchar str197[100];\n\tchar str198[100];\n\tchar str199[100];\n\tchar str200[100];\n\tchar str201[100];\n\tchar str202[100];\n\tchar str203[100];\n\tchar str204[100];\n\tchar str205[100];\n\tchar str206[100];\n\tchar str207[100];\n\tchar str208[100];\n\tchar str209[100];\n\tchar str210[100];\n\tchar str211[100];\n\tchar str212[100];\n\tchar str213[100];\n\tchar str214[100];\n\tchar str215[100];\n\tchar str216[100];\n\tchar str217[100];\n\tchar str218[100];\n\tchar str219[100];\n\tchar str220[100];\n\tchar str221[100];\n\tchar str222[100];\n\tchar str223[100];\n\tchar str224[100];\n\tchar str225[100];\n\tchar str226[100];\n\tchar str227[100];\n\tchar",
            "Extract-Response": "\n\n2685\n\nProcess returned 0 (0x0)   execution time : 0.039 s\nPress any key to continue.\n\n*/"
        },
        {
            "Index": 294,
            "GT": 1800,
            "Query": "6 * 6 * 7 * 7 - 6 * 6 + 8 * 9 - 1 + 1 =   ",
            "Injected CoT": "6 * 6 = 36\n36 * 7 = 252\n252 * 7 = 1764\n6 * 6 = 36\n8 * 9 = 72\n36 + 72 = 108\n1 + 1 = 2\n108 - 2 = 106\n1764 - 106 =",
            "Response": " 1658",
            "Extract-Response": " 1658\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    a
        },
        {
            "Index": 295,
            "GT": 28,
            "Query": "8 - 6 - 6 + 2 - 1 + 4 - 2 + 8 + 3 * 7 =   ",
            "Injected CoT": "3 * 7 = 21\n8 - 6 = 2\n2 - 6 = -4\n-4 + 2 = -2\n-2 - 1 = -3\n-3 + 4 = 1\n1 - 2 = -1\n-1 + 8 = 7\n7 + 21 =",
            "Response": " 28",
            "Extract-Response": "\n\n28"
        },
        {
            "Index": 296,
            "GT": 647,
            "Query": "5 + 4 - 9 + 6 * 1 + 3 * 6 * 4 * 9 - 7 =   ",
            "Injected CoT": "6 * 1 = 6\n3 * 6 = 18\n18 * 4 = 72\n72 * 9 = 648\n5 + 4 = 9\n9 - 9 = 0\n0 + 6 = 6\n648 + 6 = 654\n654 - 7 =",
            "Response": " 647",
            "Extract-Response": " 647\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<string> vs;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define foru(i,a,b) for(int i = int(a); i <= int(b); ++i)\n#define ford(i,b,a) for(int i = int(b); i >= int(a); --i)\n#define rep(i, n) for(int i = 0; i < int(n); ++i)\n#define all(a) a.begin(),a.end()\n#define size(a) int(a.size())\n#define fill(a,x) memset(a, (x), sizeof(a))\n#define mp(x,y) make_pair((x), (y))\n#define pb(x) push_back((x))\n#define fr first\n#define sc second\n#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)\n\nint read() {   int x;   scanf(\"%d\",&x);   return x;   }\nint read(int &x) {  scanf(\"%d\",&x);     return x;   }\nint readln() {  int x;  scanf(\"%d\\n\",&x);   return x;   }\nint readln(int &x) {   scanf(\"%d\\n\",&x);   return x;   }\n\nconst int MAX_N = 100010;\nconst int oo = 1000000000;\n\nint n, m, k;\nint a[MAX_N], b[MAX_N];\nint f[MAX_N];\n\nint main() {\n#ifndef ONLINE_JUDGE\n   freopen(\"1009.in\", \"r\", stdin);\n   freopen(\"1009.out\", \"w\", stdout);\n#endif\n   scanf(\"%d%d%d\", &n, &m, &k);\n   foru(i, 1, n) scanf(\"%d\", &a[i]);\n   foru(i, 1, m) scanf(\"%d\", &b[i]);\n   fill(f, 0);\n   foru(i, 1, n) {\n      int x = a[i];\n      foru(j, 1, m)\n         if (b[j] == x) {\n            f[j] = max(f[j], f[j-1]+1);\n            break;\n         }\n   }\n\n   int res = 0;\n   foru(i, 1, m) res = max(res, f[i]);\n   printf(\"%d\\n\", res);\n   return 0;\n}"
        },
        {
            "Index": 297,
            "GT": -16,
            "Query": "2 + 6 + 2 * 4 + 2 + 5 - 7 * 5 - 4 * 1 =   ",
            "Injected CoT": "2 + 6 = 8\n2 * 4 = 8\n8 + 8 = 16\n16 + 2 = 18\n18 + 5 = 23\n7 * 5 = 35\n4 * 1 = 4\n35 + 4 = 39\n23 - 39 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int num = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    num = num * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + num * sign;\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 299,
            "GT": 61,
            "Query": "9 * 8 + 1 + 7 + 9 + 3 - 2 - 3 * 8 - 5 =   ",
            "Injected CoT": "9 * 8 = 72\n72 + 1 = 73\n73 + 7 = 80\n80 + 9 = 89\n89 + 3 = 92\n3 * 8 = 24\n92 - 2 = 90\n90 - 24 = 66\n66 - 5 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int addStrings(string num1, string num2) {\n        int i = num1.size() - 1;\n        int j = num2.size() - 1;\n        int carry = 0;\n        string res = \"\";\n        while(i >= 0 || j >= 0 || carry) {\n            int a = i >= 0 ? num1[i--] - '0' : 0;\n            int b = j >= 0 ? num2[j--] - '0' : 0;\n            int sum = a + b + carry;\n            carry = sum / 10;\n            res = to_string(sum % 10) + res;\n        }\n        return stoi(res);\n    }\n};"
        },
        {
            "Index": 301,
            "GT": 60,
            "Query": "6 * 9 + 1 - 3 * 4 + 6 - 1 + 7 - 3 + 8 =   ",
            "Injected CoT": "6 * 9 = 54\n54 + 1 = 55\n3 * 4 = 12\n55 - 12 = 43\n43 + 6 = 49\n49 - 1 = 48\n48 + 7 = 55\n55 - 3 = 52\n52 + 8 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 302,
            "GT": 243,
            "Query": "2 + 3 + 4 + 8 * 4 * 1 * 7 + 7 - 5 + 8 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 7 = 56\n2 + 3 = 5\n5 + 4 = 9\n9 + 56 = 65\n65 + 7 = 72\n72 - 5 = 67\n67 + 8 =",
            "Response": " 75\n\n75",
            "Extract-Response": " 75\n\n*/"
        },
        {
            "Index": 304,
            "GT": 0,
            "Query": "9 * 1 - 2 * 3 * 9 + 5 * 7 + 4 * 4 - 6 =   ",
            "Injected CoT": "9 * 1 = 9\n2 * 3 = 6\n6 * 9 = 54\n5 * 7 = 35\n4 * 4 = 16\n9 - 54 = -45\n-45 + 35 = -10\n-10 + 16 = 6\n6 - 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 305,
            "GT": 2,
            "Query": "8 - 8 * 6 - 3 + 7 * 8 - 3 - 6 - 8 + 6 =   ",
            "Injected CoT": "8 * 6 = 48\n8 - 48 = -40\n-40 - 3 = -43\n7 * 8 = 56\n-43 + 56 = 13\n13 - 3 = 10\n10 - 6 = 4\n4 - 8 = -4\n-4 + 6 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 308,
            "GT": -11,
            "Query": "1 - 9 + 2 - 4 * 3 + 3 + 6 + 2 - 6 + 2 =   ",
            "Injected CoT": "-4 * 3 = -12\n1 - 9 + 2 - 12 + 3 + 6 + 2 - 6 + 2 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 309,
            "GT": -42,
            "Query": "1 + 1 - 1 + 8 - 3 + 4 - 8 * 8 + 4 * 3 =   ",
            "Injected CoT": "8 * 8 = 64\n4 * 3 = 12\n1 + 1 = 2\n2 - 1 = 1\n1 + 8 = 9\n9 - 3 = 6\n6 + 4 = 10\n10 - 64 = -54\n-54 + 12 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nNote:\nThe expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 312,
            "GT": -40,
            "Query": "8 - 5 - 3 - 6 * 5 - 5 + 6 - 7 - 1 * 4 =   ",
            "Injected CoT": "6 * 5 = 30\n8 - 5 - 3 - 30 - 5 + 6 - 7 - 1 * 4 =",
            "Response": "    \n30 - 5 + 6 - 7 - 1 * 4 =    \n30 + 6 - 7 - 1 * 4 =    \n30 + 6 - 7 - 4 =    \n30 + 6 - 11 =    \n30 - 5 =    \n25",
            "Extract-Response": "\n25"
        },
        {
            "Index": 313,
            "GT": 7,
            "Query": "8 - 6 + 9 * 2 - 5 * 1 - 1 + 4 - 2 - 9 =   ",
            "Injected CoT": "9 * 2 = 18\n5 * 1 = 5\n8 - 6 = 2\n2 + 18 = 20\n20 - 5 = 15\n15 - 1 = 14\n14 + 4 = 18\n18 - 2 = 16\n16 - 9 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 316,
            "GT": 19,
            "Query": "9 - 4 - 6 + 1 + 7 + 9 + 5 + 1 + 5 - 8 =   ",
            "Injected CoT": "-4 - 6 = -10\n-10 + 1 = -9\n-9 + 7 = -2\n-2 + 9 = 7\n7 + 5 = 12\n12 + 1 = 13\n13 + 5 = 18\n18 - 8 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 320,
            "GT": -41,
            "Query": "2 - 7 * 5 + 4 - 1 - 7 + 3 + 5 - 3 * 4 =   ",
            "Injected CoT": "7 * 5 = 35\n2 - 35 = -33\n-33 + 4 = -29\n-29 - 1 = -30\n-30 - 7 = -37\n-37 + 3 = -34\n-34 + 5 = -29\n3 * 4 = 12\n-29 - 12 =",
            "Response": " -41",
            "Extract-Response": " -41.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 322,
            "GT": 98,
            "Query": "4 - 1 + 8 - 6 + 7 * 3 + 4 * 8 + 8 * 5 =   ",
            "Injected CoT": "7 * 3 = 21\n4 * 8 = 32\n8 * 5 = 40\n4 - 1 = 3\n3 + 8 = 11\n11 - 6 = 5\n5 + 21 = 26\n26 + 32 = 58\n58 + 40 =",
            "Response": " 98",
            "Extract-Response": " 98.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 324,
            "GT": 30,
            "Query": "9 + 9 + 3 - 3 * 2 + 1 * 2 * 7 * 1 + 1 =   ",
            "Injected CoT": "3 * 2 = 6\n9 + 9 = 18\n18 + 3 = 21\n21 - 6 = 15\n1 * 2 = 2\n2 * 7 = 14\n14 * 1 = 14\n15 + 14 = 29\n29 + 1 =",
            "Response": " 30",
            "Extract-Response": "\n30\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 325,
            "GT": -39,
            "Query": "8 - 4 * 6 + 2 * 1 - 1 - 7 - 2 * 6 - 5 =   ",
            "Injected CoT": "4 * 6 = 24\n8 - 24 = -16\n2 * 1 = 2\n-16 + 2 = -14\n-1 - 7 = -8\n2 * 6 = 12\n-14 - 12 = -26\n-26 - 5 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 326,
            "GT": -49,
            "Query": "9 - 2 * 6 - 1 - 4 * 9 - 1 * 8 - 7 + 6 =   ",
            "Injected CoT": "2 * 6 = 12\n4 * 9 = 36\n1 * 8 = 8\n9 - 12 = -3\n-3 - 1 = -4\n-4 - 36 = -40\n-40 - 8 = -48\n-48 - 7 = -55\n-55 + 6 =",
            "Response": " -49",
            "Extract-Response": " -49.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 327,
            "GT": 24,
            "Query": "9 - 1 + 6 + 3 * 6 - 2 - 8 + 4 + 3 - 5 =   ",
            "Injected CoT": "3 * 6 = 18\n9 - 1 = 8\n8 + 6 = 14\n14 + 18 = 32\n32 - 2 = 30\n30 - 8 = 22\n22 + 4 = 26\n26 + 3 = 29\n29 - 5 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 328,
            "GT": -156,
            "Query": "4 - 4 * 4 * 9 - 7 - 7 - 7 - 1 + 9 - 3 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 9 = 144\n4 - 144 = -140\n-140 - 7 = -147\n-147 - 7 = -154\n-154 - 7 = -161\n-161 - 1 = -162\n-162 + 9 = -153\n-153 - 3 =",
            "Response": " -156",
            "Extract-Response": " -156.\n\nNote:\nThere will be at most 15 operations.\n4 <= A.length <= 10000\n0 <= A[i] <= 9\n0 <= K <= 10000\nIf A.length > 1, then A[0] != 0\n*/\n\nclass Solution {\npublic:\n    string addToArrayForm(vector<int>& A, int K) {\n        string res;\n        int carry = 0;\n        for (int i = A.size() - 1; i >= 0; --i) {\n            int sum = A[i] + K % 10 + carry;\n            carry = sum / 10;\n            res.push_back(sum % 10 + '0');\n            K /= 10;\n        }\n        while (K) {\n            int sum = K % 10 + carry;\n            carry = sum / 10;\n            res.push_back(sum % 10 + '0');\n            K /= 10;\n        }\n        if (carry) res.push_back(carry + '0');\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};"
        },
        {
            "Index": 329,
            "GT": -35,
            "Query": "1 - 7 * 3 * 4 + 6 + 7 * 6 * 1 - 7 + 7 =   ",
            "Injected CoT": "-7 * 3 = -21\n-21 * 4 = -84\n1 - 84 = -83\n-7 * 6 = -42\n-42 * 1 = -42\n-83 + 6 = -77\n7 * 6 = 42\n-7 + 42 = 35\n-77 + 35 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 331,
            "GT": 60,
            "Query": "8 * 8 - 2 + 8 - 9 - 3 - 4 * 3 + 7 + 7 =   ",
            "Injected CoT": "8 * 8 = 64\n64 - 2 = 62\n62 + 8 = 70\n70 - 9 = 61\n61 - 3 = 58\n4 * 3 = 12\n58 - 12 = 46\n46 + 7 = 53\n53 + 7 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 332,
            "GT": 67,
            "Query": "1 + 4 + 7 + 3 + 5 + 1 + 6 * 7 + 1 * 4 =   ",
            "Injected CoT": "6 * 7 = 42\n1 * 4 = 4\n1 + 4 = 5\n5 + 7 = 12\n12 + 3 = 15\n15 + 5 = 20\n20 + 1 = 21\n21 + 42 = 63\n63 + 4 =",
            "Response": " 67\n67 + 5 = 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 0"
        },
        {
            "Index": 333,
            "GT": 615,
            "Query": "4 * 1 + 9 * 7 * 9 + 5 * 1 + 4 + 7 * 5 =   ",
            "Injected CoT": "4 * 1 = 4\n9 * 7 = 63\n63 * 9 = 567\n5 * 1 = 5\n7 * 5 = 35\n567 + 5 = 572\n572 + 4 = 576\n576 + 35 =",
            "Response": " 611\n611 is the answer.\n",
            "Extract-Response": "\n\n611"
        },
        {
            "Index": 334,
            "GT": 42,
            "Query": "5 * 2 * 3 - 6 + 6 - 5 + 5 + 9 + 2 + 1 =   ",
            "Injected CoT": "5 * 2 = 10\n10 * 3 = 30\n30 - 6 = 24\n24 + 6 = 30\n30 - 5 = 25\n25 + 5 = 30\n30 + 9 = 39\n39 + 2 = 41\n41 + 1 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 335,
            "GT": -25,
            "Query": "6 * 3 * 1 - 6 - 8 * 1 - 7 * 5 + 9 - 3 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 1 = 18\n18 - 6 = 12\n8 * 1 = 8\n7 * 5 = 35\n8 - 35 = -27\n9 - 3 = 6\n12 - 27 = -15\n-15 + 6 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nYou may assume that the expression is always valid.\nDo not use the eval built-in library function.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0') {\n                    num = num * 10 + s[i++] - '0';\n                }\n                res += sign * num;\n                --i;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 336,
            "GT": -34,
            "Query": "4 - 8 * 2 - 9 - 7 + 4 + 1 * 8 - 6 * 3 =   ",
            "Injected CoT": "8 * 2 = 16\n4 - 16 = -12\n-12 - 9 = -21\n-21 - 7 = -28\n-28 + 4 = -24\n-24 + 1 * 8 = -16\n6 * 3 = 18\n-16 - 18 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 337,
            "GT": -28,
            "Query": "8 + 5 - 9 * 2 - 1 - 6 - 5 * 3 - 1 * 1 =   ",
            "Injected CoT": "9 * 2 = 18\n5 * 3 = 15\n1 * 1 = 1\n8 + 5 = 13\n13 - 18 = -5\n-5 - 1 = -6\n-6 - 6 = -12\n-12 - 15 =",
            "Response": " -27\n-27 - 1 = -28",
            "Extract-Response": " -28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + (c - '0') * sign;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 338,
            "GT": 140,
            "Query": "2 - 2 + 4 * 3 * 5 + 8 + 3 * 3 + 7 * 9 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 5 = 60\n3 * 3 = 9\n7 * 9 = 63\n2 - 2 = 0\n0 + 60 = 60\n60 + 8 = 68\n68 + 9 = 77\n77 + 63 =",
            "Response": " 140\n\n2 - 2 + 4 * 3 * 5 + 8 + 3 * 3 + 7 * 9 = 140",
            "Extract-Response": "\n\n2 - 2 + 4 * 3 * 5 + 8 + 3 * 3 + 7 * 9 = 140"
        },
        {
            "Index": 340,
            "GT": -372,
            "Query": "4 - 5 * 8 * 9 - 4 * 4 * 1 + 2 - 9 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 4 = 16\n40 * 9 = 360\n16 * 1 = 16\n360 - 16 = 344\n4 - 344 = -340\n-340 + 2 = -338\n-338 - 9 = -347\n-347 + 7 =",
            "Response": " -340",
            "Extract-Response": " -340.\n\nNote:\n\nThere will only be '+', '-', '*', '/' operators considered for this kata.\nThe input numbers in the expression will be in the range [1, 10]\n\n*/\n\nfunction calculate(num1, operator, num2) {\n    switch (operator) {\n        case '+':\n            return num1 + num2;\n        case '-':\n            return num1 - num2;\n        case '*':\n            return num1 * num2;\n        case '/':\n            return num1 / num2;\n    }\n}\n\nfunction calculateExpression(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression2(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions2(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression2(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression3(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions3(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression3(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression4(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions4(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression4(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression5(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions5(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression5(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression6(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions6(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression6(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression7(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions7(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression7(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression8(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions8(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression8(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression9(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length; i += 2) {\n        num1 = result;\n        operator = expression[i];\n        num2 = parseInt(expression[i + 1]);\n        result = calculate(num1, operator, num2);\n    }\n    return result;\n}\n\nfunction calculateExpressions9(expressions) {\n    let results = [];\n    for (let i = 0; i < expressions.length; i++) {\n        results.push(calculateExpression9(expressions[i]));\n    }\n    return results;\n}\n\nfunction calculateExpression10(expression) {\n    let num1 = parseInt(expression[0]);\n    let operator = expression[1];\n    let num2 = parseInt(expression[2]);\n    let result = calculate(num1, operator, num2);\n    for (let i = 3; i < expression.length;"
        },
        {
            "Index": 341,
            "GT": 30,
            "Query": "9 - 8 * 1 + 8 * 6 + 5 - 6 * 6 + 3 * 4 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 8 = 1\n8 * 6 = 48\n1 + 48 = 49\n6 * 6 = 36\n5 - 36 = -31\n3 * 4 = 12\n-31 + 12 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 345,
            "GT": 51,
            "Query": "6 + 8 - 2 + 7 - 6 + 9 * 2 + 4 + 2 * 8 =   ",
            "Injected CoT": "9 * 2 = 18\n2 * 8 = 16\n6 + 8 = 14\n14 - 2 = 12\n12 + 7 = 19\n19 - 6 = 13\n13 + 18 = 31\n31 + 4 = 35\n35 + 16 =",
            "Response": " 51",
            "Extract-Response": "\n\n51"
        },
        {
            "Index": 346,
            "GT": -79,
            "Query": "4 - 7 * 3 - 6 + 9 - 1 + 8 - 8 * 8 - 8 =   ",
            "Injected CoT": "-7 * 3 = -21\n4 - (-21) = 25\n25 + 9 = 34\n34 - 1 = 33\n33 + 8 = 41\n-8 * 8 = -64\n41 - (-64) = 105\n105 - 8 =",
            "Response": " 97",
            "Extract-Response": " 97\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else {\n                result -= currentNumber;\n            }\n            currentNumber = 0;\n            currentSign = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else {\n        result -= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 347,
            "GT": -82,
            "Query": "2 * 8 * 2 + 5 - 8 * 9 + 4 + 5 - 8 * 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 * 2 = 32\n32 + 5 = 37\n8 * 9 = 72\n72 - 37 = 35\n4 + 5 = 9\n8 * 7 = 56\n35 - 9 = 26\n26 - 56 =",
            "Response": " -30",
            "Extract-Response": " -30\n</code>\n"
        },
        {
            "Index": 352,
            "GT": 95,
            "Query": "2 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =   ",
            "Injected CoT": "9 * 6 = 54\n6 * 7 = 42\n2 - 1 = 1\n1 - 9 = -8\n-8 + 54 = 46\n46 + 42 = 88\n88 + 8 = 96\n96 - 5 = 91\n91 + 4 =",
            "Response": " 95",
            "Extract-Response": "\n\n95"
        },
        {
            "Index": 354,
            "GT": 12,
            "Query": "9 + 2 * 1 * 4 - 8 + 2 - 7 * 1 + 2 + 6 =   ",
            "Injected CoT": "2 * 1 = 2\n2 * 4 = 8\n9 + 8 = 17\n17 - 8 = 9\n9 + 2 = 11\n11 - 7 = 4\n4 + 2 = 6\n6 + 6 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 359,
            "GT": -390,
            "Query": "2 - 3 * 1 - 9 * 1 + 9 + 3 - 7 * 8 * 7 =   ",
            "Injected CoT": "3 * 1 = 3\n9 * 1 = 9\n7 * 8 = 56\n56 * 7 = 392\n2 - 3 = -1\n-1 - 9 = -10\n-10 + 9 = -1\n-1 + 3 = 2\n2 - 392 =",
            "Response": " -390",
            "Extract-Response": " -390.\n\nNote:\nThe input is always valid. Try to come up with a fast algorithm.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && isPrior(ops.top(), s[i])) {\n                    int n2 = nums.top();\n                    nums.pop();\n                    int n1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    nums.push(calc(n1, n2, op));\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        nums.push(num);\n        while (!ops.empty()) {\n            int n2 = nums.top();\n            nums.pop();\n            int n1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            nums.push(calc(n1, n2, op));\n        }\n        return nums.top();\n    }\n    \n    bool isPrior(char op1, char op2) {\n        if (op1 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int calc(int n1, int n2, char op) {\n        switch (op) {\n            case '+': return n1 + n2;\n            case '-': return n1 - n2;\n            case '*': return n1 * n2;\n            case '/': return n1 / n2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 360,
            "GT": -6,
            "Query": "1 * 1 + 1 * 1 - 7 * 2 - 6 + 3 + 4 + 5 =   ",
            "Injected CoT": "1 * 1 = 1\n1 * 1 = 1\n1 + 1 = 2\n7 * 2 = 14\n2 - 14 = -12\n-12 - 6 = -18\n-18 + 3 = -15\n-15 + 4 = -11\n-11 + 5 =",
            "Response": " -6\n\n1 * 1 + 1 * 1 - 7 * 2 - 6 + 3 + 4 + 5 = -6",
            "Extract-Response": " -6.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 1000.\nEach node in the tree has a distinct value between -1000 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int &maxSum) {\n        if(root == nullptr) {\n            return 0;\n        }\n        \n        int left = maxPathSumHelper(root->left, maxSum);\n        int right = maxPathSumHelper(root->right, maxSum);\n        \n        int currSum = root->val;\n        if(left > 0) {\n            currSum += left;\n        }\n        if(right > 0) {\n            currSum += right;\n        }\n        \n        maxSum = max(maxSum, currSum);\n        \n        return max(root->val, max(root->val + left, root->val + right));\n    }\n};"
        },
        {
            "Index": 364,
            "GT": 41,
            "Query": "8 * 7 + 5 + 6 - 2 - 1 - 6 * 4 + 2 - 1 =   ",
            "Injected CoT": "8 * 7 = 56\n56 + 5 = 61\n61 + 6 = 67\n67 - 2 = 65\n65 - 1 = 64\n6 * 4 = 24\n64 - 24 = 40\n40 + 2 = 42\n42 - 1 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if (ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if (ops[i] == \"+\") {\n                v.push_back(v[v.size() - 2] + v[v.size() - 1]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 365,
            "GT": -455,
            "Query": "9 - 5 - 8 * 8 * 7 - 5 * 2 + 2 - 3 * 1 =   ",
            "Injected CoT": "8 * 7 = 56\n-5 * 2 = -10\n9 - 5 = 4\n56 * 8 = 448\n448 - 10 = 438\n438 + 2 = 440\n3 * 1 = 3\n440 - 3 =",
            "Response": " 437\n\n4 - 3 * 2 + 1 =\n3 * 2 = 6\n4 - 6 = -2\n-2 + 1 = -1",
            "Extract-Response": " -1"
        },
        {
            "Index": 367,
            "GT": -12,
            "Query": "4 + 7 * 1 - 9 + 9 - 8 + 7 - 8 - 5 - 9 =   ",
            "Injected CoT": "7 * 1 = 7\n4 + 7 = 11\n11 - 9 = 2\n2 + 9 = 11\n11 - 8 = 3\n3 + 7 = 10\n10 - 8 = 2\n2 - 5 = -3\n-3 - 9 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        maxSum = nums[0]\n        curSum = 0\n        for i in range(len(nums)):\n            curSum += nums[i]\n            if curSum > maxSum:\n                maxSum = curSum\n            if curSum < 0:\n                curSum = 0\n        return maxSum"
        },
        {
            "Index": 368,
            "GT": -21,
            "Query": "3 + 8 + 9 * 1 - 3 * 8 - 5 * 3 - 7 + 5 =   ",
            "Injected CoT": "9 * 1 = 9\n3 + 8 = 11\n11 + 9 = 20\n3 * 8 = 24\n5 * 3 = 15\n24 + 15 = 39\n39 - 7 = 32\n32 + 5 = 37\n37 - 5 =",
            "Response": " 32\n32 - 3 = 29\n29 + 8 = 37\n37 - 11 = 26\n26 + 9 = 35\n35 - 3 = 32\n32 - 5 = 27\n27 + 8 = 35\n35 - 11 = 24\n24 + 9 = 33\n33 - 3 = 30\n30 - 5 = 25\n25 + 8 = 33\n33 - 11 = 22\n22 + 9 = 31\n31 - 3 = 28\n28 - 5 = 23\n23 + 8 = 31\n31 - 11 = 20\n20 + 9 = 29\n29 - 3 = 26\n26 - 5 = 21\n21 + 8 = 29\n29 - 11 = 18\n18 + 9 = 27\n27 - 3 = 24\n24 - 5 = 19\n19 + 8 = 27\n27 - 11 = 16\n16 + 9 = 25\n25 - 3 = 22\n22 - 5 = 17\n17 + 8 = 25\n25 - 11 = 14\n14 + 9 = 23\n23 - 3 = 20\n20 - 5 = 15\n15 + 8 = 23\n23 - 11 = 12\n12 + 9 = 21\n21 - 3 = 18\n18 - 5 = 13\n13 + 8 = 21\n21 - 11 = 10\n10 + 9 = 19\n19 - 3 = 16\n16 - 5 = 11\n11 + 8 = 19\n19 - 11 = 8\n8 + 9 = 17\n17 - 3 = 14\n14 - 5 = 9\n9 + 8 = 17\n17 - 11 = 6\n6 + 9 = 15\n15 - 3 = 12\n12 - 5 = 7\n7 + 8 = 15\n15 - 11 = 4\n4 + 9 = 13\n13 - 3 = 10\n10 - 5 = 5\n5 + 8 = 13\n13 - 11 = 2\n2 + 9 = 11\n11 - 3 = 8\n8 - 5 = 3\n3 + 8 = 11\n11 - 11 = 0",
            "Extract-Response": " 0"
        },
        {
            "Index": 370,
            "GT": 335,
            "Query": "1 * 2 - 2 + 6 * 7 * 8 - 8 - 1 + 4 * 2 =   ",
            "Injected CoT": "1 * 2 = 2\n6 * 7 = 42\n42 * 8 = 336\n4 * 2 = 8\n2 - 2 = 0\n336 - 8 = 328\n328 - 1 = 327\n327 + 0 =",
            "Response": " 327",
            "Extract-Response": " 327\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <numeric>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * number;\n            sign = (s[i] == '+') ? 1 : -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            number *= s[++i] - '0';\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 371,
            "GT": -31,
            "Query": "8 - 7 * 3 - 5 * 2 - 6 + 5 - 6 * 1 - 1 =   ",
            "Injected CoT": "7 * 3 = 21\n5 * 2 = 10\n6 * 1 = 6\n8 - 21 = -13\n-13 - 10 = -23\n-23 - 6 = -29\n-29 + 5 = -24\n-24 - 1 =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\n\nThe number of nodes in the tree is between 2 and 1000.\nEach node in the tree has a distinct value between 1 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        int sum = 0;\n        if(root == NULL)\n            return sum;\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()) {\n            TreeNode* cur = q.front();\n            q.pop();\n            if(cur->left) {\n                if(cur->val % 2 == 0) {\n                    if(cur->left->left)\n                        sum += cur->left->left->val;\n                    if(cur->left->right)\n                        sum += cur->left->right->val;\n                }\n                q.push(cur->left);\n            }\n            if(cur->right) {\n                if(cur->val % 2 == 0) {\n                    if(cur->right->left)\n                        sum += cur->right->left->val;\n                    if(cur->right->right)\n                        sum += cur->right->right->val;\n                }\n                q.push(cur->right);\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 374,
            "GT": 52,
            "Query": "6 * 7 * 3 - 2 * 4 + 4 + 2 * 1 - 9 * 8 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 3 = 126\n2 * 4 = 8\n1 * 2 = 2\n9 * 8 = 72\n126 - 8 = 118\n118 + 2 = 120\n120 - 72 =",
            "Response": " 48",
            "Extract-Response": " 48.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 375,
            "GT": 153,
            "Query": "7 * 2 + 5 + 1 + 2 * 9 * 7 + 1 * 4 + 3 =   ",
            "Injected CoT": "7 * 2 = 14\n2 * 9 = 18\n18 * 7 = 126\n1 * 4 = 4\n14 + 5 = 19\n19 + 1 = 20\n126 + 4 = 130\n20 + 130 = 150\n150 + 3 =",
            "Response": " 153\n\n153 is the answer.",
            "Extract-Response": " 153.\n\n153 is the answer."
        },
        {
            "Index": 376,
            "GT": 18,
            "Query": "5 * 3 + 1 * 9 + 8 - 4 * 1 - 1 - 5 - 4 =   ",
            "Injected CoT": "5 * 3 = 15\n1 * 9 = 9\n4 * 1 = 4\n15 + 9 = 24\n24 + 8 = 32\n32 - 4 = 28\n28 - 1 = 27\n27 - 5 = 22\n22 - 4 =",
            "Response": " 18\n\n18 is the answer.",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 378,
            "GT": 8751,
            "Query": "6 + 7 + 9 * 9 * 6 * 6 * 3 - 4 - 4 - 2 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 6 = 324\n324 * 3 = 972\n6 + 7 = 13\n13 + 972 = 985\n985 - 4 = 981\n981 - 4 = 977\n977 - 2 =",
            "Response": " 975\n\n975",
            "Extract-Response": "\n\n975"
        },
        {
            "Index": 379,
            "GT": -39,
            "Query": "8 - 6 - 6 - 3 - 1 - 4 - 3 * 7 - 2 - 4 =   ",
            "Injected CoT": "3 * 7 = 21\n8 - 6 = 2\n2 - 6 = -4\n-4 - 3 = -7\n-7 - 1 = -8\n-8 - 4 = -12\n-12 - 21 = -33\n-33 - 2 =",
            "Response": " -35\n-35 - 4 = -39\n\n-39",
            "Extract-Response": " -39\n\n*/"
        },
        {
            "Index": 382,
            "GT": -9,
            "Query": "4 + 6 - 2 * 6 + 7 + 8 + 8 - 4 * 6 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n4 + 6 - 12 + 7 + 8 + 8 - 4 * 6 - 6 = \n-4 * 6 = -24\n4 + 6 - 12 + 7 + 8 + 8 - 24 - 6 = \n4 + 6 = 10\n10 - 12 = -2\n-2 + 7 = 5\n5 + 8 = 13\n13 + 8 = 21\n21 - 24 = -3\n-3 - 6 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 383,
            "GT": -47,
            "Query": "1 * 4 - 7 * 8 - 2 * 9 * 1 + 5 + 9 * 2 =   ",
            "Injected CoT": "1 * 4 = 4\n7 * 8 = 56\n9 * 1 = 9\n2 * 9 = 18\n18 * 1 = 18\n18 * 2 = 36\n2 * 9 * 1 = 18\n18 - 56 = -38\n-38 - 18 = -56\n-56 + 4 = -52\n-52 + 5 = -47\n-47 + 9 * 2 =",
            "Response": " -47 + 18 = -29",
            "Extract-Response": " -29.\n\nNote:\n\nThe number of given equations will be in the range [1, 1000].\nThe number of given variables will be in the range [1, 1000].\nEach answer is guaranteed to be unique.\n*/\n\nclass Solution {\npublic:\n    int calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {\n        unordered_map<string, unordered_map<string, double>> m;\n        for (int i = 0; i < equations.size(); ++i) {\n            m[equations[i].first][equations[i].second] = values[i];\n            if (values[i] != 0) m[equations[i].second][equations[i].first] = 1 / values[i];\n        }\n        vector<double> res;\n        for (auto &a : queries) {\n            unordered_set<string> visited;\n            double t = dfs(a.first, a.second, m, visited);\n            res.push_back(t ? t : -1);\n        }\n        return res;\n    }\n    double dfs(string up, string down, unordered_map<string, unordered_map<string, double>> &m, unordered_set<string> &visited) {\n        if (m[up].count(down)) return m[up][down];\n        for (auto a : m[up]) {\n            if (!visited.count(a.first)) {\n                visited.insert(a.first);\n                double t = dfs(a.first, down, m, visited);\n                if (t) return t * a.second;\n            }\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 387,
            "GT": -8,
            "Query": "5 * 8 + 2 + 4 * 2 - 8 + 3 - 5 - 6 * 8 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 2 = 8\n6 * 8 = 48\n40 + 2 = 42\n42 + 8 = 50\n50 - 8 = 42\n42 + 3 = 45\n45 - 5 = 40\n40 - 48 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 388,
            "GT": -19,
            "Query": "9 + 2 - 7 - 2 + 2 - 5 - 9 - 2 - 2 - 5 =   ",
            "Injected CoT": "9 + 2 = 11\n11 - 7 = 4\n4 - 2 = 2\n2 + 2 = 4\n4 - 5 = -1\n-1 - 9 = -10\n-10 - 2 = -12\n-12 - 2 = -14\n-14 - 5 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = nums[0];\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 389,
            "GT": 51,
            "Query": "3 + 9 + 6 * 4 + 3 + 3 + 7 * 1 - 5 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n7 * 1 = 7\n3 + 3 = 6\n9 + 24 = 33\n33 + 3 = 36\n36 + 7 = 43\n43 - 5 = 38\n38 + 7 = 45\n3 + 9 = 12\n12 + 45 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 390,
            "GT": 85,
            "Query": "8 * 6 + 9 - 5 + 3 * 1 * 5 - 7 + 5 * 5 =   ",
            "Injected CoT": "8 * 6 = 48\n3 * 1 = 3\n3 * 5 = 15\n48 + 9 = 57\n57 - 5 = 52\n52 + 15 = 67\n5 * 5 = 25\n67 + 25 = 92\n92 - 7 =",
            "Response": " 85\n85 + 5 = 90",
            "Extract-Response": " 90\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define inf 1061109567\n#define eps 1e-9\n#define pi acos(-1)\n#define F first\n#define S second\n#define pb push_back\n\nint main(){\n    int n;\n    cin >> n;\n    int a[n];\n    for(int i=0; i < n; i++)\n        cin >> a[i];\n    int ans = 0;\n    for(int i=0; i < n; i++){\n        int cur = a[i];\n        for(int j=i+1; j < n; j++){\n            cur += a[j];\n            if(cur%10 == 0)\n                ans++;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}"
        },
        {
            "Index": 391,
            "GT": 3476,
            "Query": "3 * 4 - 5 - 3 + 8 + 9 * 6 * 8 * 8 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n9 * 6 = 54\n54 * 8 = 432\n432 * 8 = 3456\n12 - 5 = 7\n7 - 3 = 4\n4 + 8 = 12\n3456 + 9 = 3465\n3465 * 12 = 41580\n41580 + 8 =",
            "Response": " 41588",
            "Extract-Response": " 41588\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int sum = 0;\n    int num[MAX_SIZE];\n    int num1[MAX_SIZE];\n    int num2[MAX_SIZE];\n    int num3[MAX_SIZE];\n    int num4[MAX_SIZE];\n    int num5[MAX_SIZE];\n    int num6[MAX_SIZE];\n    int num7[MAX_SIZE];\n    int num8[MAX_SIZE];\n    int num9[MAX_SIZE];\n    int num10[MAX_SIZE];\n    int num11[MAX_SIZE];\n    int num12[MAX_SIZE];\n    int num13[MAX_SIZE];\n    int num14[MAX_SIZE];\n    int num15[MAX_SIZE];\n    int num16[MAX_SIZE];\n    int num17[MAX_SIZE];\n    int num18[MAX_SIZE];\n    int num19[MAX_SIZE];\n    int num20[MAX_SIZE];\n    int num21[MAX_SIZE];\n    int num22[MAX_SIZE];\n    int num23[MAX_SIZE];\n    int num24[MAX_SIZE];\n    int num25[MAX_SIZE];\n    int num26[MAX_SIZE];\n    int num27[MAX_SIZE];\n    int num28[MAX_SIZE];\n    int num29[MAX_SIZE];\n    int num30[MAX_SIZE];\n    int num31[MAX_SIZE];\n    int num32[MAX_SIZE];\n    int num33[MAX_SIZE];\n    int num34[MAX_SIZE];\n    int num35[MAX_SIZE];\n    int num36[MAX_SIZE];\n    int num37[MAX_SIZE];\n    int num38[MAX_SIZE];\n    int num39[MAX_SIZE];\n    int num40[MAX_SIZE];\n    int num41[MAX_SIZE];\n    int num42[MAX_SIZE];\n    int num43[MAX_SIZE];\n    int num44[MAX_SIZE];\n    int num45[MAX_SIZE];\n    int num46[MAX_SIZE];\n    int num47[MAX_SIZE];\n    int num48[MAX_SIZE];\n    int num49[MAX_SIZE];\n    int num50[MAX_SIZE];\n    int num51[MAX_SIZE];\n    int num52[MAX_SIZE];\n    int num53[MAX_SIZE];\n    int num54[MAX_SIZE];\n    int num55[MAX_SIZE];\n    int num56[MAX_SIZE];\n    int num57[MAX_SIZE];\n    int num58[MAX_SIZE];\n    int num59[MAX_SIZE];\n    int num60[MAX_SIZE];\n    int num61[MAX_SIZE];\n    int num62[MAX_SIZE];\n    int num63[MAX_SIZE];\n    int num64[MAX_SIZE];\n    int num65[MAX_SIZE];\n    int num66[MAX_SIZE];\n    int num67[MAX_SIZE];\n    int num68[MAX_SIZE];\n    int num69[MAX_SIZE];\n    int num70[MAX_SIZE];\n    int num71[MAX_SIZE];\n    int num72[MAX_SIZE];\n    int num73[MAX_SIZE];\n    int num74[MAX_SIZE];\n    int num75[MAX_SIZE];\n    int num76[MAX_SIZE];\n    int num77[MAX_SIZE];\n    int num78[MAX_SIZE];\n    int num79[MAX_SIZE];\n    int num80[MAX_SIZE];\n    int num81[MAX_SIZE];\n    int num82[MAX_SIZE];\n    int num83[MAX_SIZE];\n    int num84[MAX_SIZE];\n    int num85[MAX_SIZE];\n    int num86[MAX_SIZE];\n    int num87[MAX_SIZE];\n    int num88[MAX_SIZE];\n    int num89[MAX_SIZE];\n    int num90[MAX_SIZE];\n    int num91[MAX_SIZE];\n    int num92[MAX_SIZE];\n    int num93[MAX_SIZE];\n    int num94[MAX_SIZE];\n    int num95[MAX_SIZE];\n    int num96[MAX_SIZE];\n    int num97[MAX_SIZE];\n    int num98[MAX_SIZE];\n    int num99[MAX_SIZE];\n    int num100[MAX_SIZE];\n    int num101[MAX_SIZE];\n    int num102[MAX_SIZE];\n    int num103[MAX_SIZE];\n    int num104[MAX_SIZE];\n    int num105[MAX_SIZE];\n    int num106[MAX_SIZE];\n    int num107[MAX_SIZE];\n    int num108[MAX_SIZE];\n    int num109[MAX_SIZE];\n    int num110[MAX_SIZE];\n    int num111[MAX_SIZE];\n    int num112[MAX_SIZE];\n    int num113[MAX_SIZE];\n    int num114[MAX_SIZE];\n    int num115[MAX_SIZE];\n    int num116[MAX_SIZE];\n    int num117[MAX_SIZE];\n    int num118[MAX_SIZE];\n    int num119[MAX_SIZE];\n    int num120[MAX_SIZE];\n    int num121[MAX_SIZE];\n    int num122[MAX_SIZE];\n    int num123[MAX_SIZE];\n    int num124[MAX_SIZE];\n    int num125[MAX_SIZE];\n    int num126[MAX_SIZE];\n    int num127[MAX_SIZE];\n    int num128[MAX_SIZE];\n    int num129[MAX_SIZE];\n    int num130[MAX_SIZE];\n    int num131[MAX_SIZE];\n    int num132[MAX_SIZE];\n    int num133[MAX_SIZE];\n    int num134[MAX_SIZE];\n    int num135[MAX_SIZE];\n    int num136[MAX_SIZE];\n    int num137[MAX_SIZE];\n    int num138[MAX_SIZE];\n    int num139[MAX_SIZE];\n    int num140[MAX_SIZE];\n    int num141[MAX_SIZE];\n    int num142[MAX_SIZE];\n    int num143[MAX_SIZE];\n    int num144[MAX_SIZE];\n    int num145[MAX_SIZE];\n    int num146[MAX_SIZE];\n    int num147[MAX_SIZE];\n    int num148[MAX_SIZE];\n    int num149[MAX_SIZE];\n    int num150[MAX_SIZE];\n    int num151[MAX_SIZE];\n    int num152[MAX_SIZE];\n    int num153[MAX_SIZE];\n    int num154[MAX_SIZE];\n    int num155[MAX_SIZE];\n    int num156[MAX_SIZE];\n    int num157[MAX_SIZE];\n    int num158[MAX_SIZE];\n    int num159[MAX_SIZE];\n    int num160[MAX_SIZE];\n    int num161[MAX_SIZE];\n    int num162[MAX_SIZE];\n    int num163[MAX_SIZE];\n    int num164[MAX_SIZE];\n    int num165[MAX_SIZE];\n    int num166[MAX_SIZE];\n    int num167[MAX_SIZE];\n    int num168[MAX_SIZE];\n    int num169[MAX_SIZE];\n    int num170[MAX_SIZE];\n    int num171[MAX_SIZE];\n    int num172[MAX_SIZE];\n    int num173[MAX_SIZE];\n    int num174[MAX_SIZE];\n    int num175[MAX_SIZE];\n    int num176[MAX_SIZE];\n    int num177[MAX_SIZE];\n    int num178[MAX_SIZE];\n    int num179[MAX_SIZE];\n    int num180[MAX_SIZE];\n    int num181[MAX_"
        },
        {
            "Index": 393,
            "GT": 24,
            "Query": "5 * 4 + 2 - 3 * 5 * 2 + 4 * 1 * 1 * 8 =   ",
            "Injected CoT": "5 * 4 = 20\n3 * 5 = 15\n15 * 2 = 30\n20 + 2 = 22\n22 - 30 = -8\n4 * 1 = 4\n4 * 1 = 4\n4 * 8 = 32\n-8 + 32 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 394,
            "GT": 23,
            "Query": "7 * 5 - 3 + 9 - 4 - 4 - 2 - 2 + 3 - 9 =   ",
            "Injected CoT": "7 * 5 = 35\n35 - 3 = 32\n32 + 9 = 41\n41 - 4 = 37\n37 - 4 = 33\n33 - 2 = 31\n31 - 2 = 29\n29 + 3 = 32\n32 - 9 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 395,
            "GT": -63,
            "Query": "2 - 7 - 9 - 7 - 2 + 5 - 3 - 6 * 7 * 1 =   ",
            "Injected CoT": "6 * 7 = 42\n-2 - 7 = -9\n-9 - 9 = -18\n-18 - 7 = -25\n-25 + 5 = -20\n-20 - 3 = -23\n-23 - 42 =",
            "Response": " -65",
            "Extract-Response": " -65.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0"
        },
        {
            "Index": 396,
            "GT": 1478,
            "Query": "9 * 5 - 2 * 4 + 4 + 8 * 4 * 5 * 9 - 3 =   ",
            "Injected CoT": "9 * 5 = 45\n2 * 4 = 8\n8 * 4 = 32\n32 * 5 = 160\n160 * 9 = 1440\n45 - 8 = 37\n37 + 4 = 41\n41 + 1440 = 1481\n1481 - 3 =",
            "Response": " 1478",
            "Extract-Response": " 1478\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char expression[MAX_SIZE];\n    int i, j, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(expression);\n\n    len = strlen(expression);\n\n    for(i=0; i<len; i++)\n    {\n        if(expression[i] == ' ')\n        {\n            continue;\n        }\n\n        if(expression[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(expression[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            int num = 0;\n\n            while(i < len && expression[i] >= '0' && expression[i] <= '9')\n            {\n                num = (num * 10) + (expression[i] - '0');\n\n                i++;\n            }\n\n            i--;\n\n            if(expression[i+1] == '^')\n            {\n                int power = expression[i+2] - '0';\n\n                num = pow(num, power);\n\n                i += 2;\n            }\n\n            result += sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 398,
            "GT": -20,
            "Query": "5 * 1 + 8 - 7 - 6 * 5 + 2 * 1 - 6 + 8 =   ",
            "Injected CoT": "5 * 1 = 5\n6 * 5 = 30\n2 * 1 = 2\n5 + 8 = 13\n13 - 7 = 6\n6 - 30 = -24\n-24 + 2 = -22\n-22 - 6 = -28\n-28 + 8 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe number of operations is between [1, 10000].\nYou cannot use the same operation more than once.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 400,
            "GT": 301,
            "Query": "9 * 9 * 3 - 2 + 5 * 9 + 4 * 4 * 1 - 1 =   ",
            "Injected CoT": "9 * 9 = 81\n81 * 3 = 243\n5 * 9 = 45\n4 * 4 = 16\n16 * 1 = 16\n243 - 2 = 241\n241 + 45 = 286\n286 + 16 = 302\n302 - 1 =",
            "Response": " 301",
            "Extract-Response": " 301\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (int i = 1; i <= n; ++i) {\n        int current = i;\n        while (current > 0) {\n            result += current % 10;\n            current /= 10;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 402,
            "GT": 82,
            "Query": "9 * 5 + 4 * 1 - 7 + 6 + 2 * 5 * 4 - 6 =   ",
            "Injected CoT": "9 * 5 = 45\n4 * 1 = 4\n2 * 5 = 10\n10 * 4 = 40\n45 + 4 = 49\n49 + 6 = 55\n55 + 40 = 95\n95 - 7 = 88\n88 - 6 =",
            "Response": " 82",
            "Extract-Response": " 82\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <unordered_set>\n#include <cassert>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        int num = 0;\n        stack<int> numStack;\n        stack<int> signStack;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == ' ') {\n                continue;\n            } else if (s[i] == '+') {\n                result += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                result += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                numStack.push(result);\n                signStack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result += sign * num;\n                num = 0;\n                result *= signStack.top();\n                signStack.pop();\n                result += numStack.top();\n                numStack.pop();\n            } else {\n                num = num * 10 + s[i] - '0';\n            }\n        }\n        result += sign * num;\n        return result;\n    }\n};\n\nint main() {\n    Solution s;\n    string ss = \"1 + 1\";\n    cout << s.calculate(ss) << endl;\n    return 0;\n}"
        },
        {
            "Index": 406,
            "GT": 184,
            "Query": "8 * 8 * 2 * 2 - 8 * 6 - 9 * 4 + 9 + 3 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 2 = 128\n128 * 2 = 256\n8 * 6 = 48\n9 * 4 = 36\n48 + 36 = 84\n256 - 84 = 172\n9 + 3 = 12\n172 + 12 =",
            "Response": " 184",
            "Extract-Response": " 184\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <string>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <list>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\n#define phl puts(\"Hello\")\n#define sf scanf\n#define pf printf\n#define fo(i, n) for(i = 0; i < n; i++)\n#define of(i, n) for(i = n - 1; i >= 0; i--)\n#define CLR(n, v) memset(n, v, sizeof( n ))\n#define pb push_back\n#define lim(v) v.begin(), v.end()\n#define sz(v) ((int)v,size())\n#define equals(a, b) (fabs(a-b)<eps)\n\n#define white 0\n#define black 1\n\nconst double PI = 2 * acos ( 0.0 );\nconst double eps = 1e-9;\n\ntypedef long long lld;\ntypedef unsigned long long llu;\ntypedef pair<int, int> pi;\ntypedef  vector<int> vi;\ntypedef vector<pi> vpi;\n\ntemplate <class T> T jog(T a, T b) { return a + b; }\ntemplate <class T> T bog(T a, T b) { return a - b; }\ntemplate <class T> T gon(T a, T b) { return a * b; }\ntemplate <class T> T sq(T x) {return x * x;}\ntemplate <class T> T gcd( T a, T b ) { return b == 0 ? a : gcd(b, a % b); }\ntemplate <class T> T lcm ( T a, T b ) { return ( a / gcd ( a, b ) ) * b; }\ntemplate <class T> T power ( T a, T p ) { int res = 1, x = a; while ( p ) { if ( p & 1 ) res = res * x; x = x * x; p >>= 1; } return res;}\ntemplate <class T> T cordinatlenth(T a, T b, T c, T d) { return sqrt( sq(a - c) + sq(b - d) ); }\ntemplate<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}\nint toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}\nlld bigmod ( lld a, lld p, lld mod )\n{\n    lld res = 1, x = a;\n    while ( p ) {\n        if ( p & 1 ) res = ( res * x ) % mod;\n        x = ( x * x ) % mod;\n        p >>= 1;\n    }\n    return res;\n}\n\n/*\n#define M 1000005\nint phi[M];\n\nvoid calculatePhi()\n{\n    for (int i = 1; i < M; i++) phi[i] = i;\n    for (int p = 2; p < M; p++)\n        if (phi[p] == p) // p is a prime\n            for (int k = p; k < M; k += p) phi[k] -= phi[k] / p;\n}\n*/\n\n/*\nconst int pr = 500001;\nint prime[ 41539 ], ind;\nbool mark[ pr ];\nvoid primelist()\n{\n    for(int i = 4; i < pr; i += 2) mark[ i ] = false;\n    for(int i = 3; i < pr; i += 2) mark[ i ] = true; mark[ 2 ] = true;\n    for(int i = 3, sq = sqrt( pr ); i < sq; i += 2)\n        if(mark[ i ])\n            for(int j = i * i; j < pr; j += i + i) mark[ j ] = false;\n    prime[ 0 ] = 2; ind = 1;\n    for(int i = 3; i < pr; i += 2)\n        if(mark[ i ]) ind++; printf(\"%d\\n\", ind);\n}\n*/\n\nint diraction1[] = {-1, 0, 0, 1, 1, -1, -1, 1};\nint diraction2[] = {0, -1, 1, 0, 1, -1, 1, -1};\nint horsed1[] = {-2, -2, -1, 1, 2, 2, 1, -1};\nint horsed2[] = {1, -1, -2, -2, -1, 1, 2, 2};\n\n#define check(n, pos) (n & (1<<(pos)))\n#define biton(n, pos) (n | (1<<(pos)))\n#define bitoff(n, pos) (n & ~(1<<(pos)))\n\nvoid input();\n\n/**************************Templet end*********************************/\n\nint n, k;\n\nint main()\n{\n    //#ifdef monkey\n        //freopen(\"input.txt\", \"r\", stdin);\n        //freopen(\"output.txt\", \"w\", stdout);\n    //#endif\n    input();\n\n    return 0;\n}\nvoid input()\n{\n    sf(\"%d %d\", &n, &k);\n    int sum = 0;\n    for(int i = 1; i <= n; i++)\n    {\n        int x; sf(\"%d\", &x);\n        sum += x;\n    }\n    if(sum % k == 0) pf(\"%d\\n\", sum / k);\n    else pf(\"%d\\n\", sum / k + 1);\n}"
        },
        {
            "Index": 407,
            "GT": -1646,
            "Query": "2 * 3 - 7 * 9 * 5 * 4 - 4 * 7 * 7 * 2 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 4 = 180\n7 * 7 = 49\n49 * 2 = 98\n7 * 9 = 63\n63 * 5 = 315\n315 * 4 = 1260\n180 - 1260 = -1080\n-1080 - 98 = -1178\n2 * 3 = 6\n6 - 1178 =",
            "Response": " -1172\n\n-1172",
            "Extract-Response": " -1172"
        },
        {
            "Index": 408,
            "GT": 3,
            "Query": "2 - 5 - 1 - 7 + 3 + 1 + 6 + 2 * 5 - 6 =   ",
            "Injected CoT": "2 * 5 = 10\n-5 - 1 = -6\n-6 - 7 = -13\n-13 + 3 = -10\n-10 + 1 = -9\n-9 + 6 = -3\n-3 + 10 = 7\n7 - 6 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\n    public int calPoints(String[] ops) {\n        Stack<Integer> stack = new Stack<>();\n        for (String op : ops) {\n            if (op.equals(\"+\")) {\n                int top = stack.pop();\n                int newtop = top + stack.peek();\n                stack.push(top);\n                stack.push(newtop);\n            } else if (op.equals(\"C\")) {\n                stack.pop();\n            } else if (op.equals(\"D\")) {\n                stack.push(2 * stack.peek());\n            } else {\n                stack.push(Integer.valueOf(op));\n            }\n        }\n        int ans = 0;\n        for (int score : stack) {\n            ans += score;\n        }\n        return ans;\n    }\n}"
        },
        {
            "Index": 409,
            "GT": -71,
            "Query": "9 + 6 + 9 * 3 - 4 * 4 * 7 - 4 + 1 + 2 =   ",
            "Injected CoT": "9 + 6 = 15\n9 * 3 = 27\n4 * 4 = 16\n16 * 7 = 112\n27 - 112 = -85\n-85 - 4 = -89\n-89 + 1 = -88\n-88 + 2 =",
            "Response": " -86",
            "Extract-Response": " -86.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 410,
            "GT": 23,
            "Query": "4 - 1 - 2 + 6 - 1 - 1 + 7 + 5 + 3 * 2 =   ",
            "Injected CoT": "3 * 2 = 6\n4 - 1 = 3\n3 - 2 = 1\n1 + 6 = 7\n7 - 1 = 6\n6 - 1 = 5\n5 + 7 = 12\n12 + 5 = 17\n17 + 6 =",
            "Response": " 23",
            "Extract-Response": "\n<code>23\n</code>\n"
        },
        {
            "Index": 411,
            "GT": -42,
            "Query": "3 * 2 - 9 - 7 - 9 - 5 - 8 - 5 - 2 - 3 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 9 = -3\n-3 - 7 = -10\n-10 - 9 = -19\n-19 - 5 = -24\n-24 - 8 = -32\n-32 - 5 = -37\n-37 - 2 = -39\n-39 - 3 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 412,
            "GT": -3,
            "Query": "6 + 3 - 9 - 7 + 5 + 9 - 7 + 1 + 1 - 5 =   ",
            "Injected CoT": "6 + 3 = 9\n9 - 9 = 0\n0 - 7 = -7\n-7 + 5 = -2\n-2 + 9 = 7\n7 - 7 = 0\n0 + 1 = 1\n1 + 1 = 2\n2 - 5 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 416,
            "GT": 177,
            "Query": "7 + 6 - 7 - 2 + 9 * 3 * 7 - 1 - 9 - 6 =   ",
            "Injected CoT": "9 * 3 = 27\n7 + 6 = 13\n13 - 7 = 6\n6 - 2 = 4\n27 * 7 = 189\n4 + 189 = 193\n193 - 1 = 192\n192 - 9 = 183\n183 - 6 =",
            "Response": " 177",
            "Extract-Response": " 177\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define SWAP(v,x) swap(v,x)\n#define MP make_pair\n#define SORT(v) sort(v.begin(),v.end())\n#define REVERSE(v) reverse(v.begin(),v.end())\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define FORD(i,a,b) for(int i=(a);i>=(b);i--)\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout<<fixed<<setprecision(2);\n    \n    int n;\n    cin>>n;\n    string s;\n    cin>>s;\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for(int i = 0; i < n; i++) {\n        if(s[i] == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if(s[i] == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if(s[i] == '*') {\n            result -= curr;\n            curr *= sign;\n        } else if(s[i] == '/') {\n            result -= curr;\n            curr /= sign;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += curr;\n    cout<<result<<endl;\n\n    return 0;\n}"
        },
        {
            "Index": 417,
            "GT": -4,
            "Query": "6 + 2 + 5 - 9 - 2 - 9 * 1 - 6 + 7 + 2 =   ",
            "Injected CoT": "9 * 1 = 9\n6 + 2 = 8\n8 + 5 = 13\n13 - 9 = 4\n4 - 2 = 2\n2 - 9 = -7\n-7 - 6 = -13\n-13 + 7 = -6\n-6 + 2 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 419,
            "GT": 764,
            "Query": "9 * 2 + 6 * 2 * 7 * 9 + 9 - 4 - 7 - 8 =   ",
            "Injected CoT": "9 * 2 = 18\n6 * 2 = 12\n12 * 7 = 84\n84 * 9 = 756\n18 + 756 = 774\n774 - 4 = 770\n770 - 7 = 763\n763 - 8 =",
            "Response": " 755\n\n7 + 5 + 5 = 17",
            "Extract-Response": " 17\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        result += s[i] - '0';\n    }\n\n    while (result > 9) {\n        int temp = result;\n        result = 0;\n        while (temp > 0) {\n            result += temp % 10;\n            temp /= 10;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 421,
            "GT": 116,
            "Query": "3 * 9 * 5 - 6 + 2 - 3 - 4 - 9 + 8 - 7 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 5 = 135\n135 - 6 = 129\n129 + 2 = 131\n131 - 3 = 128\n128 - 4 = 124\n124 - 9 = 115\n115 + 8 = 123\n123 - 7 =",
            "Response": " 116",
            "Extract-Response": " 116\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 422,
            "GT": -412,
            "Query": "2 * 9 + 2 + 9 + 1 - 7 - 9 * 6 * 8 - 3 =   ",
            "Injected CoT": "6 * 8 = 48\n9 * 48 = 432\n2 * 9 = 18\n2 + 9 = 11\n11 + 1 = 12\n432 - 7 = 425\n425 - 18 = 407\n407 - 9 = 398\n398 - 3 =",
            "Response": " 395",
            "Extract-Response": " 395\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    int currentOperator = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n            currentOperator = s[i];\n        } else if (s[i] == '*') {\n            currentOperator = s[i];\n        } else if (s[i] == '=') {\n            if (currentOperator == '*') {\n                currentNumber *= s[i - 1] - '0';\n            }\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            currentOperator = 0;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 423,
            "GT": -37,
            "Query": "2 - 3 * 4 - 4 - 1 * 8 * 1 - 9 + 1 - 7 =   ",
            "Injected CoT": "3 * 4 = 12\n2 - 12 = -10\n-10 - 4 = -14\n8 * 1 = 8\n-14 - 8 = -22\n-22 - 1 = -23\n-23 - 9 = -32\n-32 + 1 = -31\n-31 - 7 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 429,
            "GT": 3,
            "Query": "4 + 7 + 4 * 1 - 8 - 2 * 6 + 3 + 1 * 5 =   ",
            "Injected CoT": "4 + 7 = 11\n4 * 1 = 4\n11 + 4 = 15\n2 * 6 = 12\n8 - 12 = -4\n3 + 1 = 4\n1 * 5 = 5\n-4 + 4 = 0\n0 + 5 = 5\n15 + 5 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 1000.\nEach node in the tree has a distinct value between 1 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        int sum = 0;\n        if(root == NULL)\n            return sum;\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()) {\n            TreeNode* curr = q.front();\n            q.pop();\n            if(curr->val % 2 == 0) {\n                if(curr->left != NULL) {\n                    if(curr->left->left != NULL)\n                        sum += curr->left->left->val;\n                    if(curr->left->right != NULL)\n                        sum += curr->left->right->val;\n                }\n                if(curr->right != NULL) {\n                    if(curr->right->left != NULL)\n                        sum += curr->right->left->val;\n                    if(curr->right->right != NULL)\n                        sum += curr->right->right->val;\n                }\n            }\n            if(curr->left != NULL)\n                q.push(curr->left);\n            if(curr->right != NULL)\n                q.push(curr->right);\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 433,
            "GT": 77,
            "Query": "6 * 5 * 1 + 4 * 2 + 3 * 8 + 9 + 7 - 1 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 1 = 30\n4 * 2 = 8\n3 * 8 = 24\n30 + 8 = 38\n38 + 24 = 62\n62 + 9 = 71\n71 + 7 = 78\n78 - 1 =",
            "Response": " 77\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tchar num[100];\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\t\n\twhile(scanf(\"%s\", num) != EOF)\n\t{\n\t\tif(num[0] == '0' && num[1] == '\\0')\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tsum = 0;\n\t\t\n\t\tfor(i = 0; i < strlen(num); i++)\n\t\t{\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\tsum = sum + (num[i] - '0');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum = sum + ((num[i] - '0') * 2);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(sum % 10 == 0)\n\t\t{\n\t\t\tprintf(\"Valid\\n\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"Invalid\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}",
            "Extract-Response": "\n\nInvalid"
        },
        {
            "Index": 434,
            "GT": 288,
            "Query": "4 + 6 * 5 * 6 + 1 + 4 + 1 + 2 * 7 * 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 6 = 180\n4 + 180 = 184\n1 + 184 = 185\n185 + 4 = 189\n2 * 7 = 14\n14 * 7 = 98\n189 + 98 =",
            "Response": " 287\n\n287 is not a perfect square, so it is not a Kaprekar number.\n\nNote: r may go up to 99999 for some cases.\n\nInput Format\n\nA single line of input containing the space separated original number n and its k digit number d.\n\nConstraints\n\n1 <= n <= 400000\n1 <= d <= 9\n\nOutput Format\n\nPrint the list of Kaprekar numbers in the range between d and n in ascending order.\n\nSample Input\n\n1 9\n\nSample Output\n\n1 9 45 55 99\n\nExplanation\n\n11 is a 2-digit number that satisfies the condition, so it is a Kaprekar number.\n\n45, 55, and 99 are also Kaprekar numbers as they become 45, 55, and 99 after the operation.\n\nHence the answer is 1 9 45 55 99.\n\n*/\n\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\nint main() {\n\n    long int n,d,i,j,k,l,m,x,y,z,a,b,c,count=0;\n    scanf(\"%ld %ld\",&n,&d);\n    for(i=d;i<=n;i++)\n    {\n        count=0;\n        x=i*i;\n        j=i;\n        while(j)\n        {\n            j=j/10;\n            count++;\n        }\n        l=pow(10,count);\n        m=pow(10,count/2);\n        a=x%l;\n        b=x/l;\n        c=a/m;\n        if(a==0)\n        {\n            if(b==i)\n            {\n                printf(\"%ld \",i);\n            }\n        }\n        else\n        {\n            if(b+c==i)\n            {\n                printf(\"%ld \",i);\n            }\n        }\n    }\n    return 0;\n}",
            "Extract-Response": "\n1 9 45 55 99 297 703 999 2223 2728 4879 4950 5050 5292 7272 7777 9999 17344 22222 77778 82656 95121 99999"
        },
        {
            "Index": 436,
            "GT": 19,
            "Query": "9 + 1 - 3 + 1 * 5 - 1 - 3 + 7 + 8 - 4 =   ",
            "Injected CoT": "1 * 5 = 5\n9 + 5 = 14\n14 - 3 = 11\n11 + 1 = 12\n12 - 1 = 11\n11 - 3 = 8\n8 + 7 = 15\n15 + 8 = 23\n23 - 4 =",
            "Response": " 19",
            "Extract-Response": " 19.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 437,
            "GT": -746,
            "Query": "4 * 2 * 7 * 3 - 9 - 9 - 2 * 7 * 8 * 8 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 7 = 56\n56 * 3 = 168\n2 * 7 = 14\n14 * 8 = 112\n112 * 8 = 896\n168 - 9 = 159\n159 - 9 = 150\n150 - 896 =",
            "Response": " -746",
            "Extract-Response": " -746\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25"
        },
        {
            "Index": 438,
            "GT": 92,
            "Query": "9 * 8 - 7 * 4 - 9 * 1 * 2 + 3 + 9 * 7 =   ",
            "Injected CoT": "9 * 8 = 72\n7 * 4 = 28\n1 * 2 = 2\n9 * 2 = 18\n72 - 28 - 18 = 26\n9 * 7 = 63\n26 + 3 = 29\n63 + 9 = 72\n72 + 29 =",
            "Response": " 101",
            "Extract-Response": " 101.\n\nNote:\n\nThe number of operations is between 2 and 2000.\n2 <= A.length <= 200\n2 <= B.length <= 200\nA and B consist of digits 0-9.\n\n*/\n\nclass Solution {\npublic:\n    int addStrings(string num1, string num2) {\n        int i = num1.size() - 1, j = num2.size() - 1;\n        int carry = 0;\n        string res = \"\";\n        while(i >= 0 || j >= 0 || carry) {\n            int a = i >= 0 ? num1[i--] - '0' : 0;\n            int b = j >= 0 ? num2[j--] - '0' : 0;\n            int sum = a + b + carry;\n            carry = sum / 10;\n            res = to_string(sum % 10) + res;\n        }\n        return stoi(res);\n    }\n};"
        },
        {
            "Index": 439,
            "GT": -60,
            "Query": "4 + 4 - 3 + 8 - 9 - 6 * 1 - 9 * 6 - 4 =   ",
            "Injected CoT": "6 * 1 = 6\n9 * 6 = 54\n4 + 4 = 8\n8 - 3 = 5\n5 + 8 = 13\n13 - 9 = 4\n4 - 6 = -2\n-2 - 54 = -56\n-56 - 4 =",
            "Response": " -60",
            "Extract-Response": " -60.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<string>& tokens, int& i) {\n        int a = stoi(tokens[i]);\n        if (i == tokens.size() - 1) {\n            return a;\n        }\n        i++;\n        if (tokens[i] == \"+\") {\n            return a + calc(tokens, i);\n        }\n        if (tokens[i] == \"-\") {\n            return a - calc(tokens, i);\n        }\n        if (tokens[i] == \"*\") {\n            return a * calc(tokens, i);\n        }\n        if (tokens[i] == \"/\") {\n            return a / calc(tokens, i);\n        }\n        return 0;\n    }\n    int evalRPN(vector<string>& tokens) {\n        int i = 0;\n        return calc(tokens, i);\n    }\n};"
        },
        {
            "Index": 440,
            "GT": 56,
            "Query": "9 * 3 * 3 + 4 - 5 - 6 * 5 - 5 + 3 + 8 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 3 = 81\n81 + 4 = 85\n85 - 5 = 80\n6 * 5 = 30\n80 - 30 = 50\n50 - 5 = 45\n45 + 3 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nThe answer is guaranteed to be fitted in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 442,
            "GT": 162,
            "Query": "7 - 7 + 9 * 3 + 8 * 8 * 2 + 3 + 4 * 1 =   ",
            "Injected CoT": "9 * 3 = 27\n8 * 8 = 64\n64 * 2 = 128\n4 * 1 = 4\n7 - 7 = 0\n0 + 27 = 27\n27 + 128 = 155\n155 + 3 = 158\n158 + 4 =",
            "Response": " 162",
            "Extract-Response": " 162\n</code>\n"
        },
        {
            "Index": 443,
            "GT": 367,
            "Query": "9 * 6 + 3 * 3 + 7 * 6 * 7 + 4 + 9 - 3 =   ",
            "Injected CoT": "9 * 6 = 54\n3 * 3 = 9\n7 * 6 = 42\n42 * 7 = 294\n54 + 9 = 63\n63 + 294 = 357\n357 + 4 = 361\n361 + 9 = 370\n370 - 3 =",
            "Response": " 367",
            "Extract-Response": " 367\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiiii;\n    int jjjjj;\n    int kkkkk;\n    int lllll;\n    int mmmmmm;\n    int nnnnnn;\n    int oooooo;\n    int pppppp;\n    int qqqqqq;\n    int rrrrrr;\n    int ssssss;\n    int tttttt;\n    int uuuuuu;\n    int vvvvvv;\n    int wwwwww;\n    int xxxxxx;\n    int yyyyyy;\n    int zzzzzz;\n    int aaaaaaa;\n    int bbbbbbb;\n    int ccccccc;\n    int ddddddd;\n    int eeeeeee;\n    int fffffff;\n    int ggggggg;\n    int hhhhhhh;\n    int iiiiiii;\n    int jjjjjjj;\n    int kkkkkkk;\n    int lllllll;\n    int mmmmmmm;\n    int nnnnnnn;\n    int ooooooo;\n    int ppppppp;\n    int qqqqqqq;\n    int rrrrrrr;\n    int sssssss;\n    int ttttttt;\n    int uuuuuuu;\n    int vvvvvvv;\n    int wwwwwww;\n    int xxxxxxx;\n    int yyyyyyy;\n    int zzzzzzz;\n    int aaaaaaaa;\n    int bbbbbbbb;\n    int cccccccc;\n    int dddddddd;\n    int eeeeeeee;\n    int ffffffff;\n    int gggggggg;\n    int hhhhhhhh;\n    int iiiiiiii;\n    int jjjjjjjj;\n    int kkkkkkkk;\n    int llllllll;\n    int mmmmmmmm;\n    int nnnnnnnn;\n    int oooooooo;\n    int pppppppp;\n    int qqqqqqqq;\n    int rrrrrrrr;\n    int ssssssss;\n    int tttttttt;\n    int uuuuuuuu;\n    int vvvvvvvv;\n    int wwwwwwww;\n    int xxxxxxxx;\n    int yyyyyyyy;\n    int zzzzzzzz;\n    int aaaaaaaaa;\n    int bbbbbbbbb;\n    int ccccccccc;\n    int ddddddddd;\n    int eeeeeeeee;\n    int fffffffff;\n    int ggggggggg;\n    int hhhhhhhhh;\n    int iiiiiiiii;\n    int jjjjjjjjj;\n    int kkkkkkkkk;\n    int lllllllll;\n    int mmmmmmmmmm;\n    int nnnnnnnnnn;\n    int oooooooooo;\n    int pppppppppp;\n    int qqqqqqqqqq;\n    int rrrrrrrrrr;\n    int ssssssssss;\n    int tttttttttt;\n    int uuuuuuuuuu;\n    int vvvvvvvvvv;\n    int wwwwwwwwww;\n    int xxxxxxxxxx;\n    int yyyyyyyyyy;\n    int zzzzzzzzzz;\n    int aaaaaaaaaa;\n    int bbbbbbbbbb;\n    int cccccccccc;\n    int dddddddddd;\n    int eeeeeeeeee;\n    int ffffffffff;\n    int gggggggggg;\n    int hhhhhhhhhh;\n    int iiiiiiiiii;\n    int jjjjjjjjjj;\n    int kkkkkkkkkk;\n    int llllllllll;\n    int mmmmmmmmmmm;\n    int nnnnnnnnnnn;\n    int ooooooooooo;\n    int ppppppppppp;\n    int qqqqqqqqqqq;\n    int rrrrrrrrrrr;\n    int sssssssssss;\n    int ttttttttttt;\n    int uuuuuuuuuuu;\n    int vvvvvvvvvvv;\n    int wwwwwwwwwww;\n    int xxxxxxxxxxx;\n    int yyyyyyyyyyy;\n    int zzzzzzzzzzz;\n    int aaaaaaaaaaa;\n    int bbbbbbbbbbb;\n    int ccccccccccc;\n    int ddddddddddd;\n    int eeeeeeeeeee;\n    int fffffffffff;\n    int ggggggggggg;\n    int hhhhhhhhhhh;\n    int iiiiiiiiiii;\n    int jjjjjjjjjjj;\n    int kkkkkkkkkkk;\n    int lllllllllll;\n    int mmmmmmmmmmmm;\n    int nnnnnnnnnnnn;\n    int oooooooooooo;\n    int pppppppppppp;\n    int qqqqqqqqqqqq;\n    int rrrrrrrrrrrr;\n    int ssssssssssss;\n    int tttttttttttt;\n    int uuuuuuuuuuuu;\n    int vvvvvvvvvvvv;\n    int wwwwwwwwwwww;\n    int xxxxxxxxxxxx;\n    int yyyyyyyyyyyy;\n    int zzzzzzzzzzzz;\n    int aaaaaaaaaaaa;\n    int bbbbbbbbbbbb;\n    int cccccccccccc;\n    int dddddddddddd;\n    int eeeeeeeeeeee;\n    int ffffffffffff;\n    int gggggggggggg;\n    int hhhhhhhhhhhh;\n    int iiiiiiiiiiii;\n    int jjjjjjjjjjjj;\n    int kkkkkkkkkkkk;\n    int llllllllllll;\n    int mmmmmmmmmmmmm;\n    int nnnnnnnnnnnnn;\n    int ooooooooooooo;\n    int ppppppppppppp;\n    int qqqqqqqqqqqqq;\n    int rrrrrrrrrrrrr;\n    int sssssssssssss;\n    int ttttttttttttt;\n    int uuuuuuuuuuuuu;\n    int vvvvvvvvvvvvv;\n    int wwwwwwwwwwwww;\n    int xxxxxxxxxxxxx;\n    int y"
        },
        {
            "Index": 444,
            "GT": 58,
            "Query": "4 * 4 + 1 + 6 + 1 + 2 - 5 + 1 + 6 * 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 1 = 17\n17 + 6 = 23\n23 + 1 = 24\n24 + 2 = 26\n26 - 5 = 21\n21 + 1 = 22\n6 * 6 = 36\n22 + 36 =",
            "Response": " 58",
            "Extract-Response": " 58.\n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i] <= 100\n*/\n\nclass Solution {\n    public int maxRotateFunction(int[] A) {\n        if (A == null || A.length == 0) {\n            return 0;\n        }\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.length; i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.length; i++) {\n            f0 = f0 + sum - A.length * A[A.length - i];\n            max = Math.max(max, f0);\n        }\n        return max;\n    }\n}"
        },
        {
            "Index": 445,
            "GT": 79,
            "Query": "8 * 9 * 1 + 4 * 3 - 1 * 1 * 9 + 6 - 2 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 1 = 72\n4 * 3 = 12\n1 * 1 = 1\n1 * 9 = 9\n72 + 12 = 84\n84 - 9 = 75\n75 + 6 = 81\n81 - 2 =",
            "Response": " 79\n\n79\n\n*/",
            "Extract-Response": " 79"
        },
        {
            "Index": 447,
            "GT": 5883,
            "Query": "3 + 5 + 3 - 8 + 4 * 5 * 1 * 7 * 6 * 7 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 1 = 20\n20 * 7 = 140\n140 * 6 = 840\n840 * 7 = 5880\n3 + 5 = 8\n8 + 3 = 11\n11 - 8 = 3\n3 + 5880 =",
            "Response": " 5883",
            "Extract-Response": " 5883\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24,"
        },
        {
            "Index": 450,
            "GT": 23,
            "Query": "3 - 3 + 1 - 9 - 9 - 6 + 2 * 7 + 8 * 4 =   ",
            "Injected CoT": "2 * 7 = 14\n-3 + 1 = -2\n-9 - 9 = -18\n-18 - 6 = -24\n8 * 4 = 32\n-24 + 14 = -10\n-10 - 2 = -12\n-12 + 32 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 452,
            "GT": 4,
            "Query": "6 - 6 - 3 - 8 + 8 - 1 + 4 + 3 + 4 - 3 =   ",
            "Injected CoT": "6 - 6 = 0\n0 - 3 = -3\n-3 - 8 = -11\n-11 + 8 = -3\n-3 - 1 = -4\n-4 + 4 = 0\n0 + 3 = 3\n3 + 4 = 7\n7 - 3 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 454,
            "GT": 489891,
            "Query": "7 + 3 + 8 * 7 * 3 * 9 * 6 * 6 * 9 - 7 =   ",
            "Injected CoT": "8 * 7 = 56\n56 * 3 = 168\n168 * 9 = 1512\n1512 * 6 = 9072\n9072 * 6 = 54432\n54432 * 9 = 489888\n7 + 3 = 10\n10 + 489888 = 489898\n489898 - 7 =",
            "Response": " 489891",
            "Extract-Response": "\n\n489891."
        },
        {
            "Index": 456,
            "GT": -266,
            "Query": "9 + 9 + 2 + 2 * 3 - 9 * 4 * 8 - 3 - 1 =   ",
            "Injected CoT": "2 * 3 = 6\n9 + 9 = 18\n18 + 2 = 20\n20 + 6 = 26\n9 * 4 = 36\n36 * 8 = 288\n288 * -1 = -288\n26 - 288 = -262\n-262 - 3 = -265\n-265 - 1 =",
            "Response": " -266",
            "Extract-Response": " -266.\n\nNote:\nDo not use the eval built-in library function.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        }
    ]
}