{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "unmodified",
    "Steps": 6,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\unmodified\\unmodified-6-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 1,
            "GT": 874,
            "Query": "3 * 8 * 9 * 4 + 8 - 3 + 5 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 9 = 216\n216 * 4 = 864\n864 + 8 = 872\n872 - 3 = 869\n869 + 5 =",
            "Response": " 874",
            "Extract-Response": " 874\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num"
        },
        {
            "Index": 4,
            "GT": 709,
            "Query": "5 - 4 * 4 + 2 * 5 * 8 * 9 =   ",
            "Injected CoT": "4 * 4 = 16\n2 * 5 = 10\n10 * 8 = 80\n80 * 9 = 720\n5 - 16 = -11\n-11 + 720 =",
            "Response": " 709",
            "Extract-Response": " 709\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n    int sign;\n\n    /* Input string from user */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n    sum = 0;\n    sign = 1;\n\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+' or '-' */\n        if(i == 0 && (str[i] == '+' || str[i] == '-'))\n        {\n            /* If '+', then add to sum */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n            /* If '-', then subtract from sum */\n            else\n            {\n                sign = -1;\n            }\n\n            continue;\n        }\n\n        /* If current character is 'x' or 'X' */\n        else if(str[i] == 'x' || str[i] == 'X')\n        {\n            /* If 'x' or 'X', then multiply to sum */\n            sign = 1;\n            continue;\n        }\n\n        /* If current character is '+' or '-' */\n        else if(str[i] == '+' || str[i] == '-')\n        {\n            /* If '+', then add to sum */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n            /* If '-', then subtract from sum */\n            else\n            {\n                sign = -1;\n            }\n\n            continue;\n        }\n\n        /* If current character is '*' or '/' */\n        else if(str[i] == '*' || str[i] == '/')\n        {\n            /* If '*', then multiply to sum */\n            if(str[i] == '*')\n            {\n                sign = 1;\n            }\n            /* If '/', then divide from sum */\n            else\n            {\n                sign = -1;\n            }\n\n            continue;\n        }\n\n        /* If current character is '=' */\n        else if(str[i] == '=')\n        {\n            continue;\n        }\n\n        /* If current character is ' ' */\n        else if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        /* If any other character, then convert it to integer and add to sum */\n        else\n        {\n            num = str[i] - '0';\n            sum = sum + (num * sign);\n        }\n    }\n\n    printf(\"The answer is %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 5,
            "GT": -24,
            "Query": "1 - 2 * 2 + 1 - 5 * 3 - 7 =   ",
            "Injected CoT": "-2 * 2 = -4\n1 - -4 = 5\n-5 * 3 = -15\n5 - 15 = -10\n-10 - 7 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
        },
        {
            "Index": 7,
            "GT": 23,
            "Query": "3 - 3 + 4 * 6 + 4 - 4 - 1 =   ",
            "Injected CoT": "3 - 3 = 0\n4 * 6 = 24\n0 + 24 = 24\n24 + 4 = 28\n28 - 4 = 24\n24 - 1 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 10,
            "GT": 15,
            "Query": "9 - 8 + 7 * 4 + 4 - 2 * 9 =   ",
            "Injected CoT": "7 * 4 = 28\n9 - 8 = 1\n1 + 28 = 29\n4 - 2 = 2\n2 * 9 = 18\n29 + 4 = 33\n33 - 18 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 11,
            "GT": -43,
            "Query": "9 - 8 - 6 - 4 + 1 - 7 * 5 =   ",
            "Injected CoT": "9 - 8 = 1\n1 - 6 = -5\n-5 - 4 = -9\n-9 + 1 = -8\n-8 - 7 * 5 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * to calculate sum of all digit\n     */\n    for(i=0; i<len; i++)\n    {\n        /* Check for numeric character */\n        if((str[i]>='0' && str[i]<='9'))\n        {\n            /*\n             * If found, convert character to\n             * integer and add to result\n             */\n            num = (int)(str[i] - '0');\n\n            /*\n             * If previous character is '-',\n             * then reverse the sign\n             */\n            if(i > 0 && str[i-1] == '-')\n            {\n                sign = sign * -1;\n            }\n\n            /*\n             * If previous character is '+',\n             * then keep the sign same\n             */\n            else if(i > 0 && str[i-1] == '+')\n            {\n                sign = sign * 1;\n            }\n\n            /* Add digit to result */\n            result = (result * 10) + (sign * num);\n        }\n    }\n\n    printf(\"Sum of all digit = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 13,
            "GT": 12,
            "Query": "2 * 4 - 2 - 1 - 3 + 2 * 5 =   ",
            "Injected CoT": "2 * 4 = 8\n8 - 2 = 6\n6 - 1 = 5\n5 - 3 = 2\n2 * 5 = 10\n2 + 10 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 14,
            "GT": 35,
            "Query": "5 - 8 + 7 * 2 - 3 + 9 * 3 =   ",
            "Injected CoT": "7 * 2 = 14\n-8 + 14 = 6\n9 * 3 = 27\n5 - 3 = 2\n6 + 27 = 33\n2 + 33 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 15,
            "GT": -3,
            "Query": "3 + 5 - 1 + 9 - 1 - 3 * 6 =   ",
            "Injected CoT": "3 + 5 = 8\n8 - 1 = 7\n7 + 9 = 16\n16 - 1 = 15\n3 * 6 = 18\n15 - 18 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 16,
            "GT": 7,
            "Query": "2 * 4 + 7 + 6 - 9 - 8 + 3 =   ",
            "Injected CoT": "2 * 4 = 8\n8 + 7 = 15\n15 + 6 = 21\n21 - 9 = 12\n12 - 8 = 4\n4 + 3 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 18,
            "GT": 23,
            "Query": "1 + 9 * 3 * 1 - 7 + 1 + 1 =   ",
            "Injected CoT": "9 * 3 = 27\n1 + 27 = 28\n28 * 1 = 28\n28 - 7 = 21\n21 + 1 = 22\n22 + 1 =",
            "Response": " 23\n\n2.\n\n1 + 9 * 3 * 1 - 7 + 1 + 1 =    \n9 * 3 = 27\n1 + 27 = 28\n28 * 1 = 28\n28 - 7 = 21\n21 + 1 = 22\n22 + 1 = 23\n\n3.\n\n1 + 9 * 3 * 1 - 7 + 1 + 1 =    \n9 * 3 = 27\n1 + 27 = 28\n28 * 1 = 28\n28 - 7 = 21\n21 + 1 = 22\n22 + 1 = 23\n\n4.\n\n1 + 9 * 3 * 1 - 7 + 1 + 1 =    \n9 * 3 = 27\n1 + 27 = 28\n28 * 1 = 28\n28 - 7 = 21\n21 + 1 = 22\n22 + 1 = 23\n\n5.\n\n1 + 9 * 3 * 1 - 7 + 1 + 1 =    \n9 * 3 = 27\n1 + 27 = 28\n28 * 1 = 28\n28 - 7 = 21\n21 + 1 = 22\n22 + 1 = 23",
            "Extract-Response": " 23"
        },
        {
            "Index": 19,
            "GT": -36,
            "Query": "7 - 9 * 3 - 4 - 8 - 1 - 3 =   ",
            "Injected CoT": "9 * 3 = 27\n7 - 27 = -20\n-20 - 4 = -24\n-24 - 8 = -32\n-32 - 1 = -33\n-33 - 3 =",
            "Response": " -36",
            "Extract-Response": " -36\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,sum;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a);\n        sum=0;\n        for(j=1;j<=a;j++)\n        {\n            scanf(\"%d\",&b);\n            sum=sum+b;\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 20,
            "GT": -36,
            "Query": "1 - 9 * 7 + 7 + 5 + 5 + 9 =   ",
            "Injected CoT": "9 * 7 = 63\n1 - 63 = -62\n-62 + 7 = -55\n-55 + 5 = -50\n-50 + 5 = -45\n-45 + 9 =",
            "Response": " -36",
            "Extract-Response": " -36.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxRotateFunction(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        n = len(A)\n        sum_A = sum(A)\n        F = sum([i * A[i] for i in range(n)])\n        max_F = F\n        for i in range(1, n):\n            F = F + sum_A - n * A[n - i]\n            max_F = max(max_F, F)\n        return max_F"
        },
        {
            "Index": 21,
            "GT": 160,
            "Query": "6 * 5 * 5 + 7 + 2 - 8 + 9 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 5 = 150\n150 + 7 = 157\n157 + 2 = 159\n159 - 8 = 151\n151 + 9 =",
            "Response": " 160",
            "Extract-Response": " 160\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &num1);\n\n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &num2);\n\n    printf(\"Enter the third number: \");\n    scanf(\"%d\", &num3);\n\n    printf(\"Enter the fourth number: \");\n    scanf(\"%d\", &num4);\n\n    printf(\"Enter the fifth number: \");\n    scanf(\"%d\", &num5);\n\n    printf(\"Enter the sixth number: \");\n    scanf(\"%d\", &num6);\n\n    printf(\"Enter the seventh number: \");\n    scanf(\"%d\", &num7);\n\n    printf(\"Enter the eighth number: \");\n    scanf(\"%d\", &num8);\n\n    printf(\"Enter the ninth number: \");\n    scanf(\"%d\", &num9);\n\n    printf(\"Enter the tenth number: \");\n    scanf(\"%d\", &num10);\n\n    sum = num1 * num2 * num3 * num4 * num5 * num6 * num7 * num8 * num9 * num10;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 23,
            "GT": 19,
            "Query": "6 + 5 * 9 - 2 * 8 - 8 * 2 =   ",
            "Injected CoT": "5 * 9 = 45\n6 + 45 = 51\n2 * 8 = 16\n8 * 2 = 16\n51 - 16 = 35\n35 - 16 =",
            "Response": " 19",
            "Extract-Response": "\n\n19."
        },
        {
            "Index": 26,
            "GT": 44,
            "Query": "6 + 7 * 4 + 3 * 1 + 9 - 2 =   ",
            "Injected CoT": "7 * 4 = 28\n3 * 1 = 3\n6 + 28 = 34\n34 + 3 = 37\n37 + 9 = 46\n46 - 2 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char input[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24"
        },
        {
            "Index": 28,
            "GT": 79,
            "Query": "7 + 6 * 8 + 4 + 9 + 6 + 5 =   ",
            "Injected CoT": "6 * 8 = 48\n7 + 48 = 55\n55 + 4 = 59\n59 + 9 = 68\n68 + 6 = 74\n74 + 5 =",
            "Response": " 79\n\n79\n\n*/",
            "Extract-Response": "\n\n79"
        },
        {
            "Index": 29,
            "GT": -13,
            "Query": "2 * 5 + 5 + 1 - 6 * 6 + 7 =   ",
            "Injected CoT": "2 * 5 = 10\n10 + 5 = 15\n15 + 1 = 16\n6 * 6 = 36\n16 - 36 = -20\n-20 + 7 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 31,
            "GT": 42,
            "Query": "3 * 4 + 4 * 7 + 1 * 1 * 2 =   ",
            "Injected CoT": "3 * 4 = 12\n4 * 7 = 28\n1 * 1 = 1\n12 + 28 = 40\n40 + 2 =",
            "Response": " 42\n\n3 * 4 + 4 * 7 + 1 * 1 * 2 = 42",
            "Extract-Response": " 42\n\n*/"
        },
        {
            "Index": 32,
            "GT": -376,
            "Query": "5 - 1 - 7 * 7 * 8 + 3 + 9 =   ",
            "Injected CoT": "7 * 8 = 56\n-1 - 56 = -57\n-57 * 7 = -399\n5 - 399 = -394\n-394 + 3 = -391\n-391 + 9 =",
            "Response": " -382",
            "Extract-Response": " -382.\n\nNote:\nThe range of n is [-10000, 10000].\nThe range of ai is [-1000, 1000].\nThe range of aj is [-1000, 1000].\nThe range of b is [-10000, 10000].\nThe range of c is [-10000, 10000].\nThe range of d is [-10000, 10000].\nThe range of e is [-10000, 10000].\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int n = A.size();\n        if(n == 0) return 0;\n        int sum = 0;\n        int f0 = 0;\n        for(int i = 0; i < n; i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for(int i = 1; i < n; i++) {\n            f0 = f0 + sum - n * A[n - i];\n            if(f0 > max) max = f0;\n        }\n        return max;\n    }\n};"
        },
        {
            "Index": 34,
            "GT": -38,
            "Query": "7 - 9 - 8 * 7 + 9 * 3 - 7 =   ",
            "Injected CoT": "-8 * 7 = -56\n9 * 3 = 27\n-9 - 56 = -65\n-65 + 27 = -38\n-38 - 7 =",
            "Response": " -45",
            "Extract-Response": " -45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 35,
            "GT": -284,
            "Query": "2 + 9 * 5 - 6 * 8 * 7 + 5 =   ",
            "Injected CoT": "9 * 5 = 45\n6 * 8 = 48\n48 * 7 = 336\n2 + 45 = 47\n47 - 336 = -289\n-289 + 5 =",
            "Response": " -284",
            "Extract-Response": " -284.\n\nNote:\n\nThe input is always valid.\nYou may assume that evaluating the expressions will result in no division by zero and there is no contradiction.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                curNum = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * curNum;\n                curNum = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};"
        },
        {
            "Index": 36,
            "GT": -11,
            "Query": "4 - 4 + 5 + 4 + 8 - 4 * 7 =   ",
            "Injected CoT": "4 - 4 = 0\n0 + 5 = 5\n5 + 4 = 9\n9 + 8 = 17\n4 * 7 = 28\n17 - 28 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef exp(a):\n    # your code here\n    return"
        },
        {
            "Index": 37,
            "GT": 4,
            "Query": "1 - 2 * 9 + 3 + 6 + 2 * 6 =   ",
            "Injected CoT": "2 * 9 = 18\n1 - 18 = -17\n-17 + 3 = -14\n-14 + 6 = -8\n2 * 6 = 12\n-8 + 12 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 38,
            "GT": 133,
            "Query": "8 * 7 - 3 + 3 * 3 * 8 + 8 =   ",
            "Injected CoT": "8 * 7 = 56\n3 * 3 = 9\n9 * 8 = 72\n56 - 3 = 53\n53 + 72 = 125\n125 + 8 =",
            "Response": " 133",
            "Extract-Response": " 133\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,len,sum;\n    char str[100];\n    while(scanf(\"%s\",str)!=EOF)\n    {\n        sum=0;\n        len=strlen(str);\n        for(i=0;i<len;i++)\n        {\n            if(str[i]>='A'&&str[i]<='Z')\n            {\n                sum+=(str[i]-64)*(i+1);\n            }\n            else if(str[i]>='a'&&str[i]<='z')\n            {\n                sum+=(str[i]-96)*(i+1);\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 40,
            "GT": 20,
            "Query": "1 * 1 + 6 - 4 + 7 + 5 * 2 =   ",
            "Injected CoT": "1 * 1 = 1\n5 * 2 = 10\n1 + 6 = 7\n7 - 4 = 3\n3 + 7 = 10\n10 + 10 =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 41,
            "GT": -62,
            "Query": "8 - 7 * 4 * 2 - 7 + 1 - 8 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 2 = 56\n8 - 56 = -48\n-48 - 7 = -55\n-55 + 1 = -54\n-54 - 8 =",
            "Response": " -62",
            "Extract-Response": " -62.\n\nNote:\n\nThe length of given array won't exceed 1000.\nThere is only one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 42,
            "GT": 24207,
            "Query": "6 * 9 * 8 * 7 * 8 + 3 * 5 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 8 = 432\n432 * 7 = 3024\n3024 * 8 = 24192\n3 * 5 = 15\n24192 + 15 =",
            "Response": " 24207\n\n*/\n\npublic class FactorialDigitSum {\n\tpublic static void main(String[] args) {\n\t\tint sum = 0;\n\t\tBigInteger factorial = factorial(100);\n\t\tString factorialString = factorial.toString();\n\t\tfor (int i = 0; i < factorialString.length(); i++) {\n\t\t\tsum += Integer.parseInt(factorialString.substring(i, i + 1));\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n\t\n\tpublic static BigInteger factorial(int n) {\n\t\tBigInteger factorial = new BigInteger(\"1\");\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tfactorial = factorial.multiply(new BigInteger(i + \"\"));\n\t\t}\n\t\treturn factorial;\n\t}\n}",
            "Extract-Response": " 648"
        },
        {
            "Index": 43,
            "GT": -16,
            "Query": "1 * 7 + 5 + 1 - 5 - 6 * 4 =   ",
            "Injected CoT": "1 * 7 = 7\n7 + 5 = 12\n12 + 1 = 13\n13 - 5 = 8\n6 * 4 = 24\n8 - 24 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        int res = 0;\n        int cur = 0;\n        char op = '+';\n        for(int i = 0; i < len; i++) {\n            if(s[i] >= '0') {\n                cur = cur * 10 + s[i] - '0';\n            }\n            if(s[i] < '0' && s[i] != ' ' || i == len - 1) {\n                if(op == '+') {\n                    res += cur;\n                    cur = 0;\n                }\n                if(op == '-') {\n                    res -= cur;\n                    cur = 0;\n                }\n                if(op == '*') {\n                    res *= cur;\n                    cur = 0;\n                }\n                if(op == '/') {\n                    res /= cur;\n                    cur = 0;\n                }\n                op = s[i];\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 44,
            "GT": -7,
            "Query": "9 - 5 - 2 * 6 + 9 - 2 * 4 =   ",
            "Injected CoT": "2 * 6 = 12\n5 - 12 = -7\n-7 + 9 = 2\n2 * 4 = 8\n2 - 8 = -6\n-6 + 2 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 46,
            "GT": -32,
            "Query": "4 - 9 - 9 * 2 + 5 - 7 - 7 =   ",
            "Injected CoT": "9 * 2 = 18\n4 - 9 = -5\n-5 - 18 = -23\n-23 + 5 = -18\n-18 - 7 = -25\n-25 - 7 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 47,
            "GT": 25,
            "Query": "4 * 7 + 2 - 9 * 5 + 8 * 5 =   ",
            "Injected CoT": "4 * 7 = 28\n9 * 5 = 45\n8 * 5 = 40\n28 + 2 = 30\n30 - 45 = -15\n-15 + 40 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 48,
            "GT": 18,
            "Query": "4 + 5 - 2 + 6 + 5 + 5 - 5 =   ",
            "Injected CoT": "4 + 5 = 9\n9 - 2 = 7\n7 + 6 = 13\n13 + 5 = 18\n18 + 5 = 23\n23 - 5 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 49,
            "GT": 3581,
            "Query": "7 * 8 - 3 + 7 * 8 * 9 * 7 =   ",
            "Injected CoT": "7 * 8 = 56\n56 - 3 = 53\n8 * 9 = 72\n72 * 7 = 504\n53 + 504 =",
            "Response": " 557",
            "Extract-Response": "\n<code>557\n</code>\n"
        },
        {
            "Index": 50,
            "GT": 11,
            "Query": "5 + 6 - 2 + 5 - 2 - 9 + 8 =   ",
            "Injected CoT": "5 + 6 = 11\n11 - 2 = 9\n9 + 5 = 14\n14 - 2 = 12\n12 - 9 = 3\n3 + 8 =",
            "Response": " 11",
            "Extract-Response": "\n\n11"
        },
        {
            "Index": 51,
            "GT": 1,
            "Query": "3 * 4 - 9 + 3 + 2 * 2 - 9 =   ",
            "Injected CoT": "3 * 4 = 12\n12 - 9 = 3\n3 + 3 = 6\n2 * 2 = 4\n6 + 4 = 10\n10 - 9 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 52,
            "GT": 24,
            "Query": "8 * 4 - 7 * 4 - 7 + 9 * 3 =   ",
            "Injected CoT": "8 * 4 = 32\n7 * 4 = 28\n32 - 28 = 4\n9 * 3 = 27\n4 + 27 = 31\n31 - 7 =",
            "Response": " 24",
            "Extract-Response": "\n<code>24\n</code>\n"
        },
        {
            "Index": 53,
            "GT": 5,
            "Query": "9 - 1 * 1 + 6 - 9 + 7 - 7 =   ",
            "Injected CoT": "1 * 1 = 1\n9 - 1 = 8\n8 + 6 = 14\n14 - 9 = 5\n5 + 7 = 12\n12 - 7 =",
            "Response": " 5\n\n5",
            "Extract-Response": " 5"
        },
        {
            "Index": 54,
            "GT": 42,
            "Query": "4 * 7 - 7 + 1 + 2 + 6 * 3 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 7 = 21\n1 + 21 = 22\n22 + 2 = 24\n6 * 3 = 18\n24 + 18 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n    a = 4 * 7 - 7 + 1 + 2 + 6 * 3;\n    b = 3 + 2 * 6;\n    c = 2 + 5 * 3 + 4;\n    d = 5 + 4 * 3 + 2;\n    e = 4 + 3 * 5 + 2;\n    f = 3 + 2 * 5 + 4;\n    g = 2 + 4 * 3 + 5;\n    h = 4 * 5 + 3 + 2;\n    i = 5 * 4 + 3 + 2;\n    j = 3 * 5 + 4 + 2;\n    k = 5 * 3 + 4 + 2;\n    l = 4 * 3 + 5 + 2;\n    m = 3 * 4 + 5 + 2;\n    n = 5 * 3 + 2 + 4;\n    o = 3 * 5 + 2 + 4;\n    p = 2 * 5 + 3 + 4;\n    q = 5 * 2 + 3 + 4;\n    r = 3 * 2 + 5 + 4;\n    s = 2 * 3 + 5 + 4;\n    t = 5 * 2 + 4 + 3;\n    u = 2 * 5 + 4 + 3;\n    v = 4 * 5 + 2 + 3;\n    w = 5 * 4 + 2 + 3;\n    x = 2 * 4 + 5 + 3;\n    y = 4 * 2 + 5 + 3;\n    z = 2 * 4 + 3 + 5;\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 55,
            "GT": 69,
            "Query": "7 + 6 + 7 * 5 + 5 + 2 * 8 =   ",
            "Injected CoT": "7 + 6 = 13\n7 * 5 = 35\n2 * 8 = 16\n13 + 35 = 48\n48 + 5 = 53\n53 + 16 =",
            "Response": " 69\n\n69\n\n*/",
            "Extract-Response": "\n\n69"
        },
        {
            "Index": 59,
            "GT": -6,
            "Query": "9 - 7 * 1 - 5 * 3 - 2 + 9 =   ",
            "Injected CoT": "7 * 1 = 7\n5 * 3 = 15\n9 - 7 = 2\n2 - 15 = -13\n-13 - 2 = -15\n-15 + 9 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 62,
            "GT": 1,
            "Query": "4 * 2 + 9 + 4 - 7 - 8 - 5 =   ",
            "Injected CoT": "4 * 2 = 8\n8 + 9 = 17\n17 + 4 = 21\n21 - 7 = 14\n14 - 8 = 6\n6 - 5 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++result;\n        } else {\n            --result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 63,
            "GT": 9,
            "Query": "3 * 8 - 2 * 3 - 3 * 1 - 6 =   ",
            "Injected CoT": "3 * 8 = 24\n2 * 3 = 6\n3 * 1 = 3\n24 - 6 - 3 - 6 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the given array is positive and will not exceed 10^5\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};"
        },
        {
            "Index": 67,
            "GT": 119,
            "Query": "6 + 5 + 9 * 4 + 9 * 2 * 4 =   ",
            "Injected CoT": "9 * 4 = 36\n9 * 2 * 4 = 72\n6 + 5 = 11\n11 + 36 = 47\n47 + 72 =",
            "Response": " 119\n\n*/\n\npublic class Solution {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nThe idea is that the final sum of the digit is the remainder of the sum of the digit and 9.\n\nFor example:\n\nnum = 38\n\nThe process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 % 9 = 2, the final answer is 2.\n\n*/"
        },
        {
            "Index": 68,
            "GT": 33,
            "Query": "6 * 1 * 1 + 7 * 4 - 2 + 1 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 1 = 6\n6 + 7 = 13\n13 * 4 = 52\n52 - 2 = 50\n50 + 1 =",
            "Response": " 51",
            "Extract-Response": " 51.\n\nNote:\n\nThere will only be '(', ')', '-' and '+' operators used.\nThe input string will not contain white spaces.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int ans = 0;\n        int sign = 1;\n        int cur = 0;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                int j = i, cnt = 0;\n                for(; i < n; i++) {\n                    if(s[i] == '(') cnt++;\n                    if(s[i] == ')') cnt--;\n                    if(cnt == 0) break;\n                }\n                cur = calculate(s.substr(j + 1, i - j));\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        ans += sign * cur;\n        return ans;\n    }\n};"
        },
        {
            "Index": 69,
            "GT": -60,
            "Query": "7 + 9 - 2 - 2 * 5 * 8 + 6 =   ",
            "Injected CoT": "5 * 8 = 40\n2 * 40 = 80\n7 + 9 = 16\n16 - 2 = 14\n14 - 80 = -66\n-66 + 6 =",
            "Response": " -60",
            "Extract-Response": " -60.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will be no answer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        int res = 0;\n        int cur = 0;\n        char op = '+';\n        for(int i = 0; i < len; i++) {\n            if(s[i] >= '0') {\n                cur = cur * 10 + s[i] - '0';\n            }\n            if((s[i] < '0' && s[i] != ' ') || i == len - 1) {\n                if(op == '+') {\n                    res += cur;\n                    cur = 0;\n                } else if(op == '-') {\n                    res -= cur;\n                    cur = 0;\n                } else if(op == '*') {\n                    res *= cur;\n                    cur = 0;\n                } else if(op == '/') {\n                    res /= cur;\n                    cur = 0;\n                }\n                op = s[i];\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 70,
            "GT": 52,
            "Query": "6 + 9 * 4 + 2 + 6 * 1 + 2 =   ",
            "Injected CoT": "9 * 4 = 36\n6 + 36 = 42\n6 * 1 = 6\n2 + 6 = 8\n42 + 8 =",
            "Response": " 50\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    sort(begin(a), end(a));\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i] * i;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 50."
        },
        {
            "Index": 72,
            "GT": 23,
            "Query": "9 + 2 + 9 + 1 + 2 - 3 + 3 =   ",
            "Injected CoT": "9 + 2 = 11\n11 + 9 = 20\n20 + 1 = 21\n21 + 2 = 23\n23 - 3 = 20\n20 + 3 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 74,
            "GT": 39,
            "Query": "6 + 4 * 5 + 5 - 4 + 8 + 4 =   ",
            "Injected CoT": "4 * 5 = 20\n6 + 20 = 26\n26 + 5 = 31\n31 - 4 = 27\n27 + 8 = 35\n35 + 4 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 77,
            "GT": 23,
            "Query": "4 + 1 * 5 + 8 * 2 - 8 + 6 =   ",
            "Injected CoT": "1 * 5 = 5\n8 * 2 = 16\n4 + 5 = 9\n9 + 16 = 25\n25 - 8 = 17\n17 + 6 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 78,
            "GT": -21,
            "Query": "3 - 7 * 7 - 5 - 5 + 7 * 5 =   ",
            "Injected CoT": "7 * 7 = 49\n3 - 49 = -46\n-46 - 5 = -51\n-51 - 5 = -56\n7 * 5 = 35\n-56 + 35 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 79,
            "GT": 4,
            "Query": "4 - 4 + 5 - 6 + 3 + 7 - 5 =   ",
            "Injected CoT": "4 - 4 = 0\n0 + 5 = 5\n5 - 6 = -1\n-1 + 3 = 2\n2 + 7 = 9\n9 - 5 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 80,
            "GT": 65,
            "Query": "3 + 8 * 4 - 4 + 8 * 4 + 2 =   ",
            "Injected CoT": "8 * 4 = 32\n3 + 32 = 35\n35 - 4 = 31\n8 * 4 = 32\n31 + 32 = 63\n63 + 2 =",
            "Response": " 65\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a = 3;\n    int b = 8;\n    int c = 4;\n    int d = 2;\n    int e = a + b * c - d + b * c + d;\n    printf(\"%d\\n\", e);\n    return 0;\n}",
            "Extract-Response": " 65"
        },
        {
            "Index": 81,
            "GT": 36,
            "Query": "4 + 7 + 6 - 7 - 6 + 4 * 8 =   ",
            "Injected CoT": "4 + 7 = 11\n11 + 6 = 17\n17 - 7 = 10\n10 - 6 = 4\n4 * 8 = 32\n10 + 32 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 82,
            "GT": 85,
            "Query": "2 + 3 * 5 * 1 + 4 + 8 * 8 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 1 = 15\n2 + 15 = 17\n17 + 4 = 21\n8 * 8 = 64\n21 + 64 =",
            "Response": " 85\n\n85\n\n*/",
            "Extract-Response": "\n\n85"
        },
        {
            "Index": 83,
            "GT": 13,
            "Query": "7 + 1 + 2 * 7 - 1 * 1 * 9 =   ",
            "Injected CoT": "2 * 7 = 14\n1 * 1 = 1\n14 - 1 = 13\n7 + 1 = 8\n8 + 13 =",
            "Response": " 21\n\n21\n\n*/",
            "Extract-Response": "\n\n21"
        },
        {
            "Index": 85,
            "GT": 70,
            "Query": "2 - 3 + 6 * 6 - 1 + 6 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n2 - 3 = -1\n-1 + 36 = 35\n35 - 1 =",
            "Response": " 34",
            "Extract-Response": "\n\n34"
        },
        {
            "Index": 86,
            "GT": -80,
            "Query": "2 - 6 - 1 - 2 * 6 - 9 * 7 =   ",
            "Injected CoT": "2 * 6 = 12\n-9 * 7 = -63\n-6 - 1 = -7\n-7 - 12 =",
            "Response": " -19\n\n2 - 6 - 1 - 2 * 6 - 9 * 7 = -19",
            "Extract-Response": " -19.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num[MAX_SIZE], result = 0;\n    int sign = 1;\n\n    scanf(\"%s\", input);\n    len = strlen(input);\n\n    for(i = 0, j = 0; i < len; i++)\n    {\n        if(input[i] == '+' || input[i] == '-')\n        {\n            num[j] = result;\n            result = 0;\n            j++;\n        }\n        else if(input[i] == '*')\n        {\n            num[j - 1] = num[j - 1] * (input[i + 1] - '0');\n            i++;\n        }\n        else if(input[i] == '/')\n        {\n            num[j - 1] = num[j - 1] / (input[i + 1] - '0');\n            i++;\n        }\n        else\n        {\n            result = result * 10 + (input[i] - '0');\n        }\n    }\n\n    num[j] = result;\n\n    for(i = 0; i <= j; i++)\n    {\n        printf(\"%d \", num[i]);\n    }\n\n    printf(\"\\n\");\n\n    for(i = 0; i <= j; i++)\n    {\n        result = result + num[i];\n    }\n\n    printf(\"%d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 87,
            "GT": -28,
            "Query": "3 - 5 + 6 * 9 - 4 * 4 * 5 =   ",
            "Injected CoT": "6 * 9 = 54\n4 * 4 = 16\n16 * 5 = 80\n3 - 5 = -2\n-2 + 54 = 52\n52 - 80 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer a\n\nGuaranteed constraints:\n-100 \u2264 a \u2264 100.\n\n[input] integer b\n\nGuaranteed constraints:\n-100 \u2264 b \u2264 100.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arithmeticExpression(a, b):\n    if a + b == a * b:\n        return True\n    if a - b == a * b:\n        return True\n    if a + b == a / b:\n        return True\n    if a - b == a / b:\n        return True\n    if a * b == a / b:\n        return True\n    return False"
        },
        {
            "Index": 88,
            "GT": 4,
            "Query": "9 * 4 + 6 - 8 * 4 * 1 - 6 =   ",
            "Injected CoT": "9 * 4 = 36\n8 * 4 = 32\n32 * 1 = 32\n36 + 6 = 42\n42 - 32 = 10\n10 - 6 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\n\nThe length of the given array is in range [3, 1000] and will be in the range of 32-bit signed integer.\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max1 = INT_MIN, max2 = INT_MIN, min1 = INT_MAX, min2 = INT_MAX;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] > max1) {\n                max2 = max1;\n                max1 = nums[i];\n            } else if (nums[i] > max2) {\n                max2 = nums[i];\n            }\n            if (nums[i] < min1) {\n                min2 = min1;\n                min1 = nums[i];\n            } else if (nums[i] < min2) {\n                min2 = nums[i];\n            }\n        }\n        return max(max1 * max2, min1 * min2);\n    }\n};"
        },
        {
            "Index": 89,
            "GT": 57,
            "Query": "2 + 2 + 9 + 5 * 8 - 3 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n2 + 2 = 4\n4 + 9 = 13\n13 + 40 = 53\n53 - 3 = 50\n50 + 7 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, len, result = 0, num = 0;\n    char sign = '+';\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            if(sign == '+')\n            {\n                result += num;\n            }\n            else if(sign == '-')\n            {\n                result -= num;\n            }\n            else if(sign == '*')\n            {\n                result *= num;\n            }\n            else if(sign == '/')\n            {\n                result /= num;\n            }\n\n            num = 0;\n            sign = input[i];\n        }\n        else\n        {\n            num = num * 10 + input[i] - '0';\n        }\n    }\n\n    if(sign == '+')\n    {\n        result += num;\n    }\n    else if(sign == '-')\n    {\n        result -= num;\n    }\n    else if(sign == '*')\n    {\n        result *= num;\n    }\n    else if(sign == '/')\n    {\n        result /= num;\n    }\n\n    printf(\"Result = %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 92,
            "GT": 70,
            "Query": "2 + 2 + 9 + 3 + 6 * 3 * 3 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 3 = 54\n2 + 2 = 4\n4 + 9 = 13\n13 + 3 = 16\n16 + 54 =",
            "Response": " 70\n70 + 6 = 76\n\n76 is not divisible by 10, so it is not a valid ISBN-10 number.\n\nNote:\n\nAn ISBN is a numeric code associated with a book. Given the ISBN number of a book, determine if it is a valid ISBN.\n\nFollow up:\nWhat if the input is not a string? For example, the input is a number?\n\n*/\n\nclass Solution {\npublic:\n    bool isValid(string isbn) {\n        int n = isbn.size();\n        if(n != 10) return false;\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            if(isbn[i] == '-') continue;\n            if(isbn[i] < '0' || isbn[i] > '9') return false;\n            sum += (isbn[i] - '0') * (i + 1);\n        }\n        return sum % 11 == 0;\n    }\n};",
            "Extract-Response": "\n\nclass Solution {\npublic:\n    bool isValid(string isbn) {\n        int n = isbn.size();\n        if(n != 10) return false;\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            if(isbn[i] == '-') continue;\n            if(isbn[i] < '0' || isbn[i] > '9') return false;\n            sum += (isbn[i] - '0') * (i + 1);\n        }\n        return sum % 11 == 0;\n    }\n};"
        },
        {
            "Index": 93,
            "GT": 10,
            "Query": "6 + 8 + 1 - 7 * 2 + 9 * 1 =   ",
            "Injected CoT": "7 * 2 = 14\n6 + 8 + 1 - 14 + 9 * 1 = \n9 * 1 = 9\n6 + 8 + 1 - 14 + 9 = \n6 + 8 = 14\n14 + 1 = 15\n15 - 14 = 1\n1 + 9 =",
            "Response": " 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < n; ++i)\n    {\n        if (s[i] == ' ')\n        {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        }\n        else if (s[i] == '+')\n        {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            num = 0;\n            sign = -1;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n    result += sign * num;\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 94,
            "GT": 228,
            "Query": "8 * 7 * 1 * 6 - 6 * 2 * 9 =   ",
            "Injected CoT": "8 * 7 = 56\n56 * 1 = 56\n56 * 6 = 336\n6 * 2 = 12\n12 * 9 = 108\n336 - 108 =",
            "Response": " 228",
            "Extract-Response": " 228\n</code>\n"
        },
        {
            "Index": 95,
            "GT": 124,
            "Query": "6 * 3 * 6 + 2 + 3 + 2 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 6 = 108\n108 + 2 = 110\n110 + 3 = 113\n113 + 2 = 115\n115 + 9 =",
            "Response": " 124\n\n*/",
            "Extract-Response": "\n\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100 + 101 + 102 + 103 + 104 + 105 + 106 + 107 + 108 + 109 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 120 + 121 + 122 + 123 + 124 = 1275"
        },
        {
            "Index": 97,
            "GT": 123,
            "Query": "2 - 7 + 1 * 2 * 8 * 2 * 4 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n2 - 7 = -5\n-5 + 128 =",
            "Response": " 123\n\n3 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n3 - 7 = -4\n-4 + 128 = 124\n\n4 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n4 - 7 = -3\n-3 + 128 = 125\n\n5 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n5 - 7 = -2\n-2 + 128 = 126\n\n6 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n6 - 7 = -1\n-1 + 128 = 127\n\n7 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n7 - 7 = 0\n0 + 128 = 128\n\n8 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n8 - 7 = 1\n1 + 128 = 129\n\n9 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n9 - 7 = 2\n2 + 128 = 130\n\n10 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n10 - 7 = 3\n3 + 128 = 131\n\n11 - 7 + 1 * 2 * 8 * 2 * 4 =    \n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 128\n11 - 7 = 4\n4 + 128 = 132",
            "Extract-Response": "\n\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132."
        },
        {
            "Index": 98,
            "GT": 40,
            "Query": "6 + 4 * 6 * 1 - 1 + 3 + 8 =   ",
            "Injected CoT": "4 * 6 = 24\n6 * 24 = 144\n144 * 1 = 144\n6 + 144 = 150\n150 - 1 = 149\n149 + 3 = 152\n152 + 8 =",
            "Response": " 160\n\n160\n\n*/",
            "Extract-Response": "\n\n160"
        },
        {
            "Index": 99,
            "GT": -3,
            "Query": "6 - 4 - 8 + 8 - 9 + 9 - 5 =   ",
            "Injected CoT": "6 - 4 = 2\n2 - 8 = -6\n-6 + 8 = 2\n2 - 9 = -7\n-7 + 9 = 2\n2 - 5 =",
            "Response": " -3\n-3 + 5 = 2",
            "Extract-Response": " 2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        if (curr < 0) {\n            ++result;\n            curr = 0;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 100,
            "GT": 33,
            "Query": "2 - 6 + 9 + 9 + 9 + 2 + 8 =   ",
            "Injected CoT": "2 - 6 = -4\n-4 + 9 = 5\n5 + 9 = 14\n14 + 9 = 23\n23 + 2 = 25\n25 + 8 =",
            "Response": " 33",
            "Extract-Response": " 33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum;\n\n    /*\n     * Reads and stores the string into an array.\n     * If the input contains more than 100 characters,\n     * only first 100 characters will be read into the\n     * array.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterates through the string and checks for\n     * numeric characters.\n     */\n    for(i=0, sum=0; i<len; i++)\n    {\n        /*\n         * If the current character is numeric,\n         * convert it into integer and add it to sum.\n         */\n        if(isdigit(str[i]))\n        {\n            sum += (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all digits = %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 102,
            "GT": 56,
            "Query": "1 + 8 * 6 - 8 + 3 * 6 - 3 =   ",
            "Injected CoT": "8 * 6 = 48\n1 + 48 = 49\n3 * 6 = 18\n49 - 8 = 41\n41 + 18 = 59\n59 - 3 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, sum = 0;\n\n    scanf(\"%d\", &n);\n\n    for(i = 1; i <= n; i++)\n    {\n        for(j = 1; j <= n; j++)\n        {\n            if(i == j)\n            {\n                sum = sum + i * j;\n            }\n        }\n    }\n\n    printf(\"%d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 105,
            "GT": -356,
            "Query": "3 * 9 + 9 - 8 * 7 * 7 * 1 =   ",
            "Injected CoT": "3 * 9 = 27\n8 * 7 = 56\n56 * 7 = 392\n392 * 1 = 392\n27 + 9 = 36\n36 - 392 =",
            "Response": " -356",
            "Extract-Response": " -356.\n\nNote:\n\nThe input is always valid.\nFollow up:\nCould you do it in one pass?\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 106,
            "GT": 22,
            "Query": "5 - 3 - 5 + 9 + 7 + 3 * 3 =   ",
            "Injected CoT": "5 - 3 = 2\n2 - 5 = -3\n-3 + 9 = 6\n6 + 7 = 13\n3 * 3 = 9\n13 + 9 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 109,
            "GT": 53,
            "Query": "9 * 6 - 4 + 5 - 4 + 1 * 2 =   ",
            "Injected CoT": "9 * 6 = 54\n54 - 4 = 50\n50 + 5 = 55\n55 - 4 = 51\n1 * 2 = 2\n51 + 2 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 110,
            "GT": 50,
            "Query": "1 + 4 + 4 + 6 * 7 - 6 + 5 =   ",
            "Injected CoT": "6 * 7 = 42\n1 + 4 = 5\n5 + 4 = 9\n9 + 42 = 51\n51 - 6 = 45\n45 + 5 =",
            "Response": " 50",
            "Extract-Response": "\n\n50"
        },
        {
            "Index": 111,
            "GT": 38,
            "Query": "7 * 4 + 8 + 9 + 1 * 2 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n1 * 2 = 2\n28 + 8 = 36\n36 + 9 = 45\n45 + 2 = 47\n47 - 9 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 112,
            "GT": 56,
            "Query": "2 * 2 + 9 + 8 + 5 + 6 * 5 =   ",
            "Injected CoT": "2 * 2 = 4\n6 * 5 = 30\n4 + 9 = 13\n13 + 8 = 21\n21 + 5 = 26\n26 + 30 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n        if(str[i] == '+')\n            continue;\n        if(str[i] == '*')\n        {\n            sum = sum * (str[i + 1] - '0');\n            i++;\n            continue;\n        }\n        sum = sum + (str[i] - '0');\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}"
        },
        {
            "Index": 113,
            "GT": -36,
            "Query": "5 - 8 * 1 - 3 * 8 - 1 * 9 =   ",
            "Injected CoT": "8 * 1 = 8\n-8 - 24 = -32\n-1 * 9 = -9\n5 - 32 - 9 =",
            "Response": " -36\n\n-36\n\n*/",
            "Extract-Response": " -36"
        },
        {
            "Index": 114,
            "GT": 20,
            "Query": "3 + 6 + 2 - 1 - 2 + 3 * 4 =   ",
            "Injected CoT": "3 + 6 = 9\n9 + 2 = 11\n11 - 1 = 10\n10 - 2 = 8\n3 * 4 = 12\n8 + 12 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <unordered_map>\n#include <unordered_set>\n#include <functional>\n#include <set>\n#include <math.h>\n#include <cassert>\n#include <ctime>\n#include <fstream>\n#include <sstream>\n#include <locale>\n#include <map>\n#include <iterator>\n#include <numeric> \n#include <bitset>\n#include <deque>\n#include <list>\n#include <array>\n#include <bits/stdc++.h>\nusing namespace std;\n\n/*\nGiven a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nThe brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n*/\nclass Solution {\npublic:\n\tbool isValid(string s) {\n\t\tif (s.empty()) return true;\n\t\tif (s.size() % 2) return false;\n\t\tstack<char> stk;\n\t\tfor (auto c : s)\n\t\t{\n\t\t\tif (c == '(' || c == '{' || c == '[') stk.push(c);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (stk.empty()) return false;\n\t\t\t\tif (c == ')' && stk.top() != '(') return false;\n\t\t\t\tif (c == '}' && stk.top() != '{') return false;\n\t\t\t\tif (c == ']' && stk.top() != '[') return false;\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t}\n\t\treturn stk.empty();\n\t}\n};\n\nvoid runTests()\n{\n\tSolution s;\n\tassert(true == s.isValid(\"()\"));\n\tassert(true == s.isValid(\"()[]{}\"));\n\tassert(false == s.isValid(\"(]\"));\n\tassert(false == s.isValid(\"([)]\"));\n\tassert(false == s.isValid(\"]\"));\n\tassert(false == s.isValid(\"[\"));\n\tassert(false == s.isValid(\"\"));\n\tassert(false == s.isValid(\"[(])\"));\n}\n\nint main(int argc, char *argv[]) {\n\trunTests();\n}"
        },
        {
            "Index": 118,
            "GT": 9,
            "Query": "6 * 1 + 5 - 3 * 3 + 4 + 3 =   ",
            "Injected CoT": "6 * 1 = 6\n3 * 3 = 9\n6 + 5 = 11\n11 - 9 = 2\n2 + 4 = 6\n6 + 3 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 120,
            "GT": 4,
            "Query": "2 - 8 + 4 - 9 - 5 + 5 * 4 =   ",
            "Injected CoT": "5 * 4 = 20\n2 - 8 = -6\n-6 + 4 = -2\n-2 - 9 = -11\n-11 - 5 = -16\n-16 + 20 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a + b + c, a * b * c, a * (b + c), (a + b) * c, a + b * c)"
        },
        {
            "Index": 121,
            "GT": 72576,
            "Query": "6 * 8 * 6 * 7 * 6 * 2 * 3 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 6 = 288\n288 * 7 = 2016\n2016 * 6 = 12096\n12096 * 2 = 24192\n24192 * 3 =",
            "Response": " 72576\n\n7 * 8 * 6 * 7 * 6 * 2 * 3 =    \n7 * 8 = 56\n56 * 6 = 336\n336 * 7 = 2352\n2352 * 6 = 14112\n14112 * 2 = 28224\n28224 * 3 = 84672\n\n8 * 8 * 6 * 7 * 6 * 2 * 3 =    \n8 * 8 = 64\n64 * 6 = 384\n384 * 7 = 2688\n2688 * 6 = 16128\n16128 * 2 = 32256\n32256 * 3 = 96768\n\n9 * 8 * 6 * 7 * 6 * 2 * 3 =    \n9 * 8 = 72\n72 * 6 = 432\n432 * 7 = 3024\n3024 * 6 = 18144\n18144 * 2 = 36288\n36288 * 3 = 108864\n\n10 * 8 * 6 * 7 * 6 * 2 * 3 =    \n10 * 8 = 80\n80 * 6 = 480\n480 * 7 = 3360\n3360 * 6 = 20160\n20160 * 2 = 40320\n40320 * 3 = 120960\n\n11 * 8 * 6 * 7 * 6 * 2 * 3 =    \n11 * 8 = 88\n88 * 6 = 528\n528 * 7 = 3696\n3696 * 6 = 22176\n22176 * 2 = 44352\n44352 * 3 = 133456\n\n12 * 8 * 6 * 7 * 6 * 2 * 3 =    \n12 * 8 = 96\n96 * 6 = 576\n576 * 7 = 4032\n4032 * 6 = 24192\n24192 * 2 = 48384\n48384 * 3 = 145152",
            "Extract-Response": "\n\n7 * 8 * 6 * 7 * 6 * 2 * 3 = 72576"
        },
        {
            "Index": 122,
            "GT": 296,
            "Query": "5 + 3 + 8 * 1 * 2 * 3 * 6 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 2 = 16\n16 * 3 = 48\n5 + 3 = 8\n8 + 48 = 56\n56 + 8 =",
            "Response": " 64\n\n64\n\n*/",
            "Extract-Response": "\n\n64"
        },
        {
            "Index": 123,
            "GT": 223,
            "Query": "1 * 6 + 4 + 3 + 7 * 5 * 6 =   ",
            "Injected CoT": "1 * 6 = 6\n7 * 5 = 35\n35 * 6 = 210\n6 + 4 = 10\n10 + 3 = 13\n13 + 210 =",
            "Response": " 223",
            "Extract-Response": " 223\n</code>\n"
        },
        {
            "Index": 125,
            "GT": 51,
            "Query": "9 * 7 * 1 - 1 - 7 + 1 - 5 =   ",
            "Injected CoT": "9 * 7 = 63\n63 * 1 = 63\n63 - 1 = 62\n62 - 7 = 55\n55 + 1 = 56\n56 - 5 =",
            "Response": " 51\n\n51\n\n*/",
            "Extract-Response": "\n\n51"
        },
        {
            "Index": 126,
            "GT": 70,
            "Query": "8 * 7 + 3 + 4 + 3 + 7 - 3 =   ",
            "Injected CoT": "8 * 7 = 56\n56 + 3 = 59\n59 + 4 = 63\n63 + 3 = 66\n66 + 7 = 73\n73 - 3 =",
            "Response": " 70",
            "Extract-Response": " 70\n</code>\n"
        },
        {
            "Index": 127,
            "GT": -60,
            "Query": "6 * 3 - 1 * 6 * 1 - 9 * 8 =   ",
            "Injected CoT": "6 * 3 = 18\n1 * 6 = 6\n6 * 1 = 6\n18 - 6 - 9 * 8 =",
            "Response": "\n18 - 6 = 12\n12 - 9 * 8 =\n12 - 9 = 3\n3 - 8 = -5",
            "Extract-Response": " -5\n"
        },
        {
            "Index": 128,
            "GT": 32,
            "Query": "5 * 8 - 9 + 4 - 4 - 6 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n40 - 9 = 31\n31 + 4 = 35\n35 - 4 = 31\n31 - 6 = 25\n25 + 7 =",
            "Response": " 32",
            "Extract-Response": "\n\n32"
        },
        {
            "Index": 129,
            "GT": 16,
            "Query": "2 + 5 * 2 - 5 + 3 + 2 + 4 =   ",
            "Injected CoT": "5 * 2 = 10\n2 + 10 = 12\n12 - 5 = 7\n7 + 3 = 10\n10 + 2 = 12\n12 + 4 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\n1. You may assume that the given expression is always valid.\n2. Do not use the eval built-in library function.\n\n\"\"\"\n\nclass Solution:\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        stack = []\n        sign = '+'\n        num = 0\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-*/' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                elif sign == '/':\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)"
        },
        {
            "Index": 130,
            "GT": 279,
            "Query": "1 + 8 * 7 * 1 * 5 + 5 - 7 =   ",
            "Injected CoT": "8 * 7 = 56\n1 * 56 = 56\n56 * 1 = 56\n56 * 5 = 280\n1 + 280 = 281\n281 + 5 = 286\n286 - 7 =",
            "Response": " 279",
            "Extract-Response": " 279\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634"
        },
        {
            "Index": 131,
            "GT": -28,
            "Query": "5 * 1 - 5 * 2 - 8 * 2 - 7 =   ",
            "Injected CoT": "5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 132,
            "GT": 3,
            "Query": "4 + 8 - 4 - 8 - 6 * 1 + 9 =   ",
            "Injected CoT": "4 + 8 = 12\n12 - 4 = 8\n8 - 8 = 0\n6 * 1 = 6\n0 - 6 = -6\n-6 + 9 =",
            "Response": " 3",
            "Extract-Response": " 3.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 133,
            "GT": 153,
            "Query": "6 + 6 * 7 + 7 + 2 * 7 * 7 =   ",
            "Injected CoT": "6 + 6 = 12\n7 * 7 = 49\n2 * 7 = 14\n14 * 7 = 98\n12 * 49 = 588\n588 + 7 = 595\n595 + 98 =",
            "Response": " 693\n693 + 14 = 707\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int digit = 0;\n    int digitSum = 0;\n    int digitSquare = 0;\n    int digitSquareSum = 0;\n    int digitSquareSumSquare = 0;\n    int digitSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n   ",
            "Extract-Response": "\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 135,
            "GT": 59,
            "Query": "8 * 1 * 7 * 1 + 6 - 2 - 1 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 7 = 56\n56 * 1 = 56\n56 + 6 = 62\n62 - 2 = 60\n60 - 1 =",
            "Response": " 59\n\n59\n\n*/",
            "Extract-Response": "\n\n59"
        },
        {
            "Index": 136,
            "GT": 20,
            "Query": "4 * 1 * 5 + 1 - 4 - 3 + 6 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 5 = 20\n20 + 1 = 21\n21 - 4 = 17\n17 - 3 = 14\n14 + 6 =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 138,
            "GT": 435,
            "Query": "1 + 1 + 9 * 3 * 4 * 4 + 1 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 4 = 108\n108 * 4 = 432\n1 + 1 = 2\n432 + 2 = 434\n434 + 1 =",
            "Response": " 435\n\n*/\n\npublic class Solution {\n    public int Add(int num1,int num2) {\n        int sum = 0,carry = 0;\n        do{\n            sum = num1 ^ num2;\n            carry = (num1 & num2) << 1;\n            num1 = sum;\n            num2 = carry;\n        }while(num2 != 0);\n        return num1;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int Add(int num1,int num2) {\n        int sum = 0,carry = 0;\n        do{\n            sum = num1 ^ num2;\n            carry = (num1 & num2) << 1;\n            num1 = sum;\n            num2 = carry;\n        }while(num2 != 0);\n        return num1;\n    }\n}"
        },
        {
            "Index": 139,
            "GT": 61,
            "Query": "6 * 3 * 3 - 7 + 4 + 4 + 6 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 3 = 54\n54 - 7 = 47\n47 + 4 = 51\n51 + 4 = 55\n55 + 6 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n            c = c * 2 % mod;\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 140,
            "GT": 26,
            "Query": "6 + 9 * 3 - 7 * 3 + 9 + 5 =   ",
            "Injected CoT": "9 * 3 = 27\n7 * 3 = 21\n6 + 27 = 33\n33 - 21 = 12\n12 + 9 = 21\n21 + 5 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 141,
            "GT": -3,
            "Query": "1 + 3 + 4 + 7 - 2 * 9 * 1 =   ",
            "Injected CoT": "2 * 9 = 18\n1 + 3 + 4 + 7 - 18 * 1 =",
            "Response": " \n1 + 3 + 4 + 7 - 18 = \n-9",
            "Extract-Response": "\n-9\n\n*/"
        },
        {
            "Index": 143,
            "GT": 152,
            "Query": "7 * 5 * 5 - 3 * 4 * 2 + 1 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 5 = 175\n3 * 4 = 12\n12 * 2 = 24\n175 - 24 = 151\n151 + 1 =",
            "Response": " 152\n\n7 * 5 * 5 - 3 * 4 * 2 + 1 = 152",
            "Extract-Response": " 152\n\n7 * 5 * 5 - 3 * 4 * 2 + 1 = 152"
        },
        {
            "Index": 147,
            "GT": 5,
            "Query": "1 + 1 - 3 * 2 - 6 + 3 * 5 =   ",
            "Injected CoT": "1 = 1\n1 + 1 = 2\n3 * 2 = 6\n2 - 6 = -4\n-4 - 6 = -10\n3 * 5 = 15\n-10 + 15 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 148,
            "GT": 15,
            "Query": "5 + 1 * 2 * 2 - 5 + 4 + 7 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 2 = 4\n5 + 4 = 9\n9 + 7 = 16\n16 - 5 = 11\n11 + 5 =",
            "Response": " 16\n16 + 1 = 17",
            "Extract-Response": " 17\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    while (n) {\n        result += n % 10;\n        n /= 10;\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 150,
            "GT": -31,
            "Query": "4 - 6 * 8 + 8 * 5 - 3 * 9 =   ",
            "Injected CoT": "6 * 8 = 48\n8 * 5 = 40\n3 * 9 = 27\n4 - 48 = -44\n-44 + 40 = -4\n-4 - 27 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote:\nThe input is always valid. Try to come up with a more efficient algorithm.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (int i = 0; i < s.size(); ++i) {\n            if (isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            } else if (s[i] == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 151,
            "GT": 6,
            "Query": "3 * 3 - 2 * 3 - 2 - 2 + 7 =   ",
            "Injected CoT": "3 * 3 = 9\n2 * 3 = 6\n9 - 6 = 3\n3 - 2 = 1\n1 - 2 = -1\n-1 + 7 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 152,
            "GT": -5,
            "Query": "9 - 4 * 1 - 4 + 5 - 6 - 5 =   ",
            "Injected CoT": "4 * 1 = 4\n9 - 4 = 5\n5 - 4 = 1\n1 + 5 = 6\n6 - 6 = 0\n0 - 5 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 153,
            "GT": 54,
            "Query": "5 * 8 - 1 + 3 * 5 + 5 - 5 =   ",
            "Injected CoT": "5 * 8 = 40\n40 - 1 = 39\n3 * 5 = 15\n39 + 15 = 54\n54 + 5 = 59\n59 - 5 =",
            "Response": " 54",
            "Extract-Response": " 54\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result + curr << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 156,
            "GT": 65,
            "Query": "4 * 6 - 8 + 3 * 4 * 4 + 1 =   ",
            "Injected CoT": "4 * 6 = 24\n3 * 4 = 12\n12 * 4 = 48\n24 - 8 = 16\n48 + 16 = 64\n64 + 1 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - 1 - i] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 157,
            "GT": -165,
            "Query": "1 - 1 - 8 * 3 * 7 - 2 + 5 =   ",
            "Injected CoT": "-8 * 3 = -24\n-24 * 7 = -168\n1 - 1 = 0\n0 - 168 = -168\n-168 - 2 = -170\n-170 + 5 =",
            "Response": " -165",
            "Extract-Response": " -165.\n\nNote:\n\nThere will only be '+', '-', '*', '/' operators and open ( and closing parentheses )\nThe input is always valid.\nYou may assume that the given expression is always evaluated left to right, except for the exponent operator.\nYou are not allowed to use eval or a similar built-in library method.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < n; i++){\n            if(isdigit(s[i])){\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == n - 1){\n                if(sign == '+') st.push(num);\n                if(sign == '-') st.push(-num);\n                if(sign == '*') {\n                    int temp = st.top();\n                    st.pop();\n                    st.push(temp * num);\n                }\n                if(sign == '/') {\n                    int temp = st.top();\n                    st.pop();\n                    st.push(temp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()){\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 158,
            "GT": -533,
            "Query": "4 + 1 + 2 - 9 * 3 * 5 * 4 =   ",
            "Injected CoT": "-9 * 3 = -27\n-27 * 5 = -135\n-135 * 4 = -540\n4 + 1 = 5\n5 + 2 = 7\n7 - 540 =",
            "Response": " -533",
            "Extract-Response": " -533.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        max_product = nums[0]\n        min_product = nums[0]\n        res = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_product, min_product = min_product, max_product\n            max_product = max(max_product * nums[i], nums[i])\n            min_product = min(min_product * nums[i], nums[i])\n            res = max(res, max_product)\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [2, 3, -2, 4]\n    print(Solution().maxProduct(nums))"
        },
        {
            "Index": 161,
            "GT": -6,
            "Query": "5 * 7 + 7 - 3 - 6 * 8 + 3 =   ",
            "Injected CoT": "5 * 7 = 35\n35 + 7 = 42\n42 - 3 = 39\n6 * 8 = 48\n39 - 48 = -9\n-9 + 3 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 162,
            "GT": 21,
            "Query": "3 * 5 - 1 * 3 + 1 + 2 + 6 =   ",
            "Injected CoT": "3 * 5 = 15\n1 * 3 = 3\n15 - 3 = 12\n12 + 1 = 13\n13 + 2 = 15\n15 + 6 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < n; ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * num;\n            num = 0;\n        }\n        else if (s[i] == '=')\n        {\n            result += sign * num;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 163,
            "GT": -160,
            "Query": "7 - 3 * 8 * 5 - 7 * 6 - 5 =   ",
            "Injected CoT": "3 * 8 = 24\n7 - 24 * 5 - 7 * 6 - 5 =",
            "Response": " \n7 - 120 - 42 - 5 = \n-160",
            "Extract-Response": "\n-160"
        },
        {
            "Index": 164,
            "GT": 1,
            "Query": "2 * 8 - 8 + 3 + 1 - 4 - 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 8 = 8\n8 + 3 = 11\n11 + 1 = 12\n12 - 4 = 8\n8 - 7 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n\nusing namespace std;\n#define FOR(a,b,re) for(int a=b; a<=re; a++)\n#define ROF(a,b,re) for(int a=b; a>=re; a--)\n#define pb push_back\n#define mp make_pair\n#define LL long long\n#define INF 1000000000\n#define MAXN 100000\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    int n;\n    cin>>n;\n    int a[n];\n    FOR(i,0,n-1)\n        cin>>a[i];\n    int ans=0;\n    FOR(i,0,n-1)\n        ans+=a[i];\n    cout<<ans;\n    return 0;\n}"
        },
        {
            "Index": 166,
            "GT": 11,
            "Query": "2 * 6 + 3 * 1 - 4 + 9 - 9 =   ",
            "Injected CoT": "2 * 6 = 12\n3 * 1 = 3\n12 + 3 = 15\n15 - 4 = 11\n11 + 9 = 20\n20 - 9 =",
            "Response": " 11",
            "Extract-Response": "\n\n11"
        },
        {
            "Index": 167,
            "GT": 228,
            "Query": "4 * 9 * 7 - 3 - 7 * 3 * 1 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 7 = 252\n7 * 3 = 21\n252 - 3 = 249\n21 * 1 = 21\n249 - 21 =",
            "Response": " 228",
            "Extract-Response": "\n\n228"
        },
        {
            "Index": 168,
            "GT": 36,
            "Query": "7 + 8 + 8 - 3 - 9 + 5 * 5 =   ",
            "Injected CoT": "5 * 5 = 25\n7 + 8 = 15\n15 + 8 = 23\n23 - 3 = 20\n20 - 9 = 11\n11 + 25 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 169,
            "GT": 40,
            "Query": "8 * 5 - 2 * 8 + 4 + 6 * 2 =   ",
            "Injected CoT": "8 * 5 = 40\n2 * 8 = 16\n6 * 2 = 12\n40 - 16 = 24\n24 + 4 = 28\n28 + 12 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n\n        if(str[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(str[i] == '*')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '/')\n        {\n            sign = -1;\n        }\n        else if(str[i] == '%')\n        {\n            sign = -1;\n        }\n        else if(str[i] == '^')\n        {\n            sign = -1;\n        }\n        else\n        {\n            result = result * 10 + (str[i] - '0');\n        }\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 170,
            "GT": -12,
            "Query": "4 + 9 + 7 - 4 - 4 * 8 + 4 =   ",
            "Injected CoT": "4 + 9 = 13\n13 + 7 = 20\n20 - 4 = 16\n4 * 8 = 32\n16 - 32 = -16\n-16 + 4 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer a\n\nGuaranteed constraints:\n-1000 \u2264 a \u2264 1000.\n\n[input] integer b\n\nGuaranteed constraints:\n-1000 \u2264 b \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef add(a, b):\n    return a + b"
        },
        {
            "Index": 171,
            "GT": 30,
            "Query": "4 + 7 + 6 * 4 + 3 - 4 - 4 =   ",
            "Injected CoT": "6 * 4 = 24\n4 + 7 = 11\n11 + 24 = 35\n35 + 3 = 38\n38 - 4 = 34\n34 - 4 =",
            "Response": " 30",
            "Extract-Response": "\n\n30"
        },
        {
            "Index": 173,
            "GT": 36,
            "Query": "7 + 6 + 5 + 5 - 3 + 4 * 4 =   ",
            "Injected CoT": "4 * 4 = 16\n7 + 6 = 13\n13 + 5 = 18\n18 + 5 = 23\n23 - 3 = 20\n20 + 16 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 174,
            "GT": 8,
            "Query": "1 + 7 + 4 + 7 - 9 * 2 + 7 =   ",
            "Injected CoT": "9 * 2 = 18\n1 + 7 = 8\n8 + 4 = 12\n12 + 7 = 19\n19 - 18 = 1\n1 + 7 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int result = 0;\n    int sign = 1;\n    int i = 0;\n    while (i < s.size())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '+')\n        {\n            sign = 1;\n            i++;\n            continue;\n        }\n        if (s[i] == '-')\n        {\n            sign = -1;\n            i++;\n            continue;\n        }\n        if (s[i] == '*')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '/')\n        {\n            i++;\n            continue;\n        }\n        int num = 0;\n        while (i < s.size() && s[i] >= '0' && s[i] <= '9')\n        {\n            num = num * 10 + s[i] - '0';\n            i++;\n        }\n        result += sign * num;\n    }\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 175,
            "GT": -2,
            "Query": "7 - 2 - 1 + 6 * 2 - 9 - 9 =   ",
            "Injected CoT": "6 * 2 = 12\n7 - 2 = 5\n5 - 1 = 4\n4 + 12 = 16\n16 - 9 = 7\n7 - 9 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef evalRPN(a):\n    stack = []\n    for i in a:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif i == '/':\n            stack.append(int(1/stack.pop() * stack.pop()))\n        else:\n            stack.append(int(i))\n    return stack.pop()"
        },
        {
            "Index": 176,
            "GT": 34,
            "Query": "9 * 1 - 1 + 9 + 5 + 4 * 3 =   ",
            "Injected CoT": "9 * 1 = 9\n4 * 3 = 12\n9 - 1 = 8\n8 + 9 = 17\n17 + 5 = 22\n22 + 12 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum;\n\n    /*\n     * Reads and stores the string into an array.\n     */\n    gets(str);\n\n    len = strlen(str);\n    sum = 0;\n\n    /*\n     * Iterate through the string and calculate the sum.\n     */\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        if(str[i] == '+')\n        {\n            continue;\n        }\n\n        if(str[i] == '-')\n        {\n            continue;\n        }\n\n        if(str[i] == '*')\n        {\n            continue;\n        }\n\n        if(str[i] == '/')\n        {\n            continue;\n        }\n\n        if(str[i] == '%')\n        {\n            continue;\n        }\n\n        if(str[i] == '^')\n        {\n            continue;\n        }\n\n        sum = sum + (str[i] - '0');\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 177,
            "GT": 14,
            "Query": "2 + 8 + 3 - 1 + 3 + 3 - 4 =   ",
            "Injected CoT": "2 + 8 = 10\n10 + 3 = 13\n13 - 1 = 12\n12 + 3 = 15\n15 + 3 = 18\n18 - 4 =",
            "Response": " 14",
            "Extract-Response": "\n<code>14\n</code>\n"
        },
        {
            "Index": 178,
            "GT": 4,
            "Query": "2 + 3 + 9 - 6 - 3 - 6 + 5 =   ",
            "Injected CoT": "2 + 3 = 5\n5 + 9 = 14\n14 - 6 = 8\n8 - 3 = 5\n5 - 6 = -1\n-1 + 5 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 179,
            "GT": 18,
            "Query": "3 + 1 * 9 + 5 + 3 - 9 + 7 =   ",
            "Injected CoT": "1 * 9 = 9\n3 + 9 = 12\n12 + 5 = 17\n17 + 3 = 20\n20 - 9 = 11\n11 + 7 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 180,
            "GT": 294,
            "Query": "5 * 2 + 1 + 8 * 6 * 6 - 5 =   ",
            "Injected CoT": "5 * 2 = 10\n8 * 6 = 48\n48 * 6 = 288\n10 + 1 = 11\n288 + 11 = 299\n299 - 5 =",
            "Response": " 294",
            "Extract-Response": " 294\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 5 * 2 + 1;\n    b = 8 * 6 * 6;\n    c = 5;\n    sum = a + b - c;\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 184,
            "GT": 17,
            "Query": "2 + 5 * 1 * 8 - 2 * 9 - 7 =   ",
            "Injected CoT": "5 * 1 = 5\n5 * 8 = 40\n2 * 9 = 18\n40 - 18 = 22\n22 - 7 = 15\n2 + 15 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                sign = 1;\n                curNum = 0;\n            } else if (c == '-') {\n                res += sign * curNum;\n                sign = -1;\n                curNum = 0;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};"
        },
        {
            "Index": 185,
            "GT": 3,
            "Query": "7 + 2 * 6 + 1 + 4 - 7 * 3 =   ",
            "Injected CoT": "2 * 6 = 12\n7 + 12 = 19\n19 + 1 = 20\n20 + 4 = 24\n7 * 3 = 21\n24 - 21 =",
            "Response": " 3",
            "Extract-Response": " 3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 186,
            "GT": -3,
            "Query": "8 - 1 + 6 - 5 - 7 + 2 - 6 =   ",
            "Injected CoT": "8 - 1 = 7\n7 + 6 = 13\n13 - 5 = 8\n8 - 7 = 1\n1 + 2 = 3\n3 - 6 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 188,
            "GT": 29,
            "Query": "5 - 7 - 3 + 4 - 5 + 7 * 5 =   ",
            "Injected CoT": "-7 - 3 = -10\n-10 + 4 = -6\n-6 - 5 = -11\n7 * 5 = 35\n-11 + 35 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 190,
            "GT": 6,
            "Query": "7 - 3 + 3 + 1 - 7 + 4 + 1 =   ",
            "Injected CoT": "7 - 3 = 4\n4 + 3 = 7\n7 + 1 = 8\n8 - 7 = 1\n1 + 4 = 5\n5 + 1 =",
            "Response": " 6\n6 is the answer.",
            "Extract-Response": " 6.\n\n*/"
        },
        {
            "Index": 191,
            "GT": -25,
            "Query": "2 - 5 * 3 - 6 + 1 * 2 - 8 =   ",
            "Injected CoT": "5 * 3 = 15\n2 - 15 = -13\n1 * 2 = 2\n-13 + 2 = -11\n-11 - 6 = -17\n-17 - 8 =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\nThe number of operations is between [1, 10000].\nYou cannot use the * operator.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        int res = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 192,
            "GT": -47,
            "Query": "1 + 8 + 4 - 3 - 8 * 7 - 1 =   ",
            "Injected CoT": "8 * 7 = 56\n1 + 8 = 9\n9 + 4 = 13\n13 - 3 = 10\n10 - 56 = -46\n-46 - 1 =",
            "Response": " -47",
            "Extract-Response": " -47.\n\nNote:\n\nThe length of the input array is [1, 10].\n\"\"\"\n\nclass Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        sign = 1\n        res = 0\n        i = 0\n        while i < len(s):\n            if s[i] == ' ':\n                i += 1\n                continue\n            elif s[i] == '+':\n                sign = 1\n                i += 1\n            elif s[i] == '-':\n                sign = -1\n                i += 1\n            elif s[i] == '(':\n                stack.append(res)\n                stack.append(sign)\n                res = 0\n                sign = 1\n                i += 1\n            elif s[i] == ')':\n                res = res * stack.pop() + stack.pop()\n                i += 1\n            else:\n                curr = 0\n                while i < len(s) and s[i].isdigit():\n                    curr = curr * 10 + int(s[i])\n                    i += 1\n                res = res + curr * sign\n        return res"
        },
        {
            "Index": 193,
            "GT": 47,
            "Query": "1 + 8 + 5 + 6 * 4 + 4 + 5 =   ",
            "Injected CoT": "6 * 4 = 24\n1 + 8 + 5 + 24 + 4 + 5 =",
            "Response": " \n47",
            "Extract-Response": "\n47"
        },
        {
            "Index": 194,
            "GT": 80,
            "Query": "6 * 6 * 1 * 2 + 8 + 2 - 2 =   ",
            "Injected CoT": "6 * 6 = 36\n36 * 1 = 36\n36 * 2 = 72\n72 + 8 = 80\n80 + 2 = 82\n82 - 2 =",
            "Response": " 80",
            "Extract-Response": " 80\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,t,r,s,a,b,c,d,e,f,g,h,u,v,w,x,y,z,max,min,sum,count,rem,num,len;\n    char ch[100000];\n    scanf(\"%d\",&t);\n    for(r=1;r<=t;r++)\n    {\n        scanf(\"%d\",&n);\n        sum=0;\n        for(i=1;i<=n;i++)\n        {\n            scanf(\"%d\",&a);\n            sum=sum+a;\n        }\n        printf(\"%d\\n\",sum);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 195,
            "GT": 3121,
            "Query": "7 * 7 * 9 * 7 - 1 + 5 * 7 =   ",
            "Injected CoT": "7 * 7 = 49\n49 * 9 = 441\n441 * 7 = 3087\n3087 - 1 = 3086\n5 * 7 = 35\n3086 + 35 =",
            "Response": " 3121",
            "Extract-Response": "\n<code>3121\n</code>\n"
        },
        {
            "Index": 196,
            "GT": 335,
            "Query": "1 * 5 * 7 * 9 + 3 * 5 + 5 =   ",
            "Injected CoT": "1 * 5 = 5\n5 * 7 = 35\n35 * 9 = 315\n3 * 5 = 15\n315 + 15 = 330\n330 + 5 =",
            "Response": " 335",
            "Extract-Response": "\n\n3 * 5 * 7 * 9 + 3 * 5 + 5 = 335"
        },
        {
            "Index": 197,
            "GT": 212,
            "Query": "1 + 5 * 6 * 7 + 9 - 1 * 8 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 7 = 210\n1 + 210 = 211\n211 - 1 = 210\n1 * 8 = 8\n210 - 8 =",
            "Response": " 202",
            "Extract-Response": "\n\n202"
        },
        {
            "Index": 199,
            "GT": 48,
            "Query": "1 * 7 * 5 - 7 - 4 + 4 * 6 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 5 = 35\n4 * 6 = 24\n35 - 7 = 28\n28 - 4 = 24\n24 + 24 =",
            "Response": " 48",
            "Extract-Response": "\n\n48"
        },
        {
            "Index": 200,
            "GT": 78,
            "Query": "7 * 2 * 5 + 4 + 9 - 4 - 1 =   ",
            "Injected CoT": "7 * 2 = 14\n14 * 5 = 70\n70 + 4 = 74\n74 + 9 = 83\n83 - 4 = 79\n79 - 1 =",
            "Response": " 78",
            "Extract-Response": " 78\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 201,
            "GT": -7,
            "Query": "6 - 2 * 2 + 2 - 1 - 1 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n6 - 4 = 2\n2 + 2 = 4\n4 - 1 = 3\n3 - 1 = 2\n2 - 9 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 204,
            "GT": -3,
            "Query": "2 * 8 - 2 + 7 - 9 - 7 - 8 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 2 = 14\n14 + 7 = 21\n21 - 9 = 12\n12 - 7 = 5\n5 - 8 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 205,
            "GT": -120,
            "Query": "1 + 9 + 7 - 6 * 6 * 4 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n-6 * 24 = -144\n1 + 9 + 7 = 17\n17 - 144 = -127\n-127 + 7 =",
            "Response": " -120",
            "Extract-Response": " -120.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 206,
            "GT": -13,
            "Query": "6 * 1 - 8 + 9 - 3 * 8 + 4 =   ",
            "Injected CoT": "6 * 1 = 6\n6 - 8 = -2\n-2 + 9 = 7\n3 * 8 = 24\n7 - 24 = -17\n-17 + 4 =",
            "Response": " -13",
            "Extract-Response": " -13\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 207,
            "GT": -24,
            "Query": "5 - 6 * 2 - 8 + 7 - 2 * 8 =   ",
            "Injected CoT": "6 * 2 = 12\n5 - 12 = -7\n-7 - 8 = -15\n-15 + 7 = -8\n2 * 8 = 16\n-8 - 16 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 208,
            "GT": 68,
            "Query": "6 + 8 + 1 * 7 + 6 * 9 - 7 =   ",
            "Injected CoT": "1 * 7 = 7\n6 * 9 = 54\n6 + 8 = 14\n14 + 7 = 21\n21 + 54 = 75\n75 - 7 =",
            "Response": " 68",
            "Extract-Response": " 68\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634"
        },
        {
            "Index": 209,
            "GT": 59,
            "Query": "2 * 2 - 2 + 8 - 7 + 7 * 8 =   ",
            "Injected CoT": "2 * 2 = 4\n4 - 2 = 2\n7 * 8 = 56\n8 - 7 = 1\n2 + 8 = 10\n10 + 1 = 11\n11 + 56 =",
            "Response": " 67",
            "Extract-Response": " 67\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            operation = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 211,
            "GT": -11,
            "Query": "2 * 8 - 8 - 3 - 6 * 4 + 8 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 8 = 8\n8 - 3 = 5\n6 * 4 = 24\n5 - 24 = -19\n-19 + 8 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 216,
            "GT": 16,
            "Query": "9 + 8 - 2 * 2 - 6 + 8 + 1 =   ",
            "Injected CoT": "2 * 2 = 4\n9 + 8 = 17\n17 - 4 = 13\n13 - 6 = 7\n7 + 8 = 15\n15 + 1 =",
            "Response": " 16\n\n16\n\n*/",
            "Extract-Response": " 16."
        },
        {
            "Index": 222,
            "GT": 17,
            "Query": "8 + 4 + 1 * 7 - 5 + 9 - 6 =   ",
            "Injected CoT": "1 * 7 = 7\n8 + 4 = 12\n12 + 7 = 19\n19 - 5 = 14\n14 + 9 = 23\n23 - 6 =",
            "Response": " 17",
            "Extract-Response": " 17\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char str[100];\n    int i, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+')\n        {\n            continue;\n        }\n        else if(str[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + (str[i] - '0');\n        }\n    }\n\n    printf(\"%d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 223,
            "GT": -10,
            "Query": "9 - 2 + 2 - 9 + 7 - 8 - 9 =   ",
            "Injected CoT": "9 - 2 = 7\n7 + 2 = 9\n9 - 9 = 0\n0 + 7 = 7\n7 - 8 = -1\n-1 - 9 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 224,
            "GT": 118,
            "Query": "1 + 4 * 4 * 7 - 5 + 4 + 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 7 = 112\n1 + 112 = 113\n113 - 5 = 108\n108 + 4 = 112\n112 + 6 =",
            "Response": " 118",
            "Extract-Response": "\n\n118."
        },
        {
            "Index": 226,
            "GT": 22,
            "Query": "1 + 5 + 8 - 2 + 9 + 2 - 1 =   ",
            "Injected CoT": "1 + 5 = 6\n6 + 8 = 14\n14 - 2 = 12\n12 + 9 = 21\n21 + 2 = 23\n23 - 1 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum = %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 227,
            "GT": -106,
            "Query": "2 + 3 + 3 - 9 - 5 * 3 * 7 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 7 = 105\n2 + 3 = 5\n5 + 3 = 8\n8 - 9 = -1\n-1 - 105 =",
            "Response": " -106",
            "Extract-Response": " -106.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 228,
            "GT": 24,
            "Query": "6 - 8 + 1 - 9 - 2 + 6 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n-8 + 1 = -7\n-7 - 9 = -16\n-16 - 2 = -18\n-18 + 36 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 229,
            "GT": 63,
            "Query": "7 + 5 * 3 * 5 - 2 * 9 - 1 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 5 = 75\n7 + 75 = 82\n2 * 9 = 18\n82 - 18 = 64\n64 - 1 =",
            "Response": " 63",
            "Extract-Response": " 63\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char expression[MAX_SIZE];\n    int i, j, len, result = 0, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634"
        },
        {
            "Index": 230,
            "GT": 102,
            "Query": "6 * 8 + 8 * 7 - 6 - 5 + 9 =   ",
            "Injected CoT": "6 * 8 = 48\n8 * 7 = 56\n48 + 56 = 104\n104 - 6 = 98\n98 - 5 = 93\n93 + 9 =",
            "Response": " 102",
            "Extract-Response": "\n\n102"
        },
        {
            "Index": 232,
            "GT": 17,
            "Query": "2 - 5 * 1 + 3 + 5 + 3 * 4 =   ",
            "Injected CoT": "5 * 1 = 5\n2 - 5 = -3\n3 * 4 = 12\n-3 + 3 = 0\n0 + 5 = 5\n5 + 12 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int cur = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + cur * sign;\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 233,
            "GT": 6,
            "Query": "2 + 9 * 3 - 6 - 3 * 3 - 8 =   ",
            "Injected CoT": "9 * 3 = 27\n2 + 27 = 29\n3 * 3 = 9\n27 - 9 = 18\n6 - 8 = -2\n18 - (-2) =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 235,
            "GT": 200,
            "Query": "9 * 4 * 6 - 3 - 8 - 3 - 2 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 6 = 216\n216 - 3 = 213\n213 - 8 = 205\n205 - 3 = 202\n202 - 2 =",
            "Response": " 200",
            "Extract-Response": "\n<code>200\n</code>\n"
        },
        {
            "Index": 236,
            "GT": -64,
            "Query": "5 - 2 - 5 + 2 - 8 * 8 * 1 =   ",
            "Injected CoT": "8 * 1 = 8\n-8 * 8 = -64\n2 - 5 = -3\n-3 + 2 = -1\n5 - 1 =",
            "Response": " 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 = -3\n-3 + 2 = -1\n-1 + 5 = 4\n4 - 2 = 2\n2 - 5 =",
            "Extract-Response": "\n4"
        },
        {
            "Index": 238,
            "GT": 73,
            "Query": "8 * 3 * 3 + 1 - 6 + 5 + 1 =   ",
            "Injected CoT": "8 * 3 = 24\n24 * 3 = 72\n72 + 1 = 73\n73 - 6 = 67\n67 + 5 = 72\n72 + 1 =",
            "Response": " 73\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Extract-Response": "\n\n73"
        },
        {
            "Index": 239,
            "GT": -7,
            "Query": "1 + 5 + 8 * 2 - 8 * 3 - 5 =   ",
            "Injected CoT": "8 * 2 = 16\n8 * 3 = 24\n1 + 5 = 6\n6 + 16 = 22\n22 - 24 = -2\n-2 - 5 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 242,
            "GT": 26,
            "Query": "6 + 6 + 2 + 4 + 1 * 2 * 4 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 4 = 8\n6 + 6 = 12\n12 + 2 = 14\n14 + 8 = 22\n22 + 4 = 26\n26 + 1 =",
            "Response": " 27\n\n27 is the sum of the first six consecutive odd numbers.\n\n*/\n\npublic class SumOfConsecutiveOddNumbers {\n    public static void main(String[] args) {\n        int n = 27;\n        int sum = 0;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 != 0) {\n                sum += i;\n                count++;\n            }\n            if (sum == n) {\n                break;\n            }\n        }\n        System.out.println(count);\n    }\n}",
            "Extract-Response": " 6"
        },
        {
            "Index": 243,
            "GT": -7,
            "Query": "4 - 4 - 9 + 6 - 2 - 4 + 2 =   ",
            "Injected CoT": "4 - 4 = 0\n0 - 9 = -9\n-9 + 6 = -3\n-3 - 2 = -5\n-5 - 4 = -9\n-9 + 2 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 244,
            "GT": 66,
            "Query": "4 - 8 - 8 + 8 * 5 * 2 - 2 =   ",
            "Injected CoT": "8 * 5 = 40\n40 * 2 = 80\n4 - 8 = -4\n-4 - 8 = -12\n-12 + 80 = 68\n68 - 2 =",
            "Response": " 66",
            "Extract-Response": " 66\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 245,
            "GT": 11,
            "Query": "7 + 7 - 4 + 7 + 5 - 6 - 5 =   ",
            "Injected CoT": "7 + 7 = 14\n14 - 4 = 10\n10 + 7 = 17\n17 + 5 = 22\n22 - 6 = 16\n16 - 5 =",
            "Response": " 11",
            "Extract-Response": "\n\n11"
        },
        {
            "Index": 246,
            "GT": 124,
            "Query": "2 + 4 * 5 * 6 + 2 + 2 - 2 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 6 = 120\n2 + 120 = 122\n122 + 2 = 124\n124 - 2 =",
            "Response": " 122\n\n2 * 3 * 4 * 5 * 6 * 7 + 2 + 2 - 2 =    \n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n2 + 5040 = 5042\n5042 + 2 = 5044\n5044 - 2 = 5042\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 + 2 + 2 - 2 =    \n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n2 + 40320 = 40322\n40322 + 2 = 40324\n40324 - 2 = 40322\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 2 - 2 =    \n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n40320 * 9 = 362880\n2 + 362880 = 362882\n362882 + 2 = 362884\n362884 - 2 = 362882\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 + 2 + 2 - 2 =    \n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n40320 * 9 = 362880\n362880 * 10 = 3628800\n2 + 3628800 = 3628802\n3628802 + 2 = 3628804\n3628804 - 2 = 3628802\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 + 2 + 2 - 2 =    \n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n40320 * 9 = 362880\n362880 * 10 = 3628800\n3628800 * 11 = 39916800\n2 + 39916800 = 39916802\n39916802 + 2 = 39916804\n39916804 - 2 = 39916802\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 + 2 + 2 - 2 =    \n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n40320 * 9 = 362880\n362880 * 10 = 3628800\n3628800 * 11 = 39916800\n39916800 * 12 = 479001600\n2 + 479001600 = 479001602\n479001602 + 2 = 479001604\n479001604 - 2 = 479001602",
            "Extract-Response": " 479001602"
        },
        {
            "Index": 247,
            "GT": -118,
            "Query": "8 - 2 + 2 - 8 * 3 * 5 - 6 =   ",
            "Injected CoT": "3 * 5 = 15\n-8 * 15 = -120\n8 - 2 + 2 - 120 - 6 =",
            "Response": " -120",
            "Extract-Response": " -120.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2^31, 2^31 - 1]. Please make sure your answer fits in this range.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 250,
            "GT": 62,
            "Query": "6 - 3 + 2 + 9 + 2 * 4 * 6 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 6 = 48\n6 - 3 = 3\n3 + 2 = 5\n5 + 9 = 14\n14 + 48 =",
            "Response": " 62",
            "Extract-Response": " 62.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 1000.\nEach node in the tree has a distinct value between 1 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        int sum = 0;\n        if(root == NULL)\n            return sum;\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()) {\n            TreeNode* curr = q.front();\n            q.pop();\n            if(curr->val % 2 == 0) {\n                if(curr->left != NULL) {\n                    if(curr->left->left != NULL)\n                        sum += curr->left->left->val;\n                    if(curr->left->right != NULL)\n                        sum += curr->left->right->val;\n                }\n                if(curr->right != NULL) {\n                    if(curr->right->left != NULL)\n                        sum += curr->right->left->val;\n                    if(curr->right->right != NULL)\n                        sum += curr->right->right->val;\n                }\n            }\n            if(curr->left != NULL)\n                q.push(curr->left);\n            if(curr->right != NULL)\n                q.push(curr->right);\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 252,
            "GT": 106,
            "Query": "5 * 8 + 6 * 8 + 4 + 2 * 7 =   ",
            "Injected CoT": "5 * 8 = 40\n6 * 8 = 48\n2 * 7 = 14\n40 + 48 = 88\n88 + 4 = 92\n92 + 14 =",
            "Response": " 106\n\n106\n\n*/",
            "Extract-Response": " 106."
        },
        {
            "Index": 254,
            "GT": -21,
            "Query": "5 - 1 * 7 - 5 * 5 - 2 + 8 =   ",
            "Injected CoT": "1 * 7 = 7\n5 * 5 = 25\n5 - 7 = -2\n-2 - 25 = -27\n-27 - 2 = -29\n-29 + 8 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nNote:\nThe input string may contain leading or trailing spaces. However, your reversed integer should not contain leading zeroes.\n\n*/\n\nclass Solution {\npublic:\n    int reverse(int x) {\n        int result = 0;\n        while (x != 0) {\n            int temp = result * 10 + x % 10;\n            if (temp / 10 != result)\n                return 0;\n            result = temp;\n            x /= 10;\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 255,
            "GT": -1,
            "Query": "7 - 3 - 8 + 3 + 8 - 2 * 4 =   ",
            "Injected CoT": "7 - 3 = 4\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 8 = 7\n2 * 4 = 8\n7 - 8 = -1\n-1 + 8 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 257,
            "GT": -115,
            "Query": "4 - 5 * 3 - 8 - 2 * 8 * 6 =   ",
            "Injected CoT": "5 * 3 = 15\n4 - 15 = -11\n2 * 8 = 16\n16 * 6 = 96\n-11 - 8 = -19\n-19 - 96 =",
            "Response": " -115",
            "Extract-Response": " -115.\n\nNote:\n\nThe expression is always valid.\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0') {\n                    num = num * 10 + s[i++] - '0';\n                }\n                res += sign * num;\n                --i;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 259,
            "GT": 238,
            "Query": "3 * 7 * 2 * 6 * 1 - 7 - 7 =   ",
            "Injected CoT": "3 * 7 = 21\n21 * 2 = 42\n42 * 6 = 252\n252 * 1 = 252\n252 - 7 = 245\n245 - 7 =",
            "Response": " 238",
            "Extract-Response": " 238\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '-')\n        {\n            continue;\n        }\n\n        sum += (str[i] - '0') * pow(2, len-i-1);\n    }\n\n    printf(\"The decimal number is: %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 260,
            "GT": 96,
            "Query": "3 * 3 * 8 + 7 * 4 - 1 * 4 =   ",
            "Injected CoT": "3 * 3 = 9\n9 * 8 = 72\n7 * 4 = 28\n1 * 4 = 4\n72 + 28 = 100\n100 - 4 =",
            "Response": " 96",
            "Extract-Response": " 96\n</code>\n"
        },
        {
            "Index": 262,
            "GT": 19,
            "Query": "1 * 2 * 7 * 1 + 9 - 5 + 1 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 7 = 14\n14 * 1 = 14\n14 + 9 = 23\n23 - 5 = 18\n18 + 1 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 263,
            "GT": 4,
            "Query": "8 * 2 - 5 * 3 - 7 + 9 + 1 =   ",
            "Injected CoT": "8 * 2 = 16\n5 * 3 = 15\n16 - 15 = 1\n1 - 7 = -6\n-6 + 9 = 3\n3 + 1 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 264,
            "GT": -1,
            "Query": "6 - 2 * 5 - 3 + 3 + 8 - 5 =   ",
            "Injected CoT": "2 * 5 = 10\n6 - 10 = -4\n-4 - 3 = -7\n-7 + 3 = -4\n-4 + 8 = 4\n4 - 5 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 265,
            "GT": 12,
            "Query": "1 + 1 * 4 * 8 - 7 - 8 - 6 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 8 = 32\n1 + 32 = 33\n33 - 7 = 26\n26 - 8 = 18\n18 - 6 =",
            "Response": " 12",
            "Extract-Response": "\n<code>1 * 4 * 8 - 7 - 8 - 6 = 12\n</code>\n"
        },
        {
            "Index": 266,
            "GT": 12,
            "Query": "2 * 7 + 4 - 9 - 7 + 2 + 8 =   ",
            "Injected CoT": "2 * 7 = 14\n14 + 4 = 18\n18 - 9 = 9\n9 - 7 = 2\n2 + 2 = 4\n4 + 8 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 267,
            "GT": 145,
            "Query": "6 + 3 * 7 * 7 * 1 - 1 - 7 =   ",
            "Injected CoT": "3 * 7 = 21\n21 * 7 = 147\n147 * 1 = 147\n6 + 147 = 153\n153 - 1 = 152\n152 - 7 =",
            "Response": " 145\n\n3 * 7 * 7 * 1 - 1 - 7 = 145\n\n3 * 7 * 7 * 1 - 1 - 7 = 145\n\n3 * 7 * 7 * 1 - 1 - 7 = 145",
            "Extract-Response": " 145\n\n*/"
        },
        {
            "Index": 268,
            "GT": 41,
            "Query": "9 - 9 + 1 * 8 * 4 + 5 + 4 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 4 = 32\n9 - 9 = 0\n0 + 32 = 32\n32 + 5 = 37\n37 + 4 =",
            "Response": " 41\n\n41\n\n*/",
            "Extract-Response": "\n\n41"
        },
        {
            "Index": 270,
            "GT": 53,
            "Query": "8 + 3 * 9 + 4 * 1 + 2 * 7 =   ",
            "Injected CoT": "3 * 9 = 27\n4 * 1 = 4\n2 * 7 = 14\n8 + 27 = 35\n35 + 4 = 39\n39 + 14 =",
            "Response": " 53\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        int divisor = a[i];\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[j] % divisor == 0) {\n              a[j] /= divisor;\n            }\n        }\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 53 ."
        },
        {
            "Index": 271,
            "GT": 29,
            "Query": "9 * 4 + 1 - 9 - 8 + 1 * 9 =   ",
            "Injected CoT": "9 * 4 = 36\n36 + 1 = 37\n37 - 9 = 28\n28 - 8 = 20\n1 * 9 = 9\n20 + 9 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 272,
            "GT": -58,
            "Query": "8 - 6 - 2 * 6 - 8 - 5 * 8 =   ",
            "Injected CoT": "2 * 6 = 12\n8 - 6 - 12 - 8 - 5 * 8 =",
            "Response": "    \n8 - 6 - 12 - 8 - 40 =    \n-40\n\n-40 is the answer.",
            "Extract-Response": "\n\n-40"
        },
        {
            "Index": 274,
            "GT": 17,
            "Query": "3 + 4 * 8 - 3 * 2 - 5 - 7 =   ",
            "Injected CoT": "4 * 8 = 32\n3 + 32 = 35\n3 * 2 = 6\n35 - 6 = 29\n29 - 5 = 24\n24 - 7 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 275,
            "GT": -43,
            "Query": "3 * 2 - 6 - 4 - 7 - 4 * 8 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 6 = 0\n0 - 4 = -4\n-4 - 7 = -11\n4 * 8 = 32\n-11 - 32 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 276,
            "GT": 24,
            "Query": "3 + 2 - 4 * 1 - 1 + 4 * 6 =   ",
            "Injected CoT": "3 + 2 = 5\n4 * 1 = 4\n5 - 4 = 1\n1 - 1 = 0\n4 * 6 = 24\n0 + 24 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 277,
            "GT": -16,
            "Query": "6 - 2 * 6 - 6 - 4 * 2 + 4 =   ",
            "Injected CoT": "2 * 6 = 12\n6 - 12 = -6\n-6 - 6 = -12\n4 * 2 = 8\n-12 + 8 = -4\n-4 + 4 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isOperator = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n            isOperator = true;\n        } else if (s[i] == '*') {\n            current *= s[++i] - '0';\n        } else {\n            current = current * 10 + s[i] - '0';\n            isOperator = false;\n        }\n    }\n\n    if (!isOperator) {\n        result += sign * current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 278,
            "GT": -11,
            "Query": "2 + 1 * 8 * 1 + 7 - 7 * 4 =   ",
            "Injected CoT": "1 * 8 = 8\n2 + 8 = 10\n7 * 4 = 28\n10 + 7 = 17\n17 - 28 =",
            "Response": " -11\n\n-11\n\n*/",
            "Extract-Response": " -11"
        },
        {
            "Index": 279,
            "GT": -36,
            "Query": "3 - 9 - 7 - 7 + 5 - 7 * 3 =   ",
            "Injected CoT": "-7 * 3 = -21\n3 - 9 = -6\n-6 - 7 = -13\n-13 - 7 = -20\n-20 + 5 = -15\n-15 - 21 =",
            "Response": " -36",
            "Extract-Response": " -36.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"Result = %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 281,
            "GT": 250,
            "Query": "3 * 6 - 5 + 5 * 8 * 6 - 3 =   ",
            "Injected CoT": "3 * 6 = 18\n5 * 8 = 40\n40 * 6 = 240\n18 - 5 = 13\n240 + 13 = 253\n253 - 3 =",
            "Response": " 250",
            "Extract-Response": " 250\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    int currentOperator = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = s[i] == '+' ? 1 : -1;\n            currentOperator = s[i] == '+' ? 1 : -1;\n        } else if (s[i] == '*') {\n            currentNumber *= s[i + 1] - '0';\n            ++i;\n        } else if (s[i] == '/') {\n            currentNumber /= s[i + 1] - '0';\n            ++i;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 283,
            "GT": 81,
            "Query": "3 + 4 + 9 * 7 + 1 + 2 + 8 =   ",
            "Injected CoT": "3 + 4 = 7\n9 * 7 = 63\n7 + 1 = 8\n8 + 2 = 10\n63 + 10 = 73\n73 + 7 =",
            "Response": " 80",
            "Extract-Response": "\n<code>80\n</code>\n"
        },
        {
            "Index": 284,
            "GT": -17,
            "Query": "1 - 4 * 2 - 9 - 1 - 9 + 9 =   ",
            "Injected CoT": "4 * 2 = 8\n1 - 8 = -7\n-7 - 9 = -16\n-16 - 1 = -17\n-17 - 9 = -26\n-26 + 9 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumThree(vector<int>& nums, int target, int start) {\n        int result = 0;\n        int size = nums.size();\n        for (int i = start; i < size - 2; ++i) {\n            int j = i + 1;\n            int k = size - 1;\n            while (j < k) {\n                int sum = nums[i] + nums[j] + nums[k];\n                if (sum == target) {\n                    ++result;\n                    ++j;\n                    --k;\n                    while (j < k && nums[j] == nums[j - 1]) {\n                        ++j;\n                    }\n                    while (j < k && nums[k] == nums[k + 1]) {\n                        --k;\n                    }\n                } else if (sum < target) {\n                    ++j;\n                } else {\n                    --k;\n                }\n            }\n        }\n        return result;\n    }\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n        int result = 0;\n        int size = A.size();\n        unordered_map<int, int> map;\n        for (int i = 0; i < size; ++i) {\n            for (int j = 0; j < size; ++j) {\n                ++map[A[i] + B[j]];\n            }\n        }\n        for (int i = 0; i < size; ++i) {\n            for (int j = 0; j < size; ++j) {\n                result += map[-(C[i] + D[j])];\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 285,
            "GT": -115,
            "Query": "4 * 3 + 1 - 2 - 7 * 9 * 2 =   ",
            "Injected CoT": "4 * 3 = 12\n12 + 1 = 13\n13 - 2 = 11\n7 * 9 = 63\n63 * 2 = 126\n11 - 126 =",
            "Response": " -115",
            "Extract-Response": " -115.\n\nNote:\n\nThe length of the input array is between [3, 10000].\nEvery integer represented in the array will be between [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<int>& nums, int i, int j, vector<vector<int>>& dp) {\n        if (i == j) return nums[i];\n        if (i > j) return 0;\n        if (dp[i][j] != 0) return dp[i][j];\n        int a = nums[i] - calc(nums, i + 1, j, dp);\n        int b = nums[j] - calc(nums, i, j - 1, dp);\n        dp[i][j] = max(a, b);\n        return dp[i][j];\n    }\n    bool PredictTheWinner(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(n, 0));\n        return calc(nums, 0, n - 1, dp) >= 0;\n    }\n};"
        },
        {
            "Index": 286,
            "GT": 28,
            "Query": "5 + 9 + 3 - 3 + 7 + 8 - 1 =   ",
            "Injected CoT": "5 + 9 = 14\n14 + 3 = 17\n17 - 3 = 14\n14 + 7 = 21\n21 + 8 = 29\n29 - 1 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 288,
            "GT": 93,
            "Query": "8 * 9 * 1 + 3 * 7 - 9 + 9 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 1 = 72\n3 * 7 = 21\n72 + 21 = 93\n93 - 9 = 84\n84 + 9 =",
            "Response": " 93",
            "Extract-Response": " 93\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 290,
            "GT": -4,
            "Query": "3 - 7 - 6 - 2 + 8 - 8 + 8 =   ",
            "Injected CoT": "-7 - 6 = -13\n-13 - 2 = -15\n-15 + 8 = -7\n-7 - 8 = -15\n-15 + 8 = -7\n-7 + 8 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 291,
            "GT": 68,
            "Query": "2 + 8 + 3 + 7 * 9 - 1 - 7 =   ",
            "Injected CoT": "7 * 9 = 63\n2 + 8 = 10\n10 + 3 = 13\n63 - 1 = 62\n62 - 7 = 55\n13 + 55 =",
            "Response": " 68",
            "Extract-Response": " 68\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 292,
            "GT": 2,
            "Query": "6 * 1 * 2 - 5 + 5 - 2 - 8 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 2 = 12\n12 - 5 = 7\n7 + 5 = 12\n12 - 2 = 10\n10 - 8 =",
            "Response": " 2",
            "Extract-Response": " 2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 293,
            "GT": -1,
            "Query": "4 * 9 + 3 - 6 * 9 + 7 * 2 =   ",
            "Injected CoT": "4 * 9 = 36\n6 * 9 = 54\n36 + 3 = 39\n54 + 7 = 61\n61 * 2 = 122\n39 - 54 = -15\n-15 + 122 =",
            "Response": " 107",
            "Extract-Response": " 107\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum;\n    while(gets(s))\n    {\n        sum=0;\n        len=strlen(s);\n        for(i=0;i<len;i++)\n        {\n            if(s[i]>='0' && s[i]<='9')\n            {\n                sum=sum*10+s[i]-48;\n            }\n            else if(s[i]=='+')\n            {\n                sum=sum+s[i+1]-48;\n                i++;\n            }\n            else if(s[i]=='-')\n            {\n                sum=sum-s[i+1]-48;\n                i++;\n            }\n            else if(s[i]=='*')\n            {\n                sum=sum*s[i+1]-48;\n                i++;\n            }\n            else if(s[i]=='/')\n            {\n                sum=sum/s[i+1]-48;\n                i++;\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 294,
            "GT": 10,
            "Query": "9 - 6 + 1 * 1 - 4 + 1 + 9 =   ",
            "Injected CoT": "1 * 1 = 1\n9 - 6 = 3\n3 + 1 = 4\n4 - 4 = 0\n0 + 1 = 1\n1 + 9 =",
            "Response": " 10\n\n10\n\n*/",
            "Extract-Response": " 10"
        },
        {
            "Index": 295,
            "GT": -71,
            "Query": "2 * 6 - 2 + 6 - 9 * 9 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n12 - 2 = 10\n10 + 6 = 16\n9 * 9 = 81\n16 - 81 = -65\n-65 - 6 =",
            "Response": " -71",
            "Extract-Response": " -71.\n\nNote:\nThe number of nodes in the tree is between 1 and 1000.\nEach node's value will be between -1000 and 1000.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int& maxSum) {\n        if (!root) return 0;\n        int left = max(0, maxPathSumHelper(root->left, maxSum));\n        int right = max(0, maxPathSumHelper(root->right, maxSum));\n        maxSum = max(maxSum, left + right + root->val);\n        return max(left, right) + root->val;\n    }\n};"
        },
        {
            "Index": 298,
            "GT": 14,
            "Query": "7 * 7 + 1 + 3 - 5 * 8 + 1 =   ",
            "Injected CoT": "7 * 7 = 49\n49 + 1 = 50\n50 + 3 = 53\n5 * 8 = 40\n53 - 40 = 13\n13 + 1 =",
            "Response": " 14",
            "Extract-Response": " 14\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f;\n    char ch[100];\n    gets(ch);\n    a = strlen(ch);\n    for(i = 0; i < a; i++)\n    {\n        if(ch[i] == '+')\n        {\n            ch[i] = ' ';\n        }\n        if(ch[i] == '-')\n        {\n            ch[i] = ' ';\n        }\n        if(ch[i] == '*')\n        {\n            ch[i] = ' ';\n        }\n        if(ch[i] == '/')\n        {\n            ch[i] = ' ';\n        }\n        if(ch[i] == '%')\n        {\n            ch[i] = ' ';\n        }\n        if(ch[i] == '=')\n        {\n            ch[i] = ' ';\n        }\n    }\n    sscanf(ch, \"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d"
        },
        {
            "Index": 299,
            "GT": 33600,
            "Query": "4 * 2 * 4 * 7 * 6 * 5 * 5 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 4 = 32\n32 * 7 = 224\n224 * 6 = 1344\n1344 * 5 = 6720\n6720 * 5 =",
            "Response": " 33600\n\nThe greatest product of five consecutive digits in the 1000-digit number is 33600.\n\nFind the greatest product of thirteen consecutive digits in the 1000-digit number.\n\n*/\n\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tifstream infile(\"Problem8.txt\");\n\tstring line;\n\tvector<int> nums;\n\tint max = 0;\n\tint prod = 1;\n\tint count = 0;\n\twhile (getline(infile, line))\n\t{\n\t\tfor (int i = 0; i < line.size(); i++)\n\t\t{\n\t\t\tnums.push_back(line[i] - '0');\n\t\t}\n\t}\n\tfor (int i = 0; i < nums.size(); i++)\n\t{\n\t\tif (count == 13)\n\t\t{\n\t\t\tif (prod > max)\n\t\t\t{\n\t\t\t\tmax = prod;\n\t\t\t}\n\t\t\tprod = 1;\n\t\t\tcount = 0;\n\t\t}\n\t\tif (nums[i] == 0)\n\t\t{\n\t\t\tprod = 1;\n\t\t\tcount = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprod *= nums[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tcout << max << endl;\n\treturn 0;\n}",
            "Extract-Response": " 23514624000"
        },
        {
            "Index": 300,
            "GT": 23,
            "Query": "7 + 8 * 4 - 9 - 9 + 6 - 4 =   ",
            "Injected CoT": "8 * 4 = 32\n7 + 32 = 39\n39 - 9 = 30\n30 - 9 = 21\n21 + 6 = 27\n27 - 4 =",
            "Response": " 23",
            "Extract-Response": " 23\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 301,
            "GT": 44,
            "Query": "5 + 5 * 7 - 3 - 3 + 7 + 3 =   ",
            "Injected CoT": "5 * 7 = 35\n5 + 35 = 40\n40 - 3 = 37\n37 - 3 = 34\n34 + 7 = 41\n41 + 3 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 302,
            "GT": 45,
            "Query": "2 + 7 * 6 + 6 - 2 + 6 - 9 =   ",
            "Injected CoT": "7 * 6 = 42\n2 + 42 = 44\n44 + 6 = 50\n50 - 2 = 48\n48 + 6 = 54\n54 - 9 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        l = strlen(s);\n        sum = 0;\n        for(j = 0; j < l; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum + s[j] - '0';\n            }\n        }\n        for(k = j + 1; k < l; k++)\n        {\n            if(s[k] == ' ')\n                continue;\n            else if(s[k] == '+')\n                continue;\n            else if(s[k] == '=')\n                break;\n            else\n            {\n                sum = sum + s[k] - '0';\n            }\n        }\n        for(m = k + 1; m < l; m++)\n        {\n            if(s[m] == ' ')\n                continue;\n            else if(s[m] == '+')\n                continue;\n            else if(s[m] == '=')\n                break;\n            else\n            {\n                sum = sum + s[m] - '0';\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 303,
            "GT": 17,
            "Query": "5 - 5 + 9 + 4 - 2 + 7 - 1 =   ",
            "Injected CoT": "5 - 5 = 0\n0 + 9 = 9\n9 + 4 = 13\n13 - 2 = 11\n11 + 7 = 18\n18 - 1 =",
            "Response": " 17",
            "Extract-Response": " 17\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 304,
            "GT": 953,
            "Query": "3 * 5 * 9 * 7 * 1 + 9 - 1 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 9 = 135\n135 * 7 = 945\n945 * 1 = 945\n945 + 9 = 954\n954 - 1 =",
            "Response": " 953\n\n3 * 5 * 9 * 7 * 1 + 9 - 1 = 953\n\n*/",
            "Extract-Response": " 953"
        },
        {
            "Index": 305,
            "GT": -212,
            "Query": "9 * 5 * 8 - 7 * 9 * 9 - 5 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 8 = 360\n7 * 9 = 63\n63 * 9 = 567\n360 - 567 = -207\n-207 - 5 =",
            "Response": " -212",
            "Extract-Response": " -212.\n\nNote:\n\nThe length of the input array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 306,
            "GT": 42,
            "Query": "7 + 8 - 5 + 2 + 5 * 3 * 2 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 2 = 30\n7 + 8 = 15\n15 - 5 = 10\n10 + 2 = 12\n12 + 30 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24,"
        },
        {
            "Index": 307,
            "GT": 4,
            "Query": "2 * 7 * 2 - 5 - 9 - 9 - 1 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 2 = 28\n28 - 5 = 23\n23 - 9 = 14\n14 - 9 = 5\n5 - 1 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\n\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        int n = nums.size();\n        int sum = 0;\n        int count = 0;\n        unordered_map<int, int> m;\n        m[0] = 1;\n        for(int i = 0; i < n; i++) {\n            sum += nums[i];\n            if(m.find(sum - k) != m.end()) {\n                count += m[sum - k];\n            }\n            m[sum]++;\n        }\n        return count;\n    }\n};"
        },
        {
            "Index": 309,
            "GT": 9,
            "Query": "5 + 5 - 3 + 1 + 5 - 9 + 5 =   ",
            "Injected CoT": "5 + 5 = 10\n10 - 3 = 7\n7 + 1 = 8\n8 + 5 = 13\n13 - 9 = 4\n4 + 5 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        sum_left = 0\n        sum_right = sum(nums[1:])\n        for i in range(len(nums)):\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n            if i < len(nums) - 1:\n                sum_right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 310,
            "GT": -22,
            "Query": "5 - 7 * 4 + 1 - 8 - 1 + 9 =   ",
            "Injected CoT": "-7 * 4 = -28\n5 - (-28) = 33\n33 + 1 = 34\n34 - 8 = 26\n26 - 1 = 25\n25 + 9 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        result += sign * currentNumber;\n        sign *= -1;\n        ++currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 312,
            "GT": 21,
            "Query": "1 + 9 - 6 + 8 + 5 + 9 - 5 =   ",
            "Injected CoT": "1 + 9 = 10\n10 - 6 = 4\n4 + 8 = 12\n12 + 5 = 17\n17 + 9 = 26\n26 - 5 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum of all integers = %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 315,
            "GT": -286,
            "Query": "2 - 9 * 4 * 8 - 3 - 4 + 7 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 8 = 288\n2 - 288 = -286\n-286 - 3 = -289\n-289 - 4 = -293\n-293 + 7 =",
            "Response": " -286",
            "Extract-Response": " -286.\n\nNote:\n\nThere are at most 1000 operations.\nYou cannot use division, multiplication and mod operator.\nYou can use bitwise operations with the given restrictions.\nYou can assume that there will not be any overflow.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        int sign = 1;\n        int res = 0;\n        stack<int> st;\n        for(int i = 0; i < len; ++i){\n            if(s[i] == ' ') continue;\n            if(s[i] == '+'){\n                sign = 1;\n            }else if(s[i] == '-'){\n                sign = -1;\n            }else if(s[i] == '('){\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            }else if(s[i] == ')'){\n                res = res * st.top();\n                st.pop();\n                res = st.top() + res;\n                st.pop();\n            }else{\n                int num = s[i] - '0';\n                while(i + 1 < len && isdigit(s[i + 1])){\n                    num = num * 10 + s[i + 1] - '0';\n                    ++i;\n                }\n                res = res + num * sign;\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 316,
            "GT": -2,
            "Query": "6 + 8 * 3 - 4 - 7 * 5 + 7 =   ",
            "Injected CoT": "8 * 3 = 24\n6 + 24 = 30\n7 * 5 = 35\n4 - 35 = -31\n-31 + 7 = -24\n30 - 24 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 320,
            "GT": 8,
            "Query": "3 + 1 + 9 - 6 - 1 - 7 + 9 =   ",
            "Injected CoT": "3 + 1 = 4\n4 + 9 = 13\n13 - 6 = 7\n7 - 1 = 6\n6 - 7 = -1\n-1 + 9 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 321,
            "GT": -40,
            "Query": "3 + 2 - 5 - 3 * 5 - 5 * 5 =   ",
            "Injected CoT": "3 + 2 = 5\n5 - 5 = 0\n3 * 5 = 15\n5 * 5 = 25\n15 + 25 = 40\n0 - 40 =",
            "Response": " -40",
            "Extract-Response": " -40.\n\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                sign = 1;\n                curNum = 0;\n            } else if (c == '-') {\n                res += sign * curNum;\n                sign = -1;\n                curNum = 0;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};"
        },
        {
            "Index": 322,
            "GT": 6,
            "Query": "5 - 9 - 1 + 3 * 4 - 2 + 1 =   ",
            "Injected CoT": "3 * 4 = 12\n-9 + 12 = 3\n5 - 1 = 4\n4 + 3 = 7\n7 - 2 = 5\n5 + 1 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 323,
            "GT": 382,
            "Query": "9 - 9 + 4 + 3 * 9 * 2 * 7 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 2 = 54\n54 * 7 = 378\n9 - 9 = 0\n0 + 4 = 4\n4 + 378 =",
            "Response": " 382",
            "Extract-Response": "\n\n382"
        },
        {
            "Index": 325,
            "GT": 24,
            "Query": "5 + 5 * 3 + 9 * 1 - 8 + 3 =   ",
            "Injected CoT": "5 * 3 = 15\n9 * 1 = 9\n5 + 15 = 20\n20 + 9 = 29\n29 - 8 = 21\n21 + 3 =",
            "Response": " 24",
            "Extract-Response": " 24\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, j = 1;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            j = 1;\n            continue;\n        }\n        sum = sum + (s[i] - '0') * j;\n        j++;\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 326,
            "GT": 53,
            "Query": "4 + 8 - 6 - 9 + 7 * 8 * 1 =   ",
            "Injected CoT": "7 * 8 = 56\n4 + 8 = 12\n12 - 6 = 6\n6 - 9 = -3\n-3 + 56 = 53\n53 * 1 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string and check for\n     * operands and operators\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If the current character is a digit then\n         * convert it into number\n         */\n        if(str[i] >= '0' && str[i] <= '9')\n        {\n            num = (num * 10) + (str[i] - '0');\n        }\n        /* If the current character is an operator, then\n         * perform the required operation\n         */\n        else\n        {\n            result = result + (sign * num);\n\n            /* If the current character is an operator, then\n             * update the sign\n             */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n            else if(str[i] == '-')\n            {\n                sign = -1;\n            }\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n    }\n\n    /* If num is not equal to 0, then add it to result */\n    if(num != 0)\n    {\n        result = result + (sign * num);\n    }\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 327,
            "GT": 25,
            "Query": "2 * 5 + 1 * 1 + 4 + 8 + 2 =   ",
            "Injected CoT": "2 * 5 = 10\n1 * 1 = 1\n10 + 1 = 11\n11 + 4 = 15\n15 + 8 = 23\n23 + 2 =",
            "Response": " 25\n\n25 is the checksum, which is the rightmost digit of the result of the multiplication.\n\nFor example, for the card 4012888888881881,\n\n4012888888881881\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881881 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881881 is 0.\n\nFor the card 4012888888881882,\n\n4012888888881882\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881882 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881882 is 0.\n\nFor the card 4012888888881883,\n\n4012888888881883\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881883 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881883 is 0.\n\nFor the card 4012888888881884,\n\n4012888888881884\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881884 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881884 is 0.\n\nFor the card 4012888888881885,\n\n4012888888881885\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881885 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881885 is 0.\n\nFor the card 4012888888881886,\n\n4012888888881886\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881886 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881886 is 0.\n\nFor the card 4012888888881887,\n\n4012888888881887\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881887 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881887 is 0.\n\nFor the card 4012888888881888,\n\n4012888888881888\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881888 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881888 is 0.\n\nFor the card 4012888888881889,\n\n4012888888881889\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881889 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881889 is 0.\n\nFor the card 4012888888881890,\n\n4012888888881890\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881890 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881890 is 0.\n\nFor the card 4012888888881891,\n\n4012888888881891\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8",
            "Extract-Response": "\n\n2 * 8 + 2 * 11 + 2 * 4 + 1 * 8 = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881891 is 0.\n\nFor the card 4012888888881892,\n\n4012888888881892\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881892 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881892 is 0.\n\nFor the card 4012888888881893,\n\n4012888888881893\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881893 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881893 is 0.\n\nFor the card 4012888888881894,\n\n4012888888881894\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881894 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881894 is 0.\n\nFor the card 4012888888881895,\n\n4012888888881895\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881895 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881895 is 0.\n\nFor the card 4012888888881896,\n\n4012888888881896\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881896 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881896 is 0.\n\nFor the card 4012888888881897,\n\n4012888888881897\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881897 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881897 is 0.\n\nFor the card 4012888888881898,\n\n4012888888881898\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881898 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881898 is 0.\n\nFor the card 4012888888881899,\n\n4012888888881899\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881899 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881899 is 0.\n\nFor the card 4012888888881900,\n\n4012888888881900\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881900 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881900 is 0.\n\nFor the card 4012888888881901,\n\n4012888888881901\nAbove digits 0 through 15 we have 2 times 8, 2 times 11, 2 times 4, 1 time 8, 1 time 3, 1 time 4, 1 time 11, 2 times 3, 1 time 2, 2 times 2, 1 time 1, 2 times 1\n\nSo the checksum for 4012888888881901 is:\n\n(2 * 8) + (2 * 11) + (2 * 4) + (1 * 8) + (1 * 3) + (1 * 4) + (1 * 11) + (2 * 3) + (1 * 2) + (2 * 2) + (1 * 1) + (2 * 1) = 70\n\n70 % 10 = 0\n\nSo, the final result for 4012888888881901 is 0.\n\nFor the card 4012888888881902,\n\n4012888888881902\nAbove digits 0 through 15 we have"
        },
        {
            "Index": 329,
            "GT": 6,
            "Query": "1 + 7 - 7 + 3 - 2 + 8 - 4 =   ",
            "Injected CoT": "1 + 7 = 8\n8 - 7 = 1\n1 + 3 = 4\n4 - 2 = 2\n2 + 8 = 10\n10 - 4 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 331,
            "GT": 12,
            "Query": "2 - 7 - 3 * 3 + 9 * 2 + 8 =   ",
            "Injected CoT": "-3 * 3 = -9\n9 * 2 = 18\n-7 - 9 = -16\n-16 + 18 = 2\n2 + 8 =",
            "Response": " 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 332,
            "GT": 40,
            "Query": "8 + 6 * 1 * 5 - 7 + 3 + 6 =   ",
            "Injected CoT": "6 * 1 = 6\n8 + 6 = 14\n14 * 5 = 70\n70 - 7 = 63\n63 + 3 = 66\n66 + 6 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 333,
            "GT": -38,
            "Query": "8 - 3 - 7 * 4 - 6 - 2 - 7 =   ",
            "Injected CoT": "7 * 4 = 28\n8 - 3 = 5\n5 - 28 = -23\n-23 - 6 = -29\n-29 - 2 = -31\n-31 - 7 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 334,
            "GT": 18,
            "Query": "9 + 3 + 3 - 2 - 1 + 8 - 2 =   ",
            "Injected CoT": "9 + 3 = 12\n12 + 3 = 15\n15 - 2 = 13\n13 - 1 = 12\n12 + 8 = 20\n20 - 2 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 335,
            "GT": 16,
            "Query": "4 * 4 + 6 - 3 - 1 - 8 + 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 6 = 22\n22 - 3 = 19\n19 - 1 = 18\n18 - 8 = 10\n10 + 6 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 336,
            "GT": -39,
            "Query": "4 + 4 + 4 - 3 * 1 - 8 * 6 =   ",
            "Injected CoT": "4 + 4 = 8\n8 + 4 = 12\n12 - 3 = 9\n1 * 8 = 8\n6 * 8 = 48\n9 - 8 = 1\n1 - 48 =",
            "Response": " -47",
            "Extract-Response": " -47.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 337,
            "GT": -200,
            "Query": "4 + 2 - 3 * 7 * 5 * 2 + 4 =   ",
            "Injected CoT": "3 * 7 = 21\n21 * 5 = 105\n105 * 2 = 210\n4 + 2 = 6\n6 - 210 = -204\n-204 + 4 =",
            "Response": " -200",
            "Extract-Response": " -200.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<int>& nums, int i, int j, int sign) {\n        if (i > j) {\n            return 0;\n        }\n        int a = calc(nums, i + 1, j, nums[i] == '-' ? -1 * sign : sign);\n        int b = calc(nums, i + 2, j, nums[i] == '-' ? -1 * sign : sign);\n        if (nums[i] == '+') {\n            return a + b;\n        } else if (nums[i] == '-') {\n            return a - b;\n        } else if (nums[i] == '*') {\n            return a * b;\n        }\n        return 0;\n    }\n    int calculate(string s) {\n        int n = s.size();\n        vector<int> nums;\n        for (int i = 0; i < n; ++i) {\n            if (s[i] != ' ') {\n                nums.push_back(s[i]);\n            }\n        }\n        return calc(nums, 0, nums.size() - 1, 1);\n    }\n};"
        },
        {
            "Index": 338,
            "GT": 3549,
            "Query": "7 * 7 * 9 * 8 - 3 + 4 * 6 =   ",
            "Injected CoT": "7 * 7 = 49\n49 * 9 = 441\n441 * 8 = 3528\n4 * 6 = 24\n3528 - 3 = 3525\n3525 + 24 =",
            "Response": " 3549",
            "Extract-Response": " 3549\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    char *p;\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9;\n    int sum;\n\n    printf(\"Enter a formula: \");\n    fgets(input, MAX_SIZE, stdin);\n\n    p = strtok(input, \" \");\n    num1 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num2 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num3 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num4 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num5 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num6 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num7 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num8 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    num9 = atoi(p);\n\n    sum = num1 * num2 * num3 * num4 * num5 * num6 * num7 * num8 * num9;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 340,
            "GT": -5,
            "Query": "2 - 5 + 4 - 8 + 9 + 2 - 9 =   ",
            "Injected CoT": "2 - 5 = -3\n-3 + 4 = 1\n1 - 8 = -7\n-7 + 9 = 2\n2 + 2 = 4\n4 - 9 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 341,
            "GT": 6,
            "Query": "9 + 2 * 1 - 4 - 1 + 3 - 3 =   ",
            "Injected CoT": "2 * 1 = 2\n9 + 2 = 11\n11 - 4 = 7\n7 - 1 = 6\n6 + 3 = 9\n9 - 3 =",
            "Response": " 6\n\n6",
            "Extract-Response": " 6.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int prev = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        cin >> curr;\n        if (curr > prev) {\n            result += curr - prev;\n        }\n        prev = curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 343,
            "GT": 35,
            "Query": "8 + 8 + 7 + 7 + 7 + 7 - 9 =   ",
            "Injected CoT": "8 + 8 = 16\n16 + 7 = 23\n23 + 7 = 30\n30 + 7 = 37\n37 - 9 =",
            "Response": " 28\n\n28\n*/",
            "Extract-Response": "\n\n28."
        },
        {
            "Index": 344,
            "GT": -1,
            "Query": "9 - 4 * 2 * 2 + 2 + 7 - 3 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 2 = 16\n9 - 16 = -7\n-7 + 2 = -5\n-5 + 7 = 2\n2 - 3 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 345,
            "GT": 117,
            "Query": "2 * 9 * 7 - 6 * 2 - 5 + 8 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 7 = 126\n6 * 2 = 12\n126 - 12 = 114\n114 - 5 = 109\n109 + 8 =",
            "Response": " 117",
            "Extract-Response": " 117\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 347,
            "GT": 15,
            "Query": "1 * 2 - 2 + 3 + 1 * 3 * 4 =   ",
            "Injected CoT": "1 * 2 = 2\n2 - 2 = 0\n1 * 3 = 3\n3 * 4 = 12\n0 + 3 = 3\n3 + 12 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prevSign = 1;\n    int prev = 0;\n    int prevPrev = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            prevPrev = prev;\n            prev = curr;\n            curr = 0;\n            prevSign = sign;\n            sign = 1;\n        } else if (s[i] == '-') {\n            prevPrev = prev;\n            prev = curr;\n            curr = 0;\n            prevSign = sign;\n            sign = -1;\n        } else if (s[i] == '*') {\n            prevPrev = prev;\n            prev = curr;\n            curr = 0;\n            prevSign = sign;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n\n        if (prevSign == 1) {\n            result += prev;\n        } else {\n            result -= prev;\n        }\n\n        if (prevPrev == 0) {\n            continue;\n        }\n\n        if (prevSign == 1) {\n            result -= prevPrev;\n            result += prevPrev * curr;\n        } else {\n            result += prevPrev;\n            result -= prevPrev * curr;\n        }\n    }\n\n    if (prevSign == 1) {\n        result += curr;\n    } else {\n        result -= curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 348,
            "GT": -78,
            "Query": "5 * 1 - 5 * 3 * 6 - 1 + 8 =   ",
            "Injected CoT": "5 * 1 = 5\n5 * 3 = 15\n15 * 6 = 90\n5 - 90 = -85\n-85 - 1 = -86\n-86 + 8 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\nThe input is only gave to you in the form of a linked list with integer data types.\n*/\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int getDecimalValue(ListNode* head) {\n        int result = 0;\n        while (head) {\n            result = result * 2 + head->val;\n            head = head->next;\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 349,
            "GT": 67,
            "Query": "3 + 9 * 9 - 4 - 8 - 6 + 1 =   ",
            "Injected CoT": "9 * 9 = 81\n3 + 81 = 84\n84 - 4 = 80\n80 - 8 = 72\n72 - 6 = 66\n66 + 1 =",
            "Response": " 67\n\n67 is the answer.",
            "Extract-Response": " 67.\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, sum;\n\n    scanf(\"%d\", &n);\n\n    for(i = 1; i <= n; i++)\n    {\n        sum = 0;\n\n        for(j = 1; j <= i; j++)\n        {\n            sum = sum + j * j;\n        }\n\n        for(j = i + 1; j <= n; j++)\n        {\n            sum = sum - j * j;\n        }\n\n        printf(\"%d \", sum);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 350,
            "GT": 5,
            "Query": "5 - 9 + 8 - 4 + 2 * 2 + 1 =   ",
            "Injected CoT": "2 * 2 = 4\n-9 + 4 = -5\n-5 + 8 = 3\n3 - 4 = -1\n-1 + 4 = 3\n3 + 1 = 4\n5 - 4 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    while (n) {\n        result += n % 2;\n        n /= 2;\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 352,
            "GT": -35,
            "Query": "8 * 4 - 8 * 7 - 1 - 1 - 9 =   ",
            "Injected CoT": "8 * 4 = 32\n8 * 7 = 56\n32 - 56 = -24\n-24 - 1 = -25\n-25 - 1 = -26\n-26 - 9 =",
            "Response": " -35\n\n-35\n\n*/",
            "Extract-Response": " -35"
        },
        {
            "Index": 353,
            "GT": -4,
            "Query": "2 + 4 + 6 - 3 - 8 + 2 - 7 =   ",
            "Injected CoT": "2 + 4 = 6\n6 + 6 = 12\n12 - 3 = 9\n9 - 8 = 1\n1 + 2 = 3\n3 - 7 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9+7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 354,
            "GT": -30,
            "Query": "2 * 7 - 6 - 8 - 9 - 7 * 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 - 6 = 8\n8 - 8 = 0\n0 - 9 = -9\n7 * 3 = 21\n-9 - 21 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            res = max(res, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 355,
            "GT": -21,
            "Query": "7 + 3 - 6 * 1 + 7 - 8 * 4 =   ",
            "Injected CoT": "6 * 1 = 6\n7 + 3 = 10\n10 - 6 = 4\n4 + 7 = 11\n8 * 4 = 32\n11 - 32 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 356,
            "GT": -70,
            "Query": "8 + 5 + 1 - 3 * 1 * 4 * 7 =   ",
            "Injected CoT": "3 * 1 = 3\n4 * 7 = 28\n3 * 28 = 84\n8 + 5 = 13\n13 + 1 = 14\n14 - 84 =",
            "Response": " -70",
            "Extract-Response": " -70.\n\nNote:\n\nThe input strings will not have extra blank.\nThe numbers in the statement will be separated by a single space and there will be no extra space in the statement.\nEvaluation is performed from left to right and no precedence relationships exist.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 358,
            "GT": -34,
            "Query": "2 * 6 - 2 * 8 * 3 + 4 - 2 =   ",
            "Injected CoT": "2 * 6 = 12\n2 * 8 = 16\n16 * 3 = 48\n12 - 48 = -36\n-36 + 4 = -32\n-32 - 2 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\nThere will be no answer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        }
    ]
}