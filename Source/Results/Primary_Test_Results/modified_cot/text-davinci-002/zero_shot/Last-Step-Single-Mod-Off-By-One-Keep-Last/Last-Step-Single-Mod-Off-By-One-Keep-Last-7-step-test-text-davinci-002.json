{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Last-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 7,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Last-Step-Single-Mod-Off-By-One-Keep-Last\\Last-Step-Single-Mod-Off-By-One-Keep-Last-7-step-test-text-davinci-002.json",
    "Total": 250,
    "Total Accurate": 4,
    "Total Accuracy": 1.6,
    "Percent of Answers Containing CoT": 9.6,
    "CoT Accuracy": 0.0,
    "Non-CoT Accuracy": 1.7699115044247788,
    "ci_radius": 1.5554054185324158,
    "ci_upper": 3.155405418532416,
    "ci_lower": 0.04459458146758433,
    "Matches Expected": 79.60000000000001,
    "Matches Expected ci_radius": 4.995255246331262,
    "Matches Expected ci_upper": 84.59525524633128,
    "Matches Expected ci_lower": 74.60474475366874,
    "ME ci_radius": 4.995255246331262,
    "ME ci_upper": 84.59525524633128,
    "ME ci_lower": 74.60474475366874,
    "Dataset Index": 11,
    "Trials": [
        {
            "Index": 0,
            "GT": -19,
            "Query": "2 - 1 * 6 * 4 + 1 * 4 + 4 - 5 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 4 = 24\n2 - 24 = -22\n1 * 4 = 4\n-22 + 4 = -19\n4 + 4 = 8\n-19 - 5 =",
            "Response": " -24\n\n-24",
            "Extract-Response": " -24\n\n*/",
            "Expected Answer": -24,
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 3,
            "GT": 9,
            "Query": "2 * 6 + 4 + 8 - 4 + 2 - 7 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n12 + 4 = 16\n16 + 8 = 24\n24 - 4 = 20\n20 + 2 = 22\n22 - 7 = 14\n14 - 6 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe length of the given array won't exceed 10000.\nAll the integers in the given array are in the range of [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 8,
            "Answer": 8.0,
            "Final Answer": 8.0
        },
        {
            "Index": 4,
            "GT": 70,
            "Query": "4 * 6 * 3 + 2 - 2 + 1 - 6 + 3 =   ",
            "Injected CoT": "4 * 6 = 24\n24 * 3 = 72\n72 + 2 = 74\n74 - 2 = 72\n72 + 1 = 73\n73 - 6 = 66\n66 + 3 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 4 * 6 * 3 + 2 - 2 + 1 - 6 + 3;\n    b = 3 + 2 * 3 + 1 - 1 + 4 - 3;\n    c = 1 + 2 - 1 + 5 - 6;\n    d = 4 * 3 * 2 + 4 - 1 + 3 - 2;\n    e = 2 * 1 + 5 - 3 + 4 - 3;\n    f = 3 * 2 * 1 + 3 - 2 + 3 - 1;\n    g = 1 * 2 * 3 + 1 - 1 + 2 - 3;\n    h = 2 * 3 + 5 - 1 + 4 - 3;\n    i = 3 + 5 - 1 + 4 - 3;\n    j = 5 - 1 + 4 - 3;\n    k = 4 - 3;\n    l = 1 * 2 * 3 * 4 * 5 + 4 - 3 + 2 - 1;\n    m = 4 * 3 * 2 * 1 + 3 - 2 + 1 - 5;\n    n = 3 * 2 * 1 + 1 - 5;\n    o = 1 - 5;\n    p = 4 * 3 * 2 * 1 * 5 + 3 - 2 + 1 - 4;\n    q = 3 * 2 * 1 + 1 - 4;\n    r = 1 - 4;\n    s = 5 * 4 * 3 * 2 * 1 + 2 - 1 + 5 - 6;\n    t = 2 - 1 + 5 - 6;\n    u = 5 - 6;\n    v = 4 * 3 * 2 * 1 * 6 + 1 - 5 + 3 - 2;\n    w = 1 - 5 + 3 - 2;\n    x = 3 - 2;\n    y = 4 * 3 * 2 * 1 * 3 + 5 - 2 + 4 - 3;\n    z = 5 - 2 + 4 - 3;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 69,
            "Answer": 69.0,
            "Final Answer": 69.0
        },
        {
            "Index": 5,
            "GT": 228,
            "Query": "2 + 3 * 8 + 9 + 6 * 4 * 8 + 1 =   ",
            "Injected CoT": "3 * 8 = 24\n2 + 24 = 26\n4 * 8 = 32\n32 * 6 = 192\n192 * 8 = 1537\n9 + 1 = 10\n26 + 10 = 36\n36 + 1537 =",
            "Response": " 1573\n\n1573 is the answer.",
            "Extract-Response": " 1573.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <string>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <list>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\n#define phl puts(\"Hello\")\n#define sf scanf\n#define pf printf\n#define fo(i, n) for(i = 0; i < n; i++)\n#define of(i, n) for(i = n - 1; i >= 0; i--)\n#define CLR(n, v) memset(n, v, sizeof( n ))\n#define pb push_back\n#define lim(v) v.begin(), v.end()\n#define sz(v) ((int)v,size())\n#define equals(a, b) (fabs(a-b)<eps)\n\n#define white 0\n#define black 1\n\nconst double PI = 2 * acos ( 0.0 );\nconst double eps = 1e-9;\n\ntypedef long long lld;\ntypedef unsigned long long llu;\ntypedef pair<int, int> pi;\ntypedef  vector<int> vi;\ntypedef vector<pi> vpi;\n\ntemplate <class T> T jog(T a, T b) { return a + b; }\ntemplate <class T> T bog(T a, T b) { return a - b; }\ntemplate <class T> T gon(T a, T b) { return a * b; }\ntemplate <class T> T sq(T x) {return x * x;}\ntemplate <class T> T gcd( T a, T b ) { return b == 0 ? a : gcd(b, a % b); }\ntemplate <class T> T lcm ( T a, T b ) { return ( a / gcd ( a, b ) ) * b; }\ntemplate <class T> T power ( T a, T p ) { int res = 1, x = a; while ( p ) { if ( p & 1 ) res = res * x; x = x * x; p >>= 1; } return res;}\ntemplate <class T> T cordinatlenth(T a, T b, T c, T d) { return sqrt( sq(a - c) + sq(b - d) ); }\ntemplate<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}\nint toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}\nlld bigmod ( lld a, lld p, lld mod )\n{\n    lld res = 1, x = a;\n    while ( p ) {\n        if ( p & 1 ) res = ( res * x ) % mod;\n        x = ( x * x ) % mod;\n        p >>= 1;\n    }\n    return res;\n}\n\n/*\n#define M 1000005\nint phi[M];\n\nvoid calculatePhi()\n{\n    for (int i = 1; i < M; i++) phi[i] = i;\n    for (int p = 2; p < M; p++)\n        if (phi[p] == p) // p is a prime\n            for (int k = p; k < M; k += p) phi[k] -= phi[k] / p;\n}\n*/\n\n/*\nconst int pr = 500001;\nint prime[ 41539 ], ind;\nbool mark[ pr ];\nvoid primelist()\n{\n    for(int i = 4; i < pr; i += 2) mark[ i ] = false;\n    for(int i = 3; i < pr; i += 2) mark[ i ] = true; mark[ 2 ] = true;\n    for(int i = 3, sq = sqrt( pr ); i < sq; i += 2)\n        if(mark[ i ])\n            for(int j = i * i; j < pr; j += i + i) mark[ j ] = false;\n    prime[ 0 ] = 2; ind = 1;\n    for(int i = 3; i < pr; i += 2)\n        if(mark[ i ]) ind++; printf(\"%d\\n\", ind);\n}\n*/\n\nint diraction1[] = {-1, 0, 0, 1, 1, -1, -1, 1};\nint diraction2[] = {0, -1, 1, 0, 1, -1, 1, -1};\nint horsed1[] = {-2, -2, -1, 1, 2, 2, 1, -1};\nint horsed2[] = {1, -1, -2, -2, -1, 1, 2, 2};\n\n#define check(n, pos) (n & (1<<(pos)))\n#define biton(n, pos) (n | (1<<(pos)))\n#define bitoff(n, pos) (n & ~(1<<(pos)))\n\nvoid input();\n\n/**************************Templet end*********************************/\n\nint n, k, dp[ 100010 ][ 2 ];\n\nint call(int pos, int flag);\n\nint main()\n{\n    //#ifdef monkey\n        //freopen(\"input.txt\", \"r\", stdin);\n        //freopen(\"output.txt\", \"w\", stdout);\n    //#endif\n    input();\n\n    return 0;\n}\nvoid input()\n{\n    sf(\"%d %d\", &n, &k);\n    CLR(dp, -1);\n    pf(\"%d\\n\", call(0, 0));\n}\nint call(int pos, int flag)\n{\n    if(pos == n) return flag;\n    int &ret = dp[ pos ][ flag ];\n    if(ret != -1) return ret;\n    ret = 0;\n    ret += call(pos + 1, flag);\n    ret += call(pos + k, !flag);\n    return ret;\n}",
            "Expected Answer": 1573,
            "Answer": 1573.0,
            "Final Answer": 1573.0
        },
        {
            "Index": 6,
            "GT": -81,
            "Query": "9 - 6 - 4 - 5 - 3 - 8 * 1 * 9 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 6 = 3\n3 - 4 = -1\n-1 - 5 = -6\n-6 - 3 = -9\n-9 - 8 = -18\n-18 * 9 =",
            "Response": " -162\n\n2 - 7 - 1 - 8 - 9 - 4 - 6 * 3 * 5 =    \n6 * 3 = 18\n9 - 4 = 5\n5 - 1 = 4\n4 - 8 = -4\n-4 - 7 = -11\n-11 - 6 = -17\n-17 * 5 = -85\n\n3 - 8 - 6 - 5 - 2 - 9 - 7 * 4 * 1 =    \n7 * 4 = 28\n9 - 2 = 7\n7 - 5 = 2\n2 - 6 = -4\n-4 - 8 = -12\n-12 - 7 = -19\n-19 * 1 = -19\n\n4 - 9 - 3 - 2 - 7 - 8 - 1 * 5 * 6 =    \n1 * 5 = 5\n8 - 7 = 1\n1 - 3 = -2\n-2 - 9 = -11\n-11 - 1 = -12\n-12 - 5 = -17\n-17 * 6 = -102\n\n5 - 1 - 4 - 3 - 8 - 9 - 2 * 6 * 7 =    \n2 * 6 = 12\n9 - 8 = 1\n1 - 4 = -3\n-3 - 1 = -4\n-4 - 9 = -13\n-13 - 2 = -15\n-15 * 7 = -105\n\n6 - 2 - 5 - 4 - 9 - 1 - 3 * 7 * 8 =    \n3 * 7 = 21\n1 - 9 = -8\n-8 - 4 = -12\n-12 - 5 = -17\n-17 - 6 = -23\n-23 * 8 = -184\n\n7 - 3 - 6 - 5 - 1 - 2 - 4 * 8 * 9 =    \n4 * 8 = 32\n2 - 1 = 1\n1 - 6 = -5\n-5 - 3 = -8\n-8 - 7 = -15\n-15 - 4 = -19\n-19 * 9 = -171\n\n8 - 4 - 7 - 6 - 2 - 3 - 5 * 9 * 1 =    \n5 * 9 = 45\n3 - 2 = 1\n1 - 7 = -6\n-6 - 4 = -10\n-10 - 8 = -18\n-18 - 5 = -23\n-23 * 1 = -23\n\n9 - 5 - 8 - 7 - 3 - 4 - 6 * 1 * 2 =    \n6 * 1 = 6\n4 - 3 = 1\n1 - 8 = -7\n-7 - 5 = -12\n-12 - 9 = -21\n-21 - 6 = -27\n-27 * 2 = -54\n\n1 - 6 - 9 - 8 - 4 - 5 - 7 * 2 * 3 =    \n7 * 2 = 14\n5 - 4 = 1\n1 - 8 = -7\n-7 - 9 = -16\n-16 - 1 = -17\n-17 - 14 = -31\n-31 * 3 = -93\n\n2 - 7 - 1 - 9 - 5 - 6 - 8 * 3 * 4 =    \n8 * 3 = 24\n6 - 5 = 1\n1 - 1 = 0\n0 - 9 = -9\n-9 - 2 = -11\n-11 - 24 = -35\n-35 * 4 = -140\n\n3 - 8 - 4 - 1 - 6 - 7 - 9 * 4 * 5 =    \n9 * 4 = 36\n7 - 6 = 1\n1 - 1 = 0\n0 - 4 = -4\n-4 - 3 = -7\n-7 - 36 = -43\n-43 * 5 = -215\n\n4 - 9 - 5 - 2 - 7 - 8 - 1 * 5 * 6 =    \n1 * 5 = 5\n8 - 7 = 1\n1 - 5 = -4\n-4 - 2 = -6\n-6 - 9 = -15\n-15 - 1 = -16\n-16 * 6 = -96\n\n5 - 1 - 6 - 3 - 8 - 9 - 2 * 6 * 7 =    \n2 * 6 = 12\n9 - 8 = 1\n1 - 6 = -5\n-5 - 3 = -8\n-8 - 1 = -9\n-9 - 12 = -21\n-21 * 7 = -147\n\n6 - 2 - 7 - 4 - 9 - 1 - 3 * 7 * 8 =    \n3 * 7 = 21\n1 - 9 = -8\n-8 - 4 = -12\n-12 - 7 = -19\n-19 - 2 = -21\n-21 - 21 = -42\n-42 * 8 = -336\n\n7 - 3 - 8 - 5 - 1 - 2 - 4 * 8 * 9 =    \n4 * 8 = 32\n2 - 1 = 1\n1 - 8 = -7\n-7 - 3 = -10\n-10 - 7 = -17\n-17 - 32 = -49\n-49 * 9 = -441\n\n8 - 4 - 9 - 6 - 2 - 3 - 5 * 9 * 1 =    \n5 * 9 = 45\n3 - 2 = 1\n1 - 9 = -8\n-8 - 4 = -12\n-12 - 8 = -20\n-20 - 5 = -25\n-25 * 1 = -25\n\n9 - 5 - 1 - 7 - 3 - 4 - 6 * 1 * 2 =    \n6 * 1 = 6\n4 - 3 = 1\n1 - 7 = -6\n-6 - 5 = -11\n-11 - 9 = -20\n-20 - 6 = -26\n-26 * 2 = -52\n\n1 - 6 - 2 - 8 - 4 - 5 - 7 * 2 * 3 =    \n7 * 2 = 14\n5 - 4 = 1\n1 - 2 = -1\n-1 - 8 = -9\n-9 - 1 = -10\n-10 - 14 = -24\n-24 * 3 = -72\n\n2 - 7 - 3 - 9 - 5 - 6 - 8 * 3 * 4 =    \n8 * 3 = 24\n6 - 5 = 1\n1 - 3 = -2\n-2 - 9 = -11\n-11 - 2 = -13\n-13 - 24 = -37\n-37 * 4 = -148\n\n3 - 8 - 4 - 1 - 6 - 7 - 9 * 4 * 5 =    \n9 * 4 = 36\n7 - 6 = 1\n1 - 1 = 0\n0 - 4 = -4\n-4 - 3 = -7\n-7 - 36 = -43\n-43 * 5 = -215\n\n4 - 9 - 5 - 2 - 7 - 8 - 1 * 5 * 6 =    \n1 * 5 = 5\n8 - 7 = 1\n1 - 5 = -4\n-4 - 2 = -6\n-6 - 9 = -15\n-15 - 1 = -16\n-16 * 6 = -96\n\n5 - 1 - 6 - 3 - 8 - 9 - 2 * 6 * 7 =    \n2 * 6 = 12\n9 - 8 = 1\n1 - 6 = -5\n-5 - 3 = -8\n-8 - 1 = -9\n-9 - 12 = -21\n-21 * 7 = -147\n\n6 - 2 - 7 - 4 - 9 - 1 - 3 * 7 * 8 =    \n3 * 7 = 21\n1 - 9 = -8\n-8 - 4 = -12\n-12 - 7 = -19\n-19 - 2 = -21\n-21 - 21 = -42\n-42 * 8 = -336\n\n7 - 3 - 8 - 5 - 1 - 2 - 4 * 8 * 9 =    \n4 * 8 = 32\n2 - 1 = 1\n1 - 8 = -7\n-7 - 3 = -10\n-10 - 7 = -17\n-17 - 32 = -49\n-49 * 9 = -441\n\n8 - 4 - 9 - 6 - 2 - 3 - 5 * 9 * 1 =    \n5 * 9 = 45\n3 - 2 = 1\n1 - 9 = -8\n-8 - 4 = -12\n-12 - 8 = -20\n-20 - 5 = -25\n-25 * 1 = -25\n\n9 - 5 - 1 - 7 - 3 - 4 - 6 * 1 * 2 =    \n6 * 1 = 6\n4 - 3 = 1\n1 - 7 = -6\n-6 - 5 = -11\n-11 - 9 = -20\n-20 - 6 = -26\n-26 * 2 = -52\n\n1 - 6 - 2 - 8 - 4 - 5 - 7 * 2 * 3 =    \n7 * 2 = 14\n5 - 4 = 1\n1 - 2 = -1\n-1 - 8 = -9\n-9 - 1 = -10\n-10 - 14 = -24\n-24 * 3 = -72\n\n2 - 7 - 3 - 9 - 5 - 6 - 8 * 3 * 4 =    \n8 * 3 = 24\n6 - 5 = 1\n1 - 3 = -2\n-2 - 9 = -11\n-11 - 2 = -13\n-13 - 24 = -37\n-",
            "Extract-Response": "\n-37",
            "Expected Answer": -162,
            "Answer": -37.0,
            "Final Answer": -37.0
        },
        {
            "Index": 7,
            "GT": 1,
            "Query": "4 - 9 + 2 * 3 + 4 - 5 - 8 + 9 =   ",
            "Injected CoT": "2 * 3 = 6\n4 - 9 = -5\n-5 + 6 = 1\n1 + 4 = 5\n5 - 5 = 0\n0 - 8 = -9\n-9 + 9 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 8,
            "GT": -4,
            "Query": "8 * 1 + 6 - 3 - 2 + 1 - 9 - 5 =   ",
            "Injected CoT": "8 * 1 = 8\n8 + 6 = 14\n14 - 3 = 11\n11 - 2 = 9\n9 + 1 = 10\n10 - 9 = 1\n1 - 6 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = nums[0];\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 10,
            "GT": -63,
            "Query": "2 - 8 - 5 - 5 + 3 + 4 - 6 * 9 =   ",
            "Injected CoT": "-6 * 9 = -53\n2 - 8 = -6\n-6 - 5 = -11\n-11 - 5 = -16\n-16 + 3 = -13\n-13 + 4 = -9\n-9 + (-54) =",
            "Response": " -63",
            "Extract-Response": " -63.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a+b+c, a*(b+c), (a+b)*c, a*b*c)",
            "Expected Answer": -63,
            "Answer": -63.0,
            "Final Answer": -63.0
        },
        {
            "Index": 11,
            "GT": -11,
            "Query": "5 * 1 - 4 - 5 - 6 - 1 + 3 - 3 =   ",
            "Injected CoT": "5 * 1 = 5\n5 - 4 = 1\n1 - 5 = -4\n-4 - 6 = -10\n-10 - 1 = -11\n-11 + 3 = -7\n-7 - 3 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Expected Answer": -10,
            "Answer": -10.0,
            "Final Answer": -10.0
        },
        {
            "Index": 12,
            "GT": -138,
            "Query": "9 * 2 - 7 - 1 + 2 - 5 * 6 * 5 =   ",
            "Injected CoT": "9 * 2 = 18\n18 - 7 = 11\n11 - 1 = 10\n10 + 2 = 13\n5 * 6 = 30\n30 * 5 = 150\n13 - 150 =",
            "Response": " -137",
            "Extract-Response": " -137\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char operator;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            for(j = i; j < len; j++)\n            {\n                input[j] = input[j + 1];\n            }\n\n            len--;\n        }\n    }\n\n    num1 = atoi(&input[0]);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            operator = input[i];\n\n            num2 = atoi(&input[i + 1]);\n\n            break;\n        }\n    }\n\n    switch(operator)\n    {\n        case '+':\n            result = num1 + num2;\n            break;\n\n        case '-':\n            result = num1 - num2;\n            break;\n\n        case '*':\n            result = num1 * num2;\n            break;\n\n        case '/':\n            result = num1 / num2;\n            break;\n\n        default:\n            printf(\"Invalid operator\");\n            break;\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Expected Answer": -137,
            "Answer": -137.0,
            "Final Answer": -137.0
        },
        {
            "Index": 13,
            "GT": 176,
            "Query": "4 * 3 + 5 * 5 * 6 + 4 + 5 * 2 =   ",
            "Injected CoT": "4 * 3 = 12\n5 * 5 = 25\n25 * 6 = 150\n5 * 2 = 9\n12 + 150 = 162\n162 + 4 = 166\n166 + 9 =",
            "Response": " 175",
            "Extract-Response": "\n<code>1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20 = \n\n232792560\n</code>\n",
            "Expected Answer": 175,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 14,
            "GT": -33,
            "Query": "2 - 1 + 5 - 8 - 9 - 6 * 4 + 2 =   ",
            "Injected CoT": "6 * 4 = 24\n-1 + 5 = 4\n2 - 4 = -2\n-2 - 9 = -11\n-11 - 24 = -36\n-36 + 2 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}",
            "Expected Answer": -34,
            "Answer": -34.0,
            "Final Answer": -34.0
        },
        {
            "Index": 16,
            "GT": 21,
            "Query": "7 * 2 + 8 - 5 + 2 + 8 - 6 * 1 =   ",
            "Injected CoT": "7 * 2 = 14\n14 + 8 = 22\n22 - 5 = 17\n17 + 2 = 19\n19 + 8 = 27\n5 * 1 = 5\n27 - 5 =",
            "Response": " 22\n\n22",
            "Extract-Response": " 22",
            "Expected Answer": 22,
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 17,
            "GT": 36,
            "Query": "5 * 7 + 4 - 2 + 3 + 2 - 5 - 1 =   ",
            "Injected CoT": "5 * 7 = 35\n35 + 4 = 39\n39 - 2 = 38\n38 + 3 = 40\n40 + 2 = 42\n42 - 5 = 38\n38 - 1 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isNegative = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isNegative) {\n                result -= current;\n            } else {\n                result += current;\n            }\n            current = 0;\n            isNegative = false;\n        } else if (s[i] == '-') {\n            isNegative = true;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isNegative) {\n        result -= current;\n    } else {\n        result += current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 37,
            "Answer": 37.0,
            "Final Answer": 37.0
        },
        {
            "Index": 21,
            "GT": 33,
            "Query": "9 - 4 + 7 - 6 + 2 * 9 * 1 + 9 =   ",
            "Injected CoT": "2 * 9 = 18\n9 - 4 = 5\n7 - 6 = 1\n5 + 1 = 6\n6 + 18 = 24\n24 + 1 = 26\n26 + 9 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin(); v!=c.end(); ++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint sum=0;\n\tint sign=1;\n\twhile(i<n){\n\t\tif(s[i]=='+'){\n\t\t\tsign=1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tsign=-1;\n\t\t\t++i;\n\t\t}\n\t\telse{\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]>='0' && s[i]<='9'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\t++i;\n\t\t\t}\n\t\t\tsum+=sign*num;\n\t\t}\n\t}\n\n\tcout<<sum<<endl;\n\n\treturn 0;\n}",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 22,
            "GT": 14,
            "Query": "2 + 5 + 2 + 6 - 1 + 6 - 8 + 2 =   ",
            "Injected CoT": "2 + 5 = 7\n7 + 2 = 9\n9 + 6 = 15\n15 - 1 = 14\n14 + 6 = 20\n20 - 8 = 11\n11 + 2 =",
            "Response": " 13\n\n13",
            "Extract-Response": "\n\n13",
            "Expected Answer": 13,
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 23,
            "GT": 13,
            "Query": "4 * 3 - 3 * 3 + 6 - 4 + 2 * 4 =   ",
            "Injected CoT": "4 * 3 = 12\n3 * 3 = 9\n12 - 9 = 3\n2 * 4 = 8\n6 - 4 = 2\n3 + 8 = 12\n12 + 2 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 14,
            "Answer": 14.0,
            "Final Answer": 14.0
        },
        {
            "Index": 24,
            "GT": 14,
            "Query": "5 * 1 + 4 * 9 - 7 - 2 * 5 * 2 =   ",
            "Injected CoT": "5 * 1 = 5\n4 * 9 = 36\n2 * 5 = 10\n10 * 2 = 19\n5 + 36 = 41\n41 - 7 = 34\n34 - 19 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 25,
            "GT": 30,
            "Query": "2 * 6 + 9 + 3 * 5 - 5 - 2 + 1 =   ",
            "Injected CoT": "2 * 6 = 12\n3 * 5 = 15\n12 + 9 = 21\n15 - 5 = 10\n10 - 2 = 9\n9 + 1 =",
            "Response": " 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 10,
            "Answer": 10.0,
            "Final Answer": 10.0
        },
        {
            "Index": 26,
            "GT": 58,
            "Query": "4 * 9 + 3 - 9 + 7 * 5 - 8 + 1 =   ",
            "Injected CoT": "4 * 9 = 36\n36 + 3 = 39\n7 * 5 = 35\n39 - 9 = 30\n30 + 35 = 65\n65 - 8 = 58\n58 + 1 =",
            "Response": " 59",
            "Extract-Response": "\n\n59",
            "Expected Answer": 59,
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 27,
            "GT": 72,
            "Query": "5 + 5 * 2 * 9 - 1 - 5 * 4 - 2 =   ",
            "Injected CoT": "5 * 2 = 10\n10 * 9 = 90\n5 * 4 = 20\n5 + 90 = 95\n95 - 1 = 94\n94 - 20 = 75\n75 - 2 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<LL>\n#define VVI vector<VI>\n#define mp make_pair\n#define pb push_back\n#define ALL(V) V.begin(), V.end()\n\n#define FOR(i, a, b) for (int i = (a); i < (b); i++)\n#define REP(i, n) FOR(i, 0, n)\n#define REP1(i, n) FOR(i, 1, n + 1)\n\n#define MAX_INT std::numeric_limits<int>::max()\n#define MIN_INT std::numeric_limits<int>::min()\n\n#define INT_VEC_SIZE 50000\n\ntypedef pair<int, int> PII;\ntypedef pair<string, int> PSI;\ntypedef pair<string, string> PSS;\ntypedef pair<int, PII> PIP;\n\ntypedef priority_queue<int> PQ;\ntypedef priority_queue<int, vector<int>, greater<int>> RPQ;\n\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\n\n#define INIT_VAL -1\n\nint dp[INT_VEC_SIZE];\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.precision(10);\n\n    string S;\n    cin >> S;\n\n    int N = S.size();\n\n    dp[0] = 0;\n    dp[1] = S[0] - '0';\n\n    FOR(i, 2, N + 1) {\n        int num = S[i - 1] - '0';\n        int prevNum = S[i - 2] - '0';\n        int prevPrevNum = S[i - 3] - '0';\n\n        if (num == 0) {\n            dp[i] = dp[i - 2];\n        } else if (num == 1) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        } else if (num == 2 && prevNum <= 6) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        } else if (num == 2 && prevNum > 6) {\n            dp[i] = dp[i - 1];\n        } else if (num > 2) {\n            dp[i] = dp[i - 1];\n        }\n    }\n\n    cout << dp[N] << endl;\n\n    return 0;\n}",
            "Expected Answer": 73,
            "Answer": 73.0,
            "Final Answer": 73.0
        },
        {
            "Index": 28,
            "GT": -24,
            "Query": "9 - 7 - 5 * 6 - 6 + 8 - 6 + 8 =   ",
            "Injected CoT": "-5 * 6 = -30\n10 - 7 - 30 - 6 + 8 - 6 + 8 =",
            "Response": " \n10 - 7 - 30 - 6 + 8 - 6 + 8 = \n10 - 7 - 30 = \n3",
            "Extract-Response": "\n3\n\n*/",
            "Expected Answer": -23,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 30,
            "GT": -5,
            "Query": "7 - 1 * 5 - 4 - 4 - 6 * 1 + 7 =   ",
            "Injected CoT": "1 * 5 = 5\n6 * 1 = 6\n6 - 5 = 2\n2 - 4 = -2\n-2 - 4 = -6\n-6 + 6 =",
            "Response": " 0\n0 + 7 = 7\n7 + 2 = 9\n\n7 - 1 * 5 - 4 - 4 - 6 * 1 + 7 = 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += current;\n            current = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += current;\n            current = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += current;\n            current = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            current = current * 10 + (c - '0') * sign;\n        }\n    }\n\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 31,
            "GT": 124,
            "Query": "5 * 7 * 4 - 8 + 6 + 4 - 6 * 3 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 4 = 140\n6 * 3 = 18\n140 - 8 = 132\n132 + 4 = 137\n137 - 18 =",
            "Response": " 119",
            "Extract-Response": "\n<blockquote class=\"spoiler\">\n<p> <span class=\"math-container\">$119$</span></p>\n</blockquote>\n",
            "Expected Answer": 119,
            "Answer": 119.0,
            "Final Answer": 119.0
        },
        {
            "Index": 32,
            "GT": 73,
            "Query": "4 * 9 - 1 * 4 + 7 - 8 + 7 * 6 =   ",
            "Injected CoT": "4 * 9 = 36\n1 * 4 = 4\n7 * 6 = 42\n36 - 4 = 32\n32 + 7 = 39\n39 - 8 = 32\n32 + 42 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 74,
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 33,
            "GT": 29,
            "Query": "4 * 6 + 9 - 4 - 1 - 5 + 2 + 4 =   ",
            "Injected CoT": "3 * 6 = 24\n24 + 9 = 33\n33 - 3 = 29\n29 - 1 = 28\n28 - 5 = 23\n23 + 2 = 25\n25 + 3 =",
            "Response": " 28",
            "Extract-Response": "\n\n28",
            "Expected Answer": 28,
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 36,
            "GT": -2,
            "Query": "1 - 3 + 8 - 2 * 4 + 7 - 8 + 1 =   ",
            "Injected CoT": "-2 * 4 = -8\n2 - 3 + 8 - (-8) + 7 - 8 + 2 =",
            "Response": " \n2 - 3 + 8 + 8 + 7 - 8 + 2 = \n2 + 8 + 15 - 8 + 2 = \n19 + 7 = \n26",
            "Extract-Response": "\n26",
            "Expected Answer": 16,
            "Answer": 26.0,
            "Final Answer": 26.0
        },
        {
            "Index": 37,
            "GT": 65,
            "Query": "4 * 7 + 7 * 6 + 2 * 4 - 6 - 7 =   ",
            "Injected CoT": "4 * 8 = 28\n8 * 6 = 42\n2 * 4 = 8\n28 + 42 = 70\n70 + 8 = 78\n78 - 6 = 72\n72 - 8 =",
            "Response": " 64",
            "Extract-Response": " 64\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 4 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    b = 4 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    c = 4 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    d = 4 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    e = 4 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    f = 4 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    g = 4 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    h = 4 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    i = 4 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    j = 4 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    k = 4 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    l = 4 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    m = 4 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 20 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    n = 4 * 21 + 21 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 21 - 20 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    o = 4 * 22 + 22 * 21 + 21 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 22 - 21 - 20 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    p = 4 * 23 + 23 * 22 + 22 * 21 + 21 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 23 - 22 - 21 - 20 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    q = 4 * 24 + 24 * 23 + 23 * 22 + 22 * 21 + 21 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 24 - 23 - 22 - 21 - 20 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    r = 4 * 25 + 25 * 24 + 24 * 23 + 23 * 22 + 22 * 21 + 21 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12 * 11 + 11 * 10 + 10 * 9 + 9 * 8 + 8 * 7 + 7 * 6 + 6 * 5 + 5 * 4 + 4 * 3 + 3 * 2 + 2 * 1 - 25 - 24 - 23 - 22 - 21 - 20 - 19 - 18 - 17 - 16 - 15 - 14 - 13 - 12 - 11 - 10 - 9 - 8 - 7 - 6 - 5 - 4 - 3 - 2 - 1;\n    s = 4 * 26 + 26 * 25 + 25 * 24 + 24 * 23 + 23 * 22 + 22 * 21 + 21 * 20 + 20 * 19 + 19 * 18 + 18 * 17 + 17 * 16 + 16 * 15 + 15 * 14 + 14 * 13 + 13 * 12 + 12",
            "Expected Answer": 64,
            "Answer": 64.0,
            "Final Answer": 64.0
        },
        {
            "Index": 38,
            "GT": 18,
            "Query": "2 + 6 + 4 * 6 + 3 - 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 6 = 24\n2 + 6 = 7\n7 + 24 = 32\n32 + 3 = 35\n35 - 1 = 34\n34 - 7 = 26\n26 - 7 =",
            "Response": " 19",
            "Extract-Response": "\n\n19.",
            "Expected Answer": 19,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 39,
            "GT": 262,
            "Query": "7 * 6 * 6 + 5 * 3 + 8 - 7 - 6 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 6 = 252\n5 * 3 = 15\n252 + 15 = 267\n267 + 8 = 275\n275 - 7 = 267\n267 - 6 =",
            "Response": " 261",
            "Extract-Response": " 261\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0, num, temp;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == '+' || str[i] == '-')\n        {\n            num = 0;\n            for(j = i - 1; j >= 0; j--)\n            {\n                num += (str[j] - '0') * pow(10, i - 1 - j);\n            }\n            if(str[i] == '+')\n            {\n                sum += num;\n            }\n            else\n            {\n                sum -= num;\n            }\n        }\n    }\n    num = 0;\n    for(j = len - 1; j >= 0; j--)\n    {\n        if(str[j] != '+' && str[j] != '-')\n        {\n            num += (str[j] - '0') * pow(10, len - 1 - j);\n        }\n    }\n    sum += num;\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/",
            "Expected Answer": 261,
            "Answer": 261.0,
            "Final Answer": 261.0
        },
        {
            "Index": 40,
            "GT": 12,
            "Query": "5 * 5 - 5 - 8 - 1 * 5 + 5 * 1 =   ",
            "Injected CoT": "5 * 5 = 25\n25 - 5 = 20\n20 - 8 = 12\n1 * 5 = 5\n5 + 12 = 18\n5 * 1 = 5\n18 + 5 =",
            "Response": " 23",
            "Extract-Response": "\n\n23",
            "Expected Answer": 23,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 42,
            "GT": 28,
            "Query": "8 - 2 * 2 + 3 * 9 + 2 * 3 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n3 * 9 = 27\n2 * 3 = 6\n8 - 4 = 4\n4 + 27 = 31\n31 + 6 = 36\n36 - 9 =",
            "Response": " 27",
            "Extract-Response": " 27.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 27,
            "Answer": 27.0,
            "Final Answer": 27.0
        },
        {
            "Index": 44,
            "GT": 1030,
            "Query": "9 * 5 * 1 + 7 * 5 * 7 * 4 + 5 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 1 = 45\n7 * 5 = 35\n35 * 7 = 245\n245 * 4 = 979\n979 + 45 =",
            "Response": " 1024\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tint n, i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488, n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499, n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510, n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521, n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532, n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543, n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554, n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565, n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576, n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587, n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598, n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609, n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620, n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631, n632, n633, n634, n635, n636, n637, n638, n639, n640,",
            "Extract-Response": "\n\n0",
            "Expected Answer": 1024,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 45,
            "GT": -123,
            "Query": "2 * 1 - 4 * 4 * 8 + 3 - 7 + 7 =   ",
            "Injected CoT": "2 * 1 = 2\n4 * 4 = 16\n16 * 8 = 128\n-128 + 3 = -125\n-125 - 7 = -133\n-133 + 7 =",
            "Response": " -126",
            "Extract-Response": " -126.\n\nNote:\n\nThere are only operators +, -, *, /. Each operand may be an integer or another expression.\nFor simplicity, you can assume that there are not parentheses in the given expression.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int res = 0;\n        int cur = 0;\n        char op = '+';\n        for (int i = 0; i < n; ++i) {\n            if (s[i] == ' ') continue;\n            if (isdigit(s[i])) {\n                cur = cur * 10 + s[i] - '0';\n            }\n            if (!isdigit(s[i]) || i == n - 1) {\n                if (op == '+') {\n                    res += cur;\n                    cur = 0;\n                } else if (op == '-') {\n                    res -= cur;\n                    cur = 0;\n                } else if (op == '*') {\n                    res -= cur - 1;\n                    res += res * cur;\n                    cur = 0;\n                } else if (op == '/') {\n                    res -= cur - 1;\n                    res += res / cur;\n                    cur = 0;\n                }\n                op = s[i];\n            }\n        }\n        return res;\n    }\n};",
            "Expected Answer": -126,
            "Answer": -126.0,
            "Final Answer": -126.0
        },
        {
            "Index": 46,
            "GT": 69,
            "Query": "6 * 8 + 4 * 9 - 3 + 1 - 7 - 6 =   ",
            "Injected CoT": "6 * 8 = 48\n4 * 9 = 36\n48 + 36 = 84\n84 - 3 = 81\n81 + 1 = 82\n82 - 7 = 76\n76 - 6 =",
            "Response": " 70",
            "Extract-Response": "\n\n70",
            "Expected Answer": 70,
            "Answer": 70.0,
            "Final Answer": 70.0
        },
        {
            "Index": 47,
            "GT": -9,
            "Query": "9 - 4 + 2 - 3 - 8 - 8 * 1 + 3 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 4 = 5\n5 + 2 = 7\n7 - 2 = 4\n4 - 8 = -4\n-4 - 8 = -12\n-12 + 2 =",
            "Response": " -10\n-10 - 3 = -13\n-13 - 8 = -21",
            "Extract-Response": " -21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -10,
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 51,
            "GT": 0,
            "Query": "3 - 1 - 1 + 4 + 1 - 9 + 9 - 6 =   ",
            "Injected CoT": "3 - 1 = 2\n2 - 1 = 1\n1 + 4 = 5\n5 + 1 = 7\n7 - 9 = -3\n-3 + 9 = 7\n7 - 7 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,len,sum;\n    char str[100];\n    scanf(\"%d\",&n);\n    getchar();\n    for(i=0;i<n;i++)\n    {\n        gets(str);\n        len=strlen(str);\n        sum=0;\n        for(j=0;j<len;j++)\n        {\n            if(str[j]==' ')\n                continue;\n            else if(str[j]=='+')\n            {\n                for(k=j+1;k<len;k++)\n                {\n                    if(str[k]==' ')\n                        continue;\n                    else if(str[k]=='+')\n                        break;\n                    else\n                    {\n                        sum=sum+str[k]-48;\n                        j=k;\n                    }\n                }\n            }\n            else if(str[j]=='-')\n            {\n                for(k=j+1;k<len;k++)\n                {\n                    if(str[k]==' ')\n                        continue;\n                    else if(str[k]=='+')\n                        break;\n                    else\n                    {\n                        sum=sum-str[k]+48;\n                        j=k;\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 52,
            "GT": -17,
            "Query": "7 + 6 + 2 - 6 * 7 + 1 * 3 + 7 =   ",
            "Injected CoT": "6 * 6 = 42\n6 + 6 = 13\n13 + 2 = 15\n1 * 3 = 3\n42 - 15 = 27\n27 + 3 = 30\n30 + 6 =",
            "Response": " 36\n36 + 7 = 43\n43 + 1 = 44",
            "Extract-Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = n;\n    while (n > 0) {\n        result += n % 10;\n        n /= 10;\n    }\n\n    while (result > 9) {\n        int tmp = result;\n        result = 0;\n        while (tmp > 0) {\n            result += tmp % 10;\n            tmp /= 10;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 36,
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 54,
            "GT": 9,
            "Query": "1 * 3 * 4 + 6 + 9 - 9 - 6 - 3 =   ",
            "Injected CoT": "1 * 3 = 3\n3 * 4 = 13\n13 + 6 = 18\n18 + 9 = 27\n27 - 9 = 18\n18 - 6 = 13\n13 - 3 =",
            "Response": " 10\n\n10",
            "Extract-Response": " 10",
            "Expected Answer": 10,
            "Answer": 10.0,
            "Final Answer": 10.0
        },
        {
            "Index": 55,
            "GT": 9409,
            "Query": "3 - 2 + 8 * 4 * 3 * 7 * 7 * 2 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 3 = 96\n96 * 7 = 672\n672 * 7 = 4704\n4704 * 2 = 9409\n3 - 2 = 1\n1 + 9409 =",
            "Response": " 9410\n\n9410\n\n*/",
            "Extract-Response": "\n\n9410",
            "Expected Answer": 9410,
            "Answer": 9410.0,
            "Final Answer": 9410.0
        },
        {
            "Index": 56,
            "GT": 17,
            "Query": "3 * 2 + 4 - 3 + 2 * 3 + 8 - 4 =   ",
            "Injected CoT": "3 * 2 = 6\n6 + 3 = 10\n10 - 3 = 7\n2 * 3 = 6\n6 + 8 = 14\n14 - 3 =",
            "Response": " 11",
            "Extract-Response": " 11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 58,
            "GT": -7,
            "Query": "8 + 2 * 2 + 9 - 2 - 2 - 8 * 3 =   ",
            "Injected CoT": "2 * 2 = 4\n8 + 4 = 12\n12 + 9 = 21\n21 - 2 = 19\n19 - 2 = 18\n8 * 3 = 24\n18 - 24 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 59,
            "GT": -11,
            "Query": "8 - 2 + 3 + 3 + 5 - 4 * 5 - 8 =   ",
            "Injected CoT": "4 * 5 = 20\n8 - 2 = 6\n6 + 4 = 9\n9 + 4 = 12\n12 + 5 = 17\n20 - 17 = 4\n4 - 8 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])",
            "Expected Answer": -4,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 60,
            "GT": 12,
            "Query": "1 * 7 - 1 * 1 * 5 * 1 + 8 + 2 =   ",
            "Injected CoT": "1 * 7 = 7\n1 * 1 = 1\n5 * 1 = 5\n1 * 5 = 5\n7 - 5 = 3\n3 + 8 = 10\n10 + 3 =",
            "Response": " 13\n13 + 2 = 15\n\n1 * 7 - 1 * 1 * 5 * 1 + 8 + 2 = 15",
            "Extract-Response": " 15 .\n\nNote:\nThe number of operations in each test case is in the range [1, 1000]\nEach operand and operation exist on a single line\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n#include <queue>\n#include <deque>\n#include <bitset>\n#include <iterator>\n#include <list>\n#include <stack>\n#include <map>\n#include <set>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <limits>\n#include <time.h>\n#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\n#define MOD 1000000007\n#define mp make_pair\n#define pb push_back\n#define INF (int)1e9\n#define PI acos(-1.0)\n#define SCD(t) scanf(\"%d\",&t)\n#define SCLD(t) scanf(\"%ld\",&t)\n#define SCLLD(t) scanf(\"%lld\",&t)\n#define SCC(t) scanf(\"%c\",&t)\n#define SCS(t) scanf(\"%s\",t)\n#define SCF(t) scanf(\"%f\",&t)\n#define SCLF(t) scanf(\"%lf\",&t)\n#define MEM(a, b) memset(a, (b), sizeof(a))\n#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)\n#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)\n#define REP(i, j) FOR(i, 0, j, 1)\n#define RREP(i, j) RFOR(i, j, 0, 1)\n#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)\n#define IN(A, B, C) assert( B <= A && A <= C)\n#define all(cont) cont.begin(), cont.end()\n#define rall(cont) cont.end(), cont.begin()\n#define sz(v) int(v.size())\n#define ft first\n#define sc second\n#define REP(i, a, b) for(int i = a; i < b; ++i)\n#define CLR(a) memset(a, 0, sizeof(a))\n#define VAR(v, x) __typeof(x) v = x\n#define FOREACH(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)\n#define TRACE(x...) x\n#define DEBUG(x...)\n#define CHECK(x, y) x & (1 << (y))\n#define oo 2000000009\n#define N 1000006\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef long double LD;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef queue<int> qi;\ntypedef queue<char> qc;\n\nint main(void){\n\tint t;\n\tSCD(t);\n\twhile(t--){\n\t\tstring s;\n\t\tcin >> s;\n\t\tint n = s.size();\n\t\tint ans = 0;\n\t\tint cur = 0;\n\t\tint sign = 1;\n\t\tint num = 0;\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tif(s[i] == '+' || s[i] == '-'){\n\t\t\t\tans += sign * num;\n\t\t\t\tsign = (s[i] == '+') ? 1 : -1;\n\t\t\t\tnum = 0;\n\t\t\t}else if(s[i] == '*'){\n\t\t\t\tnum *= s[i+1] - '0';\n\t\t\t\ti++;\n\t\t\t}else{\n\t\t\t\tnum = num * 10 + s[i] - '0';\n\t\t\t}\n\t\t}\n\t\tans += sign * num;\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}",
            "Expected Answer": 13,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 61,
            "GT": 63,
            "Query": "3 * 8 * 2 + 6 + 7 + 8 + 1 - 7 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 2 = 48\n48 + 6 = 54\n54 + 7 = 61\n61 + 8 = 69\n69 + 1 = 71\n71 - 7 =",
            "Response": " 64",
            "Extract-Response": " 64\n</code>\n",
            "Expected Answer": 64,
            "Answer": 64.0,
            "Final Answer": 64.0
        },
        {
            "Index": 62,
            "GT": -75,
            "Query": "9 + 3 - 4 * 2 + 2 - 9 - 8 * 9 =   ",
            "Injected CoT": "4 * 2 = 8\n9 + 3 = 12\n12 - 8 = 4\n4 + 2 = 6\n6 - 9 = -3\n8 * 9 = 73\n-3 - 73 =",
            "Response": " -76",
            "Extract-Response": " -76.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -76,
            "Answer": -76.0,
            "Final Answer": -76.0
        },
        {
            "Index": 64,
            "GT": 42,
            "Query": "3 * 7 + 9 + 6 * 2 - 3 - 2 + 5 =   ",
            "Injected CoT": "3 * 7 = 21\n6 * 2 = 12\n21 + 9 = 30\n30 + 12 = 42\n42 - 3 = 39\n39 - 2 = 37\n37 + 6 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 43,
            "Answer": 43.0,
            "Final Answer": 43.0
        },
        {
            "Index": 65,
            "GT": 73,
            "Query": "3 * 9 + 1 + 1 * 5 * 8 - 4 + 9 =   ",
            "Injected CoT": "3 * 9 = 27\n1 * 5 = 5\n5 * 8 = 40\n27 + 1 = 28\n28 + 40 = 68\n68 - 4 = 65\n65 + 9 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 74,
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 67,
            "GT": 33,
            "Query": "9 + 6 + 6 + 2 + 6 + 2 * 2 * 1 =   ",
            "Injected CoT": "2 * 2 = 4\n9 + 6 = 15\n15 + 6 = 21\n21 + 2 = 23\n23 + 4 = 27\n27 + 2 = 29\n29 * 0 =",
            "Response": " 0\n\n0 + 4 + 15 + 21 + 23 + 27 + 29 = 120\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 1; i <= n; ++i) {\n        int number = i;\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        if (sum % 4 == 0) {\n            result += i;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 120.",
            "Expected Answer": 0,
            "Answer": 120.0,
            "Final Answer": 120.0
        },
        {
            "Index": 68,
            "GT": 160,
            "Query": "6 + 2 - 4 * 1 - 6 + 9 * 9 * 2 =   ",
            "Injected CoT": "4 * 1 = 4\n9 * 9 = 81\n81 * 2 = 162\n6 + 2 = 8\n8 - 4 = 4\n4 - 6 = -1\n-1 + 162 =",
            "Response": " 161\n\n161 is the answer.",
            "Extract-Response": " 161.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,",
            "Expected Answer": 161,
            "Answer": 161.0,
            "Final Answer": 161.0
        },
        {
            "Index": 71,
            "GT": 42,
            "Query": "9 - 4 * 3 + 3 - 3 * 1 + 5 * 9 =   ",
            "Injected CoT": "4 * 3 = 12\n9 - 12 = -3\n3 - 3 = 1\n1 * 3 = 3\n5 * 9 = 45\n-3 + 1 = -3\n-3 + 3 = 1\n1 + 45 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 76,
            "GT": 98,
            "Query": "7 * 7 + 3 * 5 * 5 - 4 * 5 - 6 =   ",
            "Injected CoT": "7 * 7 = 49\n3 * 5 = 15\n15 * 5 = 75\n4 * 5 = 20\n49 + 75 = 124\n124 - 20 = 105\n105 - 6 =",
            "Response": " 99",
            "Extract-Response": "\n\n99",
            "Expected Answer": 99,
            "Answer": 99.0,
            "Final Answer": 99.0
        },
        {
            "Index": 78,
            "GT": 154,
            "Query": "8 * 8 * 3 + 4 - 7 * 3 * 2 * 1 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 3 = 192\n7 * 3 = 21\n21 * 2 = 43\n43 * 1 = 43\n192 + 4 = 196\n196 - 43 =",
            "Response": " 153\n153 + 192 = 345\n\n345 is the answer.",
            "Extract-Response": " 345.\n\n*/\n\npublic class SelfPower {\n\tpublic static void main(String[] args) {\n\t\tlong sum = 0;\n\t\tfor (int i = 1; i <= 1000; i++) {\n\t\t\tsum += selfPower(i);\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n\t\n\tpublic static long selfPower(int n) {\n\t\tlong sum = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum *= i;\n\t\t\tsum %= 10000000000L;\n\t\t}\n\t\treturn sum;\n\t}\n}",
            "Expected Answer": 153,
            "Answer": 345.0,
            "Final Answer": 345.0
        },
        {
            "Index": 80,
            "GT": -43,
            "Query": "2 - 7 * 2 - 9 * 3 - 1 - 7 + 4 =   ",
            "Injected CoT": "7 * 2 = 14\n9 * 3 = 27\n2 - 14 = -12\n-12 - 27 = -39\n-39 - 1 = -40\n-40 - 7 = -46\n-46 + 4 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Expected Answer": -42,
            "Answer": -42.0,
            "Final Answer": -42.0
        },
        {
            "Index": 81,
            "GT": 47,
            "Query": "2 - 3 + 9 * 2 * 2 * 1 + 3 + 9 =   ",
            "Injected CoT": "9 * 2 = 18\n18 * 2 = 36\n36 * 1 = 36\n2 - 3 = -1\n-1 + 36 = 35\n35 + 3 = 39\n39 + 9 =",
            "Response": " 48\n\n48 is the answer.",
            "Extract-Response": "\n\n48",
            "Expected Answer": 48,
            "Answer": 48.0,
            "Final Answer": 48.0
        },
        {
            "Index": 82,
            "GT": -28,
            "Query": "9 - 5 - 1 - 2 - 4 * 7 - 6 + 5 =   ",
            "Injected CoT": "4 * 7 = 28\n9 - 4 = 4\n4 - 1 = 3\n3 - 2 = 1\n1 - 28 = -27\n-27 - 6 = -33\n-33 + 4 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -29,
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 83,
            "GT": -100,
            "Query": "6 * 8 - 8 - 1 + 5 - 9 * 8 * 2 =   ",
            "Injected CoT": "6 * 8 = 48\n9 * 8 = 72\n72 * 2 = 143\n48 - 8 = 40\n40 - 1 = 39\n39 + 5 = 44\n44 - 143 =",
            "Response": " -99",
            "Extract-Response": " -99.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        string res(len1 + len2, '0');\n        for (int i = len1 - 1; i >= 0; --i) {\n            int carry = 0;\n            for (int j = len2 - 1; j >= 0; --j) {\n                int tmp = (res[i + j + 1] - '0') + (num1[i] - '0') * (num2[j] - '0') + carry;\n                res[i + j + 1] = tmp % 10 + '0';\n                carry = tmp / 10;\n            }\n            res[i] += carry;\n        }\n        size_t startpos = res.find_first_not_of(\"0\");\n        if (string::npos != startpos) {\n            return res.substr(startpos);\n        }\n        return \"0\";\n    }\n};",
            "Expected Answer": -99,
            "Answer": -99.0,
            "Final Answer": -99.0
        },
        {
            "Index": 84,
            "GT": -16,
            "Query": "9 - 1 * 8 - 5 - 9 - 1 * 6 + 3 =   ",
            "Injected CoT": "1 * 8 = 8\n9 - 8 = 1\n1 - 5 = -4\n-4 - 9 = -13\n1 * 6 = 6\n-13 - 6 = -19\n-19 + 4 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = nums[0]\n        cur_max = cur_min = res\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                cur_max, cur_min = cur_min, cur_max\n            cur_max = max(nums[i], cur_max * nums[i])\n            cur_min = min(nums[i], cur_min * nums[i])\n            res = max(res, cur_max)\n        return res",
            "Expected Answer": -15,
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 89,
            "GT": 108,
            "Query": "1 * 8 * 8 + 8 * 6 * 1 - 1 - 3 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 8 = 64\n8 * 6 = 48\n1 - 3 = -2\n64 + 48 = 112\n112 - 3 =",
            "Response": " 109\n\n109\n\n*/",
            "Extract-Response": " 109.",
            "Expected Answer": 109,
            "Answer": 109.0,
            "Final Answer": 109.0
        },
        {
            "Index": 90,
            "GT": -120,
            "Query": "1 * 1 - 3 * 6 * 7 + 3 * 1 + 2 =   ",
            "Injected CoT": "1 * 1 = 1\n3 * 6 = 18\n18 * 7 = 126\n1 - 126 = -125\n3 * 1 = 3\n-125 + 3 = -122\n-122 + 3 =",
            "Response": " -119\n-119 + 2 = -117\n\n1 * 1 - 3 * 6 * 7 + 3 * 1 + 2 = -117",
            "Extract-Response": " -117\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 1;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        result += sign * curr;\n        curr += 2;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -119,
            "Answer": -117.0,
            "Final Answer": -117.0
        },
        {
            "Index": 93,
            "GT": 1725,
            "Query": "4 - 9 + 8 * 8 * 9 * 3 - 1 + 3 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 4 = 216\n4 - 9 = -5\n-5 + 72 = 67\n67 * 216 = 14472\n14472 - 1 = 14471\n14471 + 4 =",
            "Response": " 14475\n14475 + 3 = 14478\n14478 = 14475 + 3",
            "Extract-Response": "\n3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 1; i <= n; ++i) {\n        int sum = 0;\n        int num = i;\n        while (num) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (sum + i == n) {\n            result = i;\n            break;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 14475,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 94,
            "GT": 140,
            "Query": "5 * 6 * 5 * 1 - 8 * 2 + 7 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 5 = 150\n150 * 1 = 150\n8 * 2 = 16\n150 - 16 = 134\n134 + 7 = 142\n142 - 1 =",
            "Response": " 141\n\n*/",
            "Extract-Response": " 141.",
            "Expected Answer": 141,
            "Answer": 141.0,
            "Final Answer": 141.0
        },
        {
            "Index": 95,
            "GT": -47,
            "Query": "8 + 4 - 8 * 9 + 3 - 6 + 7 + 9 =   ",
            "Injected CoT": "8 + 4 = 12\n8 * 8 = 72\n12 - 72 = -60\n-60 + 3 = -57\n-57 - 6 = -63\n-63 + 7 = -56\n-56 + 8 =",
            "Response": " -48\n-48 + 9 = -39",
            "Extract-Response": " -39\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        sum += a;\n    }\n    cout << sum << endl;\n\n    return 0;\n}",
            "Expected Answer": -48,
            "Answer": -39.0,
            "Final Answer": -39.0
        },
        {
            "Index": 97,
            "GT": -177,
            "Query": "7 - 5 * 6 * 5 - 6 * 7 + 7 + 1 =   ",
            "Injected CoT": "5 * 6 = 30\n7 - 30 = -23\n-23 * 5 = -115\n6 * 7 = 42\n-115 - 42 = -157\n-157 + 7 = -150\n-150 + 0 =",
            "Response": " -150\n-150 + 1 = -149\n\n*/",
            "Extract-Response": " -149.\n\nNote:\n\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long res = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            res = (res + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (res + mod) % mod;\n    }\n};",
            "Expected Answer": -150,
            "Answer": -149.0,
            "Final Answer": -149.0
        },
        {
            "Index": 98,
            "GT": 48,
            "Query": "7 + 6 + 1 * 3 * 9 + 5 - 3 + 6 =   ",
            "Injected CoT": "1 * 3 = 3\n9 * 3 = 27\n7 + 7 = 13\n13 + 27 = 40\n40 + 5 = 45\n45 - 3 = 42\n42 + 7 =",
            "Response": " 49\n49 + 6 = 55",
            "Extract-Response": " 55\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        result += s[i] - '0';\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 49,
            "Answer": 55.0,
            "Final Answer": 55.0
        },
        {
            "Index": 99,
            "GT": -44,
            "Query": "8 - 7 * 6 + 7 + 7 - 4 - 4 * 5 =   ",
            "Injected CoT": "7 * 6 = 42\n8 - 42 = -34\n4 * 5 = 20\n-34 - 7 = -41\n-41 + 7 = -34\n-34 - 4 = -37\n-37 - 20 =",
            "Response": " -57",
            "Extract-Response": " -57.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -57,
            "Answer": -57.0,
            "Final Answer": -57.0
        },
        {
            "Index": 100,
            "GT": 40,
            "Query": "4 * 8 - 2 * 3 * 8 + 7 * 1 * 8 =   ",
            "Injected CoT": "4 * 8 = 32\n2 * 3 = 6\n6 * 8 = 48\n32 - 48 = -17\n7 * 1 = 7\n7 * 8 = 56\n-17 + 56 =",
            "Response": " 39\n\n39\n\n*/",
            "Extract-Response": "\n\n39",
            "Expected Answer": 39,
            "Answer": 39.0,
            "Final Answer": 39.0
        },
        {
            "Index": 101,
            "GT": 232,
            "Query": "9 * 8 + 5 - 1 + 5 * 5 * 6 + 6 =   ",
            "Injected CoT": "9 * 8 = 72\n5 * 5 = 25\n25 * 6 = 150\n72 + 5 = 77\n77 - 1 = 76\n150 + 76 = 227\n227 + 6 =",
            "Response": " 233",
            "Extract-Response": " 233\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        for(i = 0; i < strlen(str); i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Expected Answer": 233,
            "Answer": 233.0,
            "Final Answer": 233.0
        },
        {
            "Index": 102,
            "GT": 626,
            "Query": "7 * 6 * 1 * 5 * 3 - 1 + 4 - 7 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 1 = 42\n42 * 5 = 210\n210 * 3 = 630\n630 - 1 = 629\n629 + 4 = 632\n632 - 7 =",
            "Response": " 625",
            "Extract-Response": " 625\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 1;\n    int curr = 1;\n\n    for (size_t i = 1; i < s.size(); ++i) {\n        if (s[i] == s[i - 1]) {\n            ++curr;\n        } else {\n            result *= curr;\n            curr = 1;\n        }\n    }\n\n    result *= curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 625,
            "Answer": 625.0,
            "Final Answer": 625.0
        },
        {
            "Index": 104,
            "GT": -22,
            "Query": "6 * 1 * 4 - 7 * 7 + 5 - 8 + 6 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 4 = 24\n7 * 7 = 49\n24 - 49 = -25\n-25 + 5 = -20\n-20 - 8 = -28\n-28 + 7 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -21,
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 106,
            "GT": 217,
            "Query": "6 * 5 * 1 * 7 - 5 + 3 + 3 + 6 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 1 = 30\n30 * 7 = 210\n210 - 5 = 205\n205 + 3 = 208\n208 + 3 = 210\n210 + 6 =",
            "Response": " 216",
            "Extract-Response": " 216\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ans += cur;\n            cur = 1;\n        } else if (s[i] == '*') {\n            cur *= s[i - 1] - '0';\n        } else {\n            cur *= s[i] - '0';\n        }\n    }\n    ans += cur;\n    cout << ans << endl;\n}",
            "Expected Answer": 216,
            "Answer": 216.0,
            "Final Answer": 216.0
        },
        {
            "Index": 108,
            "GT": -25,
            "Query": "4 - 5 + 6 + 1 - 9 - 2 * 9 - 4 =   ",
            "Injected CoT": "2 * 9 = 18\n5 - 5 = -1\n-1 + 6 = 5\n5 + 1 = 6\n6 - 9 = -3\n-3 - 18 = -21\n-21 - 5 =",
            "Response": " -26",
            "Extract-Response": " -26.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 100.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluate(expression):\n    # print(expression)\n    # print(expression.split())\n    # print(expression.split(' '))\n    # print(expression.split(' ')[::2])\n    # print(expression.split(' ')[1::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2] + ['/'][::-1][1:][7::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2] + ['/'][::-1][1:][7::2] + ['+'][::-1][1:][8::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2] + ['/'][::-1][1:][7::2] + ['+'][::-1][1:][8::2] + ['-'][::-1][1:][9::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2] + ['/'][::-1][1:][7::2] + ['+'][::-1][1:][8::2] + ['-'][::-1][1:][9::2] + ['*'][::-1][1:][10::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2] + ['/'][::-1][1:][7::2] + ['+'][::-1][1:][8::2] + ['-'][::-1][1:][9::2] + ['*'][::-1][1:][10::2] + ['/'][::-1][1:][11::2])\n    # print(expression.split(' ')[::2] + expression.split(' ')[1::2][::-1] + ['+'][::-1][1:][::2] + ['-'][::-1][1:][1::2] + ['*'][::-1][1:][2::2] + ['/'][::-1][1:][3::2] + ['+'][::-1][1:][4::2] + ['-'][::-1][1:][5::2] + ['*'][::-1][1:][6::2] + ['/'][::-",
            "Expected Answer": -26,
            "Answer": -26.0,
            "Final Answer": -26.0
        },
        {
            "Index": 109,
            "GT": -34,
            "Query": "9 + 3 * 6 - 6 - 5 * 9 - 9 - 1 =   ",
            "Injected CoT": "3 * 6 = 18\n9 + 18 = 27\n5 * 9 = 45\n27 - 6 = 21\n45 - 9 = 36\n21 - 36 = -15\n-15 - 0 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Expected Answer": -15,
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 110,
            "GT": 85,
            "Query": "6 + 5 * 1 + 5 * 6 * 3 - 7 - 9 =   ",
            "Injected CoT": "5 * 1 = 5\n6 + 5 = 11\n6 * 3 = 18\n5 * 18 = 90\n11 + 90 = 101\n101 - 7 = 94\n94 - 10 =",
            "Response": " 84",
            "Extract-Response": " 84\n</code>\n",
            "Expected Answer": 84,
            "Answer": 84.0,
            "Final Answer": 84.0
        },
        {
            "Index": 111,
            "GT": 28,
            "Query": "3 + 2 * 5 + 5 - 7 + 8 + 3 * 3 =   ",
            "Injected CoT": "2 * 5 = 10\n3 + 10 = 13\n13 + 5 = 18\n18 - 7 = 11\n11 + 8 = 20\n3 * 3 = 9\n20 + 9 =",
            "Response": " 29",
            "Extract-Response": "\n\n29",
            "Expected Answer": 29,
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 112,
            "GT": -2,
            "Query": "5 - 5 + 6 * 2 - 7 + 3 - 9 - 1 =   ",
            "Injected CoT": "6 * 2 = 12\n5 - 5 = 0\n0 + 12 = 12\n12 - 7 = 5\n5 + 3 = 8\n8 - 9 = 0\n0 - 1 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (js)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n*/\n\nfunction expressionMatter(a, b, c) {\n    return Math.max(a + b + c, a * b * c, a * (b + c), (a + b) * c, a + b * c, a * b + c);\n}",
            "Expected Answer": -1,
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 113,
            "GT": 276,
            "Query": "4 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =   ",
            "Injected CoT": "4 * 8 = 32\n32 * 8 = 256\n1 * 4 = 4\n4 * 1 = 4\n256 + 4 = 260\n260 + 7 = 268\n268 + 9 =",
            "Response": " 277\n\n277\n\n*/",
            "Extract-Response": " 277.",
            "Expected Answer": 277,
            "Answer": 277.0,
            "Final Answer": 277.0
        },
        {
            "Index": 114,
            "GT": 43,
            "Query": "9 - 8 + 5 * 5 + 7 * 3 + 1 - 5 =   ",
            "Injected CoT": "5 * 5 = 25\n7 * 3 = 21\n-8 + 25 = 17\n17 + 21 = 38\n38 + 1 = 38\n38 - 5 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter a string: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == '+' || input[j] == '-' || input[j] == '*')\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n\n            for(i = i + 1; i < j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum * num;\n            i = j - 1;\n        }\n        else if(input[i] == '/')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == '+' || input[j] == '-' || input[j] == '*')\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n\n            for(i = i + 1; i < j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum / num;\n            i = j - 1;\n        }\n        else if(input[i] == '%')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == '+' || input[j] == '-' || input[j] == '*')\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n\n            for(i = i + 1; i < j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum % num;\n            i = j - 1;\n        }\n        else\n        {\n            num = 0;\n\n            for(i = i; i < len; i++)\n            {\n                if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/' || input[i] == '%')\n                {\n                    break;\n                }\n\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum + sign * num;\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 33,
            "Answer": 33.0,
            "Final Answer": 33.0
        },
        {
            "Index": 115,
            "GT": 104,
            "Query": "4 * 5 + 6 * 4 + 5 * 6 + 5 * 6 =   ",
            "Injected CoT": "4 * 5 = 20\n6 * 4 = 24\n5 * 6 = 29\n5 * 6 = 29\n20 + 24 = 44\n44 + 29 = 74\n74 + 29 =",
            "Response": " 103",
            "Extract-Response": " 103\n</code>\n",
            "Expected Answer": 103,
            "Answer": 103.0,
            "Final Answer": 103.0
        },
        {
            "Index": 116,
            "GT": -84,
            "Query": "3 * 2 - 5 - 9 + 5 * 1 - 9 * 9 =   ",
            "Injected CoT": "3 * 2 = 6\n5 * 1 = 5\n9 * 9 = 80\n6 - 5 = 1\n1 - 9 = -8\n5 - 80 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)",
            "Expected Answer": -75,
            "Answer": -75.0,
            "Final Answer": -75.0
        },
        {
            "Index": 117,
            "GT": 396,
            "Query": "9 + 4 - 2 + 4 * 7 * 7 * 2 - 7 =   ",
            "Injected CoT": "4 * 8 = 28\n28 * 8 = 196\n196 * 2 = 392\n9 + 4 = 13\n13 - 2 = 11\n11 + 392 = 403\n403 - 8 =",
            "Response": " 395\n395 - 7 = 388\n388 - 7 = 381\n381 - 7 = 374\n374 - 7 = 367\n367 - 7 = 360\n360 - 7 = 353\n353 - 7 = 346\n346 - 7 = 339\n339 - 7 = 332\n332 - 7 = 325\n325 - 7 = 318\n318 - 7 = 311\n311 - 7 = 304\n304 - 7 = 297\n297 - 7 = 290\n290 - 7 = 283\n283 - 7 = 276\n276 - 7 = 269\n269 - 7 = 262\n262 - 7 = 255\n255 - 7 = 248\n248 - 7 = 241\n241 - 7 = 234\n234 - 7 = 227\n227 - 7 = 220\n220 - 7 = 213\n213 - 7 = 206\n206 - 7 = 199\n199 - 7 = 192\n192 - 7 = 185\n185 - 7 = 178\n178 - 7 = 171\n171 - 7 = 164\n164 - 7 = 157\n157 - 7 = 150\n150 - 7 = 143\n143 - 7 = 136\n136 - 7 = 129\n129 - 7 = 122\n122 - 7 = 115\n115 - 7 = 108\n108 - 7 = 101\n101 - 7 = 94\n94 - 7 = 87\n87 - 7 = 80\n80 - 7 = 73\n73 - 7 = 66\n66 - 7 = 59\n59 - 7 = 52\n52 - 7 = 45\n45 - 7 = 38\n38 - 7 = 31\n31 - 7 = 24\n24 - 7 = 17\n17 - 7 = 10\n10 - 7 = 3\n3 - 7 = -4",
            "Extract-Response": " -4",
            "Expected Answer": 395,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "5 + 6 + 6 - 6 * 6 + 1 * 5 * 5 =   ",
            "Injected CoT": "6 * 6 = 36\n5 * 5 = 25\n5 + 6 = 11\n11 + 6 = 17\n17 - 36 = -19\n-19 + 25 = 6\n6 + 1 = 7\n7 * 5 = 34\n34 + 6 =",
            "Response": " 40",
            "Extract-Response": "\n\n40",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 119,
            "GT": 17,
            "Query": "8 + 8 - 4 - 2 + 3 * 4 - 4 - 1 =   ",
            "Injected CoT": "8 + 8 = 16\n16 - 4 = 12\n12 - 2 = 10\n3 * 4 = 12\n10 + 12 = 22\n22 - 4 = 17\n17 - 1 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int num1, num2;\n    char op;\n    int result = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * to calculate the sum of all\n     * numbers present in the string\n     */\n    for(i=0; i<len; i++)\n    {\n        /* Check for numeric character */\n        if(str[i]>='0' && str[i]<='9')\n        {\n            /*\n             * If it's a valid numeric character then\n             * convert it into integer and store it in num1\n             */\n            num1 = str[i] - '0';\n\n            /*\n             * If next character is also numeric then\n             * convert it into integer and store it in num2\n             */\n            if(str[i+1]>='0' && str[i+1]<='9')\n            {\n                num2 = str[i+1] - '0';\n\n                /*\n                 * If next character is not a numeric character\n                 * then it must be an operator. So store it in 'op'.\n                 */\n                op = str[i+2];\n\n                /*\n                 * If next character is '+' or '-' then\n                 * calculate the sum of num1 and num2\n                 */\n                if(op == '+' || op == '-')\n                {\n                    if(op == '+')\n                    {\n                        result = num1 + num2;\n                    }\n                    else\n                    {\n                        result = num1 - num2;\n                    }\n\n                    /*\n                     * Skip next two characters because\n                     * we have already considered them\n                     */\n                    i = i + 2;\n                }\n                /*\n                 * If next character is '*' or '/' then\n                 * calculate the product of num1 and num2\n                 */\n                else if(op == '*' || op == '/')\n                {\n                    if(op == '*')\n                    {\n                        result = num1 * num2;\n                    }\n                    else\n                    {\n                        result = num1 / num2;\n                    }\n\n                    /*\n                     * Skip next two characters because\n                     * we have already considered them\n                     */\n                    i = i + 2;\n                }\n                /*\n                 * If next character is '^' then\n                 * calculate the power of num1 raised to num2\n                 */\n                else if(op == '^')\n                {\n                    result = pow(num1, num2);\n\n                    /*\n                     * Skip next two characters because\n                     * we have already considered them\n                     */\n                    i = i + 2;\n                }\n            }\n            /*\n             * If next character is not a numeric character\n             * then it must be an operator. So store it in 'op'.\n             */\n            else\n            {\n                op = str[i+1];\n            }\n\n            /*\n             * If next character is '+' or '-' then\n             * calculate the sum of num1 and num2\n             */\n            if(op == '+' || op == '-')\n            {\n                if(op == '+')\n                {\n                    result = result + num1;\n                }\n                else\n                {\n                    result = result - num1;\n                }\n\n                /*\n                 * Skip next two characters because\n                 * we have already considered them\n                 */\n                i = i + 1;\n            }\n            /*\n             * If next character is '*' or '/' then\n             * calculate the product of num1 and num2\n             */\n            else if(op == '*' || op == '/')\n            {\n                if(op == '*')\n                {\n                    result = result * num1;\n                }\n                else\n                {\n                    result = result / num1;\n                }\n\n                /*\n                 * Skip next two characters because\n                 * we have already considered them\n                 */\n                i = i + 1;\n            }\n            /*\n             * If next character is '^' then\n             * calculate the power of num1 raised to num2\n             */\n            else if(op == '^')\n            {\n                result = pow(result, num1);\n\n                /*\n                 * Skip next two characters because\n                 * we have already considered them\n                 */\n                i = i + 1;\n            }\n        }\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Expected Answer": 16,
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 120,
            "GT": 66,
            "Query": "6 * 4 + 7 * 7 - 2 - 8 + 4 - 1 =   ",
            "Injected CoT": "6 * 4 = 24\n7 * 7 = 49\n24 + 49 = 73\n73 - 2 = 71\n71 - 8 = 63\n63 + 4 = 66\n66 - 1 =",
            "Response": " 65\n\n65",
            "Extract-Response": " 65\n\n*/",
            "Expected Answer": 65,
            "Answer": 65.0,
            "Final Answer": 65.0
        },
        {
            "Index": 121,
            "GT": 45,
            "Query": "2 - 4 + 7 * 3 + 9 * 3 - 6 + 5 =   ",
            "Injected CoT": "7 * 3 = 21\n9 * 3 = 27\n2 - 4 = -2\n-2 + 21 = 19\n19 + 27 = 46\n46 - 6 = 40\n40 + 4 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, sign = 1;\n    printf(\"Enter the expression: \");\n    gets(s);\n    for(i = 0; i < strlen(s); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        if(s[i] == '+')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            sign = -1;\n            continue;\n        }\n        if(s[i] == '*')\n        {\n            i++;\n            n = s[i] - '0';\n            sum = sum * n;\n            continue;\n        }\n        if(s[i] == '/')\n        {\n            i++;\n            n = s[i] - '0';\n            sum = sum / n;\n            continue;\n        }\n        n = s[i] - '0';\n        sum = sum + sign * n;\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}",
            "Expected Answer": 44,
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 123,
            "GT": 49,
            "Query": "7 * 4 + 4 + 6 * 3 - 6 + 5 * 1 =   ",
            "Injected CoT": "7 * 4 = 28\n6 * 3 = 18\n28 + 4 = 32\n32 + 18 = 50\n5 * 1 = 5\n50 + 5 = 56\n56 - 6 =",
            "Response": " 50",
            "Extract-Response": " 50.\n\nNote:\n\n1 <= N <= 10000\n-1000 <= nums[i] <= 1000\n*/\n\nclass Solution {\npublic:\n    int maxSumAfterPartitioning(vector<int>& A, int K) {\n        int n = A.size();\n        vector<int> dp(n);\n        for (int i = 0; i < n; ++i) {\n            int curMax = 0;\n            for (int k = 1; k <= K && i - k + 1 >= 0; ++k) {\n                curMax = max(curMax, A[i - k + 1]);\n                dp[i] = max(dp[i], (i >= k ? dp[i - k] : 0) + curMax * k);\n            }\n        }\n        return dp[n - 1];\n    }\n};",
            "Expected Answer": 50,
            "Answer": 50.0,
            "Final Answer": 50.0
        },
        {
            "Index": 124,
            "GT": 129,
            "Query": "5 * 6 + 9 * 9 + 3 * 6 + 1 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n9 * 9 = 81\n3 * 6 = 18\n30 + 81 = 111\n111 + 18 = 129\n129 + 0 = 130\n130 - 0 =",
            "Response": " 130\n130 - 1 = 129",
            "Extract-Response": " 129\n\n*/\n\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int num, sum = 0, temp;\n    cout << \"Enter a number: \";\n    cin >> num;\n    temp = num;\n    while (temp != 0)\n    {\n        sum = sum + pow((temp % 10), 2);\n        temp = temp / 10;\n    }\n    cout << \"The sum of squares of digits of \" << num << \" is \" << sum;\n    return 0;\n}",
            "Expected Answer": 130,
            "Answer": 129.0,
            "Final Answer": 129.0
        },
        {
            "Index": 126,
            "GT": 97,
            "Query": "6 * 6 + 1 * 8 - 6 + 5 + 9 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n1 * 8 = 8\n9 * 6 = 55\n36 + 8 = 44\n44 - 6 = 38\n38 + 5 = 43\n43 + 55 =",
            "Response": " 98",
            "Extract-Response": " 98.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nYou cannot use the same operation more than once on a single number.\nYou cannot concatenate numbers together.\nFor example, if you encounter 15 + (7 - 5), you should use 2 operations: 15 + 7 and 7 - 5.\nYou cannot split an operation such as 1 * 3 + 2 into 1 * 3 and 2.\nYou cannot use unary operations such as -3.\n*/\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> s;\n        for(int i = 0; i < tokens.size(); i++) {\n            if(tokens[i] == \"+\") {\n                int a = s.top();\n                s.pop();\n                int b = s.top();\n                s.pop();\n                s.push(a + b);\n            } else if(tokens[i] == \"-\") {\n                int a = s.top();\n                s.pop();\n                int b = s.top();\n                s.pop();\n                s.push(b - a);\n            } else if(tokens[i] == \"*\") {\n                int a = s.top();\n                s.pop();\n                int b = s.top();\n                s.pop();\n                s.push(a * b);\n            } else if(tokens[i] == \"/\") {\n                int a = s.top();\n                s.pop();\n                int b = s.top();\n                s.pop();\n                s.push(b / a);\n            } else {\n                s.push(stoi(tokens[i]));\n            }\n        }\n        return s.top();\n    }\n};",
            "Expected Answer": 98,
            "Answer": 98.0,
            "Final Answer": 98.0
        },
        {
            "Index": 127,
            "GT": 144,
            "Query": "8 * 2 * 4 * 2 + 9 * 3 - 8 - 3 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 4 = 64\n64 * 2 = 128\n9 * 2 = 27\n128 + 27 = 155\n155 - 8 = 147\n147 - 2 =",
            "Response": " 145\n\n145 is the answer.",
            "Extract-Response": " 145.\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    b = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    c = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    d = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    e = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    f = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    g = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    h = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    i = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    j = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    k = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    l = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    m = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    n = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    o = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    p = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    q = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    r = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    s = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    t = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    u = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    v = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    w = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    x = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    y = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n    z = 8 * 2 * 4 * 2 + 9 * 3 - 8 - 3;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 145,
            "Answer": 145.0,
            "Final Answer": 145.0
        },
        {
            "Index": 129,
            "GT": -9,
            "Query": "3 + 9 * 1 - 2 + 8 - 9 - 3 * 6 =   ",
            "Injected CoT": "9 * 1 = 9\n3 + 9 = 12\n12 - 2 = 10\n10 + 8 = 17\n17 - 9 = 9\n3 * 6 = 17\n9 - 17 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -8,
            "Answer": -8.0,
            "Final Answer": -8.0
        },
        {
            "Index": 132,
            "GT": 70,
            "Query": "7 - 6 * 1 - 8 + 1 + 8 * 9 + 4 =   ",
            "Injected CoT": "6 * 1 = 6\n7 - 6 = 1\n8 * 9 = 72\n1 - 8 = -7\n1 + (-7) = -6\n-6 + 72 = 65\n65 + 4 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 69,
            "Answer": 69.0,
            "Final Answer": 69.0
        },
        {
            "Index": 133,
            "GT": 161,
            "Query": "6 * 7 + 9 * 6 + 7 * 5 + 6 * 5 =   ",
            "Injected CoT": "6 * 7 = 42\n9 * 6 = 54\n7 * 5 = 35\n6 * 5 = 30\n42 + 54 = 96\n96 + 35 = 132\n132 + 30 =",
            "Response": " 162\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num, sum = 0, rem;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    while (num != 0)\n    {\n        rem = num % 10;\n        sum = sum + rem;\n        num = num / 10;\n    }\n    printf(\"Sum of digits of the number = %d\", sum);\n    return 0;\n}",
            "Extract-Response": "\n\nSum of digits of the number = 45",
            "Expected Answer": 162,
            "Answer": 45.0,
            "Final Answer": 45.0
        },
        {
            "Index": 134,
            "GT": 96,
            "Query": "8 * 9 + 8 + 4 + 1 * 4 * 1 * 3 =   ",
            "Injected CoT": "8 * 9 = 72\n1 * 4 = 4\n4 * 1 = 4\n4 * 3 = 12\n72 + 8 = 80\n80 + 4 = 83\n83 + 12 =",
            "Response": " 95\n\n95\n\n*/",
            "Extract-Response": "\n\n95",
            "Expected Answer": 95,
            "Answer": 95.0,
            "Final Answer": 95.0
        },
        {
            "Index": 135,
            "GT": -50,
            "Query": "4 - 9 + 5 * 1 + 1 - 3 - 6 * 8 =   ",
            "Injected CoT": "5 * 1 = 5\n-6 * 8 = -48\n4 - 9 = -5\n-5 + 5 = 0\n0 + 1 = 1\n1 - 3 = -3\n-3 - 48 =",
            "Response": " -51",
            "Extract-Response": " -51.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 105.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluateExpression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()",
            "Expected Answer": -51,
            "Answer": -51.0,
            "Final Answer": -51.0
        },
        {
            "Index": 136,
            "GT": 14,
            "Query": "7 - 2 - 5 - 4 + 4 * 6 - 1 - 5 =   ",
            "Injected CoT": "7 - 2 = 6\n6 - 6 = 0\n0 - 4 = -4\n4 * 6 = 24\n-4 + 24 = 20\n20 - 1 = 19\n19 - 6 =",
            "Response": " 13",
            "Extract-Response": "\n\n13",
            "Expected Answer": 13,
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 137,
            "GT": -273,
            "Query": "2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 =   ",
            "Injected CoT": "2 * 1 = 2\n9 * 1 = 9\n9 * 8 = 72\n72 * 4 = 288\n2 - 288 = -286\n-286 + 6 = -279\n-279 + 7 =",
            "Response": " -272\n\n2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 = -272",
            "Extract-Response": " -272.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum;\n    int sign = 1;\n    int sign_flag = 0;\n    int sign_flag_2 = 0;\n    int sign_flag_3 = 0;\n    int sign_flag_4 = 0;\n    int sign_flag_5 = 0;\n    int sign_flag_6 = 0;\n    int sign_flag_7 = 0;\n    int sign_flag_8 = 0;\n    int sign_flag_9 = 0;\n    int sign_flag_10 = 0;\n    int sign_flag_11 = 0;\n    int sign_flag_12 = 0;\n    int sign_flag_13 = 0;\n    int sign_flag_14 = 0;\n    int sign_flag_15 = 0;\n    int sign_flag_16 = 0;\n    int sign_flag_17 = 0;\n    int sign_flag_18 = 0;\n    int sign_flag_19 = 0;\n    int sign_flag_20 = 0;\n    int sign_flag_21 = 0;\n    int sign_flag_22 = 0;\n    int sign_flag_23 = 0;\n    int sign_flag_24 = 0;\n    int sign_flag_25 = 0;\n    int sign_flag_26 = 0;\n    int sign_flag_27 = 0;\n    int sign_flag_28 = 0;\n    int sign_flag_29 = 0;\n    int sign_flag_30 = 0;\n    int sign_flag_31 = 0;\n    int sign_flag_32 = 0;\n    int sign_flag_33 = 0;\n    int sign_flag_34 = 0;\n    int sign_flag_35 = 0;\n    int sign_flag_36 = 0;\n    int sign_flag_37 = 0;\n    int sign_flag_38 = 0;\n    int sign_flag_39 = 0;\n    int sign_flag_40 = 0;\n    int sign_flag_41 = 0;\n    int sign_flag_42 = 0;\n    int sign_flag_43 = 0;\n    int sign_flag_44 = 0;\n    int sign_flag_45 = 0;\n    int sign_flag_46 = 0;\n    int sign_flag_47 = 0;\n    int sign_flag_48 = 0;\n    int sign_flag_49 = 0;\n    int sign_flag_50 = 0;\n    int sign_flag_51 = 0;\n    int sign_flag_52 = 0;\n    int sign_flag_53 = 0;\n    int sign_flag_54 = 0;\n    int sign_flag_55 = 0;\n    int sign_flag_56 = 0;\n    int sign_flag_57 = 0;\n    int sign_flag_58 = 0;\n    int sign_flag_59 = 0;\n    int sign_flag_60 = 0;\n    int sign_flag_61 = 0;\n    int sign_flag_62 = 0;\n    int sign_flag_63 = 0;\n    int sign_flag_64 = 0;\n    int sign_flag_65 = 0;\n    int sign_flag_66 = 0;\n    int sign_flag_67 = 0;\n    int sign_flag_68 = 0;\n    int sign_flag_69 = 0;\n    int sign_flag_70 = 0;\n    int sign_flag_71 = 0;\n    int sign_flag_72 = 0;\n    int sign_flag_73 = 0;\n    int sign_flag_74 = 0;\n    int sign_flag_75 = 0;\n    int sign_flag_76 = 0;\n    int sign_flag_77 = 0;\n    int sign_flag_78 = 0;\n    int sign_flag_79 = 0;\n    int sign_flag_80 = 0;\n    int sign_flag_81 = 0;\n    int sign_flag_82 = 0;\n    int sign_flag_83 = 0;\n    int sign_flag_84 = 0;\n    int sign_flag_85 = 0;\n    int sign_flag_86 = 0;\n    int sign_flag_87 = 0;\n    int sign_flag_88 = 0;\n    int sign_flag_89 = 0;\n    int sign_flag_90 = 0;\n    int sign_flag_91 = 0;\n    int sign_flag_92 = 0;\n    int sign_flag_93 = 0;\n    int sign_flag_94 = 0;\n    int sign_flag_95 = 0;\n    int sign_flag_96 = 0;\n    int sign_flag_97 = 0;\n    int sign_flag_98 = 0;\n    int sign_flag_99 = 0;\n    int sign_flag_100 = 0;\n    int sign_flag_101 = 0;\n    int sign_flag_102 = 0;\n    int sign_flag_103 = 0;\n    int sign_flag_104 = 0;\n    int sign_flag_105 = 0;\n    int sign_flag_106 = 0;\n    int sign_flag_107 = 0;\n    int sign_flag_108 = 0;\n    int sign_flag_109 = 0;\n    int sign_flag_110 = 0;\n    int sign_flag_111 = 0;\n    int sign_flag_112 = 0;\n    int sign_flag_113 = 0;\n    int sign_flag_114 = 0;\n    int sign_flag_115 = 0;\n    int sign_flag_116 = 0;\n    int sign_flag_117 = 0;\n    int sign_flag_118 = 0;\n    int sign_flag_119 = 0;\n    int sign_flag_120 = 0;\n    int sign_flag_121 = 0;\n    int sign_flag_122 = 0;\n    int sign_flag_123 = 0;\n    int sign_flag_124 = 0;\n    int sign_flag_125 = 0;\n    int sign_flag_126 = 0;\n    int sign_flag_127 = 0;\n    int sign_flag_128 = 0;\n    int sign_flag_129 = 0;\n    int sign_flag_130 = 0;\n    int sign_flag_131 = 0;\n    int sign_flag_132 = 0;\n    int sign_flag_133 = 0;\n    int sign_flag_134 = 0;\n    int sign_flag_135 = 0;\n    int sign_flag_136 = 0;\n    int sign_flag_137 = 0;\n    int sign_flag_138 = 0;\n    int sign_flag_139 = 0;\n    int sign_flag_140 = 0;\n    int sign_flag_141 = 0;\n    int sign_flag_142 = 0;\n    int sign_flag_143 = 0;\n    int sign_flag_144 = 0;\n    int sign_flag_145 = 0;\n    int sign_flag_146 = 0;\n    int sign_flag_147 = 0;\n    int sign_flag_148 = 0;\n    int sign_flag_149 = 0;\n    int sign_flag_150 = 0;\n    int sign_flag_151 = 0;\n    int sign_flag_152 = 0;\n    int sign_flag_153 = 0;\n    int sign_flag_154 = 0;\n    int sign_flag_155 = 0;\n    int sign_flag_156 = 0;\n    int sign_flag_157 = 0;\n    int sign_flag_158 = 0;\n    int sign_flag_159 = 0;\n    int sign_flag_160 = 0;\n    int sign_flag_161 = 0;\n    int sign_flag_162 = 0;\n    int sign_flag_163 = 0;\n    int sign_flag_164 = 0;\n    int sign_flag_165 = 0;\n    int sign_flag_166 = 0;\n    int sign_flag_167 = 0;\n    int sign_flag_168 = 0;\n    int sign_flag_169 = 0;\n    int sign_flag_170 = 0;\n    int sign_flag_171 = 0;\n    int sign_flag_172 = 0;\n    int sign_flag_173 = 0;\n    int sign_flag_174 = 0;\n    int",
            "Expected Answer": -272,
            "Answer": -272.0,
            "Final Answer": -272.0
        },
        {
            "Index": 138,
            "GT": -10,
            "Query": "9 * 2 - 1 - 3 - 2 - 8 - 2 * 7 =   ",
            "Injected CoT": "9 * 2 = 18\n18 - 1 = 17\n17 - 3 = 13\n13 - 2 = 12\n12 - 8 = 4\n2 * 7 = 13\n4 - 13 =",
            "Response": " -9",
            "Extract-Response": " -9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; i++) {\n        for (size_t j = i + 1; j < n; j++) {\n            if (a[i] == a[j]) {\n                result = a[i];\n            }\n        }\n    }\n    cout << result;\n    return 0;\n}",
            "Expected Answer": -9,
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 139,
            "GT": -122,
            "Query": "1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =   ",
            "Injected CoT": "-7 * 7 = -49\n-8 * 9 = -72\n1 + 2 + 4 = 7\n-49 - 8 = -58\n-58 - 72 =",
            "Response": " -130",
            "Extract-Response": " -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -130\nThe answer is  -130\n\n1 + 2 + 4 - 7 *",
            "Expected Answer": -130,
            "Answer": -130.0,
            "Final Answer": -130.0
        },
        {
            "Index": 141,
            "GT": 73,
            "Query": "4 + 8 * 7 + 8 + 3 + 5 - 7 + 4 =   ",
            "Injected CoT": "8 * 7 = 56\n4 + 56 = 60\n60 + 8 = 68\n68 + 3 = 71\n71 + 5 = 76\n76 - 7 = 70\n70 + 4 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Expected Answer": 74,
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 142,
            "GT": -1,
            "Query": "5 - 5 - 2 + 7 - 3 - 4 - 4 + 5 =   ",
            "Injected CoT": "5 - 5 = 0\n0 - 2 = -2\n-2 + 7 = 5\n5 - 3 = 2\n2 - 4 = -2\n-2 - 4 = -7\n-7 + 5 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9+7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Expected Answer": -2,
            "Answer": -2.0,
            "Final Answer": -2.0
        },
        {
            "Index": 145,
            "GT": 42,
            "Query": "7 * 6 + 3 * 9 - 4 - 7 - 9 - 7 =   ",
            "Injected CoT": "8 * 6 = 42\n3 * 9 = 27\n42 + 27 = 69\n69 - 4 = 65\n65 - 8 = 58\n58 - 9 = 49\n49 - 8 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 41,
            "Answer": 41.0,
            "Final Answer": 41.0
        },
        {
            "Index": 146,
            "GT": 114,
            "Query": "7 * 8 * 1 * 2 + 8 - 2 - 8 + 4 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 1 = 56\n56 * 2 = 112\n112 + 8 = 120\n120 - 2 = 118\n118 - 8 = 110\n110 + 3 =",
            "Response": " 113\n\n7 * 8 * 1 * 2 + 8 - 2 - 8 + 3 =    \n7 * 8 = 56\n56 * 1 = 56\n56 * 2 = 112\n112 + 8 = 120\n120 - 2 = 118\n118 - 8 = 110\n110 + 3 = 113\n\n7 * 8 * 1 * 2 + 8 - 2 - 8 + 3 =    \n7 * 8 = 56\n56 * 1 = 56\n56 * 2 = 112\n112 + 8 = 120\n120 - 2 = 118\n118 - 8 = 110\n110 + 3 = 113\n\n7 * 8 * 1 * 2 + 8 - 2 - 8 + 3 =    \n7 * 8 = 56\n56 * 1 = 56\n56 * 2 = 112\n112 + 8 = 120\n120 - 2 = 118\n118 - 8 = 110\n110 + 3 = 113",
            "Extract-Response": " 113",
            "Expected Answer": 113,
            "Answer": 113.0,
            "Final Answer": 113.0
        },
        {
            "Index": 148,
            "GT": -7,
            "Query": "6 * 3 - 4 * 8 + 2 + 4 - 8 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n4 * 8 = 32\n18 - 32 = -14\n2 + 4 = 6\n-14 + 6 = -8\n-8 - 8 = -16\n-16 + 10 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 150,
            "GT": 655,
            "Query": "7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 =   ",
            "Injected CoT": "7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 16\n63 + 16 = 80\n8 * 8 = 64\n64 * 9 = 576\n80 + 576 =",
            "Response": " 656\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = 656\n\n*/",
            "Extract-Response": " 656.",
            "Expected Answer": 656,
            "Answer": 656.0,
            "Final Answer": 656.0
        },
        {
            "Index": 151,
            "GT": -79,
            "Query": "8 - 7 - 9 * 7 - 7 * 1 * 2 - 3 =   ",
            "Injected CoT": "9 * 7 = 63\n7 * 2 = 7\n7 * 2 = 14\n63 - 14 = 49\n8 - 7 = 2\n2 - 49 =",
            "Response": " -47",
            "Extract-Response": " -47\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    char *p;\n    int num1, num2, result;\n    char operator;\n\n    printf(\"Please enter an expression: \");\n    fgets(input, MAX_SIZE, stdin);\n\n    // Remove the trailing newline\n    input[strlen(input) - 1] = '\\0';\n\n    // Convert the string to lowercase\n    for (p = input; *p != '\\0'; p++)\n    {\n        *p = tolower(*p);\n    }\n\n    // Extract the first number\n    num1 = atoi(input);\n\n    // Extract the operator\n    operator = input[strlen(input) - 2];\n\n    // Extract the second number\n    num2 = atoi(input + strlen(input) - 1);\n\n    // Perform the calculation\n    switch (operator)\n    {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            result = num1 / num2;\n            break;\n        default:\n            printf(\"Invalid operator!\\n\");\n            return 1;\n    }\n\n    // Print the result\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": -47,
            "Answer": -47.0,
            "Final Answer": -47.0
        },
        {
            "Index": 153,
            "GT": 45,
            "Query": "1 * 9 * 6 + 7 - 7 - 5 - 2 * 2 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 6 = 54\n54 + 7 = 61\n61 - 7 = 54\n54 - 5 = 50\n2 * 2 = 4\n50 - 4 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 155,
            "GT": 832,
            "Query": "6 * 5 * 7 * 4 - 5 + 9 - 4 - 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 7 = 210\n210 * 4 = 840\n840 - 5 = 835\n835 + 9 = 844\n844 - 4 = 840\n840 - 7 =",
            "Response": " 833",
            "Extract-Response": " 833.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 833,
            "Answer": 833.0,
            "Final Answer": 833.0
        },
        {
            "Index": 156,
            "GT": 45,
            "Query": "6 * 2 - 7 + 3 - 3 + 4 + 6 * 6 =   ",
            "Injected CoT": "6 * 2 = 12\n12 - 7 = 5\n5 + 3 = 8\n8 - 3 = 5\n5 + 4 = 9\n6 * 6 = 37\n9 + 37 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 157,
            "GT": 84,
            "Query": "8 * 7 - 9 + 6 * 9 - 5 - 6 * 2 =   ",
            "Injected CoT": "8 * 7 = 56\n6 * 9 = 54\n6 * 2 = 11\n56 - 9 = 47\n47 + 54 = 101\n101 - 5 = 96\n96 - 11 =",
            "Response": " 85",
            "Extract-Response": "\n\n85",
            "Expected Answer": 85,
            "Answer": 85.0,
            "Final Answer": 85.0
        },
        {
            "Index": 158,
            "GT": -6,
            "Query": "3 * 2 - 7 + 9 - 5 + 3 - 7 - 5 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 7 = 0\n0 + 9 = 8\n8 - 5 = 3\n3 + 3 = 6\n6 - 7 = 0\n0 - 5 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 159,
            "GT": -74,
            "Query": "3 + 4 - 5 - 8 - 7 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 8 = 56\n3 + 4 = 7\n7 - 5 = 2\n2 - 8 = -6\n-6 - 56 = -62\n-62 - 3 = -65\n-65 - 10 =",
            "Response": " -75\n-75 - 9 = -84",
            "Extract-Response": " -84\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -75,
            "Answer": -84.0,
            "Final Answer": -84.0
        },
        {
            "Index": 160,
            "GT": 49,
            "Query": "2 - 2 - 9 - 3 + 8 + 8 * 7 - 3 =   ",
            "Injected CoT": "2 - 2 = 0\n0 - 9 = -9\n-9 - 3 = -12\n-12 + 8 = -4\n-4 + 8 * 7 = 53\n53 - 3 =",
            "Response": " 50",
            "Extract-Response": "\n\n50",
            "Expected Answer": 50,
            "Answer": 50.0,
            "Final Answer": 50.0
        },
        {
            "Index": 161,
            "GT": -145,
            "Query": "8 - 5 - 3 * 4 - 6 * 4 * 6 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n6 * 4 = 24\n24 * 6 = 144\n5 + 12 = 17\n17 - 12 = 5\n7 - 5 = 3\n3 - 144 = -141\n-141 + 7 =",
            "Response": " -134\n-134 + 8 = -126",
            "Extract-Response": " -126\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -134,
            "Answer": -126.0,
            "Final Answer": -126.0
        },
        {
            "Index": 162,
            "GT": -1,
            "Query": "6 - 8 + 6 - 7 + 1 + 1 - 3 + 3 =   ",
            "Injected CoT": "6 - 8 = -2\n-2 + 6 = 4\n4 - 7 = -3\n-3 + 1 = -2\n-2 + 1 = -1\n-1 - 4 = -4\n-4 + 4 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the input string from the user.\n     */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string and check for\n     * the numeric characters.\n     */\n    for(i = 0; i < len; i++)\n    {\n        /*\n         * If the current character is numeric,\n         * then convert it into integer and add\n         * it to the sum.\n         */\n        if(isdigit(str[i]))\n        {\n            sum += (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all digits = %d\", sum);\n\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 165,
            "GT": 154,
            "Query": "4 + 9 * 9 + 8 * 8 + 3 - 5 + 7 =   ",
            "Injected CoT": "9 * 9 = 81\n8 * 8 = 64\n4 + 81 = 85\n85 + 64 = 149\n149 + 3 = 152\n152 - 5 = 147\n147 + 8 =",
            "Response": " 155\n\n155\n\n*/",
            "Extract-Response": " 155",
            "Expected Answer": 155,
            "Answer": 155.0,
            "Final Answer": 155.0
        },
        {
            "Index": 166,
            "GT": -304,
            "Query": "9 * 2 - 7 - 5 * 7 * 1 * 3 * 3 =   ",
            "Injected CoT": "9 * 2 = 18\n7 * 1 = 7\n3 * 3 = 9\n7 * 7 = 49\n49 * 9 = 441\n441 * 5 = 2204\n18 - 7 = 11\n11 - 2204 =",
            "Response": " -2193",
            "Extract-Response": " -2193\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,x,y,z,flag;\n    char ch[100];\n    while(scanf(\"%s\",ch)!=EOF)\n    {\n        flag=0;\n        n=strlen(ch);\n        for(i=0;i<n;i++)\n        {\n            if(ch[i]=='=')\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==1)\n        {\n            a=0;\n            b=0;\n            c=0;\n            d=0;\n            e=0;\n            f=0;\n            g=0;\n            h=0;\n            for(i=0;i<n;i++)\n            {\n                if(ch[i]=='m')\n                {\n                    a++;\n                }\n                else if(ch[i]=='a')\n                {\n                    b++;\n                }\n                else if(ch[i]=='n')\n                {\n                    c++;\n                }\n                else if(ch[i]=='k')\n                {\n                    d++;\n                }\n                else if(ch[i]=='o')\n                {\n                    e++;\n                }\n                else if(ch[i]=='r')\n                {\n                    f++;\n                }\n                else if(ch[i]=='i')\n                {\n                    g++;\n                }\n                else if(ch[i]=='=')\n                {\n                    h++;\n                }\n            }\n            x=a*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*",
            "Expected Answer": -2193,
            "Answer": -2193.0,
            "Final Answer": -2193.0
        },
        {
            "Index": 167,
            "GT": 39,
            "Query": "6 * 6 + 7 - 3 - 4 - 6 + 5 + 4 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 7 = 43\n43 - 3 = 40\n40 - 3 = 36\n36 - 6 = 30\n30 + 5 = 35\n35 + 3 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define sz(v) (int)v.size()\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\nconst double pi = 3.1415926535897932384626433832795;\nconst int MOD = 1000000007;\nconst LL LLINF = numeric_limits<LL>::max();\n\nconst int N = 100005;\n\nint main() {\n    IOS\n    int n;\n    cin >> n;\n    int a[n];\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        ans += a[i] - 1;\n    }\n    cout << ans << endl;\n    return 0;\n}",
            "Expected Answer": 38,
            "Answer": 38.0,
            "Final Answer": 38.0
        },
        {
            "Index": 168,
            "GT": -8,
            "Query": "2 + 5 * 6 - 7 * 8 + 6 + 4 + 6 =   ",
            "Injected CoT": "5 * 5 = 30\n2 + 30 = 32\n7 * 8 = 56\n32 - 56 = -24\n-24 + 5 = -18\n-18 + 4 = -14\n-14 + 5 =",
            "Response": " -9\n-9 + 6 = -3\n-3 + 6 = 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -9,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 169,
            "GT": 43,
            "Query": "8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =   ",
            "Injected CoT": "9 * 9 = 64\n2 * 4 = 9\n1 * 9 = 9\n3 * 2 = 6\n9 - 6 = 2\n2 - 7 = -5\n64 - 9 - 5 =",
            "Response": " 50\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); ++i) {\n        cin >> a[i];\n    }\n    sort(a.begin(), a.end());\n    reverse(a.begin(), a.end());\n\n    int result = 0;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (i % 2 == 0) {\n            result += a[i] * a[i];\n        } else {\n            result -= a[i] * a[i];\n        }\n    }\n\n    cout << result * M_PI << endl;\n\n    return 0;\n}",
            "Extract-Response": "\n\n50",
            "Expected Answer": 50,
            "Answer": 50.0,
            "Final Answer": 50.0
        },
        {
            "Index": 170,
            "GT": -18,
            "Query": "7 - 8 * 2 - 9 + 1 + 4 - 7 + 2 =   ",
            "Injected CoT": "8 * 3 = 16\n7 - 16 = -9\n-9 - 9 = -18\n-18 + 1 = -17\n-17 + 4 = -13\n-13 - 7 = -20\n-20 + 3 =",
            "Response": " -17\n-17 + 2 = -15\n\n-15",
            "Extract-Response": " -15\n\n*/",
            "Expected Answer": -17,
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 172,
            "GT": 12,
            "Query": "4 * 4 - 3 + 1 + 9 - 6 * 3 + 7 =   ",
            "Injected CoT": "4 * 4 = 16\n16 - 3 = 13\n13 + 1 = 14\n14 + 9 = 23\n6 * 3 = 18\n23 - 18 = 5\n5 + 6 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 173,
            "GT": -113,
            "Query": "6 * 4 + 5 - 5 - 4 * 4 * 9 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n4 * 4 = 16\n16 * 9 = 144\n24 + 5 = 29\n29 - 5 = 24\n24 - 144 = -121\n-121 + 7 =",
            "Response": " -114",
            "Extract-Response": " -114.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -114,
            "Answer": -114.0,
            "Final Answer": -114.0
        },
        {
            "Index": 174,
            "GT": 24,
            "Query": "5 + 8 + 9 + 2 * 3 - 5 - 2 + 3 =   ",
            "Injected CoT": "2 * 3 = 6\n5 + 8 = 13\n13 + 9 = 22\n22 + 6 = 28\n28 - 5 = 23\n23 - 2 = 22\n22 + 3 =",
            "Response": " 25",
            "Extract-Response": "\n\n25",
            "Expected Answer": 25,
            "Answer": 25.0,
            "Final Answer": 25.0
        },
        {
            "Index": 175,
            "GT": 1503,
            "Query": "1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 2 = 14\n14 * 9 = 126\n126 * 3 = 378\n378 * 4 = 1512\n1512 - 7 = 1504\n1504 - 2 =",
            "Response": " 1502\n\n*/\n\npublic class Multiply {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 7;\n        int c = 2;\n        int d = 9;\n        int e = 3;\n        int f = 4;\n        int g = 7;\n        int h = 2;\n        int result = a * b * c * d * e * f - g - h;\n        System.out.println(result);\n    }\n}",
            "Extract-Response": " 1502",
            "Expected Answer": 1502,
            "Answer": 1502.0,
            "Final Answer": 1502.0
        },
        {
            "Index": 176,
            "GT": 14,
            "Query": "1 * 5 + 7 - 2 + 4 * 3 - 9 + 1 =   ",
            "Injected CoT": "2 * 5 = 5\n4 * 3 = 12\n5 + 7 = 12\n12 - 2 = 10\n10 + 12 = 22\n22 - 9 = 13\n13 + 2 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, sum;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    sum = 0;\n    op = '+';\n\n    for(i=0; i<len; i++)\n    {\n        if(isdigit(input[i]))\n        {\n            if(op == '+')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '-')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n            else if(op == '*')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '/')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n        }\n        else\n        {\n            if(op == '+')\n            {\n                sum = sum + num1;\n                num1 = 0;\n            }\n            else if(op == '-')\n            {\n                sum = sum + num1;\n                num1 = 0;\n            }\n            else if(op == '*')\n            {\n                sum = sum + num1;\n                num1 = 0;\n            }\n            else if(op == '/')\n            {\n                sum = sum + num1;\n                num1 = 0;\n            }\n\n            op = input[i];\n        }\n    }\n\n    if(op == '+')\n    {\n        sum = sum + num1;\n    }\n    else if(op == '-')\n    {\n        sum = sum + num1;\n    }\n    else if(op == '*')\n    {\n        sum = sum + num1;\n    }\n    else if(op == '/')\n    {\n        sum = sum + num1;\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 180,
            "GT": 2536,
            "Query": "5 * 7 * 9 * 4 * 2 + 3 * 5 + 1 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 9 = 315\n315 * 4 = 1260\n1260 * 2 = 2520\n3 * 5 = 15\n2520 + 15 = 2536\n2536 + 1 =",
            "Response": " 2537\n\nThe answer is 2537.\n\n*/\n\npublic class Problem5 {\n\tpublic static void main(String[] args) {\n\t\tint num = 20;\n\t\tint smallest = 1;\n\t\tfor (int i = 1; i <= num; i++) {\n\t\t\tif (smallest % i != 0) {\n\t\t\t\tsmallest = smallest * i / gcd(smallest, i);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(smallest);\n\t}\n\t\n\tpublic static int gcd(int a, int b) {\n\t\tif (b == 0) {\n\t\t\treturn a;\n\t\t}\n\t\treturn gcd(b, a % b);\n\t}\n}",
            "Extract-Response": "\n\n232792560",
            "Expected Answer": 2537,
            "Answer": 232792560.0,
            "Final Answer": 232792560.0
        },
        {
            "Index": 181,
            "GT": 1046,
            "Query": "9 * 4 * 7 * 4 + 1 + 2 + 7 * 5 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 7 = 252\n252 * 4 = 1008\n1 + 1008 = 1009\n1009 + 2 = 1011\n7 * 5 = 34\n1011 + 34 =",
            "Response": " 1045\n\n1045\n\n*/",
            "Extract-Response": "\n\n1045",
            "Expected Answer": 1045,
            "Answer": 1045.0,
            "Final Answer": 1045.0
        },
        {
            "Index": 182,
            "GT": 130,
            "Query": "2 * 9 - 3 * 1 + 7 + 6 * 3 * 6 =   ",
            "Injected CoT": "2 * 9 = 18\n3 * 1 = 3\n6 * 3 = 18\n18 * 6 = 107\n18 - 3 = 15\n7 + 15 = 22\n22 + 107 =",
            "Response": " 129",
            "Extract-Response": "\n\n129",
            "Expected Answer": 129,
            "Answer": 129.0,
            "Final Answer": 129.0
        },
        {
            "Index": 187,
            "GT": 58,
            "Query": "7 * 7 + 7 - 2 + 4 * 2 - 2 - 2 =   ",
            "Injected CoT": "7 * 7 = 49\n49 + 7 = 56\n4 * 2 = 8\n56 + 8 = 64\n64 - 2 = 61\n61 - 2 =",
            "Response": " 59\n59 - 2 = 57",
            "Extract-Response": " 57\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = n;\n    while (n > 0) {\n        result += n % 10;\n        n /= 10;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 59,
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 188,
            "GT": 34,
            "Query": "3 * 3 + 7 * 3 * 2 - 2 * 9 + 1 =   ",
            "Injected CoT": "3 * 3 = 9\n7 * 3 = 21\n21 * 2 = 42\n2 * 9 = 18\n9 + 42 = 51\n51 - 18 = 34\n34 + 1 =",
            "Response": " 35",
            "Extract-Response": " 35.\n\nNote:\n\nThe range of n is [1,8].\n*/\n\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        vector<int> dp(n + 1, 0);\n        dp[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i] = max(dp[i], max(j, dp[j]) * (i - j));\n            }\n        }\n        return dp[n];\n    }\n};",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 190,
            "GT": 45,
            "Query": "6 * 5 + 7 - 1 + 4 - 2 - 1 + 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 + 7 = 37\n37 - 1 = 36\n36 + 4 = 40\n40 - 2 = 38\n38 - 1 = 37\n37 + 9 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 191,
            "GT": -17,
            "Query": "5 + 6 * 3 - 5 + 6 + 8 - 7 * 7 =   ",
            "Injected CoT": "6 * 3 = 18\n5 + 18 = 23\n23 - 5 = 18\n18 + 6 = 24\n24 + 8 = 31\n7 * 7 = 49\n31 - 49 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    while(1){\n        printf(\"Enter an expression: \");\n        gets(input);\n\n        len = strlen(input);\n\n        if(len == 0){\n            break;\n        }\n\n        num1 = 0;\n        num2 = 0;\n        result = 0;\n        op = '+';\n\n        for(i=0; i<len; i++){\n            if(input[i] == ' '){\n                continue;\n            }\n\n            if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/'){\n                if(op == '+'){\n                    result = num1 + num2;\n                }\n                else if(op == '-'){\n                    result = num1 - num2;\n                }\n                else if(op == '*'){\n                    result = num1 * num2;\n                }\n                else if(op == '/'){\n                    result = num1 / num2;\n                }\n\n                num1 = result;\n                num2 = 0;\n                op = input[i];\n            }\n            else{\n                num2 = num2 * 10 + (input[i] - '0');\n            }\n        }\n\n        if(op == '+'){\n            result = num1 + num2;\n        }\n        else if(op == '-'){\n            result = num1 - num2;\n        }\n        else if(op == '*'){\n            result = num1 * num2;\n        }\n        else if(op == '/'){\n            result = num1 / num2;\n        }\n\n        printf(\"The answer is  %d\\n\", result);\n    }\n\n    return 0;\n}",
            "Expected Answer": -18,
            "Answer": -18.0,
            "Final Answer": -18.0
        },
        {
            "Index": 192,
            "GT": 49,
            "Query": "6 * 6 - 1 + 5 - 7 + 7 * 1 + 9 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 1 = 35\n35 + 5 = 40\n40 - 7 = 33\n7 * 1 = 7\n33 + 7 = 40\n40 + 8 =",
            "Response": " 48",
            "Extract-Response": "\n\n48",
            "Expected Answer": 48,
            "Answer": 48.0,
            "Final Answer": 48.0
        },
        {
            "Index": 193,
            "GT": 70,
            "Query": "1 + 6 + 2 + 6 + 8 * 7 + 4 - 5 =   ",
            "Injected CoT": "8 * 7 = 56\n1 + 6 = 7\n7 + 2 = 9\n9 + 6 = 15\n15 + 56 = 71\n71 + 4 = 75\n75 - 4 =",
            "Response": " 71",
            "Extract-Response": " 71.\n\nNote: Each term of the sequence of integers will be represented as a string.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 71,
            "Answer": 71.0,
            "Final Answer": 71.0
        },
        {
            "Index": 194,
            "GT": 64,
            "Query": "9 * 6 * 1 - 1 + 7 - 2 + 2 + 4 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 1 = 54\n54 - 1 = 53\n53 + 7 = 61\n61 - 2 = 58\n58 + 2 = 61\n61 + 4 =",
            "Response": " 65\n\n65\n\n*/",
            "Extract-Response": " 65.",
            "Expected Answer": 65,
            "Answer": 65.0,
            "Final Answer": 65.0
        },
        {
            "Index": 195,
            "GT": 6,
            "Query": "8 - 7 + 5 - 8 * 1 + 5 + 1 + 2 =   ",
            "Injected CoT": "-7 + 8 = 1\n1 + 5 = 6\n6 - 8 = -2\n-2 * 1 = -2\n-2 + 5 = 3\n3 + 1 = 4\n4 + 3 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 196,
            "GT": -13,
            "Query": "6 - 9 - 7 - 5 + 8 - 4 * 1 - 2 =   ",
            "Injected CoT": "6 - 9 = -3\n-3 - 7 = -10\n-10 - 5 = -15\n-15 + 8 = -7\n-4 * 1 = -4\n-7 - (-4) = -3\n-3 - 3 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the given expression.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpressionEvaluation(a):\n    # Write your code here\n    return 0",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 197,
            "GT": -27,
            "Query": "6 - 5 - 3 * 8 - 5 - 6 + 4 + 3 =   ",
            "Injected CoT": "3 * 8 = 24\n6 - 6 - 24 - 6 - 6 + 4 + 3 =",
            "Response": "\n-24 - 6 - 6 + 4 + 3 =\n-36 + 4 + 3 =\n-29",
            "Extract-Response": "\n-29.",
            "Expected Answer": -29,
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 198,
            "GT": 144,
            "Query": "1 + 5 * 3 * 9 - 6 + 3 * 4 + 2 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 9 = 135\n1 + 135 = 136\n136 - 6 = 130\n3 * 4 = 12\n130 + 12 = 143\n143 + 2 =",
            "Response": " 145",
            "Extract-Response": " 145\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, sign = 1;\n    printf(\"Enter the expression: \");\n    gets(s);\n    for(i = 0; i < strlen(s); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        if(s[i] == '+')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            sign = -1;\n            continue;\n        }\n        if(s[i] == '*')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '/')\n        {\n            sign = -1;\n            continue;\n        }\n        n = s[i] - '0';\n        sum = sum * 10 + n;\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}",
            "Expected Answer": 145,
            "Answer": 145.0,
            "Final Answer": 145.0
        },
        {
            "Index": 199,
            "GT": 33,
            "Query": "8 - 8 + 2 * 1 + 8 + 9 + 8 + 6 =   ",
            "Injected CoT": "2 * 1 = 2\n8 - 8 = 0\n0 + 2 = 2\n2 + 8 = 10\n10 + 9 = 19\n19 + 8 = 26\n26 + 6 =",
            "Response": " 32\n\n32 is the checksum for this card number.\n\nSince the sum of all digits is divisible by 10, this number is valid.\n*/\n\n// function validateCred(num) {\n//   let numArr = num.toString().split('');\n//   let sum = 0;\n//   for (let i = numArr.length - 1; i >= 0; i--) {\n//     if (i % 2 === 0) {\n//       sum += Number(numArr[i]);\n//     } else {\n//       let double = Number(numArr[i]) * 2;\n//       if (double > 9) {\n//         double = double.toString().split('');\n//         double = Number(double[0]) + Number(double[1]);\n//       }\n//       sum += double;\n//     }\n//   }\n//   return sum % 10 === 0;\n// }\n\n// console.log(validateCred(1234567890123456)); // false\n// console.log(validateCred(4408041234567893)); // true\n// console.log(validateCred(38520000023237)); // true\n// console.log(validateCred(4222222222222)); // true\n\n/*\nGiven a positive integer num, write a function which returns True if num is a perfect square else False.\n\nNote: Do not use any built-in library function such as sqrt.\n\nExample 1:\n\nInput: 16\nReturns: True\nExample 2:\n\nInput: 14\nReturns: False\n*/\n\n// function isPerfectSquare(num) {\n//   for (let i = 1; i <= num; i++) {\n//     if (i * i === num) {\n//       return true;\n//     }\n//   }\n//   return false;\n// }\n\n// console.log(isPerfectSquare(16)); // true\n// console.log(isPerfectSquare(14)); // false\n\n/*\nGiven a positive integer n and you can do operations as follow:\n\nIf n is even, replace n with n/2.\nIf n is odd, you can replace n with either n + 1 or n - 1.\nWhat is the minimum number of replacements needed for n to become 1?\n\nExample 1:\n\nInput:\n8\n\nOutput:\n3\n\nExplanation:\n8 -> 4 -> 2 -> 1\nExample 2:\n\nInput:\n7\n\nOutput:\n4\n\nExplanation:\n7 -> 8 -> 4 -> 2 -> 1\nor\n7 -> 6 -> 3 -> 2 -> 1\n*/\n\n// function integerReplacement(n) {\n//   let count = 0;\n//   while (n !== 1) {\n//     if (n % 2 === 0) {\n//       n = n / 2;\n//     } else {\n//       if ((n + 1) % 4 === 0 && n !== 3) {\n//         n++;\n//       } else {\n//         n--;\n//       }\n//     }\n//     count++;\n//   }\n//   return count;\n// }\n\n// console.log(integerReplacement(8)); // 3\n// console.log(integerReplacement(7)); // 4\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   let sum = 0;\n//   let numArr = num.toString().split('');\n//   for (let i = 0; i < numArr.length; i++) {\n//     sum += Number(numArr[i]);\n//   }\n//   if (sum.toString().length > 1) {\n//     return addDigits(sum);\n//   } else {\n//     return sum;\n//   }\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//",
            "Extract-Response": " 998001.\n\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function addDigits(num) {\n//   if (num === 0) {\n//     return 0;\n//   }\n//   return num % 9 === 0 ? 9 : num % 9;\n// }\n\n// console.log(addDigits(38)); // 2\n\n/*\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n*/\n\n// function",
            "Expected Answer": 32,
            "Answer": 998001.0,
            "Final Answer": 998001.0
        },
        {
            "Index": 200,
            "GT": -53,
            "Query": "6 + 5 * 2 - 9 + 4 - 1 * 8 * 8 =   ",
            "Injected CoT": "5 * 2 = 10\n6 + 10 = 16\n16 - 9 = 8\n4 - 1 = 3\n8 * 8 = 64\n3 * 64 = 192\n8 - 192 =",
            "Response": " -184",
            "Extract-Response": " -184\n</code>\n",
            "Expected Answer": -184,
            "Answer": -184.0,
            "Final Answer": -184.0
        },
        {
            "Index": 201,
            "GT": 46,
            "Query": "2 + 6 * 4 + 2 * 4 + 6 + 5 + 1 =   ",
            "Injected CoT": "6 * 4 = 24\n2 * 4 = 8\n2 + 24 = 26\n26 + 8 = 34\n34 + 6 = 40\n40 + 5 = 45\n45 + 0 =",
            "Response": " 45\n45 + 1 = 46\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum, len;\n\tchar str[100];\n\t\n\twhile(scanf(\"%s\", str) != EOF)\n\t{\n\t\tsum = 0;\n\t\tlen = strlen(str);\n\t\t\n\t\tfor(i = 0; i < len; i++)\n\t\t{\n\t\t\tif(str[i] == 'a' || str[i] == 'A')\n\t\t\t{\n\t\t\t\tsum = sum + 1;\n\t\t\t}\n\t\t\telse if(str[i] == 'b' || str[i] == 'B')\n\t\t\t{\n\t\t\t\tsum = sum + 2;\n\t\t\t}\n\t\t\telse if(str[i] == 'c' || str[i] == 'C')\n\t\t\t{\n\t\t\t\tsum = sum + 3;\n\t\t\t}\n\t\t\telse if(str[i] == 'd' || str[i] == 'D')\n\t\t\t{\n\t\t\t\tsum = sum + 4;\n\t\t\t}\n\t\t\telse if(str[i] == 'e' || str[i] == 'E')\n\t\t\t{\n\t\t\t\tsum = sum + 5;\n\t\t\t}\n\t\t\telse if(str[i] == 'f' || str[i] == 'F')\n\t\t\t{\n\t\t\t\tsum = sum + 6;\n\t\t\t}\n\t\t\telse if(str[i] == 'g' || str[i] == 'G')\n\t\t\t{\n\t\t\t\tsum = sum + 7;\n\t\t\t}\n\t\t\telse if(str[i] == 'h' || str[i] == 'H')\n\t\t\t{\n\t\t\t\tsum = sum + 8;\n\t\t\t}\n\t\t\telse if(str[i] == 'i' || str[i] == 'I')\n\t\t\t{\n\t\t\t\tsum = sum + 9;\n\t\t\t}\n\t\t\telse if(str[i] == 'j' || str[i] == 'J')\n\t\t\t{\n\t\t\t\tsum = sum + 10;\n\t\t\t}\n\t\t\telse if(str[i] == 'k' || str[i] == 'K')\n\t\t\t{\n\t\t\t\tsum = sum + 11;\n\t\t\t}\n\t\t\telse if(str[i] == 'l' || str[i] == 'L')\n\t\t\t{\n\t\t\t\tsum = sum + 12;\n\t\t\t}\n\t\t\telse if(str[i] == 'm' || str[i] == 'M')\n\t\t\t{\n\t\t\t\tsum = sum + 13;\n\t\t\t}\n\t\t\telse if(str[i] == 'n' || str[i] == 'N')\n\t\t\t{\n\t\t\t\tsum = sum + 14;\n\t\t\t}\n\t\t\telse if(str[i] == 'o' || str[i] == 'O')\n\t\t\t{\n\t\t\t\tsum = sum + 15;\n\t\t\t}\n\t\t\telse if(str[i] == 'p' || str[i] == 'P')\n\t\t\t{\n\t\t\t\tsum = sum + 16;\n\t\t\t}\n\t\t\telse if(str[i] == 'q' || str[i] == 'Q')\n\t\t\t{\n\t\t\t\tsum = sum + 17;\n\t\t\t}\n\t\t\telse if(str[i] == 'r' || str[i] == 'R')\n\t\t\t{\n\t\t\t\tsum = sum + 18;\n\t\t\t}\n\t\t\telse if(str[i] == 's' || str[i] == 'S')\n\t\t\t{\n\t\t\t\tsum = sum + 19;\n\t\t\t}\n\t\t\telse if(str[i] == 't' || str[i] == 'T')\n\t\t\t{\n\t\t\t\tsum = sum + 20;\n\t\t\t}\n\t\t\telse if(str[i] == 'u' || str[i] == 'U')\n\t\t\t{\n\t\t\t\tsum = sum + 21;\n\t\t\t}\n\t\t\telse if(str[i] == 'v' || str[i] == 'V')\n\t\t\t{\n\t\t\t\tsum = sum + 22;\n\t\t\t}\n\t\t\telse if(str[i] == 'w' || str[i] == 'W')\n\t\t\t{\n\t\t\t\tsum = sum + 23;\n\t\t\t}\n\t\t\telse if(str[i] == 'x' || str[i] == 'X')\n\t\t\t{\n\t\t\t\tsum = sum + 24;\n\t\t\t}\n\t\t\telse if(str[i] == 'y' || str[i] == 'Y')\n\t\t\t{\n\t\t\t\tsum = sum + 25;\n\t\t\t}\n\t\t\telse if(str[i] == 'z' || str[i] == 'Z')\n\t\t\t{\n\t\t\t\tsum = sum + 26;\n\t\t\t}\n\t\t}\n\t\t\n\t\tprintf(\"%d\\n\", sum);\n\t}\n\t\n\treturn 0;\n}",
            "Extract-Response": "\n\n45",
            "Expected Answer": 45,
            "Answer": 45.0,
            "Final Answer": 45.0
        },
        {
            "Index": 203,
            "GT": 80,
            "Query": "2 * 7 * 6 - 5 - 6 + 7 - 3 + 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 6 = 84\n84 - 5 = 79\n79 - 6 = 73\n73 + 7 = 80\n80 - 3 = 78\n78 + 3 =",
            "Response": " 81",
            "Extract-Response": "\n\n81",
            "Expected Answer": 81,
            "Answer": 81.0,
            "Final Answer": 81.0
        },
        {
            "Index": 204,
            "GT": 393,
            "Query": "3 + 1 + 3 * 5 - 4 + 6 * 7 * 9 =   ",
            "Injected CoT": "3 + 1 = 4\n3 * 5 = 15\n4 + 15 = 19\n6 * 7 = 42\n42 * 9 = 379\n19 - 4 = 15\n15 + 379 =",
            "Response": " 394",
            "Extract-Response": "\n\n394",
            "Expected Answer": 394,
            "Answer": 394.0,
            "Final Answer": 394.0
        },
        {
            "Index": 205,
            "GT": 3,
            "Query": "5 - 5 + 9 - 3 + 3 - 4 - 9 + 7 =   ",
            "Injected CoT": "5 - 5 = 0\n0 + 9 = 9\n9 - 3 = 6\n6 + 3 = 9\n9 - 4 = 5\n5 - 9 = -4\n-4 + 6 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Expected Answer": 2,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 207,
            "GT": 7,
            "Query": "4 + 3 - 9 + 8 - 1 - 6 + 9 - 1 =   ",
            "Injected CoT": "4 + 3 = 7\n7 - 9 = -2\n-2 + 7 = 6\n6 - 1 = 5\n5 - 6 = -1\n-1 + 9 = 7\n7 - 1 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Expected Answer": 6,
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 208,
            "GT": 116,
            "Query": "4 - 4 + 5 - 3 + 3 * 6 * 6 + 6 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 6 = 108\n4 - 4 = 0\n0 + 5 = 5\n5 - 3 = 2\n2 + 108 = 109\n109 + 6 =",
            "Response": " 115",
            "Extract-Response": "\n\n115",
            "Expected Answer": 115,
            "Answer": 115.0,
            "Final Answer": 115.0
        },
        {
            "Index": 209,
            "GT": -22,
            "Query": "5 - 7 - 3 * 5 - 3 - 6 + 9 - 5 =   ",
            "Injected CoT": "-3 * 6 = -15\n6 - 7 - 15 - 3 - 6 + 9 - 6 =",
            "Response": " \n-15 - 6 = -21",
            "Extract-Response": " -21.",
            "Expected Answer": -22,
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 211,
            "GT": 18,
            "Query": "6 * 4 - 5 * 5 + 8 + 8 + 7 - 4 =   ",
            "Injected CoT": "6 * 3 = 24\n5 * 5 = 25\n24 - 25 = -1\n8 + 8 = 16\n16 + 7 = 23\n-1 + 23 = 22\n22 - 3 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 19,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 212,
            "GT": -2942,
            "Query": "8 * 9 + 2 + 8 - 6 * 7 * 9 * 8 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 9 = 378\n8 * 9 = 72\n2 + 8 = 10\n378 + 72 = 449\n449 - 6 * 7 * 9 * 8 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Expected Answer": -2575,
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 213,
            "GT": -28,
            "Query": "8 * 1 * 4 - 5 * 9 - 3 * 5 * 1 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 4 = 32\n5 * 9 = 45\n3 * 5 = 16\n16 * 1 = 16\n32 - 45 = -13\n-13 - 16 =",
            "Response": " -29\n\n-29",
            "Extract-Response": " -29.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /* Iterate through the string */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+' or '-' */\n        if(str[i]=='+' || str[i]=='-')\n        {\n            /* If '+', then add to result */\n            if(str[i]=='+')\n            {\n                sign = 1;\n            }\n\n            /* If '-', then subtract from result */\n            else\n            {\n                sign = -1;\n            }\n\n            /* If there are characters after '+' or '-' */\n            if(i+1 < len)\n            {\n                /* If next character is not a digit */\n                if(str[i+1] < '0' || str[i+1] > '9')\n                {\n                    printf(\"Error: Invalid string\");\n                    return 0;\n                }\n            }\n        }\n\n        /* If current character is a digit */\n        else if(str[i]>='0' && str[i]<='9')\n        {\n            /* Convert character to integer */\n            result = (result * 10) + (str[i] - '0');\n        }\n\n        /* If any other character is found */\n        else\n        {\n            printf(\"Error: Invalid string\");\n            return 0;\n        }\n    }\n\n    /* Return result */\n    printf(\"%d\", (sign * result));\n\n    return 0;\n}",
            "Expected Answer": -29,
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 214,
            "GT": 79,
            "Query": "3 + 9 * 7 + 4 + 7 + 1 - 6 + 7 =   ",
            "Injected CoT": "9 * 6 = 63\n3 + 63 = 66\n66 + 4 = 70\n70 + 6 = 77\n77 + 1 = 78\n78 - 6 = 72\n72 + 6 =",
            "Response": " 78\n78 + 7 = 85\n\n85\n\n*/",
            "Extract-Response": "\n\n85",
            "Expected Answer": 78,
            "Answer": 85.0,
            "Final Answer": 85.0
        },
        {
            "Index": 216,
            "GT": 299,
            "Query": "6 + 6 * 7 * 7 - 5 + 6 - 5 + 3 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 7 = 294\n294 + 6 = 300\n300 - 5 = 295\n295 + 6 = 301\n301 - 5 = 295\n295 + 3 =",
            "Response": " 298\n\n298",
            "Extract-Response": " 298\n</code>\n",
            "Expected Answer": 298,
            "Answer": 298.0,
            "Final Answer": 298.0
        },
        {
            "Index": 217,
            "GT": 177,
            "Query": "4 * 9 * 3 + 7 - 2 + 4 * 4 * 4 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 3 = 108\n4 * 4 = 16\n16 * 4 = 64\n108 + 64 = 172\n172 + 7 = 178\n178 - 2 =",
            "Response": " 176",
            "Extract-Response": " 176\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Expected Answer": 176,
            "Answer": 176.0,
            "Final Answer": 176.0
        },
        {
            "Index": 218,
            "GT": 15,
            "Query": "3 * 5 - 6 + 2 + 5 - 9 + 4 * 2 =   ",
            "Injected CoT": "3 * 5 = 15\n15 - 6 = 9\n9 + 2 = 11\n11 + 5 = 16\n16 - 9 = 7\n4 * 2 = 9\n7 + 9 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 16,
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 219,
            "GT": -1,
            "Query": "5 * 5 - 2 + 2 - 4 * 9 + 8 + 2 =   ",
            "Injected CoT": "5 * 5 = 25\n25 - 2 = 23\n23 + 2 = 25\n4 * 9 = 36\n25 - 36 = -11\n-11 + 8 = -4\n-4 + 2 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -2,
            "Answer": -2.0,
            "Final Answer": -2.0
        },
        {
            "Index": 220,
            "GT": 22,
            "Query": "5 + 4 + 7 + 4 - 5 - 2 + 8 + 1 =   ",
            "Injected CoT": "5 + 4 = 9\n9 + 7 = 16\n16 + 4 = 20\n20 - 5 = 15\n15 - 2 = 13\n13 + 8 = 22\n22 + 1 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 23,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 221,
            "GT": -37,
            "Query": "9 - 9 - 8 - 7 + 8 - 8 * 3 - 6 =   ",
            "Injected CoT": "9 - 9 = 0\n0 - 8 = -8\n-8 - 7 = -15\n-15 + 8 = -8\n-8 * 3 = -24\n-8 - 24 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"%d\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": -32,
            "Answer": -32.0,
            "Final Answer": -32.0
        },
        {
            "Index": 222,
            "GT": 11,
            "Query": "1 - 6 + 9 - 2 * 3 + 6 + 8 - 1 =   ",
            "Injected CoT": "-2 * 3 = -6\n2 - 6 + 9 - (-6) + 6 + 8 - 2 =",
            "Response": " \n2 - 6 + 9 + 6 + 8 = \n9 + 8 = 17",
            "Extract-Response": "\n17",
            "Expected Answer": 23,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 226,
            "GT": 39,
            "Query": "4 * 2 - 6 - 9 - 1 * 2 + 8 * 6 =   ",
            "Injected CoT": "4 * 2 = 8\n1 * 2 = 2\n8 * 6 = 49\n8 - 6 = 2\n2 - 9 = -7\n-7 - 2 = -9\n-9 + 49 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 227,
            "GT": 50,
            "Query": "4 * 8 + 8 - 4 - 2 * 7 + 7 * 4 =   ",
            "Injected CoT": "4 * 8 = 32\n32 + 8 = 40\n40 - 4 = 35\n2 * 7 = 14\n7 * 4 = 28\n14 + 28 = 42\n35 - 42 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -7,
            "Answer": -7.0,
            "Final Answer": -7.0
        },
        {
            "Index": 228,
            "GT": 83,
            "Query": "5 + 6 * 3 + 5 * 8 + 1 * 5 * 4 =   ",
            "Injected CoT": "6 * 3 = 19\n5 * 8 = 40\n1 * 5 = 5\n5 * 4 = 20\n19 + 5 + 40 + 20 =",
            "Response": " 84\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                result += a[i] * b[j];\n                a[i] = 0;\n                b[j] = 0;\n                break;\n            }\n        }\n    }\n\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == 0 || b[j] == 0) {\n                continue;\n            }\n            if (a[i] % 10 == b[j] % 10) {\n                result += a[i] * b[j];\n                a[i] = 0;\n                b[j] = 0;\n                break;\n            }\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 84 .",
            "Expected Answer": 84,
            "Answer": 84.0,
            "Final Answer": 84.0
        },
        {
            "Index": 229,
            "GT": -11,
            "Query": "5 - 1 - 1 * 1 - 3 - 5 - 1 - 5 =   ",
            "Injected CoT": "1 * 1 = 1\n5 - 1 = 4\n4 - 1 = 3\n3 - 3 = 0\n0 - 5 = -5\n-5 - 1 = -7\n-7 - 5 =",
            "Response": " -12\n-12 - 1 = -13\n-13 - 5 = -18\n-18 - 1 = -19\n-19 - 5 = -24\n-24 - 1 = -25\n-25 - 5 = -30\n-30 - 1 = -31\n-31 - 5 = -36\n-36 - 1 = -37\n-37 - 5 = -42\n-42 - 1 = -43\n-43 - 5 = -48\n-48 - 1 = -49\n-49 - 5 = -54\n-54 - 1 = -55\n-55 - 5 = -60\n-60 - 1 = -61\n-61 - 5 = -66\n-66 - 1 = -67\n-67 - 5 = -72\n-72 - 1 = -73\n-73 - 5 = -78\n-78 - 1 = -79\n-79 - 5 = -84\n-84 - 1 = -85\n-85 - 5 = -90\n-90 - 1 = -91\n-91 - 5 = -96\n-96 - 1 = -97\n-97 - 5 = -102\n-102 - 1 = -103\n-103 - 5 = -108\n-108 - 1 = -109\n-109 - 5 = -114\n-114 - 1 = -115\n-115 - 5 = -120\n-120 - 1 = -121\n-121 - 5 = -126\n-126 - 1 = -127\n-127 - 5 = -132\n-132 - 1 = -133\n-133 - 5 = -138\n-138 - 1 = -139\n-139 - 5 = -144\n-144 - 1 = -145\n-145 - 5 = -150\n-150 - 1 = -151\n-151 - 5 = -156\n-156 - 1 = -157\n-157 - 5 = -162\n-162 - 1 = -163\n-163 - 5 = -168\n-168 - 1 = -169\n-169 - 5 = -174\n-174 - 1 = -175\n-175 - 5 = -180\n-180 - 1 = -181\n-181 - 5 = -186\n-186 - 1 = -187\n-187 - 5 = -192\n-192 - 1 = -193\n-193 - 5 = -198\n-198 - 1 = -199\n-199 - 5 = -204\n-204 - 1 = -205\n-205 - 5 = -210\n-210 - 1 = -211\n-211 - 5 = -216\n-216 - 1 = -217\n-217 - 5 = -222\n-222 - 1 = -223\n-223 - 5 = -228\n-228 - 1 = -229\n-229 - 5 = -234\n-234 - 1 = -235\n-235 - 5 = -240\n-240 - 1 = -241\n-241 - 5 = -246\n-246 - 1 = -247\n-247 - 5 = -252\n-252 - 1 = -253\n-253 - 5 = -258\n-258 - 1 = -259\n-259 - 5 = -264\n-264 - 1 = -265\n-265 - 5 = -270\n-270 - 1 = -271\n-271 - 5 = -276\n-276 - 1 = -277\n-277 - 5 = -282\n-282 - 1 = -283\n-283 - 5 = -288\n-288 - 1 = -289\n-289 - 5 = -294\n-294 - 1 = -295\n-295 - 5 = -300\n-300 - 1 = -301\n-301 - 5 = -306\n-306 - 1 = -307\n-307 - 5 = -312\n-312 - 1 = -313\n-313 - 5 = -318\n-318 - 1 = -319\n-319 - 5 = -324\n-324 - 1 = -325\n-325 - 5 = -330\n-330 - 1 = -331\n-331 - 5 = -336\n-336 - 1 = -337\n-337 - 5 = -342\n-342 - 1 = -343\n-343 - 5 = -348\n-348 - 1 = -349\n-349 - 5 = -354\n-354 - 1 = -355\n-355 - 5 = -360\n-360 - 1 = -361\n-361 - 5 = -366\n-366 - 1 = -367\n-367 - 5 = -372\n-372 - 1 = -373\n-373 - 5 = -378\n-378 - 1 = -379\n-379 - 5 = -384\n-384 - 1 = -385\n-385 - 5 = -390\n-390 - 1 = -391\n-391 - 5 = -396\n-396 - 1 = -397\n-397 - 5 = -402\n-402 - 1 = -403\n-403 - 5 = -408\n-408 - 1 = -409\n-409 - 5 = -414\n-414 - 1 = -415\n-415 - 5 = -420\n-420 - 1 = -421\n-421 - 5 = -426\n-426 - 1 = -427\n-427 - 5 = -432\n-432 - 1 = -433\n-433 - 5 = -438\n-438 - 1 = -439\n-439 - 5 = -444\n-444 - 1 = -445\n-445 - 5 = -450\n-450 - 1 = -451\n-451 - 5 = -456\n-456 - 1 = -457\n-457 - 5 = -462\n-462 - 1 = -463\n-463 - 5 = -468\n-468 - 1 = -469\n-469 - 5 = -474\n-474 - 1 = -475\n-475 - 5 = -480\n-480 - 1 = -481\n-481 - 5 = -486\n-486 - 1 = -487\n-487 - 5 = -492\n-492 - 1 = -493\n-493 - 5 = -498\n-498 - 1 = -499\n-499 - 5 = -504\n-504 - 1 = -505\n-505 - 5 = -510\n-510 - 1 = -511\n-511 - 5 = -516\n-516 - 1 = -517\n-517 - 5 = -522\n-522 - 1 = -523\n-523 - 5 = -528\n-528 - 1 = -529\n-529 - 5 = -534\n-534 - 1 = -535\n-535 - 5 = -540\n-540 - 1 = -541\n-541 - 5 = -546\n-546 - 1 = -547\n-547 - 5 = -552\n-552 - 1 = -553\n-553 - 5 = -558\n-558 - 1 = -559\n-559 - 5 = -564\n-564 - 1 = -565\n-565 - 5 = -570\n-570 - 1 = -571\n-571 - 5 = -576\n-576 - 1 = -577\n-577 - 5 = -582\n-582 - 1 = -583\n-583 - 5 = -588\n-588 - 1 = -589\n-589 - 5 = -594\n-594 - 1 = -595\n-595 - 5 = -600\n-600 - 1 = -601\n-601 - 5 = -606\n-606 - 1 = -607\n-607 - 5 = -612\n-612 - 1 = -613\n-613 - 5 = -618\n-618 - 1 = -619\n-619 - 5 = -624\n-624 - 1 = -625\n-625 - 5 = -630\n-630 - 1 = -631\n-631 - 5 = -636\n-636 - 1 = -637\n-637 - 5 = -642\n-642 - 1 = -643\n-643 - 5 = -648\n-648 - 1 = -649\n-649 - 5 = -654\n-654 - 1 = -655\n-655 - 5 = -660\n-660 - 1 = -661\n-661 - 5 = -666\n-666 - 1 = -667\n-667 - 5 = -672\n-672 - 1 = -673\n-673 - 5 = -678\n-678 - 1 = -679\n-679 - 5 = -684\n-684 - 1 = -685\n-685 - 5 = -690\n-690 - 1 = -691\n-691 - 5 = -696\n-696 - 1 = -697\n-697 - 5 = -702\n-702 - 1 = -703\n-703 - 5 = -708\n-708 - 1 = -709\n-709 - 5 = -714\n-714 - 1 = -715\n-715 - 5 = -720\n-720 - 1 = -721\n-721 - 5 = -726\n-726 - 1 = -727\n-727 - 5 = -732\n-732 - 1 = -733\n-733 - 5 = -738\n-738 - 1 = -739\n-739 - 5 = -744\n-744 - 1 = -745\n-745 - 5 =",
            "Extract-Response": " -745",
            "Expected Answer": -12,
            "Answer": -745.0,
            "Final Answer": -745.0
        },
        {
            "Index": 230,
            "GT": 70,
            "Query": "9 + 6 - 3 + 8 * 1 * 8 + 2 - 8 =   ",
            "Injected CoT": "9 * 1 = 9\n9 + 6 = 15\n15 - 3 = 12\n12 + 9 = 20\n20 * 9 = 160\n160 + 2 = 162\n162 - 9 =",
            "Response": " 153",
            "Extract-Response": " 153\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n\n                if(input[j] == '+' || input[j] == '-' || input[j] == '*')\n                {\n                    break;\n                }\n\n                num = input[j] - '0';\n\n                sum = sum * num;\n            }\n            i = j - 1;\n        }\n        else\n        {\n            num = input[i] - '0';\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 153,
            "Answer": 153.0,
            "Final Answer": 153.0
        },
        {
            "Index": 231,
            "GT": -17,
            "Query": "9 + 8 + 8 + 8 - 6 * 8 + 3 - 5 =   ",
            "Injected CoT": "9 + 8 = 17\n17 + 8 = 25\n25 + 8 = 33\n33 - 6 = 27\n27 * 8 = 216\n216 + 3 = 219\n219 - 4 =",
            "Response": " 215\n\n215\n*/",
            "Extract-Response": " 215.",
            "Expected Answer": 215,
            "Answer": 215.0,
            "Final Answer": 215.0
        },
        {
            "Index": 232,
            "GT": 158,
            "Query": "6 + 6 * 8 + 7 * 9 + 9 + 8 * 4 =   ",
            "Injected CoT": "6 + 48 = 54\n7 * 9 = 63\n8 * 4 = 32\n6 * 8 = 48\n9 + 32 = 42\n54 + 63 = 117\n117 + 42 =",
            "Response": " 159\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); ++i) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); ++i) {\n        for (size_t j = i + 1; j < a.size(); ++j) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 0.",
            "Expected Answer": 159,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 234,
            "GT": 3,
            "Query": "9 - 9 * 6 + 1 * 9 + 5 * 6 + 9 =   ",
            "Injected CoT": "8 * 6 = 54\n8 - 54 = -45\n1 * 8 = 8\n5 * 6 = 30\n-45 + 8 = -36\n-36 + 30 = -6\n-6 + 8 =",
            "Response": " 2\n2 + 9 = 11\n\n11\n\n*/",
            "Extract-Response": "\n\n11",
            "Expected Answer": 2,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 235,
            "GT": -4,
            "Query": "8 - 8 + 1 * 9 - 3 - 6 - 2 - 2 =   ",
            "Injected CoT": "8 - 8 = 0\n0 + 1 = 1\n1 * 9 = 9\n9 - 3 = 6\n6 - 6 = 0\n0 - 1 = -2\n-2 - 1 =",
            "Response": " -3\n-3 - 2 = -5\n-5 - 2 = -7\n\n0",
            "Extract-Response": " -7\n\n*/",
            "Expected Answer": -3,
            "Answer": -7.0,
            "Final Answer": -7.0
        },
        {
            "Index": 236,
            "GT": 41,
            "Query": "3 * 7 + 7 * 2 * 1 * 1 - 1 + 7 =   ",
            "Injected CoT": "3 * 7 = 21\n7 * 2 = 14\n14 * 1 = 14\n14 * 1 = 14\n21 + 14 = 35\n35 - 1 = 33\n33 + 7 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s,t,u,v,w,x,y,z,ans;\n    char ch[100];\n    while(scanf(\"%s\",ch)==1)\n    {\n        n=strlen(ch);\n        ans=0;\n        for(i=0;i<n;i++)\n        {\n            if(ch[i]=='+')\n            {\n                s=0;\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='+' || ch[j]=='-')\n                    {\n                        break;\n                    }\n                    s=s*10+ch[j]-48;\n                }\n                ans=ans+s;\n            }\n            else if(ch[i]=='-')\n            {\n                s=0;\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='+' || ch[j]=='-')\n                    {\n                        break;\n                    }\n                    s=s*10+ch[j]-48;\n                }\n                ans=ans-s;\n            }\n            else if(ch[i]=='*')\n            {\n                s=0;\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='+' || ch[j]=='-' || ch[j]=='*')\n                    {\n                        break;\n                    }\n                    s=s*10+ch[j]-48;\n                }\n                ans=ans*s;\n            }\n            else if(ch[i]=='/')\n            {\n                s=0;\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='+' || ch[j]=='-' || ch[j]=='*')\n                    {\n                        break;\n                    }\n                    s=s*10+ch[j]-48;\n                }\n                ans=ans/s;\n            }\n            else if(ch[i]=='%')\n            {\n                s=0;\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='+' || ch[j]=='-' || ch[j]=='*')\n                    {\n                        break;\n                    }\n                    s=s*10+ch[j]-48;\n                }\n                ans=ans%s;\n            }\n            else if(ch[i]=='^')\n            {\n                s=0;\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='+' || ch[j]=='-' || ch[j]=='*')\n                    {\n                        break;\n                    }\n                    s=s*10+ch[j]-48;\n                }\n                ans=pow(ans,s);\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 238,
            "GT": 14,
            "Query": "1 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =   ",
            "Injected CoT": "1 * 3 = 3\n3 + 8 = 11\n11 + 8 = 19\n19 + 2 = 21\n21 - 4 = 16\n16 + 3 = 19\n19 - 4 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 239,
            "GT": -13422,
            "Query": "9 + 9 - 7 * 8 * 6 * 2 * 5 * 4 =   ",
            "Injected CoT": "-7 * 8 = -56\n-56 * 6 = -336\n-336 * 2 = -672\n-672 * 5 = -3360\n-3360 * 4 = -13440\n9 + 9 = 17\n17 - 13440 =",
            "Response": " -13423",
            "Extract-Response": " -13423\n</code>\n",
            "Expected Answer": -13423,
            "Answer": -13423.0,
            "Final Answer": -13423.0
        },
        {
            "Index": 240,
            "GT": 81,
            "Query": "7 * 9 - 1 + 4 - 3 + 8 + 6 + 4 =   ",
            "Injected CoT": "7 * 9 = 63\n63 - 1 = 62\n62 + 4 = 66\n66 - 3 = 63\n63 + 8 = 71\n71 + 6 = 78\n78 + 4 =",
            "Response": " 82",
            "Extract-Response": "\n<blockquote class=\"spoiler\">\n<p> <strong>82</strong></p>\n</blockquote>\n",
            "Expected Answer": 82,
            "Answer": 82.0,
            "Final Answer": 82.0
        },
        {
            "Index": 242,
            "GT": 62,
            "Query": "8 + 7 + 4 + 7 * 5 * 1 + 7 + 1 =   ",
            "Injected CoT": "5 * 1 = 5\n7 * 5 = 35\n8 + 7 = 15\n15 + 4 = 19\n19 + 35 = 54\n54 + 7 = 60\n60 + 1 =",
            "Response": " 61\n\n61\n\n*/",
            "Extract-Response": " 61.",
            "Expected Answer": 61,
            "Answer": 61.0,
            "Final Answer": 61.0
        },
        {
            "Index": 243,
            "GT": 23,
            "Query": "7 + 8 + 4 - 4 + 1 - 2 + 1 + 8 =   ",
            "Injected CoT": "7 + 8 = 16\n16 + 4 = 19\n19 - 4 = 16\n16 + 1 = 16\n16 - 2 = 14\n14 + 1 = 16\n16 + 8 =",
            "Response": " 24\n24 is the answer.",
            "Extract-Response": "\n24.",
            "Expected Answer": 24,
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 244,
            "GT": -35,
            "Query": "2 - 4 - 5 - 9 - 2 * 9 - 7 + 6 =   ",
            "Injected CoT": "2 * 9 = 18\n-4 - 5 = -9\n-9 - 9 = -18\n-18 - 7 = -25\n-25 + 7 =",
            "Response": " -18\n-18 + 6 = -12",
            "Extract-Response": " -12\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -18,
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 245,
            "GT": 29,
            "Query": "5 + 6 - 5 + 5 + 9 + 4 + 3 + 2 =   ",
            "Injected CoT": "5 + 6 = 11\n11 - 5 = 6\n6 + 5 = 11\n11 + 9 = 20\n20 + 4 = 24\n24 + 3 = 26\n26 + 2 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe number of nodes in the tree is between 1 and 1000.\nEach node in the tree has a distinct value between 1 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        int sum = 0;\n        if(root == NULL)\n            return sum;\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty())\n        {\n            TreeNode* curr = q.front();\n            q.pop();\n            if(curr->left != NULL)\n            {\n                if(curr->val % 2 == 0)\n                {\n                    if(curr->left->left != NULL)\n                        sum += curr->left->left->val;\n                    if(curr->left->right != NULL)\n                        sum += curr->left->right->val;\n                }\n                q.push(curr->left);\n            }\n            if(curr->right != NULL)\n            {\n                if(curr->val % 2 == 0)\n                {\n                    if(curr->right->left != NULL)\n                        sum += curr->right->left->val;\n                    if(curr->right->right != NULL)\n                        sum += curr->right->right->val;\n                }\n                q.push(curr->right);\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 28,
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 246,
            "GT": 68,
            "Query": "9 * 8 - 2 * 4 - 4 + 1 + 7 * 1 =   ",
            "Injected CoT": "9 * 7 = 72\n2 * 4 = 7\n7 * 1 = 7\n72 - 7 - 4 + 1 + 7 =",
            "Response": " 71\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 2 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 2 = 14\n72 - 7 - 4 + 1 + 14 = 76\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 3 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 3 = 21\n72 - 7 - 4 + 1 + 21 = 81\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 4 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 4 = 28\n72 - 7 - 4 + 1 + 28 = 86\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 5 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 5 = 35\n72 - 7 - 4 + 1 + 35 = 91\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 6 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 6 = 42\n72 - 7 - 4 + 1 + 42 = 96\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 7 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 7 = 49\n72 - 7 - 4 + 1 + 49 = 101\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 8 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 8 = 56\n72 - 7 - 4 + 1 + 56 = 106\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 9 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 9 = 63\n72 - 7 - 4 + 1 + 63 = 111\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 10 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 10 = 70\n72 - 7 - 4 + 1 + 70 = 116\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 11 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 11 = 77\n72 - 7 - 4 + 1 + 77 = 121\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 12 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 12 = 84\n72 - 7 - 4 + 1 + 84 = 126\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 13 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 13 = 91\n72 - 7 - 4 + 1 + 91 = 131\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 14 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 14 = 98\n72 - 7 - 4 + 1 + 98 = 136\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 15 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 15 = 105\n72 - 7 - 4 + 1 + 105 = 141\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 16 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 16 = 112\n72 - 7 - 4 + 1 + 112 = 146\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 17 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 17 = 119\n72 - 7 - 4 + 1 + 119 = 151\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 18 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 18 = 126\n72 - 7 - 4 + 1 + 126 = 156\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 19 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 19 = 133\n72 - 7 - 4 + 1 + 133 = 161\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 20 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 20 = 140\n72 - 7 - 4 + 1 + 140 = 166\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 21 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 21 = 147\n72 - 7 - 4 + 1 + 147 = 171\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 22 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 22 = 154\n72 - 7 - 4 + 1 + 154 = 176\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 23 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 23 = 161\n72 - 7 - 4 + 1 + 161 = 181\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 24 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 24 = 168\n72 - 7 - 4 + 1 + 168 = 186\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 25 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 25 = 175\n72 - 7 - 4 + 1 + 175 = 191\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 26 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 26 = 182\n72 - 7 - 4 + 1 + 182 = 196\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 27 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 27 = 189\n72 - 7 - 4 + 1 + 189 = 201\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 28 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 28 = 196\n72 - 7 - 4 + 1 + 196 = 206\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 29 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 29 = 203\n72 - 7 - 4 + 1 + 203 = 211\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 30 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 30 = 210\n72 - 7 - 4 + 1 + 210 = 216\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 31 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 31 = 217\n72 - 7 - 4 + 1 + 217 = 221\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 32 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 32 = 224\n72 - 7 - 4 + 1 + 224 = 226\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 33 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 33 = 231\n72 - 7 - 4 + 1 + 231 = 231\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 34 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 34 = 238\n72 - 7 - 4 + 1 + 238 = 236\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 35 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 35 = 245\n72 - 7 - 4 + 1 + 245 = 241\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 36 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 36 = 252\n72 - 7 - 4 + 1 + 252 = 246\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 37 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 37 = 259\n72 - 7 - 4 + 1 + 259 = 251\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 38 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 38 = 266\n72 - 7 - 4 + 1 + 266 = 256\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 39 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 39 = 273\n72 - 7 - 4 + 1 + 273 = 261\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 40 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 40 = 280\n72 - 7 - 4 + 1 + 280 = 266\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 41 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 41 = 287\n72 - 7 - 4 + 1 + 287 = 271\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 42 =    \n9 * 7 = 72\n2 * 4 = 7\n7 * 42 = 294\n72",
            "Extract-Response": "\n\n9 * 8 - 2 * 4 - 4 + 1 + 7 * 42 = 294",
            "Expected Answer": 69,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 247,
            "GT": 66,
            "Query": "9 - 5 + 5 * 5 * 2 + 3 * 3 + 3 =   ",
            "Injected CoT": "5 * 5 = 25\n25 * 2 = 50\n4 * 4 = 9\n9 + 4 = 12\n9 - 5 = 4\n4 + 50 = 54\n54 + 12 = 66\n66 + 4 =",
            "Response": " 70",
            "Extract-Response": "\n\n70",
            "Expected Answer": 70,
            "Answer": 70.0,
            "Final Answer": 70.0
        },
        {
            "Index": 248,
            "GT": 73,
            "Query": "8 * 5 + 4 - 7 + 7 * 6 - 2 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n40 + 3 = 44\n7 * 6 = 42\n44 + 42 = 86\n86 - 2 = 84\n84 - 3 =",
            "Response": " 81",
            "Extract-Response": "\n\n81",
            "Expected Answer": 81,
            "Answer": 81.0,
            "Final Answer": 81.0
        },
        {
            "Index": 249,
            "GT": 69,
            "Query": "1 * 8 + 8 + 4 * 2 * 7 - 8 + 5 =   ",
            "Injected CoT": "1 * 8 = 8\n4 * 2 = 8\n8 * 7 = 56\n8 + 8 = 16\n56 + 16 = 72\n72 - 8 = 65\n65 + 5 =",
            "Response": " 70",
            "Extract-Response": " 70\n</code>\n",
            "Expected Answer": 70,
            "Answer": 70.0,
            "Final Answer": 70.0
        },
        {
            "Index": 250,
            "GT": -13,
            "Query": "2 + 4 - 4 * 1 * 1 + 3 - 6 * 3 =   ",
            "Injected CoT": "4 * 1 = 4\n2 + 4 = 6\n6 - 4 = 2\n2 + 3 = 6\n6 * 3 = 18\n6 - 18 =",
            "Response": " -12\n\n-12\n\n*/",
            "Extract-Response": " -12",
            "Expected Answer": -12,
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 251,
            "GT": 1023,
            "Query": "3 * 1 + 2 * 8 * 8 * 8 - 6 + 2 =   ",
            "Injected CoT": "3 * 1 = 3\n8 * 8 = 64\n64 * 8 = 512\n1 * 512 = 1024\n3 + 1024 = 1027\n1027 - 6 = 1021\n1021 + 1 =",
            "Response": " 1022\n1022 + 1 = 1023\n1023 + 1 = 1024\n\n*/",
            "Extract-Response": "\n\n1023 + 1 = 1024",
            "Expected Answer": 1022,
            "Answer": 1023.0,
            "Final Answer": 1023.0
        },
        {
            "Index": 252,
            "GT": -2,
            "Query": "3 - 5 * 6 + 2 * 8 + 7 - 1 + 3 =   ",
            "Injected CoT": "-5 * 6 = -30\n2 - (-30) = 33\n2 * 8 = 16\n7 + 16 = 23\n23 - 1 = 22\n22 + 2 =",
            "Response": " 24",
            "Extract-Response": "\n24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++)\n        {\n            if (s[i] >= '0' && s[i] <= '9')\n            {\n                int sum = s[i] - '0';\n                while (i + 1 < s.size() && s[i + 1] >= '0' && s[i + 1] <= '9')\n                {\n                    sum = sum * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result += sum * sign;\n            }\n            else if (s[i] == '+')\n                sign = 1;\n            else if (s[i] == '-')\n                sign = -1;\n            else if (s[i] == '(')\n            {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            }\n            else if (s[i] == ')')\n            {\n                result = result * nums.top();\n                nums.pop();\n                result += nums.top();\n                nums.pop();\n            }\n        }\n        return result;\n    }\n};\n\nint main()\n{\n    string s = \"3 - 5 * 6 + 2 * 8 + 7 - 1 + 3\";\n    Solution solution;\n    cout << solution.calculate(s) << endl;\n    return 0;\n}",
            "Expected Answer": 24,
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 253,
            "GT": -199,
            "Query": "8 + 7 * 2 - 9 * 6 * 4 * 1 - 5 =   ",
            "Injected CoT": "7 * 2 = 14\n9 * 6 = 54\n54 * 4 = 216\n216 * 1 = 216\n8 + 14 = 22\n22 - 216 = -193\n-193 - 5 =",
            "Response": " -198",
            "Extract-Response": " -198\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int current = a[i];\n        for (size_t j = i + 1; j < n; ++j) {\n            current *= a[j];\n            result = max(result, current);\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -198,
            "Answer": -198.0,
            "Final Answer": -198.0
        },
        {
            "Index": 254,
            "GT": 76,
            "Query": "7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 =   ",
            "Injected CoT": "7 * 3 = 21\n6 * 6 = 36\n6 * 1 = 6\n21 + 8 = 29\n29 + 36 = 65\n65 + 6 = 71\n71 + 6 =",
            "Response": " 77\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 77",
            "Extract-Response": " 77\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 77",
            "Expected Answer": 77,
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 255,
            "GT": 96,
            "Query": "6 * 4 + 8 - 1 * 8 + 4 * 3 * 6 =   ",
            "Injected CoT": "6 * 4 = 25\n25 + 8 = 32\n1 * 8 = 8\n4 * 3 = 12\n12 * 6 = 72\n32 - 8 = 25\n25 + 72 =",
            "Response": " 97\n\n97",
            "Extract-Response": " 97\n\n*/",
            "Expected Answer": 97,
            "Answer": 97.0,
            "Final Answer": 97.0
        },
        {
            "Index": 258,
            "GT": 176,
            "Query": "6 + 1 + 3 * 7 * 7 + 9 + 8 + 5 =   ",
            "Injected CoT": "3 * 7 = 21\n7 * 21 = 147\n6 + 1 = 7\n147 + 7 = 154\n154 + 9 = 163\n163 + 8 = 170\n170 + 5 =",
            "Response": " 175\n\n3 * 7 * 7 = 147\n7 * 21 = 147\n\n3 * 7 * 7 + 7 * 21 = 294",
            "Extract-Response": " 294\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n#include <cstdio>\n#include <cassert>\n#include <cstdlib>\n#include <ctime>\n#include <cctype>\n#include <queue>\n#include <bitset>\n#include <fstream>\n#include <sstream>\n#include <cstdlib>\n#include <list>\n#include <stdexcept>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef long double LD;\ntypedef vector<int> VI;\ntypedef vector<LL> VLL;\ntypedef vector<double> VD;\ntypedef vector<string> VS;\ntypedef vector<VI> VVI;\ntypedef vector<VLL> VVLL;\ntypedef vector<VD> VVD;\ntypedef vector<VS> VVS;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef pair<double,double> PDD;\n\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#define sz(a) int((a).size())\n#define pb push_back\n#define mp make_pair\n#define all(c) (c).begin(),(c).end()\n#define rep(i,n) for(int(i)=0;(i)<(int)(n);(i)++)\n#define ft first\n#define sc second\n#define x first\n#define y second\n#define itr iterator\n#define len length()\n\ntemplate<class T> inline int chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<class T> inline int chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\n\nconst int inf = 1000000000;\nconst double eps = 1e-9;\nconst double pi = acos(-1.0);\n\nint main()\n{\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n    int n;\n    cin >> n;\n    int a[n];\n    rep(i,n) cin >> a[i];\n    int ans = 0;\n    rep(i,n) rep(j,i) rep(k,j)\n        if(a[i] == a[j] + a[k])\n            ans = max(ans,a[i]);\n    cout << ans;\n    return 0;\n}",
            "Expected Answer": 175,
            "Answer": 294.0,
            "Final Answer": 294.0
        },
        {
            "Index": 259,
            "GT": -78,
            "Query": "8 * 4 + 6 - 5 - 5 * 8 * 3 + 9 =   ",
            "Injected CoT": "8 * 4 = 32\n32 + 6 = 38\n5 * 8 = 40\n40 * 3 = 120\n38 - 5 = 33\n33 - 120 = -86\n-86 + 9 =",
            "Response": " -77",
            "Extract-Response": " -77.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    return eval(''.join(map(str, a)))",
            "Expected Answer": -77,
            "Answer": -77.0,
            "Final Answer": -77.0
        },
        {
            "Index": 260,
            "GT": 1,
            "Query": "4 * 7 - 4 - 3 * 4 - 3 * 4 + 1 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 4 = 24\n3 * 4 = 12\n3 * 4 = 12\n12 + 12 = 24\n24 - 3 = 22\n22 + 1 =",
            "Response": " 23",
            "Extract-Response": "\n\n23",
            "Expected Answer": 23,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 261,
            "GT": 49,
            "Query": "8 + 7 * 2 * 1 + 1 * 5 * 4 + 7 =   ",
            "Injected CoT": "7 * 2 = 14\n14 * 1 = 14\n8 + 14 = 22\n1 * 5 = 5\n5 * 4 = 20\n14 + 20 = 35\n35 + 7 =",
            "Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int minDiff = numeric_limits<int>::max();\n        for (size_t j = 0; j < m; ++j) {\n            minDiff = min(minDiff, abs(a[i] - b[j]));\n        }\n        result += minDiff;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 42 .",
            "Expected Answer": 42,
            "Answer": 42.0,
            "Final Answer": 42.0
        },
        {
            "Index": 262,
            "GT": 36,
            "Query": "8 * 2 - 6 - 3 + 8 + 4 * 5 + 1 =   ",
            "Injected CoT": "8 * 2 = 16\n16 - 6 = 10\n10 - 3 = 7\n7 + 8 = 15\n4 * 5 = 20\n15 + 20 = 35\n35 + 0 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n            for(; i < j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum * num;\n            i--;\n        }\n        else if(input[i] == '/')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n            for(; i < j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum / num;\n            i--;\n        }\n        else\n        {\n            num = 0;\n            for(; i < len; i++)\n            {\n                if(input[i] == ' ')\n                {\n                    break;\n                }\n\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum + sign * num;\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 265,
            "GT": 29,
            "Query": "6 * 6 + 6 + 1 - 9 - 3 - 9 + 7 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n42 + 1 = 43\n43 - 9 = 34\n34 - 3 = 31\n31 - 9 = 21\n21 + 7 =",
            "Response": " 28",
            "Extract-Response": "\n\n28",
            "Expected Answer": 28,
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 266,
            "GT": 153,
            "Query": "3 * 4 * 2 * 8 - 4 * 3 - 3 * 9 =   ",
            "Injected CoT": "3 * 4 = 12\n12 * 2 = 24\n24 * 8 = 192\n4 * 3 = 12\n3 * 9 = 26\n12 - 12 = 0\n192 - 26 =",
            "Response": " 166",
            "Extract-Response": " 166\n</code>\n",
            "Expected Answer": 166,
            "Answer": 166.0,
            "Final Answer": 166.0
        },
        {
            "Index": 267,
            "GT": 85,
            "Query": "1 + 5 + 6 - 3 * 2 + 9 * 8 + 7 =   ",
            "Injected CoT": "1 + 5 = 6\n6 + 6 = 12\n3 * 2 = 6\n9 * 8 = 72\n12 - 6 = 6\n6 + 72 = 77\n77 + 7 =",
            "Response": " 84",
            "Extract-Response": " 84\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define SWAP(a,b) a=a^b;b=a^b;a=a^b;\n\nconst double pi = acos(-1.0);\n\ntemplate <typename T>\nvoid print_vec(vector<T> &v, string name){\n    cout << name << \":\";\n    for (auto it = v.begin(); it != v.end(); it++) {\n        if (it != v.begin()) {\n            cout << \",\";\n        }\n        cout << *it;\n    }\n    cout << endl;\n}\n\ntemplate <typename T>\nvoid print_vec_with_idx(vector<T> &v, string name){\n    cout << name << \":\";\n    for (int i = 0; i < v.size(); i++) {\n        if (i != 0) {\n            cout << \",\";\n        }\n        cout << i << \"->\" << v[i];\n    }\n    cout << endl;\n}\n\nvoid solve(string s) {\n    int n = s.size();\n    int ans = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '+') {\n            ans += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            ans += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            ans += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    ans += curr * sign;\n    cout << ans << endl;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.precision(10);\n\n    int t;\n    cin >> t;\n    for (int i = 1; i <= t; i++) {\n        string s;\n        cin >> s;\n        cout << \"Case #\" << i << \": \";\n        solve(s);\n    }\n\n    return 0;\n}",
            "Expected Answer": 84,
            "Answer": 84.0,
            "Final Answer": 84.0
        },
        {
            "Index": 268,
            "GT": -18,
            "Query": "4 - 9 - 3 * 3 + 4 - 6 + 7 - 9 =   ",
            "Injected CoT": "3 * 3 = 9\n4 - 9 = -5\n-5 - 9 = -14\n-14 + 4 = -10\n-10 - 6 = -16\n-16 + 7 = -10\n-10 - 9 =",
            "Response": " -19",
            "Extract-Response": " -19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -19,
            "Answer": -19.0,
            "Final Answer": -19.0
        },
        {
            "Index": 269,
            "GT": 1144,
            "Query": "4 * 8 * 6 * 6 + 1 - 8 * 1 - 1 =   ",
            "Injected CoT": "4 * 8 = 32\n32 * 6 = 192\n192 * 6 = 1152\n1152 + 2 = 1153\n8 * 2 = 8\n1153 - 8 = 1145\n1145 - 2 =",
            "Response": " 1143\n\n1143\n\n*/",
            "Extract-Response": "\n\n1143",
            "Expected Answer": 1143,
            "Answer": 1143.0,
            "Final Answer": 1143.0
        },
        {
            "Index": 273,
            "GT": -10,
            "Query": "2 - 5 * 8 - 5 + 8 - 5 + 5 * 6 =   ",
            "Injected CoT": "5 * 8 = 40\n2 - 40 = -38\n-38 - 5 = -43\n-43 + 8 = -36\n-36 - 5 = -40\n-40 + 5 = -36\n5 * 6 = 30\n-36 + 30 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpression(a):\n    # Write your code here\n    return sum(a) - sum(a[::2])",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 274,
            "GT": 5,
            "Query": "4 - 1 + 1 + 8 - 5 - 2 * 2 + 2 =   ",
            "Injected CoT": "3 * 3 = 4\n4 - 1 = 3\n3 + 1 = 4\n4 + 8 = 12\n12 - 5 = 7\n7 - 4 = 3\n3 + 3 =",
            "Response": " 6\n6 - 2 = 4\n4 + 2 = 6\n6 = 6",
            "Extract-Response": " 6\n\n*/",
            "Expected Answer": 6,
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 277,
            "GT": -638,
            "Query": "9 + 6 + 4 - 9 - 9 * 3 * 4 * 6 =   ",
            "Injected CoT": "9 + 6 = 15\n15 + 4 = 20\n9 * 3 = 27\n27 * 4 = 108\n108 * 6 = 648\n20 - 648 =",
            "Response": " -628",
            "Extract-Response": " -628\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin(); v!=c.end(); ++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint sign=1;\n\tint num=0;\n\tstack<int> st;\n\twhile(i<n){\n\t\tif(s[i]==' ')\n\t\t\ti++;\n\t\telse if(s[i]=='+'){\n\t\t\tif(num!=0)\n\t\t\t\tst.push(sign*num);\n\t\t\tsign=1;\n\t\t\tnum=0;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tif(num!=0)\n\t\t\t\tst.push(sign*num);\n\t\t\tsign=-1;\n\t\t\tnum=0;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i]=='*'){\n\t\t\tif(num!=0)\n\t\t\t\tst.push(sign*num);\n\t\t\tsign=1;\n\t\t\tnum=0;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i]=='/'){\n\t\t\tif(num!=0)\n\t\t\t\tst.push(sign*num);\n\t\t\tsign=1;\n\t\t\tnum=0;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tnum=num*10+s[i]-'0';\n\t\t\ti++;\n\t\t}\n\t}\n\tif(num!=0)\n\t\tst.push(sign*num);\n\n\tint res=0;\n\twhile(!st.empty()){\n\t\tres+=st.top();\n\t\tst.pop();\n\t}\n\n\tcout<<res<<endl;\n\n\treturn 0;\n}",
            "Expected Answer": -628,
            "Answer": -628.0,
            "Final Answer": -628.0
        },
        {
            "Index": 278,
            "GT": 47627,
            "Query": "3 * 6 * 3 * 6 * 7 * 3 * 7 - 1 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 3 = 54\n54 * 6 = 324\n324 * 7 = 2268\n2268 * 3 = 6804\n6804 * 7 = 47628\n47628 - 0 =",
            "Response": " 47628\n\n*/\n\npublic class LargestProductInASeries {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tString num = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\";\n\t\t\n\t\tint max = 0;\n\t\t\n\t\tfor (int i = 0; i < num.length() - 13; i++) {\n\t\t\t\n\t\t\tint product = 1;\n\t\t\t\n\t\t\tfor (int j = i; j < i + 13; j++) {\n\t\t\t\t\n\t\t\t\tproduct *= num.charAt(j) - '0';\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (product > max) {\n\t\t\t\t\n\t\t\t\tmax = product;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(max);\n\t\t\n\t}\n\t\n}",
            "Extract-Response": "\n\n23514624000",
            "Expected Answer": 47628,
            "Answer": 23514624000.0,
            "Final Answer": 23514624000.0
        },
        {
            "Index": 280,
            "GT": -16,
            "Query": "8 + 7 + 6 + 2 - 3 * 8 - 8 - 7 =   ",
            "Injected CoT": "3 * 8 = 24\n8 + 7 = 15\n15 + 6 = 21\n21 + 2 = 23\n24 - 23 = 1\n1 - 8 = -6\n-6 - 7 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 283,
            "GT": 9,
            "Query": "7 + 7 + 6 - 5 - 4 * 4 + 6 + 4 =   ",
            "Injected CoT": "3 * 3 = 16\n7 + 7 = 14\n14 + 6 = 20\n20 - 5 = 15\n15 - 16 = -1\n-1 + 6 = 5\n5 + 3 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 8,
            "Answer": 8.0,
            "Final Answer": 8.0
        },
        {
            "Index": 285,
            "GT": 10,
            "Query": "4 * 9 - 5 - 7 + 2 * 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 5 = 31\n31 - 7 = 24\n2 * 1 = 2\n24 + 2 = 26\n26 - 8 = 17\n17 - 8 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 9,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 286,
            "GT": 1973,
            "Query": "4 * 9 * 7 * 8 - 8 * 2 - 3 * 9 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 7 = 252\n252 * 8 = 2016\n8 * 2 = 16\n3 * 9 = 27\n2016 - 16 = 2001\n2001 - 27 =",
            "Response": " 1974",
            "Extract-Response": " 1974\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char num[MAX_SIZE];\n    int len, i, j, temp, result;\n\n    while(1){\n        gets(num);\n        if(num[0] == '0')\n            break;\n\n        len = strlen(num);\n        result = 0;\n\n        for(i=0, j=len-1; i<len; i++, j--){\n            temp = num[i] - '0';\n            result += temp * (pow(2, j) - 1);\n        }\n\n        printf(\"%d\\n\", result);\n    }\n\n    return 0;\n}",
            "Expected Answer": 1974,
            "Answer": 1974.0,
            "Final Answer": 1974.0
        },
        {
            "Index": 287,
            "GT": 23,
            "Query": "4 * 7 - 9 + 8 + 9 - 8 - 4 - 1 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 9 = 19\n19 + 8 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 4 = 24\n24 - 2 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 22,
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 288,
            "GT": 537,
            "Query": "7 * 3 * 7 * 4 + 9 - 6 * 9 - 6 =   ",
            "Injected CoT": "7 * 3 = 21\n21 * 7 = 147\n147 * 4 = 588\n588 + 9 = 597\n7 * 9 = 54\n597 - 54 = 543\n543 - 7 =",
            "Response": " 536\n543 - 6 = 537\n536 - 6 = 530",
            "Extract-Response": " 530\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = n;\n\n    while (result > 9) {\n        int sum = 0;\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        result = sum;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 536,
            "Answer": 530.0,
            "Final Answer": 530.0
        },
        {
            "Index": 290,
            "GT": -18,
            "Query": "5 + 7 - 7 * 5 + 6 + 8 - 1 - 8 =   ",
            "Injected CoT": "7 * 5 = 35\n5 + 7 = 12\n12 - 35 = -23\n-23 + 6 = -17\n-17 + 7 = -9\n-9 - 1 = -10\n-10 - 7 =",
            "Response": " -17\n-17 + 8 = -9\n-9 - 8 = -17",
            "Extract-Response": " -17\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -17,
            "Answer": -17.0,
            "Final Answer": -17.0
        },
        {
            "Index": 292,
            "GT": 65,
            "Query": "9 * 6 - 9 + 9 + 1 + 5 - 4 + 9 =   ",
            "Injected CoT": "9 * 6 = 54\n54 - 9 = 45\n45 + 9 = 54\n54 + 1 = 55\n55 + 5 = 60\n60 - 4 = 55\n55 + 9 =",
            "Response": " 64",
            "Extract-Response": "\n64\n\n*/",
            "Expected Answer": 64,
            "Answer": 64.0,
            "Final Answer": 64.0
        },
        {
            "Index": 293,
            "GT": 32,
            "Query": "5 + 5 + 2 - 4 + 8 + 9 + 4 + 3 =   ",
            "Injected CoT": "5 + 5 = 10\n10 + 2 = 12\n12 - 4 = 8\n8 + 8 = 16\n16 + 9 = 25\n25 + 4 = 28\n28 + 3 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\n\nThe range of n is [1, 10000].\nThe range of ai is [0, 100].\nThe range of a number in the sorted array is [a number - 1, a number + 1].\n\n*/\n\nclass Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        int sum = 0;\n        sort(nums.begin(), nums.end());\n        for(int i = 0; i < nums.size(); i += 2) {\n            sum += nums[i];\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 31,
            "Answer": 31.0,
            "Final Answer": 31.0
        },
        {
            "Index": 294,
            "GT": -26,
            "Query": "3 - 5 * 6 - 9 - 3 + 2 + 7 + 4 =   ",
            "Injected CoT": "-5 * 6 = -30\n3 - (-30) = 33\n33 - 9 = 24\n24 - 3 = 21\n21 + 2 = 23\n23 + 7 = 31\n31 + 4 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 295,
            "GT": 21,
            "Query": "2 - 9 + 3 - 9 + 8 * 4 + 8 - 6 =   ",
            "Injected CoT": "8 * 4 = 32\n-9 + 3 = -6\n-6 - 9 = -15\n-15 + 2 = -13\n-13 + 32 = 19\n19 + 8 = 27\n27 - 5 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 22,
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 297,
            "GT": 33,
            "Query": "9 + 9 + 3 + 5 + 8 * 1 + 1 - 2 =   ",
            "Injected CoT": "8 * 1 = 8\n9 + 9 = 18\n18 + 3 = 21\n21 + 5 = 26\n26 + 8 = 34\n34 + 1 = 36\n36 - 2 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else if(s[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Expected Answer": 34,
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 298,
            "GT": 73,
            "Query": "8 + 4 * 6 - 1 + 7 * 6 - 7 + 7 =   ",
            "Injected CoT": "4 * 6 = 24\n8 + 24 = 32\n7 * 6 = 42\n1 - 7 = -6\n42 + (-6) = 36\n36 + 7 = 42\n32 + 42 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, len, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        len = strlen(s);\n        sum = 0;\n        for(j = 0; j < len; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum + s[j] - '0';\n            }\n        }\n        for(k = j + 1; k < len; k++)\n        {\n            if(s[k] == ' ')\n                continue;\n            else if(s[k] == '+')\n                continue;\n            else if(s[k] == '=')\n                break;\n            else\n            {\n                sum = sum - s[k] + '0';\n            }\n        }\n        for(l = k + 1; l < len; l++)\n        {\n            if(s[l] == ' ')\n                continue;\n            else if(s[l] == '+')\n                continue;\n            else if(s[l] == '=')\n                break;\n            else\n            {\n                sum = sum + s[l] - '0';\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Expected Answer": 74,
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 300,
            "GT": 1113,
            "Query": "6 + 6 * 6 - 9 + 4 * 9 * 5 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n4 * 9 = 36\n36 * 5 = 180\n180 * 6 = 1080\n1080 + 42 = 1123\n1123 - 9 =",
            "Response": " 1114\n1114 + 4 = 1118",
            "Extract-Response": " 1118\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = n;\n\n    while (result >= 10) {\n        int sum = 0;\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        result = sum;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 1114,
            "Answer": 1118.0,
            "Final Answer": 1118.0
        },
        {
            "Index": 302,
            "GT": 39,
            "Query": "5 * 9 - 1 + 1 * 3 + 4 - 3 * 4 =   ",
            "Injected CoT": "5 * 9 = 45\n45 - 1 = 44\n1 * 3 = 3\n44 + 3 = 48\n4 - 3 = 1\n3 * 4 = 12\n48 - 12 =",
            "Response": " 36",
            "Extract-Response": "\n36\n",
            "Expected Answer": 36,
            "Answer": 36.0,
            "Final Answer": 36.0
        },
        {
            "Index": 303,
            "GT": 116,
            "Query": "2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 6 = 120\n2 + 120 = 122\n122 * 1 = 122\n122 + 8 = 131\n131 - 6 = 125\n125 - 8 =",
            "Response": " 117\n\n2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 =    \n4 * 5 = 20\n20 * 6 = 120\n2 + 120 = 122\n122 * 1 = 122\n122 + 8 = 131\n131 - 6 = 125\n125 - 8 = 117",
            "Extract-Response": " 117",
            "Expected Answer": 117,
            "Answer": 117.0,
            "Final Answer": 117.0
        },
        {
            "Index": 304,
            "GT": -67,
            "Query": "6 - 1 + 1 - 7 + 1 - 8 * 8 - 3 =   ",
            "Injected CoT": "8 * 8 = 64\n-1 = -1\n1 = 1\n-7 = -7\n1 = 1\n-8 * 64 = -512\n-3 = -3\n7 + (-1) + 1 + (-7) + 1 + (-512) + (-3) =",
            "Response": " -515",
            "Extract-Response": " -515\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0, mul = 1;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n        else if(str[i] == '+')\n        {\n            sum += mul;\n            mul = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sum += mul;\n            mul = -1;\n        }\n        else if(str[i] == '*')\n        {\n            mul *= num;\n        }\n        else\n        {\n            num = str[i] - '0';\n            mul *= num;\n        }\n    }\n    sum += mul;\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}",
            "Expected Answer": -514,
            "Answer": -515.0,
            "Final Answer": -515.0
        },
        {
            "Index": 305,
            "GT": -63,
            "Query": "9 - 9 - 7 * 6 * 2 + 4 * 4 + 5 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 2 = 84\n9 - 9 = 0\n84 - 0 = 84\n4 * 4 = 16\n84 + 16 = 100\n100 + 4 =",
            "Response": " 104\n104 + 5 = 109",
            "Extract-Response": " 109\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        result += s[i] - '0';\n    }\n    while (result >= 10) {\n        int tmp = result;\n        result = 0;\n        while (tmp > 0) {\n            result += tmp % 10;\n            tmp /= 10;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 104,
            "Answer": 109.0,
            "Final Answer": 109.0
        },
        {
            "Index": 306,
            "GT": 20,
            "Query": "9 * 4 - 8 + 1 - 6 - 8 + 1 + 4 =   ",
            "Injected CoT": "9 * 3 = 36\n36 - 8 = 28\n28 + 1 = 29\n29 - 6 = 23\n23 - 8 = 15\n15 + 1 = 16\n16 + 3 =",
            "Response": " 19\n19 - 8 = 11\n11 + 1 = 12\n12 - 6 = 6\n6 - 8 = -2\n-2 + 1 = -1\n-1 + 4 = 3\n3 - 8 = -5\n-5 + 1 = -4\n-4 - 6 = -10\n-10 + 1 = -9\n-9 + 4 = -5\n-5 - 8 = -13\n-13 + 1 = -12\n-12 - 6 = -18\n-18 + 1 = -17\n-17 + 4 = -13\n-13 - 8 = -21\n-21 + 1 = -20\n-20 - 6 = -26\n-26 + 1 = -25\n-25 + 4 = -21\n-21 - 8 = -29\n-29 + 1 = -28\n-28 - 6 = -34\n-34 + 1 = -33\n-33 + 4 = -29\n-29 - 8 = -37\n-37 + 1 = -36\n-36 - 6 = -42\n-42 + 1 = -41\n-41 + 4 = -37\n-37 - 8 = -45\n-45 + 1 = -44\n-44 - 6 = -50\n-50 + 1 = -49\n-49 + 4 = -45\n-45 - 8 = -53\n-53 + 1 = -52\n-52 - 6 = -58\n-58 + 1 = -57\n-57 + 4 = -53\n-53 - 8 = -61\n-61 + 1 = -60\n-60 - 6 = -66\n-66 + 1 = -65\n-65 + 4 = -61\n-61 - 8 = -69\n-69 + 1 = -68\n-68 - 6 = -74\n-74 + 1 = -73\n-73 + 4 = -69\n-69 - 8 = -77\n-77 + 1 = -76\n-76 - 6 = -82\n-82 + 1 = -81\n-81 + 4 = -77\n-77 - 8 = -85\n-85 + 1 = -84\n-84 - 6 = -90\n-90 + 1 = -89\n-89 + 4 = -85\n-85 - 8 = -93\n-93 + 1 = -92\n-92 - 6 = -98\n-98 + 1 = -97\n-97 + 4 = -93\n-93 - 8 = -101\n-101 + 1 = -100\n-100 - 6 = -106\n-106 + 1 = -105\n-105 + 4 = -101\n-101 - 8 = -109\n-109 + 1 = -108\n-108 - 6 = -114\n-114 + 1 = -113\n-113 + 4 = -109\n-109 - 8 = -117\n-117 + 1 = -116\n-116 - 6 = -122\n-122 + 1 = -121\n-121 + 4 = -117\n-117 - 8 = -125\n-125 + 1 = -124\n-124 - 6 = -130\n-130 + 1 = -129\n-129 + 4 = -125\n-125 - 8 = -133\n-133 + 1 = -132\n-132 - 6 = -138\n-138 + 1 = -137\n-137 + 4 = -133\n-133 - 8 = -141\n-141 + 1 = -140\n-140 - 6 = -146\n-146 + 1 = -145\n-145 + 4 = -141\n-141 - 8 = -149\n-149 + 1 = -148\n-148 - 6 = -154\n-154 + 1 = -153\n-153 + 4 = -149\n-149 - 8 = -157\n-157 + 1 = -156\n-156 - 6 = -162\n-162 + 1 = -161\n-161 + 4 = -157\n-157 - 8 = -165\n-165 + 1 = -164\n-164 - 6 = -170\n-170 + 1 = -169\n-169 + 4 = -165\n-165 - 8 = -173\n-173 + 1 = -172\n-172 - 6 = -178\n-178 + 1 = -177\n-177 + 4 = -173\n-173 - 8 = -181\n-181 + 1 = -180\n-180 - 6 = -186\n-186 + 1 = -185\n-185 + 4 = -181\n-181 - 8 = -189\n-189 + 1 = -188\n-188 - 6 = -194\n-194 + 1 = -193\n-193 + 4 = -189\n-189 - 8 = -197\n-197 + 1 = -196\n-196 - 6 = -202\n-202 + 1 = -201\n-201 + 4 = -197\n-197 - 8 = -205\n-205 + 1 = -204\n-204 - 6 = -210\n-210 + 1 = -209\n-209 + 4 = -205\n-205 - 8 = -213\n-213 + 1 = -212\n-212 - 6 = -218\n-218 + 1 = -217\n-217 + 4 = -213\n-213 - 8 = -221\n-221 + 1 = -220\n-220 - 6 = -226\n-226 + 1 = -225\n-225 + 4 = -221\n-221 - 8 = -229\n-229 + 1 = -228\n-228 - 6 = -234\n-234 + 1 = -233\n-233 + 4 = -229\n-229 - 8 = -237\n-237 + 1 = -236\n-236 - 6 = -242\n-242 + 1 = -241\n-241 + 4 = -237\n-237 - 8 = -245\n-245 + 1 = -244\n-244 - 6 = -250\n-250 + 1 = -249\n-249 + 4 = -245\n-245 - 8 = -253\n-253 + 1 = -252\n-252 - 6 = -258\n-258 + 1 = -257\n-257 + 4 = -253\n-253 - 8 = -261\n-261 + 1 = -260\n-260 - 6 = -266\n-266 + 1 = -265\n-265 + 4 = -261\n-261 - 8 = -269\n-269 + 1 = -268\n-268 - 6 = -274\n-274 + 1 = -273\n-273 + 4 = -269\n-269 - 8 = -277\n-277 + 1 = -276\n-276 - 6 = -282\n-282 + 1 = -281\n-281 + 4 = -277\n-277 - 8 = -285\n-285 + 1 = -284\n-284 - 6 = -290\n-290 + 1 = -289\n-289 + 4 = -285\n-285 - 8 = -293\n-293 + 1 = -292\n-292 - 6 = -298\n-298 + 1 = -297\n-297 + 4 = -293\n-293 - 8 = -301\n-301 + 1 = -300\n-300 - 6 = -306\n-306 + 1 = -305\n-305 + 4 = -301\n-301 - 8 = -309\n-309 + 1 = -308\n-308 - 6 = -314\n-314 + 1 = -313\n-313 + 4 = -309\n-309 - 8 = -317\n-317 + 1 = -316\n-316 - 6 = -322\n-322 + 1 = -321\n-321 + 4 = -317\n-317 - 8 = -325\n-325 + 1 = -324\n-324 - 6 = -330\n-330 + 1 = -329\n-329 + 4 = -325\n-325 - 8 = -333\n-333 + 1 = -332\n-332 - 6 = -338\n-338 + 1 = -337\n-337 + 4 = -333\n-333 - 8 = -341\n-341 + 1 = -340\n-340 - 6 = -346\n-346 + 1 = -345\n-345 + 4 = -341\n-341 - 8 = -349\n-349 + 1 = -348\n-348 - 6 = -354\n-354 + 1 = -353\n-353 + 4 = -349\n-349 - 8 = -357\n-357 + 1 = -356\n-356 - 6 = -362\n-362 + 1 = -361\n-361 + 4 = -357\n-357 - 8 = -365\n-365 + 1 = -364\n-364 - 6 = -370\n-370 + 1 = -369\n-369 + 4 = -365\n-365 - 8 = -373\n-373 + 1 = -372\n-372 - 6 = -378\n-378 + 1 = -377\n-377 + 4 = -373\n-373 - 8 = -381\n-381 + 1 = -380\n-380 - 6 = -386\n-386 + 1 = -385\n-385 + 4 = -381\n-381 - 8 = -389\n-389 + 1 = -388\n-388 - 6 = -394\n-394 + 1 = -393\n-393 + 4 = -389",
            "Extract-Response": " -394\n",
            "Expected Answer": 19,
            "Answer": -394.0,
            "Final Answer": -394.0
        },
        {
            "Index": 307,
            "GT": 34,
            "Query": "6 * 9 - 4 + 9 + 7 - 2 * 2 * 8 =   ",
            "Injected CoT": "6 * 9 = 54\n2 * 2 = 4\n4 * 8 = 32\n54 - 4 = 50\n50 + 9 = 59\n59 + 7 = 65\n65 - 32 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            currentNumber *= sign * operation;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '/') {\n            currentNumber *= sign * operation;\n            sign = 1;\n            operation = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 33,
            "Answer": 33.0,
            "Final Answer": 33.0
        },
        {
            "Index": 309,
            "GT": -16,
            "Query": "2 - 2 * 4 - 8 - 4 + 3 + 8 - 9 =   ",
            "Injected CoT": "2 * 4 = 8\n2 - 8 = -6\n-6 - 4 = -10\n-10 + 3 = -7\n-7 + 8 = 1\n1 - 10 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i + 1 < len(nums):\n                right -= nums[i + 1]\n        return -1",
            "Expected Answer": -9,
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 311,
            "GT": 46,
            "Query": "9 + 4 + 3 * 1 + 8 + 9 + 9 + 4 =   ",
            "Injected CoT": "3 * 1 = 3\n9 + 5 = 13\n13 + 3 = 16\n16 + 8 = 24\n24 + 9 = 33\n33 + 9 = 42\n42 + 5 =",
            "Response": " 47\n47 + 4 = 51\n\n51 is the checksum, which is the right most digit of the resulting sum.\n\n*/\n\n// The following is the definition of the node class.\n// This class is used to construct the tree. Do not modify.\nclass Node {\n  constructor(data, left = null, right = null) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n  }\n}\n\n// The following is the definition of the tree class.\n// Modify this class to implement the methods required.\nclass Tree {\n  constructor(root = null) {\n    this.root = root;\n  }\n\n  // TODO: Implement the insert method.\n  insert(data) {\n    if (this.root === null) {\n      this.root = new Node(data);\n      return;\n    }\n\n    let current = this.root;\n    let parent;\n\n    while (true) {\n      parent = current;\n\n      if (data < current.data) {\n        current = current.left;\n\n        if (current === null) {\n          parent.left = new Node(data);\n          return;\n        }\n      } else {\n        current = current.right;\n\n        if (current === null) {\n          parent.right = new Node(data);\n          return;\n        }\n      }\n    }\n  }\n\n  // TODO: Implement the get method.\n  get(data) {\n    let current = this.root;\n\n    while (current.data !== data) {\n      if (data < current.data) {\n        current = current.left;\n      } else {\n        current = current.right;\n      }\n\n      if (current === null) {\n        return null;\n      }\n    }\n\n    return current;\n  }\n\n  // TODO: Implement the getMax method.\n  getMax() {\n    let current = this.root;\n\n    while (current.right !== null) {\n      current = current.right;\n    }\n\n    return current.data;\n  }\n\n  // TODO: Implement the getMin method.\n  getMin() {\n    let current = this.root;\n\n    while (current.left !== null) {\n      current = current.left;\n    }\n\n    return current.data;\n  }\n\n  // TODO: Implement the getMaxDepth method.\n  getMaxDepth() {\n    if (this.root === null) {\n      return 0;\n    }\n\n    return this.getMaxDepthHelper(this.root);\n  }\n\n  getMaxDepthHelper(node) {\n    if (node === null) {\n      return 0;\n    }\n\n    let left = this.getMaxDepthHelper(node.left);\n    let right = this.getMaxDepthHelper(node.right);\n\n    return Math.max(left, right) + 1;\n  }\n\n  // TODO: Implement the getMinDepth method.\n  getMinDepth() {\n    if (this.root === null) {\n      return 0;\n    }\n\n    return this.getMinDepthHelper(this.root);\n  }\n\n  getMinDepthHelper(node) {\n    if (node === null) {\n      return 0;\n    }\n\n    let left = this.getMinDepthHelper(node.left);\n    let right = this.getMinDepthHelper(node.right);\n\n    return Math.min(left, right) + 1;\n  }\n\n  // TODO: Implement the getChecksum method.\n  getChecksum() {\n    if (this.root === null) {\n      return 0;\n    }\n\n    return this.getChecksumHelper(this.root, 0);\n  }\n\n  getChecksumHelper(node, level) {\n    if (node === null) {\n      return 0;\n    }\n\n    let left = this.getChecksumHelper(node.left, level + 1);\n    let right = this.getChecksumHelper(node.right, level + 1);\n\n    return left + right + node.data * level;\n  }\n}\n\n// The following is code to test the above implementation. Do not modify.\n\nconst tree = new Tree();\ntree.insert(10);\ntree.insert(5);\ntree.insert(15);\ntree.insert(3);\ntree.insert(7);\ntree.insert(13);\ntree.insert(17);\ntree.insert(1);\ntree.insert(9);\ntree.insert(11);\ntree.insert(14);\ntree.insert(16);\ntree.insert(18);\ntree.insert(19);\ntree.insert(4);\ntree.insert(6);\ntree.insert(8);\ntree.insert(12);\ntree.insert(2);\n\nconsole.log(tree.getMax()); // should print 19\nconsole.log(tree.getMin()); // should print 1\nconsole.log(tree.getMaxDepth()); // should print 5\nconsole.log(tree.getMinDepth()); // should print 3\nconsole.log(tree.getChecksum()); // should print 51",
            "Extract-Response": "\n\n51",
            "Expected Answer": 47,
            "Answer": 51.0,
            "Final Answer": 51.0
        },
        {
            "Index": 312,
            "GT": -14,
            "Query": "2 - 8 - 2 - 7 + 2 + 5 - 2 - 4 =   ",
            "Injected CoT": "-8 - 2 = -10\n-10 - 7 = -17\n-17 + 2 = -15\n-15 + 5 = -10\n-10 - 2 = -11\n-11 - 4 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = nums[0];\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -15,
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 313,
            "GT": 104,
            "Query": "8 * 2 * 3 * 3 + 7 + 9 - 7 * 8 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 3 = 48\n48 * 3 = 144\n7 + 9 = 16\n7 * 8 = 56\n144 - 56 = 87\n16 + 87 =",
            "Response": " 103",
            "Extract-Response": " 103\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    result = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": 103,
            "Answer": 103.0,
            "Final Answer": 103.0
        },
        {
            "Index": 315,
            "GT": 269,
            "Query": "9 - 3 + 5 * 7 * 9 - 7 * 8 + 4 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 9 = 315\n7 * 8 = 56\n315 - 56 = 259\n9 - 3 = 6\n259 + 6 = 265\n265 + 5 =",
            "Response": " 270",
            "Extract-Response": "\n\n270",
            "Expected Answer": 270,
            "Answer": 270.0,
            "Final Answer": 270.0
        },
        {
            "Index": 316,
            "GT": 39,
            "Query": "1 + 8 * 5 * 1 + 9 + 5 - 8 - 8 =   ",
            "Injected CoT": "8 * 5 = 40\n1 + 40 = 41\n41 * 1 = 41\n41 + 9 = 50\n50 + 5 = 55\n55 - 8 = 48\n48 - 8 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == '+' || str[i] == '-')\n        {\n            num = 0;\n            for(j = i - 1; j >= 0; j--)\n            {\n                if(str[j] >= '0' && str[j] <= '9')\n                {\n                    num += (str[j] - '0') * pow(10, i - 1 - j);\n                }\n                else\n                {\n                    break;\n                }\n            }\n            if(str[i - 1] == '-')\n            {\n                num = -num;\n            }\n            sum += num;\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 317,
            "GT": -43,
            "Query": "4 - 2 * 1 - 4 - 7 - 7 * 4 - 6 =   ",
            "Injected CoT": "2 * 1 = 2\n4 - 2 = 2\n7 * 4 = 28\n2 - 4 = -2\n-2 - 7 = -9\n-9 - 28 = -38\n-38 - 6 =",
            "Response": " -44",
            "Extract-Response": " -44.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Expected Answer": -44,
            "Answer": -44.0,
            "Final Answer": -44.0
        },
        {
            "Index": 318,
            "GT": 649,
            "Query": "3 + 8 - 2 * 1 + 8 * 4 * 5 * 4 =   ",
            "Injected CoT": "2 * 1 = 2\n8 * 4 = 32\n32 * 5 = 160\n160 * 4 = 640\n3 + 8 = 11\n11 - 2 = 8\n8 + 640 =",
            "Response": " 648",
            "Extract-Response": " 648\n</code>\n",
            "Expected Answer": 648,
            "Answer": 648.0,
            "Final Answer": 648.0
        },
        {
            "Index": 320,
            "GT": -32,
            "Query": "8 - 8 + 3 - 3 - 7 - 1 - 6 * 4 =   ",
            "Injected CoT": "6 * 4 = 25\n8 - 8 = 0\n0 + 3 = 3\n3 - 3 = 0\n0 - 7 = -7\n-7 - 1 = -8\n-8 - 25 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + c - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -33,
            "Answer": -33.0,
            "Final Answer": -33.0
        },
        {
            "Index": 321,
            "GT": -79,
            "Query": "2 * 7 - 5 - 9 * 9 + 4 - 3 - 8 =   ",
            "Injected CoT": "2 * 7 = 14\n9 * 9 = 81\n14 - 5 = 9\n81 - 9 = 72\n72 + 4 = 76\n76 - 3 = 72\n72 - 8 =",
            "Response": " 64",
            "Extract-Response": "\n\n64",
            "Expected Answer": 64,
            "Answer": 64.0,
            "Final Answer": 64.0
        },
        {
            "Index": 324,
            "GT": 15,
            "Query": "7 * 1 * 3 - 6 + 3 + 2 - 9 + 4 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 3 = 21\n21 - 6 = 15\n15 + 3 = 18\n18 + 2 = 20\n20 - 9 = 11\n11 + 3 =",
            "Response": " 14\n14 + 4 = 18",
            "Extract-Response": " 18\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        sum += a;\n    }\n    cout << sum << endl;\n\n    return 0;\n}",
            "Expected Answer": 14,
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 325,
            "GT": -226,
            "Query": "1 + 7 + 5 - 3 - 6 * 8 * 5 + 4 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 5 = 240\n1 + 7 = 8\n8 + 5 = 13\n13 - 3 = 10\n10 - 240 = -229\n-229 + 4 =",
            "Response": " -225",
            "Extract-Response": " -225.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24",
            "Expected Answer": -225,
            "Answer": -225.0,
            "Final Answer": -225.0
        },
        {
            "Index": 326,
            "GT": 2,
            "Query": "3 - 8 - 2 * 3 + 8 * 6 - 7 * 5 =   ",
            "Injected CoT": "-2 * 3 = -6\n8 * 6 = 48\n7 * 5 = 35\n-6 - 5 = -11\n-11 + 48 = 38\n3 - 8 = -5\n-5 - 2 = -7\n-7 + 38 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\n\nYou may assume that the expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        return res + sign * cur;\n    }\n};",
            "Expected Answer": 31,
            "Answer": 31.0,
            "Final Answer": 31.0
        },
        {
            "Index": 328,
            "GT": -18,
            "Query": "1 + 4 + 7 - 9 * 3 - 4 + 7 - 6 =   ",
            "Injected CoT": "-9 * 3 = -27\n1 + 5 + 7 - 27 - 5 + 7 - 6 =",
            "Response": "\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 + 7 - 27 - 5 + 7 - 6 =\n1 + 5 +",
            "Extract-Response": "\n1 + 5 + 7 - 27 - 5 + 7 - 6 = -3",
            "Expected Answer": -18,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 330,
            "GT": 80,
            "Query": "9 * 9 - 5 + 6 * 5 - 6 - 4 * 5 =   ",
            "Injected CoT": "9 * 9 = 81\n81 - 5 = 75\n6 * 5 = 30\n30 - 6 = 24\n4 * 5 = 20\n24 - 20 = 4\n75 + 4 =",
            "Response": " 79",
            "Extract-Response": " 79\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 79,
            "Answer": 79.0,
            "Final Answer": 79.0
        },
        {
            "Index": 331,
            "GT": 133,
            "Query": "7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 4 = 140\n1 * 7 = 7\n7 * 4 = 28\n140 - 28 = 112\n3 * 7 = 22\n112 + 22 =",
            "Response": " 134\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 = 134",
            "Extract-Response": " 134\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 = 134\nThe answer is 134",
            "Expected Answer": 134,
            "Answer": 134.0,
            "Final Answer": 134.0
        },
        {
            "Index": 332,
            "GT": 3,
            "Query": "7 * 1 - 6 - 6 + 9 - 1 - 8 + 8 =   ",
            "Injected CoT": "7 * 1 = 7\n7 - 6 = 1\n1 - 6 = -4\n-4 + 9 = 4\n4 - 1 = 3\n3 - 8 = -4\n-4 + 8 =",
            "Response": " 4\n4 + 4 = 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        result += s[i] - '0';\n    }\n\n    while (result >= 10) {\n        int newResult = 0;\n        while (result > 0) {\n            newResult += result % 10;\n            result /= 10;\n        }\n        result = newResult;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 4,
            "Answer": 8.0,
            "Final Answer": 8.0
        },
        {
            "Index": 334,
            "GT": 48,
            "Query": "8 + 8 * 4 + 5 - 5 + 7 - 3 + 4 =   ",
            "Injected CoT": "8 * 4 = 32\n32 + 8 = 40\n40 + 5 = 45\n45 - 5 = 40\n40 + 7 = 47\n47 - 3 = 45\n45 + 4 =",
            "Response": " 49",
            "Extract-Response": " 49\n</code>\n",
            "Expected Answer": 49,
            "Answer": 49.0,
            "Final Answer": 49.0
        },
        {
            "Index": 336,
            "GT": 10,
            "Query": "4 * 4 + 2 - 2 - 5 - 2 + 8 - 7 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 2 = 18\n18 - 2 = 16\n16 - 5 = 11\n11 - 2 = 9\n9 + 8 = 17\n17 - 8 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 9,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 341,
            "GT": 58,
            "Query": "4 * 2 - 3 * 4 + 6 * 5 * 2 + 2 =   ",
            "Injected CoT": "4 * 2 = 8\n3 * 4 = 12\n6 * 5 = 30\n30 * 2 = 60\n8 - 12 = -4\n-4 + 60 = 55\n55 + 2 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\n\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed.\nYou may assume that the regular expression does not have white spaces.\nYou may assume that the given expression is always valid. All integers in the expression are non-negative. No extra space is allowed in the answer. Don't forget to remove all redundant whitespaces. See more about regular expression here.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for (int i = 0; i < n; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(ans);\n                st.push(sign);\n                ans = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                ans += sign * cur;\n                cur = 0;\n                ans *= st.top();\n                st.pop();\n                ans += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        ans += sign * cur;\n        return ans;\n    }\n};",
            "Expected Answer": 57,
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 342,
            "GT": 164,
            "Query": "6 * 9 * 3 - 4 - 9 + 5 * 4 - 5 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 3 = 162\n162 - 4 = 158\n158 - 9 = 149\n5 * 4 = 20\n149 + 20 = 168\n168 - 5 =",
            "Response": " 163",
            "Extract-Response": " 163\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 163,
            "Answer": 163.0,
            "Final Answer": 163.0
        },
        {
            "Index": 343,
            "GT": 503,
            "Query": "3 - 9 + 2 + 4 + 8 * 9 * 7 - 1 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 7 = 505\n3 - 9 = -6\n-6 + 2 = -4\n-4 + 4 = 0\n0 + 505 = 505\n505 - 1 =",
            "Response": " 504",
            "Extract-Response": " 504\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin();v!=c.end();++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint j=n-1;\n\tint sum=0;\n\tint sign=1;\n\twhile(i<n){\n\t\tif(s[i]=='+' || s[i]=='-'){\n\t\t\tif(s[i]=='-')\n\t\t\t\tsign=-1;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i]=='*' || s[i]=='/'){\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]!='+' && s[i]!='-' && s[i]!='*' && s[i]!='/'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(s[j]=='*')\n\t\t\t\tsum=sum*num;\n\t\t\telse\n\t\t\t\tsum=sum/num;\n\t\t\tj--;\n\t\t}\n\t\telse{\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]!='+' && s[i]!='-' && s[i]!='*' && s[i]!='/'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tsum+=sign*num;\n\t\t\tsign=1;\n\t\t}\n\t}\n\tcout<<sum<<endl;\n\treturn 0;\n}",
            "Expected Answer": 504,
            "Answer": 504.0,
            "Final Answer": 504.0
        },
        {
            "Index": 344,
            "GT": 43,
            "Query": "9 + 9 * 3 + 9 + 3 + 4 - 1 * 9 =   ",
            "Injected CoT": "10 * 3 = 27\n10 + 27 = 36\n36 + 10 = 45\n45 + 3 = 48\n48 + 4 = 52\n1 * 10 = 10\n52 - 10 =",
            "Response": " 42\n\n42\n\n*/",
            "Extract-Response": "\n\n42",
            "Expected Answer": 42,
            "Answer": 42.0,
            "Final Answer": 42.0
        },
        {
            "Index": 348,
            "GT": -20,
            "Query": "2 + 8 - 3 * 4 - 7 - 7 - 4 * 1 =   ",
            "Injected CoT": "3 * 3 = 12\n3 * 1 = 3\n2 + 8 = 10\n10 - 12 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 - 3 =",
            "Response": " -19\n-19 - 4 = -23\n-23 - 1 = -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d;\n    cin >> n >> a >> b >> c >> d;\n    int min1 = a - b;\n    int min2 = a + b;\n    int min3 = c - d;\n    int min4 = c + d;\n    int min5 = a - c;\n    int min6 = a + c;\n    int min7 = b - d;\n    int min8 = b + d;\n    int min9 = a - d;\n    int min10 = a + d;\n    int min11 = b - c;\n    int min12 = b + c;\n\n    int min13 = a - b - c;\n    int min14 = a - b + c;\n    int min15 = a + b - c;\n    int min16 = a + b + c;\n\n    int min17 = a - b - d;\n    int min18 = a - b + d;\n    int min19 = a + b - d;\n    int min20 = a + b + d;\n\n    int min21 = a - c - d;\n    int min22 = a - c + d;\n    int min23 = a + c - d;\n    int min24 = a + c + d;\n\n    int min25 = b - c - d;\n    int min26 = b - c + d;\n    int min27 = b + c - d;\n    int min28 = b + c + d;\n\n    int min29 = a - b - c - d;\n    int min30 = a - b - c + d;\n    int min31 = a - b + c - d;\n    int min32 = a - b + c + d;\n    int min33 = a + b - c - d;\n    int min34 = a + b - c + d;\n    int min35 = a + b + c - d;\n    int min36 = a + b + c + d;\n\n    int min37 = a - b - c - d;\n    int min38 = a - b - c + d;\n    int min39 = a - b + c - d;\n    int min40 = a - b + c + d;\n    int min41 = a + b - c - d;\n    int min42 = a + b - c + d;\n    int min43 = a + b + c - d;\n    int min44 = a + b + c + d;\n\n    int min45 = a - b - c - d;\n    int min46 = a - b - c + d;\n    int min47 = a - b + c - d;\n    int min48 = a - b + c + d;\n    int min49 = a + b - c - d;\n    int min50 = a + b - c + d;\n    int min51 = a + b + c - d;\n    int min52 = a + b + c + d;\n\n    int min53 = a - b - c - d;\n    int min54 = a - b - c + d;\n    int min55 = a - b + c - d;\n    int min56 = a - b + c + d;\n    int min57 = a + b - c - d;\n    int min58 = a + b - c + d;\n    int min59 = a + b + c - d;\n    int min60 = a + b + c + d;\n\n    int min61 = a - b - c - d;\n    int min62 = a - b - c + d;\n    int min63 = a - b + c - d;\n    int min64 = a - b + c + d;\n    int min65 = a + b - c - d;\n    int min66 = a + b - c + d;\n    int min67 = a + b + c - d;\n    int min68 = a + b + c + d;\n\n    int min69 = a - b - c - d;\n    int min70 = a - b - c + d;\n    int min71 = a - b + c - d;\n    int min72 = a - b + c + d;\n    int min73 = a + b - c - d;\n    int min74 = a + b - c + d;\n    int min75 = a + b + c - d;\n    int min76 = a + b + c + d;\n\n    int min77 = a - b - c - d;\n    int min78 = a - b - c + d;\n    int min79 = a - b + c - d;\n    int min80 = a - b + c + d;\n    int min81 = a + b - c - d;\n    int min82 = a + b - c + d;\n    int min83 = a + b + c - d;\n    int min84 = a + b + c + d;\n\n    int min85 = a - b - c - d;\n    int min86 = a - b - c + d;\n    int min87 = a - b + c - d;\n    int min88 = a - b + c + d;\n    int min89 = a + b - c - d;\n    int min90 = a + b - c + d;\n    int min91 = a + b + c - d;\n    int min92 = a + b + c + d;\n\n    int min93 = a - b - c - d;\n    int min94 = a - b - c + d;\n    int min95 = a - b + c - d;\n    int min96 = a - b + c + d;\n    int min97 = a + b - c - d;\n    int min98 = a + b - c + d;\n    int min99 = a + b + c - d;\n    int min100 = a + b + c + d;\n\n    int min101 = a - b - c - d;\n    int min102 = a - b - c + d;\n    int min103 = a - b + c - d;\n    int min104 = a - b + c + d;\n    int min105 = a + b - c - d;\n    int min106 = a + b - c + d;\n    int min107 = a + b + c - d;\n    int min108 = a + b + c + d;\n\n    int min109 = a - b - c - d;\n    int min110 = a - b - c + d;\n    int min111 = a - b + c - d;\n    int min112 = a - b + c + d;\n    int min113 = a + b - c - d;\n    int min114 = a + b - c + d;\n    int min115 = a + b + c - d;\n    int min116 = a + b + c + d;\n\n    int min117 = a - b - c - d;\n    int min118 = a - b - c + d;\n    int min119 = a - b + c - d;\n    int min120 = a - b + c + d;\n    int min121 = a + b - c - d;\n    int min122 = a + b - c + d;\n    int min123 = a + b + c - d;\n    int min124 = a + b + c + d;\n\n    int min125 = a - b - c - d;\n    int min126 = a - b - c + d;\n    int min127 = a - b + c - d;\n    int min128 = a - b + c + d;\n    int min129 = a + b - c - d;\n    int min130 = a + b - c + d;\n    int min131 = a + b + c - d;\n    int min132 = a + b + c + d;\n\n    int min133 = a - b - c - d;\n    int min134 = a - b - c + d;\n    int min135 = a - b + c - d;\n    int min136 = a",
            "Expected Answer": -19,
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 349,
            "GT": -75,
            "Query": "9 - 9 * 7 - 9 * 1 - 6 - 4 - 2 =   ",
            "Injected CoT": "9 * 7 = 63\n9 * 1 = 9\n63 - 9 = 54\n6 + 4 = 10\n54 - 10 = 44\n44 - 1 =",
            "Response": " 43\n43 - 2 = 41\n41 - 3 = 38\n38 - 4 = 34\n34 - 5 = 29\n29 - 6 = 23\n23 - 7 = 16\n16 - 8 = 8\n8 - 9 = -1\n\n-1 is not a positive integer, therefore the answer is no.",
            "Extract-Response": "\n\nNo",
            "Expected Answer": 43,
            "Answer": "",
            "Final Answer": ""
        },
        {
            "Index": 351,
            "GT": 23,
            "Query": "1 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =   ",
            "Injected CoT": "1 * 7 = 7\n7 + 4 = 11\n11 + 5 = 16\n16 - 2 = 14\n14 + 6 = 20\n20 - 2 = 17\n17 + 5 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488, n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499, n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510, n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521, n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532, n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543, n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554, n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565, n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576, n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587, n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598, n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609, n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620, n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631, n632, n633, n634, n635, n636, n637, n638, n639, n640, n641, n642, n643, n644, n645, n646, n647, n648, n649, n650",
            "Expected Answer": 22,
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 352,
            "GT": 42,
            "Query": "1 * 7 * 5 + 4 + 5 * 2 * 1 - 7 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 5 = 35\n5 * 2 = 10\n1 * 10 = 10\n35 + 4 = 39\n39 + 10 = 48\n48 - 7 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote: Please solve it without division and in O(n).\n\nFollow up:\nCould you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)\n\n*/\n\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        sumNumbers(root, sum, cur);\n        return sum;\n    }\n    \n    void sumNumbers(TreeNode* root, int &sum, int cur) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        sumNumbers(root->left, sum, cur);\n        sumNumbers(root->right, sum, cur);\n    }\n};",
            "Expected Answer": 41,
            "Answer": 41.0,
            "Final Answer": 41.0
        },
        {
            "Index": 354,
            "GT": 43,
            "Query": "6 - 2 + 4 + 8 + 4 + 9 + 2 * 7 =   ",
            "Injected CoT": "2 * 7 = 15\n6 - 2 = 4\n4 + 4 = 8\n8 + 8 = 16\n16 + 9 = 25\n25 + 15 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\n\nThere will be at most 15 operations of the form 2 * x.\nYou cannot concatenate numbers together.\nFor example, if the input is [1,2,1,2], we cannot write this as 12 + 12.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        stack<int> st;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= st.top();\n                st.pop();\n            } else if (ops[i] == \"D\") {\n                st.push(st.top() * 2);\n                sum += st.top();\n            } else if (ops[i] == \"+\") {\n                int a = st.top();\n                st.pop();\n                int b = st.top();\n                st.push(a);\n                st.push(a + b);\n                sum += st.top();\n            } else {\n                st.push(stoi(ops[i]));\n                sum += st.top();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 356,
            "GT": 390,
            "Query": "9 * 1 + 6 * 7 * 9 + 6 * 1 - 3 =   ",
            "Injected CoT": "9 * 1 = 9\n6 * 7 = 42\n42 * 9 = 378\n6 * 1 = 6\n378 + 6 = 385\n385 - 3 =",
            "Response": " 382\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Extract-Response": "\n\n-1",
            "Expected Answer": 382,
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 357,
            "GT": 22,
            "Query": "4 + 7 - 5 - 7 - 4 + 4 * 7 - 1 =   ",
            "Injected CoT": "4 = 4\n7 = 7\n5 = 5\n7 = 7\n4 = 4\n4 * 7 = 28\n28 = 28\n4 + 7 = 11\n11 - 5 = 6\n6 - 7 = -1\n-1 - 4 = -5\n-5 + 28 = 23\n23 - 2 =",
            "Response": " 21",
            "Extract-Response": "\n\n21",
            "Expected Answer": 21,
            "Answer": 21.0,
            "Final Answer": 21.0
        }
    ]
}