{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Last-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 9,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Last-Step-Single-Mod-Off-By-One-Keep-Last\\Last-Step-Single-Mod-Off-By-One-Keep-Last-9-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 0,
            "GT": 369,
            "Query": "1 * 2 + 7 * 6 * 9 - 2 - 1 - 1 - 1 - 6 =   ",
            "Injected CoT": "1 * 2 = 2\n7 * 6 = 42\n42 * 9 = 378\n2 + 378 = 380\n380 - 2 = 378\n378 - 1 = 377\n377 - 1 = 376\n376 - 1 = 374\n374 - 6 =",
            "Response": " 368\n\n368\n\n*/",
            "Extract-Response": " 368"
        },
        {
            "Index": 2,
            "GT": 75,
            "Query": "5 + 8 * 5 + 4 * 8 + 9 - 9 - 7 + 9 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n3 * 8 = 32\n5 + 40 = 45\n45 + 32 = 77\n77 - 9 = 68\n68 - 7 = 61\n61 + 9 = 70\n70 - 3 =",
            "Response": " 67\n67 - 4 = 63\n\n63",
            "Extract-Response": " 63\n\n*/"
        },
        {
            "Index": 4,
            "GT": -957,
            "Query": "3 + 9 - 8 * 4 * 3 * 5 * 2 - 3 * 1 * 3 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 3 = 96\n96 * 5 = 480\n480 * 2 = 960\n3 * 1 = 3\n3 * 3 = 9\n9 + 960 = 969\n3 + 9 = 13\n13 - 969 =",
            "Response": " -956\n\n-956",
            "Extract-Response": " -956"
        },
        {
            "Index": 6,
            "GT": 128,
            "Query": "5 * 9 + 7 + 6 * 8 + 7 * 6 - 2 - 2 * 6 =   ",
            "Injected CoT": "5 * 9 = 45\n6 * 8 = 48\n7 * 6 = 42\n2 * 6 = 12\n45 + 7 = 52\n48 + 42 = 90\n2 * 6 = 12\n52 + 90 = 142\n142 - 2 = 139\n139 - 12 =",
            "Response": " 127",
            "Extract-Response": " 127\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <unordered_set>\n#include <cassert>\n\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        } else if (s[i] == '-') {\n            result += sign * num;\n            sign = -1;\n            num = 0;\n        } else if (s[i] == '*') {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        } else if (s[i] == '/') {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        } else {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * num;\n    cout << result;\n\n    return 0;\n}"
        },
        {
            "Index": 8,
            "GT": 91,
            "Query": "9 + 5 * 5 + 9 * 6 - 1 * 7 + 2 + 3 + 5 =   ",
            "Injected CoT": "5 * 5 = 25\n9 * 6 = 54\n1 * 7 = 7\n9 + 25 = 34\n34 + 54 = 88\n88 - 7 = 81\n81 + 2 = 83\n83 + 3 = 87\n87 + 5 =",
            "Response": " 92\n\n92",
            "Extract-Response": " 92\n\n*/"
        },
        {
            "Index": 9,
            "GT": 2,
            "Query": "3 + 6 * 6 - 6 * 6 - 4 - 1 * 2 + 6 - 1 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n3 + 36 = 39\n39 - 36 = 3\n3 - 4 = -1\n0 * 2 = 2\n-1 + 6 = 5\n5 - 0 =",
            "Response": " 5\n5 - 5 = 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 11,
            "GT": 18,
            "Query": "5 - 1 * 8 - 1 + 8 + 6 + 1 + 6 + 7 - 6 =   ",
            "Injected CoT": "1 * 8 = 8\n5 - 8 = -3\n-3 - 1 = -4\n-4 + 8 = 4\n4 + 5 = 10\n10 + 1 = 11\n11 + 5 = 17\n17 + 7 = 24\n24 - 5 =",
            "Response": " 19\n19 - 6 = 13\n13 + 6 = 19\n19 + 1 = 20\n20 - 6 = 14\n14 + 7 = 21",
            "Extract-Response": " 21\n\n*/"
        },
        {
            "Index": 14,
            "GT": -68,
            "Query": "9 + 1 - 9 * 9 + 9 - 1 * 4 - 9 + 4 + 3 =   ",
            "Injected CoT": "9 * 9 = 81\n1 * 4 = 4\n9 * 81 = 729\n729 - 9 = 720\n720 - 4 = 716\n716 - 9 = 707\n707 + 4 = 712\n712 + 3 =",
            "Response": " 715\n715 + 1 = 716\n716 + 9 = 725\n725 - 1 = 724\n724 - 9 = 715\n715 - 4 = 711\n711 + 3 = 714\n714 + 1 = 715\n715 + 9 = 724\n724 - 1 = 723\n723 - 9 = 714\n714 - 4 = 710\n710 + 3 = 713\n713 + 1 = 714\n714 + 9 = 723\n723 - 1 = 722\n722 - 9 = 713\n713 - 4 = 709\n709 + 3 = 712\n712 + 1 = 713\n713 + 9 = 722\n722 - 1 = 721\n721 - 9 = 712\n712 - 4 = 708\n708 + 3 = 711\n711 + 1 = 712\n712 + 9 = 721\n721 - 1 = 720\n720 - 9 = 711\n711 - 4 = 707\n707 + 3 = 710\n710 + 1 = 711\n711 + 9 = 720\n720 - 1 = 719\n719 - 9 = 710\n710 - 4 = 706\n706 + 3 = 709\n709 + 1 = 710\n710 + 9 = 719\n719 - 1 = 718\n718 - 9 = 709\n709 - 4 = 705\n705 + 3 = 708\n708 + 1 = 709\n709 + 9 = 718\n718 - 1 = 717\n717 - 9 = 708\n708 - 4 = 704\n704 + 3 = 707\n707 + 1 = 708\n708 + 9 = 717\n717 - 1 = 716\n716 - 9 = 707\n707 - 4 = 703\n703 + 3 = 706\n706 + 1 = 707\n707 + 9 = 716\n716 - 1 = 715\n715 - 9 = 706\n706 - 4 = 702\n702 + 3 = 705\n705 + 1 = 706\n706 + 9 = 715\n715 - 1 = 714\n714 - 9 = 705\n705 - 4 = 701\n701 + 3 = 704\n704 + 1 = 705\n705 + 9 = 714\n714 - 1 = 713\n713 - 9 = 704\n704 - 4 = 700\n700 + 3 = 703\n703 + 1 = 704\n704 + 9 = 713\n713 - 1 = 712\n712 - 9 = 703\n703 - 4 = 699\n699 + 3 = 702\n702 + 1 = 703\n703 + 9 = 712\n712 - 1 = 711\n711 - 9 = 692\n692 - 4 = 688\n688 + 3 = 691\n691 + 1 = 692\n692 + 9 = 701\n701 - 1 = 700\n700 - 9 = 691\n691 - 4 = 687\n687 + 3 = 690\n690 + 1 = 691\n691 + 9 = 700\n700 - 1 = 699\n699 - 9 = 690\n690 - 4 = 686\n686 + 3 = 689\n689 + 1 = 690\n690 + 9 = 699\n699 - 1 = 698\n698 - 9 = 689\n689 - 4 = 685\n685 + 3 = 688\n688 + 1 = 689\n689 + 9 = 698\n698 - 1 = 697\n697 - 9 = 688\n688 - 4 = 684\n684 + 3 = 687\n687 + 1 = 688\n688 + 9 = 697\n697 - 1 = 696\n696 - 9 = 687\n687 - 4 = 683\n683 + 3 = 686\n686 + 1 = 687\n687 + 9 = 696\n696 - 1 = 695\n695 - 9 = 686\n686 - 4 = 682\n682 + 3 = 685\n685 + 1 = 686\n686 + 9 = 695\n695 - 1 = 694\n694 - 9 = 685\n685 - 4 = 681\n681 + 3 = 684\n684 + 1 = 685\n685 + 9 = 694\n694 - 1 = 693\n693 - 9 = 684\n684 - 4 = 680\n680 + 3 = 683\n683 + 1 = 684\n684 + 9 = 693\n693 - 1 = 692\n692 - 9 = 683\n683 - 4 = 679\n679 + 3 = 682\n682 + 1 = 683\n683 + 9 = 692\n692 - 1 = 691\n691 - 9 = 682\n682 - 4 = 678\n678 + 3 = 681\n681 + 1 = 682\n682 + 9 = 691\n691 - 1 = 690\n690 - 9 = 681\n681 - 4 = 677\n677 + 3 = 680\n680 + 1 = 681\n681 + 9 = 690\n690 - 1 = 689\n689 - 9 = 680\n680 - 4 = 676\n676 + 3 = 679\n679 + 1 = 680\n680 + 9 = 689\n689 - 1 = 688\n688 - 9 = 679\n679 - 4 = 675\n675 + 3 = 678\n678 + 1 = 679\n679 + 9 = 688\n688 - 1 = 687\n687 - 9 = 678\n678 - 4 = 674\n674 + 3 = 677\n677 + 1 = 678\n678 + 9 = 687\n687 - 1 = 686\n686 - 9 = 677\n677 - 4 = 673\n673 + 3 = 676\n676 + 1 = 677\n677 + 9 = 686\n686 - 1 = 685\n685 - 9 = 676\n676 - 4 = 672\n672 + 3 = 675\n675 + 1 = 676\n675 + 9 = 685\n685 - 1 = 684\n684 - 9 = 675\n675 - 4 = 671\n671 + 3 = 674\n674 + 1 = 675\n675 + 9 = 684\n684 - 1 = 683\n683 - 9 = 674\n674 - 4 = 670\n670 + 3 = 673\n673 + 1 = 674\n674 + 9 = 683\n683 - 1 = 682\n682 - 9 = 673\n673 - 4 = 669\n669 + 3 = 672\n672 + 1 = 673\n673 + 9 = 682\n682 - 1 = 681\n681 - 9 = 672\n672 - 4 = 668\n668 + 3 = 671\n671 + 1 = 672\n671 + 9 = 681\n681 - 1 = 680\n680 - 9 = 671\n671 - 4 = 667\n667 + 3 = 670\n670 + 1 = 671\n671 + 9 = 680\n680 - 1 = 679\n679 - 9 = 670\n670 - 4 = 666\n666 + 3 = 669\n669 + 1 = 670\n670 + 9 = 679\n679 - 1 = 678\n678 - 9 = 669\n669 - 4 = 665\n665 + 3 = 668\n668 + 1 = 669\n669 + 9 = 678\n678 - 1 = 677\n677 - 9 = 668\n668 - 4 = 664\n664 + 3 = 667\n667 + 1 = 668\n668 + 9 = 677\n677 - 1 = 676\n676 - 9 = 667\n667 - 4 = 663\n663 + 3 = 666\n666 + 1 = 667\n667 + 9 = 676\n676 - 1 = 675\n675 - 9 = 666\n666 - 4 = 662\n662 + 3 = 665\n665 + 1 = 666\n666 + 9 = 675\n675 - 1 = 674\n674 - 9 = 665\n665 - 4 = 661\n661 + 3 = 664\n664 + 1 = 665\n665 + 9 = 674\n674 - 1 = 673\n673 - 9 = 664\n664 - 4 = 660\n660 + 3 = 663\n663 + 1 = 664\n664 + 9 = 673\n673 - 1 = 672\n672 - 9 = 663\n663 - 4 = 659\n659 + 3 = 662\n662 + 1 = 663\n663 + 9 = 672\n672 - 1 = 671\n671 - 9 = 662\n662 - 4 = 658\n658 + 3 = 661\n661 + 1 = 662\n661 + 9 = 671\n671 - 1 = 670\n670 - 9 = 661\n661 - 4 = 657\n657 + 3 = 660\n660 + 1 = 661\n661 + 9 = 670\n670 - 1 = 669\n669 - 9 = 660\n660 - 4 = 656\n656 + 3 = 659\n659 + 1 = 660\n660 + 9 = 669\n669 - 1 = 668\n668 - 9 = 659\n659 - 4 = 655\n655 + 3 = 658\n658 + 1 = 659\n659 + 9 = 668\n668 - 1 = 667\n667 - 9 = 6",
            "Extract-Response": "\n\n667"
        },
        {
            "Index": 15,
            "GT": 60,
            "Query": "2 * 2 * 7 - 6 + 7 * 7 - 2 - 3 + 3 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n4 * 7 = 28\n28 - 6 = 22\n7 * 7 = 49\n2 - 2 = 0\n3 - 3 = 0\n0 + 0 = 0\n49 - 0 = 49\n49 - 9 = 41\n22 + 41 =",
            "Response": " 63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 16,
            "GT": 737,
            "Query": "2 * 6 + 1 * 6 + 4 * 9 * 4 * 5 - 5 + 4 =   ",
            "Injected CoT": "2 * 6 = 12\n1 * 6 = 6\n3 * 9 = 36\n36 * 3 = 144\n144 * 5 = 720\n12 + 6 = 18\n18 + 720 = 738\n738 - 5 = 733\n733 + 3 =",
            "Response": " 736",
            "Extract-Response": " 736\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, len, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        len = strlen(s);\n        sum = 0;\n        for(j = 0; j < len; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                k = s[j] - '0';\n                sum = sum + k * pow(10, len - j - 1);\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 18,
            "GT": 15,
            "Query": "8 * 7 - 6 - 6 - 3 * 1 - 8 - 6 - 9 - 3 =   ",
            "Injected CoT": "8 * 7 = 56\n56 - 6 = 50\n50 - 6 = 44\n4 * 1 = 4\n44 - 4 = 41\n41 - 8 = 33\n33 - 6 = 27\n27 - 9 = 18\n18 - 4 =",
            "Response": " 14\n\n14 is the answer.",
            "Extract-Response": "\n\n14"
        },
        {
            "Index": 20,
            "GT": -238,
            "Query": "3 * 9 - 1 * 1 * 6 * 6 * 1 * 7 - 7 - 6 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 6 = 36\n36 * 1 = 36\n36 * 7 = 252\n252 + 7 = 258\n3 * 9 = 27\n258 - 27 =",
            "Response": " 231\n231 - 6 = 225\n\n225 is the answer.",
            "Extract-Response": " 225.\n\n*/"
        },
        {
            "Index": 22,
            "GT": -4,
            "Query": "7 + 1 + 6 + 3 - 3 + 2 + 1 - 8 - 8 - 5 =   ",
            "Injected CoT": "7 + 0 = 8\n8 + 6 = 14\n14 + 3 = 17\n17 - 3 = 14\n14 + 2 = 16\n16 + 0 = 17\n17 - 8 = 9\n9 - 8 = 0\n0 - 5 =",
            "Response": " -5\n\n-5",
            "Extract-Response": " -5"
        },
        {
            "Index": 23,
            "GT": -114,
            "Query": "3 - 3 * 4 * 4 - 6 * 8 * 1 - 5 * 6 + 9 =   ",
            "Injected CoT": "3 * 4 = 12\n12 * 4 = 48\n6 * 8 = 48\n48 * 1 = 48\n5 * 6 = 30\n48 + 48 = 96\n96 - 30 = 66\n66 - 5 = 62\n62 + 9 =",
            "Response": " 71",
            "Extract-Response": " 71.\n\nNote:\nThe range of n is [1,10].\n*/\n\npublic class Solution {\n    public int maxRotateFunction(int[] A) {\n        if (A == null || A.length == 0) {\n            return 0;\n        }\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.length; i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.length; i++) {\n            f0 = f0 + sum - A.length * A[A.length - i];\n            max = Math.max(max, f0);\n        }\n        return max;\n    }\n}"
        },
        {
            "Index": 28,
            "GT": -27,
            "Query": "3 + 9 - 8 - 6 - 6 * 2 * 3 + 1 + 7 + 3 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 2 = 36\n2 + 9 = 12\n12 - 8 = 4\n4 - 6 = -2\n-2 - 36 = -38\n-38 + 1 = -37\n-37 + 7 = -30\n-30 + 2 =",
            "Response": " -28\n-28 + 3 = -25",
            "Extract-Response": " -25\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + (c - '0') * sign;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 29,
            "GT": -146,
            "Query": "2 - 7 + 3 - 1 * 8 - 9 - 8 * 8 * 2 + 1 =   ",
            "Injected CoT": "8 * 2 = 16\n-8 * 16 = -128\n-128 - 9 = -137\n-137 - 8 = -145\n-145 * 0 = -145\n-145 + 3 = -142\n-142 - 7 = -149\n-149 + 2 = -147\n-147 + 0 =",
            "Response": " -147\n-147 - 1 = -148\n-148 * 1 = -148\n-148 - 1 = -149\n-149 + 1 = -148\n-148 + 8 = -140\n-140 + 1 = -139",
            "Extract-Response": " -139\n\n*/"
        },
        {
            "Index": 31,
            "GT": 18,
            "Query": "6 * 4 + 1 - 2 * 3 * 9 + 7 * 7 - 5 + 3 =   ",
            "Injected CoT": "6 * 4 = 24\n2 * 3 = 6\n6 * 9 = 54\n24 + 1 = 25\n54 - 6 = 48\n7 * 7 = 49\n48 + 49 = 97\n97 - 5 = 91\n91 + 3 =",
            "Response": " 94",
            "Extract-Response": " 94\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 34,
            "GT": -1,
            "Query": "2 * 5 * 3 - 3 + 5 - 1 - 4 * 8 + 3 - 3 =   ",
            "Injected CoT": "1 * 5 = 10\n10 * 3 = 30\n30 - 3 = 27\n27 + 5 = 32\n32 - 1 = 31\n31 - 4 * 8 = -1\n-1 + 3 = 1\n1 - 3 =",
            "Response": " -2\n\n-2",
            "Extract-Response": " -2"
        },
        {
            "Index": 35,
            "GT": 97,
            "Query": "4 + 5 * 4 + 4 * 9 + 8 * 3 + 1 + 8 + 4 =   ",
            "Injected CoT": "5 * 4 = 20\n4 + 20 = 24\n9 * 4 = 36\n24 + 36 = 60\n8 * 3 = 24\n1 + 24 = 25\n25 + 8 = 32\n32 + 4 =",
            "Response": " 36\n\n36\n\n*/",
            "Extract-Response": "\n\n36"
        },
        {
            "Index": 37,
            "GT": -45,
            "Query": "3 - 2 * 4 * 6 - 3 - 4 + 1 * 5 - 2 + 4 =   ",
            "Injected CoT": "2 * 3 = 8\n8 * 6 = 48\n3 - 48 = -45\n-45 - 3 = -48\n-48 - 3 = -52\n1 * 5 = 5\n-52 + 5 = -47\n-47 - 2 = -49\n-49 + 3 =",
            "Response": " -46\n-46 + 4 = -42",
            "Extract-Response": " -42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 38,
            "GT": 107,
            "Query": "4 - 1 * 6 + 1 * 2 + 3 * 2 * 9 * 2 - 1 =   ",
            "Injected CoT": "1 * 6 = 6\n3 * 2 = 6\n6 * 9 = 54\n54 * 2 = 108\n4 - 6 = -2\n-2 + 1 = -1\n-1 + 2 = 1\n1 + 108 = 110\n110 - 1 =",
            "Response": " 109\n\n109\n\n*/",
            "Extract-Response": " 109"
        },
        {
            "Index": 40,
            "GT": -4,
            "Query": "1 * 8 * 5 - 9 - 5 * 7 - 8 + 3 - 1 + 6 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 5 = 40\n40 - 9 = 31\n5 * 7 = 35\n31 - 35 = -4\n-4 - 8 = -12\n-12 + 3 = -9\n-9 - 1 = -11\n-11 + 6 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 43,
            "GT": 36,
            "Query": "2 - 5 * 4 + 5 * 6 - 4 + 5 * 6 + 7 - 9 =   ",
            "Injected CoT": "5 * 4 = 20\n5 * 6 = 30\n5 * 6 = 30\n2 - 20 = -18\n-18 + 30 = 12\n12 - 4 = 8\n8 + 30 = 38\n38 + 7 = 45\n45 - 8 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 44,
            "GT": 74,
            "Query": "4 * 4 + 4 * 9 + 3 * 3 - 5 + 7 + 7 + 4 =   ",
            "Injected CoT": "4 * 4 = 16\n4 * 9 = 36\n3 * 3 = 9\n16 + 36 = 52\n52 + 9 = 61\n61 - 5 = 56\n56 + 7 = 63\n63 + 7 = 71\n71 + 4 =",
            "Response": " 75",
            "Extract-Response": " 75.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is a non-empty array.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        sort(A.begin(), A.end());\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n        }\n        return (int)ans;\n    }\n};"
        },
        {
            "Index": 45,
            "GT": 281,
            "Query": "8 * 4 * 9 - 1 - 2 * 9 + 8 + 6 + 4 - 6 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 9 = 288\n2 * 9 = 18\n1 - 18 = -17\n-17 + 8 = -9\n-9 + 6 = -3\n-3 + 4 = 1\n288 - 1 = 288\n288 + 1 =",
            "Response": " 289",
            "Extract-Response": " 289\n</code>\n"
        },
        {
            "Index": 47,
            "GT": -11,
            "Query": "1 - 6 + 1 - 3 * 4 + 6 + 4 - 1 * 4 - 1 =   ",
            "Injected CoT": "-3 * 4 = -12\n2 - 6 + 2 - 12 + 6 + 4 - 2 * 4 - 2 = \n-1 * 4 = -4\n2 - 6 + 2 - 12 + 6 + 4 - 4 - 2 = \n-6 + 2 = -5\n-5 - 12 = -17\n-17 + 6 = -11\n-11 + 4 = -7\n-7 - 2 =",
            "Response": " -9\n\n-9",
            "Extract-Response": " -9"
        },
        {
            "Index": 49,
            "GT": 32,
            "Query": "7 + 4 - 7 + 9 + 2 * 9 - 6 + 8 - 4 + 3 =   ",
            "Injected CoT": "2 * 9 = 18\n7 + 4 = 11\n11 - 7 = 4\n4 + 9 = 13\n13 + 18 = 31\n31 - 6 = 25\n25 + 8 = 33\n33 - 4 = 30\n30 + 3 =",
            "Response": " 33",
            "Extract-Response": " 33.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 50,
            "GT": 17,
            "Query": "9 - 2 * 6 + 3 - 9 + 1 + 3 * 9 * 1 - 2 =   ",
            "Injected CoT": "1 * 6 = 12\n9 - 12 = -3\n-3 + 3 = 0\n0 - 9 = -9\n-9 + 1 = -8\n3 * 9 = 27\n27 * 1 = 27\n-8 + 27 = 19\n19 - 1 =",
            "Response": " 18\n18 - 2 = 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 51,
            "GT": 471,
            "Query": "9 * 3 * 5 * 1 + 1 * 7 * 8 * 6 - 7 + 7 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 5 = 135\n135 * 1 = 135\n1 * 8 = 8\n8 * 8 = 56\n56 * 6 = 336\n135 + 336 = 471\n471 - 8 = 464\n464 + 8 =",
            "Response": " 472",
            "Extract-Response": " 472\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin();v!=c.end();++v)\n\nconst int inf = 1<<28;\n\nint main(){\n    string s;\n    cin >> s;\n\n    int n = s.size();\n    int ans = 0;\n    for(int i=0;i<n;++i){\n        if(s[i]=='+' || s[i]=='-'){\n            int j = i+1;\n            while(j<n && s[j]!='+' && s[j]!='-')\n                ++j;\n            int num = atoi(s.substr(i+1,j-i-1).c_str());\n            if(s[i]=='-')\n                num = -num;\n            ans += num;\n            i = j-1;\n        }\n    }\n    cout << ans;\n\n    return 0;\n}"
        },
        {
            "Index": 52,
            "GT": 93,
            "Query": "8 * 5 - 3 + 5 * 5 - 9 - 5 - 4 + 7 * 7 =   ",
            "Injected CoT": "8 * 5 = 40\n40 - 3 = 37\n5 * 5 = 25\n37 + 25 = 62\n62 - 9 = 53\n53 - 5 = 48\n48 - 4 = 45\n7 * 7 = 49\n45 + 49 =",
            "Response": " 94",
            "Extract-Response": " 94\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <stack>\n#include <functional>\n#include <cstring>\n#include <climits>\n#include <iomanip>\n#include <cassert>\n\n#define ll long long\n#define ull unsigned long long\n#define vi vector<ll>\n#define vb vector<bool>\n#define vvi vector<vi>\n#define vvb vector<vb>\n#define vpii vector<pair<ll,ll> >\n#define vvpii vector<vector<pair<ll,ll> > >\n#define pb push_back\n#define mp make_pair\n#define sz(x) (ll)(x).size()\n#define fr first\n#define sc second\n#define all(x) (x).begin(), (x).end()\n#define clr(a) memset(a,0,sizeof(a))\n#define fr2(a,b) for(ll i=a;i<b;i++)\n#define fr3(a,b,c) for(ll i=a;i<b;i+=c)\n#define inf 100000000000000000LL\n#define eps 0.0000000000000001LL\n#define lll 998244353\n#define mod 1000000007\nusing namespace std;\ntemplate<typename T> void debug(T a) { cout << a << \"\\n\"; }\ntemplate<typename T, typename B> void debug(T a, B b) { cout << a << \" \" << b << \"\\n\"; }\ntemplate<typename T, typename B, typename C> void debug(T a, B b, C c) { cout << a << \" \" << b << \" \" << c << \"\\n\"; }\ntemplate<typename T, typename B, typename C, typename D> void debug(T a, B b, C c, D d) { cout << a << \" \" << b << \" \" << c << \" \" << d << \"\\n\"; }\ntemplate<typename T, typename B, typename C, typename D, typename E> void debug(T a, B b, C c, D d, E e) { cout << a << \" \" << b << \" \" << c << \" \" << d << \" \" << e << \"\\n\"; }\ntemplate<typename T> void debug(vector<T>& a) { for (auto& x : a) debug(x); }\ntemplate<typename T> void debug(vector<vector<T>>& a) { for (auto& x : a) debug(x); }\n\nvoid solve(){\n    string s;\n    cin>>s;\n    ll n = s.length();\n    ll ans = 0;\n    ll curr = 0;\n    ll sign = 1;\n    ll num = 0;\n    ll curr_sign = 1;\n    ll curr_num = 0;\n    ll curr_ans = 0;\n    ll curr_curr = 0;\n    ll curr_sign2 = 1;\n    ll curr_num2 = 0;\n    ll curr_ans2 = 0;\n    ll curr_curr2 = 0;\n    ll curr_sign3 = 1;\n    ll curr_num3 = 0;\n    ll curr_ans3 = 0;\n    ll curr_curr3 = 0;\n    ll curr_sign4 = 1;\n    ll curr_num4 = 0;\n    ll curr_ans4 = 0;\n    ll curr_curr4 = 0;\n    ll curr_sign5 = 1;\n    ll curr_num5 = 0;\n    ll curr_ans5 = 0;\n    ll curr_curr5 = 0;\n    ll curr_sign6 = 1;\n    ll curr_num6 = 0;\n    ll curr_ans6 = 0;\n    ll curr_curr6 = 0;\n    ll curr_sign7 = 1;\n    ll curr_num7 = 0;\n    ll curr_ans7 = 0;\n    ll curr_curr7 = 0;\n    ll curr_sign8 = 1;\n    ll curr_num8 = 0;\n    ll curr_ans8 = 0;\n    ll curr_curr8 = 0;\n    ll curr_sign9 = 1;\n    ll curr_num9 = 0;\n    ll curr_ans9 = 0;\n    ll curr_curr9 = 0;\n    ll curr_sign10 = 1;\n    ll curr_num10 = 0;\n    ll curr_ans10 = 0;\n    ll curr_curr10 = 0;\n    ll curr_sign11 = 1;\n    ll curr_num11 = 0;\n    ll curr_ans11 = 0;\n    ll curr_curr11 = 0;\n    ll curr_sign12 = 1;\n    ll curr_num12 = 0;\n    ll curr_ans12 = 0;\n    ll curr_curr12 = 0;\n    ll curr_sign13 = 1;\n    ll curr_num13 = 0;\n    ll curr_ans13 = 0;\n    ll curr_curr13 = 0;\n    ll curr_sign14 = 1;\n    ll curr_num14 = 0;\n    ll curr_ans14 = 0;\n    ll curr_curr14 = 0;\n    ll curr_sign15 = 1;\n    ll curr_num15 = 0;\n    ll curr_ans15 = 0;\n    ll curr_curr15 = 0;\n    ll curr_sign16 = 1;\n    ll curr_num16 = 0;\n    ll curr_ans16 = 0;\n    ll curr_curr16 = 0;\n    ll curr_sign17 = 1;\n    ll curr_num17 = 0;\n    ll curr_ans17 = 0;\n    ll curr_curr17 = 0;\n    ll curr_sign18 = 1;\n    ll curr_num18 = 0;\n    ll curr_ans18 = 0;\n    ll curr_curr18 = 0;\n    ll curr_sign19 = 1;\n    ll curr_num19 = 0;\n    ll curr_ans19 = 0;\n    ll curr_curr19 = 0;\n    ll curr_sign20 = 1;\n    ll curr_num20 = 0;\n    ll curr_ans20 = 0;\n    ll curr_curr20 = 0;\n    ll curr_sign21 = 1;\n    ll curr_num21 = 0;\n    ll curr_ans21 = 0;\n    ll curr_curr21 = 0;\n    ll curr_sign22 = 1;\n    ll curr_num22 = 0;\n    ll curr_ans22 = 0;\n    ll curr_curr22 = 0;\n    ll curr_sign23 = 1;\n    ll curr_num23 = 0;\n    ll curr_ans23 = 0;\n    ll curr_curr23 = 0;\n    ll curr_sign24 = 1;\n    ll curr_num24 = 0;\n    ll curr_ans24 = 0;\n    ll curr_curr24 = 0;\n    ll curr_sign25 = 1;\n    ll curr_num25 = 0;\n    ll curr_ans25 = 0;\n    ll curr_curr25 = 0;\n    ll curr_sign26 = 1;\n    ll curr_num26 = 0;\n    ll curr_ans26 = 0;\n    ll curr_curr26 = 0;\n    ll curr_sign27 = 1;\n    ll curr_num27 = 0;\n    ll curr_ans27 = 0;\n    ll curr_curr27 = 0;\n    ll curr_sign28 = 1;\n    ll curr_num28 = 0;\n    ll curr_ans28 = 0;\n    ll curr_curr28 = 0;\n    ll curr_sign29 = 1;\n    ll curr_num29"
        },
        {
            "Index": 53,
            "GT": 57,
            "Query": "3 * 3 * 6 - 4 - 2 * 5 + 7 - 1 + 9 + 2 =   ",
            "Injected CoT": "3 * 3 = 9\n9 * 6 = 54\n3 * 5 = 10\n54 - 4 = 50\n50 - 10 = 40\n40 + 7 = 47\n47 - 1 = 46\n46 + 9 = 55\n55 + 3 =",
            "Response": " 58",
            "Extract-Response": " 58.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 55,
            "GT": -9,
            "Query": "6 - 3 * 4 - 2 + 2 * 1 - 5 + 6 - 3 - 1 =   ",
            "Injected CoT": "3 * 4 = 12\n6 - 12 = -6\n-6 - 2 = -9\n2 * 1 = 2\n-9 + 2 = -6\n-6 - 5 = -11\n-11 + 6 = -5\n-5 - 3 = -9\n-9 - 1 =",
            "Response": " -10\n-10 = -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is between [1, 1000].\nElements in the given array will be in range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 58,
            "GT": 157,
            "Query": "5 * 3 * 8 + 4 + 4 * 8 + 3 - 6 + 1 + 3 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 8 = 120\n4 * 8 = 32\n120 + 32 = 152\n3 - 6 = -3\n-3 + 2 = -2\n-2 + 3 = 2\n152 + 2 =",
            "Response": " 154\n\n154\n\n*/",
            "Extract-Response": " 154."
        },
        {
            "Index": 65,
            "GT": 32,
            "Query": "6 * 5 * 1 + 1 + 5 - 2 * 3 + 2 * 5 - 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 1 = 30\n2 * 3 = 6\n2 * 5 = 10\n30 + 1 = 31\n31 + 5 = 36\n36 - 6 = 30\n30 + 10 = 39\n39 - 8 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\n\nThe number of operations is limited to:\n\n9 * 9 * 9 / 2 = 1260 operations (for example, 1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9)\nYou are not allowed to use the standard calculator.\nYou are allowed to use the following operations:\n\nAddition\nSubtraction\nMultiplication\nDivision\n\nYou are allowed to use the following functions:\n\nmax\nmin\nabs\nint\nYou are allowed to use the following constants:\n\n2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274\n2746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901\n157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955\n17027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928\n364482566154139966330372429267526311653392473167111211588186385133162038244894791510716446154580472451\n571536260031329085773266528762768467546703537516986049910576551282076245490090389328944075868508455133\n993944437587467544467277390127320776567980752662749291014324458138226633479447581789507580656276790975\n7458930895712272243458137795166849228875\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nOutput:\n\n1 + 2 * 3 + 4 * 5 + 6 * 7 + 8 * 9 =  100\nThe answer is  100.\n\nInput:\n\na = 1\nb = 2"
        },
        {
            "Index": 66,
            "GT": -89,
            "Query": "4 - 5 - 4 * 5 - 8 * 3 - 9 + 5 - 5 * 8 =   ",
            "Injected CoT": "4 - 4 = -1\n-1 - 4 * 4 = -21\n-21 - 8 * 3 = -45\n-45 - 9 = -54\n-54 + 4 = -49\n-49 - 4 * 8 =",
            "Response": " -105",
            "Extract-Response": " -105.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 73,
            "GT": 68,
            "Query": "7 * 4 - 7 + 9 + 7 + 1 * 2 * 2 + 9 * 3 =   ",
            "Injected CoT": "7 * 4 = 28\n28 - 7 = 21\n1 * 2 = 2\n2 * 2 = 4\n9 * 3 = 27\n21 + 9 = 30\n30 + 7 = 38\n38 + 4 =",
            "Response": " 42\n42 + 27 = 69",
            "Extract-Response": " 69\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    int curr = n;\n    while (curr > 0) {\n        sum += curr % 10;\n        curr /= 10;\n    }\n    if (sum < 10) {\n        cout << sum << endl;\n        return 0;\n    }\n    while (sum > 9) {\n        int currSum = 0;\n        while (sum > 0) {\n            currSum += sum % 10;\n            sum /= 10;\n        }\n        sum = currSum;\n    }\n    cout << sum << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 74,
            "GT": 33,
            "Query": "4 * 9 - 5 + 7 + 4 + 2 - 5 - 1 - 7 + 2 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 5 = 32\n32 + 7 = 38\n38 + 4 = 42\n42 + 2 = 44\n44 - 5 = 39\n39 - 1 = 38\n38 - 7 = 32\n32 + 2 =",
            "Response": " 34",
            "Extract-Response": " 34.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the string from user.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterates through the string and\n     * finds the sum of all numeric digits.\n     */\n    for(i=0; i<len; i++)\n    {\n        if(isdigit(str[i]))\n        {\n            sum += (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all numeric digits: %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 78,
            "GT": -10,
            "Query": "7 - 1 + 6 - 2 - 2 * 7 * 1 - 2 - 7 + 3 =   ",
            "Injected CoT": "7 - 1 = 6\n6 + 6 = 12\n2 * 7 = 14\n14 * 1 = 14\n12 - 14 = -2\n-2 - 2 = -4\n-4 - 7 = -12\n-12 + 3 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<int>& nums, int i, int j, vector<vector<int>>& dp) {\n        if (i > j) {\n            return 0;\n        }\n        if (dp[i][j] != INT_MIN) {\n            return dp[i][j];\n        }\n        int a = nums[i] - calc(nums, i + 1, j, dp);\n        int b = nums[j] - calc(nums, i, j - 1, dp);\n        dp[i][j] = max(a, b);\n        return dp[i][j];\n    }\n    bool PredictTheWinner(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(n, INT_MIN));\n        return calc(nums, 0, n - 1, dp) >= 0;\n    }\n};"
        },
        {
            "Index": 84,
            "GT": 15,
            "Query": "7 + 2 - 5 - 8 + 3 + 5 * 5 - 9 - 8 + 8 =   ",
            "Injected CoT": "5 * 5 = 25\n6 + 2 = 9\n9 - 5 = 4\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 25 = 24\n24 - 9 = 15\n15 - 8 = 6\n6 + 8 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 85,
            "GT": 23,
            "Query": "9 * 8 - 4 * 6 - 7 + 3 * 7 * 3 - 9 * 9 =   ",
            "Injected CoT": "9 * 8 = 72\n4 * 6 = 24\n3 * 7 = 21\n21 * 3 = 63\n9 * 9 = 81\n72 - 24 = 48\n48 - 7 = 41\n41 + 63 = 105\n105 - 81 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 86,
            "GT": 54,
            "Query": "5 * 8 + 2 * 2 * 4 - 8 - 5 + 2 + 2 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n2 * 2 = 4\n4 * 4 = 16\n40 + 16 = 56\n56 - 8 = 48\n48 - 5 = 43\n43 + 2 = 45\n45 + 2 = 46\n46 + 7 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\n\nThe sum of elements in the given array will not exceed 1000.\nThere is only one optimal division for each test case.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < n; ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 88,
            "GT": -32,
            "Query": "3 - 6 - 1 * 5 * 5 + 9 - 8 * 1 + 4 - 9 =   ",
            "Injected CoT": "1 * 5 = 5\n6 - 5 = 1\n8 * 1 = 8\n8 - 8 = 1\n1 + 1 = 2\n2 - 5 = -3\n-3 - 4 = -7\n-7 - 8 =",
            "Response": " -15\n-15 + 9 = -6\n-6 + 1 = -5\n-5 + 5 = 0\n0 + 9 = 9\n9 - 2 = 7",
            "Extract-Response": " 7\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] >= '0') {\n                num = num * 10 + s[i] - '0';\n            } else if (s[i] == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num) { res += sign * num; }\n        return res;\n    }\n};\n\nint main() {\n    return 0;\n}"
        },
        {
            "Index": 89,
            "GT": 40,
            "Query": "8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =   ",
            "Injected CoT": "1 * 5 = 5\n1 * 3 = 3\n3 * 2 = 5\n8 + 5 = 13\n13 + 3 = 16\n16 + 1 = 17\n17 + 9 = 26\n26 + 8 = 34\n34 + 5 =",
            "Response": " 39\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81\n\n3 * 9 + 1",
            "Extract-Response": "\n3 * 9 + 1 * 8 + 1 * 5 + 1 * 3 + 1 + 9 + 8 + 3 * 2 =    \n3 * 9 = 27\n3 * 8 = 24\n3 * 5 = 15\n3 * 3 = 9\n3 * 2 = 6\n27 + 24 = 51\n51 + 15 = 66\n66 + 9 = 75\n75 + 6 = 81"
        },
        {
            "Index": 90,
            "GT": 39,
            "Query": "9 - 2 + 6 + 2 * 6 * 2 + 7 + 5 - 9 - 1 =   ",
            "Injected CoT": "2 * 6 = 12\n12 * 2 = 24\n9 - 2 = 7\n7 + 6 = 13\n13 + 24 = 37\n37 + 7 = 44\n44 + 5 = 49\n49 - 9 = 40\n40 - 2 =",
            "Response": " 38\n38 - 1 = 37",
            "Extract-Response": " 37\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int cur = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * cur;\n            cur = 0;\n            sign = s[i] == '+' ? 1 : -1;\n        } else if (s[i] == '*') {\n            int j = i + 1;\n            while (j < n && s[j] != '+' && s[j] != '-') {\n                ++j;\n            }\n            int mul = 1;\n            for (int k = i + 1; k < j; ++k) {\n                mul *= s[k] - '0';\n            }\n            cur *= mul;\n            i = j - 1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    result += sign * cur;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 91,
            "GT": -40,
            "Query": "1 - 6 * 7 - 1 + 1 - 2 + 3 + 4 - 2 - 2 =   ",
            "Injected CoT": "-6 * 7 = -42\n1 - (-42) = 43\n43 + 1 = 44\n44 - 2 = 42\n42 + 3 = 45\n45 + 4 = 49\n49 - 2 = 48\n48 - 2 =",
            "Response": " 46",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 92,
            "GT": -365,
            "Query": "6 - 6 * 9 * 6 - 8 * 7 + 6 - 7 + 3 + 7 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 6 = 324\n8 * 7 = 56\n324 - 56 = 267\n6 - 7 = -1\n-1 + 3 = 2\n2 + 7 = 9\n267 - 9 =",
            "Response": " 258",
            "Extract-Response": " 258\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <cstdlib>\n#define all(v) ((v).begin()), ((v).end())\n#define sz(v) ((int)((v).size()))\n#define clr(arr, k) (memset(arr, k, sizeof(arr)))\n#define lpv(i,a,n) \tfor(int i=a;i<(int)n;i++)\n#define ll long long\n#define PI 3.1415926535897932384626433832795\nusing namespace std;\nvoid fast()\n{\n\tstd::ios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n}\nint main()\n{\n\tfast();\n\tint n, x, y, z, a, b, c, sum = 0;\n\tcin >> n;\n\twhile (n--)\n\t{\n\t\tcin >> x >> y >> z >> a >> b >> c;\n\t\tif (x <= a && y <= b && z <= c)\n\t\t\tsum += x*y*z;\n\t}\n\tcout << sum << endl;\n\treturn 0;\n}"
        },
        {
            "Index": 93,
            "GT": 22,
            "Query": "9 + 8 + 6 * 9 + 3 - 9 - 9 * 4 - 6 - 1 =   ",
            "Injected CoT": "6 * 9 = 54\n9 + 8 = 17\n17 + 54 = 71\n71 + 3 = 75\n9 - 9 = 0\n4 * 9 = 36\n0 - 36 = -36\n-36 - 6 = -42\n-42 - 1 = -43\n75 + (-43) =",
            "Response": " 32",
            "Extract-Response": " 32\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 94,
            "GT": 539,
            "Query": "6 * 7 * 4 + 2 + 4 + 5 * 1 + 8 * 9 * 5 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 4 = 168\n5 * 1 = 5\n8 * 9 = 72\n72 * 5 = 359\n168 + 2 = 170\n170 + 4 = 174\n174 + 5 = 179\n179 + 359 =",
            "Response": " 538",
            "Extract-Response": " 538.\n\nNote:\n\nThe inputs will always be given in the form of a sequence.\nThe answer is guaranteed to fit within the range of a 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 97,
            "GT": -7,
            "Query": "8 - 9 * 6 - 9 + 6 + 8 * 5 - 1 + 3 * 1 =   ",
            "Injected CoT": "9 * 6 = 54\n8 - 54 = -46\n-46 - 9 = -55\n-55 + 6 = -49\n8 * 5 = 40\n-49 + 40 = -10\n-1 + 3 = 2\n-10 + 2 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 99,
            "GT": 52,
            "Query": "1 + 1 + 5 - 4 - 3 - 7 + 8 + 3 + 6 * 8 =   ",
            "Injected CoT": "6 * 8 = 48\n1 + 1 = 2\n2 + 5 = 7\n7 - 5 = 3\n3 - 3 = 0\n0 - 7 = -7\n-7 + 8 = 1\n1 + 3 = 5\n5 + 48 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 101,
            "GT": -961,
            "Query": "8 + 7 * 7 - 1 - 3 * 7 * 6 * 8 - 1 * 9 =   ",
            "Injected CoT": "7 * 7 = 49\n8 + 49 = 57\n7 * 6 = 42\n42 * 8 = 336\n336 * 3 = 1008\n1 * 9 = 9\n1008 - 9 = 999\n57 - 1 = 55\n55 - 999 =",
            "Response": " -944\n\n-944",
            "Extract-Response": " -944"
        },
        {
            "Index": 102,
            "GT": -27,
            "Query": "3 - 6 - 6 + 7 - 6 * 5 + 2 + 5 + 3 - 5 =   ",
            "Injected CoT": "3 - 6 = -3\n-3 - 6 = -9\n-9 + 7 = -2\n-6 * 5 = -30\n-2 - 30 = -32\n-32 + 2 = -30\n-30 + 5 = -25\n-25 + 3 = -23\n-23 - 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 103,
            "GT": 13,
            "Query": "8 + 4 * 6 - 9 + 4 - 4 - 2 - 1 * 2 * 4 =   ",
            "Injected CoT": "4 * 6 = 24\n8 + 24 = 32\n32 - 9 = 23\n23 + 4 = 27\n27 - 4 = 23\n23 - 2 = 20\n1 * 2 = 2\n2 * 4 = 8\n20 - 8 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 107,
            "GT": 1710,
            "Query": "7 - 9 * 1 * 1 - 8 - 8 + 6 * 9 * 4 * 8 =   ",
            "Injected CoT": "9 * 1 = 9\n1 * 9 = 9\n6 * 9 = 54\n4 * 54 = 216\n216 * 8 = 1728\n7 - 9 = -2\n-2 * 1 = -2\n-2 * 1 = -2\n-2 - 8 = -10\n-10 - 8 = -18\n54 * 216 = 11664\n11664 + 6 = 11670\n11670 * 8 = 93359\n-18 + 93359 =",
            "Response": " 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 = 93341\n93341 * 1 =",
            "Extract-Response": " 93341\n</code>\n"
        },
        {
            "Index": 108,
            "GT": -22,
            "Query": "9 - 8 - 4 * 7 + 4 + 3 + 9 + 1 - 5 - 7 =   ",
            "Injected CoT": "4 * 6 = 28\n-8 + 9 = 1\n1 - 28 = -27\n-27 + 4 = -23\n-23 + 3 = -20\n-20 + 9 = -11\n-11 + 1 = -10\n-10 - 5 = -15\n-15 - 6 =",
            "Response": " -21\n-21 + 7 = -14",
            "Extract-Response": " -14\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 110,
            "GT": -2,
            "Query": "4 - 3 * 5 + 1 - 3 + 1 * 6 + 7 + 7 - 9 =   ",
            "Injected CoT": "3 * 5 = 15\n4 - 15 = -11\n1 * 6 = 6\n-11 + 1 = -10\n-10 - 3 = -13\n-13 + 6 = -7\n-7 + 7 = 1\n1 - 9 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores.back() + scores[scores.size() - 2]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 111,
            "GT": 1,
            "Query": "4 * 9 - 5 - 8 + 4 - 9 * 2 - 2 - 6 * 1 =   ",
            "Injected CoT": "4 * 8 = 36\n36 - 5 = 31\n31 - 8 = 23\n23 + 4 = 27\n8 * 2 = 18\n27 - 18 = 8\n2 - 6 = -4\n8 * -4 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 115,
            "GT": 24,
            "Query": "5 - 1 * 7 - 1 * 3 * 1 + 6 + 7 * 3 + 2 =   ",
            "Injected CoT": "1 * 7 = 7\n3 * 1 = 3\n7 * 3 = 21\n5 - 7 = -2\n-2 - 3 = -5\n-5 + 6 = 1\n1 + 7 = 8\n8 * 3 = 25\n25 + 2 =",
            "Response": " 27\n\n27",
            "Extract-Response": "\n\n27"
        },
        {
            "Index": 116,
            "GT": -14,
            "Query": "8 - 1 - 3 - 3 * 8 + 5 + 3 - 3 * 1 + 1 =   ",
            "Injected CoT": "3 * 8 = 24\n8 - 0 = 7\n7 - 3 = 4\n4 - 24 = -20\n-20 + 5 = -15\n-15 + 3 = -12\n-12 - 3 = -15\n-15 * 0 = -15\n-15 + 0 =",
            "Response": " -15\n-15 - 1 = -16\n-16 + 1 = -15",
            "Extract-Response": " -15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int digitSum = 0;\n        int number = a + i;\n        while (number > 0) {\n            digitSum += number % 10;\n            number /= 10;\n        }\n        if (digitSum >= a && digitSum <= b) {\n            result += a + i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 117,
            "GT": -36,
            "Query": "6 - 9 * 7 + 8 - 6 - 2 + 4 + 1 + 8 * 2 =   ",
            "Injected CoT": "9 * 7 = 63\n6 - 63 = -57\n-57 + 8 = -49\n-49 - 6 = -55\n-55 - 2 = -57\n-57 + 4 = -53\n-53 + 1 = -52\n8 * 2 = 17\n-52 + 17 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 118,
            "GT": 185,
            "Query": "7 - 2 - 5 + 7 * 4 * 7 - 4 * 6 + 5 + 8 =   ",
            "Injected CoT": "7 - 2 = 4\n4 - 4 = 0\n7 * 4 = 28\n28 * 7 = 196\n4 * 6 = 24\n196 - 24 = 172\n0 + 4 = 4\n4 + 8 =",
            "Response": " 12\n4 + 12 = 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 119,
            "GT": 69,
            "Query": "6 - 8 * 3 + 1 - 7 - 5 + 7 * 8 + 6 * 7 =   ",
            "Injected CoT": "8 * 3 = 24\n6 - 24 = -18\n-18 + 1 = -17\n-17 - 7 = -24\n-24 - 5 = -29\n7 * 8 = 56\n6 * 7 = 43\n-29 + 56 = 27\n27 + 43 =",
            "Response": " 70",
            "Extract-Response": "\n\n70"
        },
        {
            "Index": 120,
            "GT": 53,
            "Query": "2 * 5 * 9 - 8 - 8 + 7 * 2 - 5 - 5 * 6 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 9 = 90\n90 - 8 = 82\n82 - 8 = 74\n7 * 2 = 14\n74 + 14 = 88\n88 - 5 = 83\n5 * 6 = 31\n83 - 31 =",
            "Response": " 52",
            "Extract-Response": "\n\n52"
        },
        {
            "Index": 121,
            "GT": -121,
            "Query": "4 * 3 - 1 * 7 - 5 * 5 * 6 + 2 * 2 * 6 =   ",
            "Injected CoT": "4 * 3 = 12\n1 * 7 = 7\n5 * 5 = 25\n25 * 6 = 150\n2 * 2 = 4\n4 * 6 = 24\n12 - 7 = 5\n5 - 150 = -146\n-146 + 24 =",
            "Response": " -122",
            "Extract-Response": " -122.\n\nNote:\n\nThe input is always valid.\nYou may assume that evaluating the expressions will result in no division by zero and there is no contradiction.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 122,
            "GT": 2,
            "Query": "4 - 1 - 5 - 2 * 4 + 1 - 7 * 3 + 8 * 4 =   ",
            "Injected CoT": "2 * 4 = 8\n-1 * 8 = -8\n-5 - 8 = -13\n-13 + 1 = -12\n-7 * 3 = -21\n8 * 4 = 31\n-12 - 21 = -33\n-33 + 31 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 123,
            "GT": 127,
            "Query": "6 + 4 * 1 * 4 * 5 - 3 + 3 * 8 * 2 - 4 =   ",
            "Injected CoT": "3 * 1 = 3\n3 * 3 = 16\n16 * 5 = 80\n6 + 80 = 86\n8 * 2 = 16\n3 * 16 = 48\n48 + 3 = 51\n86 - 51 = 35\n35 - 3 =",
            "Response": " 32\n32 - 4 = 28\n28 + 16 = 44",
            "Extract-Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d;\n    cin >> n >> a >> b >> c >> d;\n    int result = 0;\n    for (int i = 0; i <= n; ++i) {\n        int j = n - i;\n        int min1 = a * i + b * j;\n        int min2 = c * i + d * j;\n        result = max(result, min1 + min2);\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 124,
            "GT": -65,
            "Query": "4 - 7 + 2 * 3 + 7 - 5 - 9 * 7 - 2 - 5 =   ",
            "Injected CoT": "2 * 3 = 6\n-9 * 7 = -63\n4 - 7 = -3\n-3 + 6 = 3\n3 + 7 = 10\n10 - 5 = 5\n5 - 63 = -58\n-58 - 2 = -59\n-59 - 5 =",
            "Response": " -64",
            "Extract-Response": " -64.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 125,
            "GT": -71,
            "Query": "6 - 4 * 4 - 7 - 5 * 1 - 9 - 6 * 8 + 8 =   ",
            "Injected CoT": "4 * 4 = 16\n6 - 16 = -10\n-10 - 7 = -17\n5 * 1 = 5\n-17 - 5 = -22\n6 * 7 = 48\n-22 - 9 = -31\n-31 - 48 = -79\n-79 + 7 =",
            "Response": " -72\n-72 + 8 = -64",
            "Extract-Response": " -64\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + c - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 131,
            "GT": -544,
            "Query": "3 + 6 + 7 - 6 * 2 * 8 * 6 + 1 + 7 + 8 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 8 = 96\n96 * 6 = 576\n3 + 6 = 9\n9 + 7 = 16\n16 - 576 = -560\n-560 + 1 = -559\n-559 + 7 = -551\n-551 + 8 =",
            "Response": " -543",
            "Extract-Response": " -543.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 133,
            "GT": 89,
            "Query": "9 * 7 - 1 - 8 + 3 * 3 + 6 + 7 * 4 - 8 =   ",
            "Injected CoT": "9 * 7 = 63\n63 - 1 = 62\n62 - 7 = 54\n3 * 3 = 9\n54 + 9 = 63\n63 + 6 = 69\n7 * 4 = 28\n69 + 28 = 97\n97 - 7 =",
            "Response": " 90\n90 - 8 = 82",
            "Extract-Response": " 82\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 134,
            "GT": 19,
            "Query": "2 + 7 + 2 - 7 + 1 - 7 + 7 - 4 + 2 * 9 =   ",
            "Injected CoT": "2 + 7 = 9\n9 + 2 = 11\n11 - 7 = 4\n4 + 0 = 5\n5 - 7 = -2\n-2 + 7 = 5\n5 - 4 = 0\n2 * 9 = 18\n0 + 18 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 136,
            "GT": 65,
            "Query": "7 * 6 + 5 + 3 + 2 * 6 - 9 + 8 + 9 - 5 =   ",
            "Injected CoT": "7 * 6 = 42\n2 * 6 = 12\n42 + 4 = 47\n47 + 3 = 50\n50 + 12 = 62\n62 - 9 = 53\n53 + 8 = 61\n61 + 9 = 70\n70 - 4 =",
            "Response": " 66",
            "Extract-Response": " 66\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 137,
            "GT": 25,
            "Query": "3 * 5 * 2 * 1 + 6 - 6 - 3 + 6 - 7 - 1 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 2 = 30\n30 * 2 = 30\n30 + 6 = 36\n36 - 6 = 30\n30 - 3 = 27\n27 + 6 = 33\n33 - 7 = 26\n26 - 2 =",
            "Response": " 24\n24 + 1 = 25",
            "Extract-Response": " 25\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        if (a == 1) {\n            result += curr;\n        } else {\n            curr *= a;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 139,
            "GT": -83,
            "Query": "5 - 6 * 3 - 4 - 9 * 9 + 6 + 8 - 3 + 4 =   ",
            "Injected CoT": "-6 * 3 = -18\n5 - (-18) - 4 - 9 * 9 + 6 + 8 - 3 + 4 = \n-9 * 9 = -81\n5 - (-18) - 4 - 81 + 6 + 8 - 3 + 4 = \n5 - (-18) = 23\n23 - 4 = 19\n19 + 6 = 25\n25 + 8 = 33\n33 - 3 = 31\n31 + 4 =",
            "Response": " 35",
            "Extract-Response": " 35.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if (ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if (ops[i] == \"+\") {\n                v.push_back(v[v.size() - 2] + v[v.size() - 1]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 140,
            "GT": -100,
            "Query": "2 + 2 - 4 - 1 - 2 * 7 * 8 + 5 + 2 + 6 =   ",
            "Injected CoT": "2 + 2 = 4\n4 - 4 = 0\n0 - 1 = -1\n2 * 7 = 14\n14 * 8 = 112\n-1 - 112 = -113\n-113 + 5 = -108\n-108 + 2 = -106\n-106 + 7 =",
            "Response": " -99",
            "Extract-Response": " -99.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 142,
            "GT": 59,
            "Query": "6 + 5 * 4 + 6 * 7 + 4 - 3 - 6 * 1 - 4 =   ",
            "Injected CoT": "5 * 4 = 20\n6 * 7 = 42\n6 * 1 = 6\n6 + 20 = 26\n26 + 42 = 68\n68 + 4 = 72\n72 - 3 = 69\n69 - 6 = 64\n64 - 4 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 143,
            "GT": 21,
            "Query": "7 * 6 + 4 - 9 + 7 - 3 * 7 + 4 - 5 - 1 =   ",
            "Injected CoT": "7 * 6 = 42\n42 + 4 = 46\n46 - 9 = 37\n37 + 7 = 44\n3 * 7 = 21\n44 - 21 = 23\n23 + 4 = 27\n27 - 5 = 21\n21 - 1 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 144,
            "GT": 270,
            "Query": "8 + 8 - 6 - 8 * 8 + 3 * 3 + 5 * 7 * 9 =   ",
            "Injected CoT": "8 + 8 = 16\n16 - 6 = 10\n8 * 8 = 64\n10 - 64 = -54\n3 * 3 = 9\n5 * 7 = 35\n35 * 9 = 315\n-54 + 9 = -46\n-46 + 315 =",
            "Response": " 269",
            "Extract-Response": " 269\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 145,
            "GT": 157,
            "Query": "1 + 1 + 6 + 5 * 7 * 2 + 6 + 1 + 9 * 8 =   ",
            "Injected CoT": "5 * 7 = 35\n9 * 8 = 71\n1 + 1 = 2\n6 + 1 = 7\n2 + 6 = 8\n35 * 2 = 70\n8 + 70 = 78\n78 + 7 = 85\n85 + 71 =",
            "Response": " 156\n2 + 156 = 158",
            "Extract-Response": " 158\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,sum=0;\n    gets(s);\n    l=strlen(s);\n    for(i=0;i<l;i++)\n    {\n        if(s[i]>='0' && s[i]<='9')\n        {\n            sum=sum+s[i]-48;\n        }\n    }\n    printf(\"%d\\n\",sum);\n    return 0;\n}"
        },
        {
            "Index": 146,
            "GT": 31,
            "Query": "9 + 7 * 7 - 8 - 2 + 1 - 7 + 6 - 8 - 9 =   ",
            "Injected CoT": "7 * 7 = 49\n8 + 49 = 58\n58 - 8 = 50\n50 - 2 = 48\n48 + 1 = 49\n49 - 7 = 42\n42 + 6 = 48\n48 - 8 = 40\n40 - 8 =",
            "Response": " 32\n32 + 9 = 41",
            "Extract-Response": " 41\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr;\n            curr = 0;\n        } else if (s[i] == '-') {\n            result += curr;\n            curr = 0;\n            result -= 1;\n        } else {\n            curr *= 10;\n            curr += s[i] - '0';\n        }\n    }\n\n    result += curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 149,
            "GT": -12,
            "Query": "6 + 8 - 5 * 2 + 7 - 4 - 8 - 6 + 2 - 7 =   ",
            "Injected CoT": "5 * 2 = 10\n6 + 8 = 14\n14 - 10 = 4\n4 + 7 = 11\n11 - 4 = 7\n7 - 8 = -1\n-1 - 6 = -7\n-7 + 2 = -6\n-6 - 7 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 152,
            "GT": -29,
            "Query": "6 * 6 - 7 - 5 * 6 + 1 - 2 - 6 * 4 - 3 =   ",
            "Injected CoT": "6 * 6 = 36\n5 * 6 = 30\n6 * 4 = 24\n36 - 7 = 29\n29 - 30 = -1\n-1 + 1 = 0\n0 - 2 = -2\n-2 - 24 = -27\n-27 - 3 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 154,
            "GT": 16,
            "Query": "6 + 3 + 3 * 2 * 2 + 7 + 4 - 7 * 1 - 9 =   ",
            "Injected CoT": "3 * 2 = 6\n2 * 2 = 4\n6 * 4 = 24\n6 + 3 = 8\n8 + 24 = 33\n33 + 7 = 40\n40 + 4 = 44\n7 * 1 = 7\n44 - 7 = 37\n37 - 8 =",
            "Response": " 29\n29 - 9 = 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        if (curr < 0) {\n            curr = 0;\n            ++result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 157,
            "GT": 60,
            "Query": "6 - 2 + 3 + 3 - 4 - 7 + 6 * 9 + 3 + 4 =   ",
            "Injected CoT": "6 - 2 = 5\n5 + 3 = 7\n7 + 3 = 10\n10 - 5 = 6\n6 - 7 = -1\n6 * 9 = 54\n-1 + 54 = 53\n53 + 3 = 56\n56 + 5 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,x,y,flag,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(x=1;x<=t;x++)\n    {\n        gets(s);\n        l=strlen(s);\n        flag=0;\n        sum=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                sum=sum*10+s[i]-48;\n            }\n            if(flag==1)\n            {\n                if(s[i]=='+')\n                {\n                    flag=0;\n                }\n                if(s[i]=='-')\n                {\n                    flag=0;\n                    sum=sum*-1;\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 158,
            "GT": 25,
            "Query": "6 * 3 - 2 + 6 + 1 - 8 + 1 * 6 - 5 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n18 - 2 = 17\n17 + 6 = 22\n22 + 1 = 23\n23 - 8 = 15\n1 * 6 = 6\n15 + 6 = 21\n21 - 5 = 17\n17 + 9 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else {\n                result -= currentNumber;\n            }\n            currentNumber = 0;\n            currentSign = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else {\n        result -= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 162,
            "GT": -13,
            "Query": "2 * 1 + 5 - 5 - 9 - 6 * 5 + 5 * 6 - 6 =   ",
            "Injected CoT": "2 * 1 = 2\n5 * 5 = 30\n5 * 5 = 30\n2 + 5 = 7\n7 - 5 = 2\n2 - 9 = -7\n-7 - 30 = -37\n-37 + 30 = -7\n-7 + 30 = 23\n23 - 5 = 17\n17 + 30 = 47\n47 - 5 = 41\n41 - 5 =",
            "Response": " 36\n36 + 30 = 66\n66 - 5 = 61\n61 - 5 = 56\n56 + 30 = 86\n86 - 5 = 81\n81 - 5 = 76\n76 + 30 = 106\n106 - 5 = 101\n101 - 5 = 96\n96 + 30 = 126\n126 - 5 = 121\n121 - 5 = 116\n116 + 30 = 146\n146 - 5 = 141\n141 - 5 = 136\n136 + 30 = 166\n166 - 5 = 161\n161 - 5 = 156\n156 + 30 = 186\n186 - 5 = 181\n181 - 5 = 176\n176 + 30 = 206\n206 - 5 = 201\n201 - 5 = 196\n196 + 30 = 226\n226 - 5 = 221\n221 - 5 = 216\n216 + 30 = 246\n246 - 5 = 241\n241 - 5 = 236\n236 + 30 = 266\n266 - 5 = 261\n261 - 5 = 256\n256 + 30 = 286\n286 - 5 = 281\n281 - 5 = 276\n276 + 30 = 306\n306 - 5 = 301\n301 - 5 = 296\n296 + 30 = 326\n326 - 5 = 321\n321 - 5 = 316\n316 + 30 = 346\n346 - 5 = 341\n341 - 5 = 336\n336 + 30 = 366\n366 - 5 = 361\n361 - 5 = 356\n356 + 30 = 386\n386 - 5 = 381\n381 - 5 = 376\n376 + 30 = 406\n406 - 5 = 401\n401 - 5 = 396\n396 + 30 = 426\n426 - 5 = 421\n421 - 5 = 416\n416 + 30 = 446\n446 - 5 = 441\n441 - 5 = 436\n436 + 30 = 466\n466 - 5 = 461\n461 - 5 = 456\n456 + 30 = 486\n486 - 5 = 481\n481 - 5 = 476\n476 + 30 = 516\n516 - 5 = 511\n511 - 5 = 506\n506 + 30 = 536\n536 - 5 = 531\n531 - 5 = 526\n526 + 30 = 556\n556 - 5 = 551\n551 - 5 = 546\n546 + 30 = 576\n576 - 5 = 571\n571 - 5 = 566\n566 + 30 = 596\n596 - 5 = 591\n591 - 5 = 586\n586 + 30 = 616\n616 - 5 = 611\n611 - 5 = 606\n606 + 30 = 636\n636 - 5 = 631\n631 - 5 = 626\n626 + 30 = 656\n656 - 5 = 651\n651 - 5 = 646\n646 + 30 = 676\n676 - 5 = 671\n671 - 5 = 666\n666 + 30 = 696\n696 - 5 = 691\n691 - 5 = 686\n686 + 30 = 716\n716 - 5 = 711\n711 - 5 = 706\n706 + 30 = 736\n736 - 5 = 731\n731 - 5 = 726\n726 + 30 = 756\n756 - 5 = 751\n751 - 5 = 746\n746 + 30 = 776\n776 - 5 = 771\n771 - 5 = 766\n766 + 30 = 796\n796 - 5 = 791\n791 - 5 = 786\n786 + 30 = 816\n816 - 5 = 811\n811 - 5 = 806\n806 + 30 = 836\n836 - 5 = 831\n831 - 5 = 826\n826 + 30 = 856\n856 - 5 = 851\n851 - 5 = 846\n846 + 30 = 876\n876 - 5 = 871\n871 - 5 = 866\n866 + 30 = 896\n896 - 5 = 891\n891 - 5 = 886\n886 + 30 = 916\n916 - 5 = 911\n911 - 5 = 906\n906 + 30 = 936\n936 - 5 = 931\n931 - 5 = 926\n926 + 30 = 956\n956 - 5 = 951\n951 - 5 = 946\n946 + 30 = 976\n976 - 5 = 971\n971 - 5 = 966\n966 + 30 = 996\n996 - 5 = 991\n991 - 5 = 986\n986 + 30 = 1026\n1026 - 5 = 1021\n1021 - 5 = 1016\n1016 + 30 = 1046\n1046 - 5 = 1041\n1041 - 5 = 1036\n1036 + 30 = 1066\n1066 - 5 = 1061\n1061 - 5 = 1056\n1056 + 30 = 1086\n1086 - 5 = 1081\n1081 - 5 = 1076\n1076 + 30 = 1116\n1116 - 5 = 1111\n1111 - 5 = 1106\n1106 + 30 = 1136\n1136 - 5 = 1131\n1131 - 5 = 1126\n1126 + 30 = 1156\n1156 - 5 = 1151\n1151 - 5 = 1146\n1146 + 30 = 1176\n1176 - 5 = 1171\n1171 - 5 = 1166\n1166 + 30 = 1196\n1196 - 5 = 1191\n1191 - 5 = 1186\n1186 + 30 = 1216\n1216 - 5 = 1211\n1211 - 5 = 1206\n1206 + 30 = 1236\n1236 - 5 = 1231\n1231 - 5 = 1226\n1226 + 30 = 1256\n1256 - 5 = 1251\n1251 - 5 = 1246\n1246 + 30 = 1276\n1276 - 5 = 1271\n1271 - 5 = 1266\n1266 + 30 = 1296\n1296 - 5 = 1291\n1291 - 5 = 1286\n1286 + 30 = 1316\n1316 - 5 = 1311\n1311 - 5 = 1306\n1306 + 30 = 1336\n1336 - 5 = 1331\n1331 - 5 = 1326\n1326 + 30 = 1356\n1356 - 5 = 1351\n1351 - 5 = 1346\n1346 + 30 = 1376\n1376 - 5 = 1371\n1371 - 5 = 1366\n1366 + 30 = 1396\n1396 - 5 = 1391\n1391 - 5 = 1386\n1386 + 30 = 1416\n1416 - 5 = 1411\n1411 - 5 = 1406\n1406 + 30 = 1436\n1436 - 5 = 1431\n1431 - 5 = 1426\n1426 + 30 = 1456\n1456 - 5 = 1451\n1451 - 5 = 1446\n1446 + 30 = 1476\n1476 - 5 = 1471\n1471 - 5 = 1466\n1466 + 30 = 1496\n1496 - 5 = 1491\n1491 - 5 = 1486\n1486 + 30 = 1526\n1526 - 5 = 1521\n1521 - 5 = 1516\n1516 + 30 = 1546\n1546 - 5 = 1541\n1541 - 5 = 1536\n1536 + 30 = 1566\n1566 - 5 = 1561\n1561 - 5 = 1556\n1556 + 30 = 1586\n1586 - 5 = 1581\n1581 - 5 = 1576\n1576 + 30 = 1616\n1616 - 5 = 1611\n1611 - 5 = 1606\n1606 + 30 = 1636\n1636 - 5 = 1631\n1631 - 5 = 1626\n1626 + 30 = 1656\n1656 - 5 = 1651\n1651 - 5 = 1646\n1646 + 30 = 1676\n1676 - 5 = 1671\n1671 - 5 = 1666\n1666 + 30 = 1696\n1696 - 5 = 1691\n1691 - 5 = 1686\n1686 + 30 = 1716\n1716 - 5 = 1711\n1711 - 5 = 1706\n1706 + 30 = 1736\n1736 - 5 = 1731\n1731 - 5 = 1726\n1726 + 30 = 1756\n1756 - 5 = 1751\n1751 - 5 = 1746\n1746 + 30 = 1776\n1776 - 5 = 1771\n1771 - 5 = 1766\n1766 + 30 = 1796\n1796 - 5 = 1791\n1791 - 5 = 1786\n1786 + 30 = 1816\n1816 - 5 = 1811\n1811 - 5 = 1806\n1806 + 30 = 1836\n1836 - 5 = 1831\n1831 - 5 = 1826\n1826 + 30 = 1856\n1856 - 5 = 1851\n1851 - 5 = 1846\n1846 + 30 = 1876\n1876 - 5 = 1871\n1871 - 5 = 1866\n1866 + 30 = 1896\n1896 - 5 = 1891\n1891 - 5 = 1886\n1886 + 30 = 1926\n1926 - 5",
            "Extract-Response": "\n\n1926 - 5 = 1921"
        },
        {
            "Index": 163,
            "GT": 132,
            "Query": "4 - 6 + 7 + 9 * 3 * 5 - 6 + 1 - 2 - 1 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 5 = 135\n4 - 6 = -2\n-2 + 7 = 5\n5 + 135 = 140\n140 - 6 = 134\n134 + 0 = 135\n135 - 2 = 133\n133 - 0 =",
            "Response": " 133",
            "Extract-Response": " 133\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '*') {\n                current *= result;\n            } else {\n                current += result;\n            }\n            result = 0;\n            operation = s[i];\n        } else {\n            result = result * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '*') {\n        current *= result;\n    } else {\n        current += result;\n    }\n\n    cout << current << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 164,
            "GT": 199,
            "Query": "8 - 8 + 8 * 5 * 1 * 5 + 3 - 6 + 3 - 1 =   ",
            "Injected CoT": "8 - 8 = 0\n5 * 2 = 5\n5 * 5 = 25\n0 + 25 = 25\n25 + 3 = 28\n28 - 6 = 22\n22 + 3 = 25\n25 - 2 =",
            "Response": " 23",
            "Extract-Response": "\n\n23."
        },
        {
            "Index": 165,
            "GT": -58,
            "Query": "8 - 7 * 9 + 5 - 3 - 6 - 2 + 4 - 6 + 5 =   ",
            "Injected CoT": "7 * 9 = 63\n8 - 63 = -55\n-55 + 5 = -50\n-50 - 3 = -53\n-53 - 6 = -59\n-59 - 2 = -61\n-61 + 4 = -57\n-57 - 6 = -64\n-64 + 5 =",
            "Response": " -59",
            "Extract-Response": " -59.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 167,
            "GT": -351,
            "Query": "3 - 7 * 8 * 6 - 2 - 2 * 1 - 1 * 2 * 7 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 6 = 336\n3 - 336 = -333\n2 * 1 = 2\n-2 - 2 = -4\n1 * 2 = 2\n2 * 7 = 13\n-4 - 13 =",
            "Response": " -17\n-333 - 17 = -350",
            "Extract-Response": " -350\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 168,
            "GT": 36,
            "Query": "1 * 9 + 3 * 8 - 1 + 7 + 2 + 5 - 4 - 6 =   ",
            "Injected CoT": "1 * 9 = 9\n3 * 8 = 24\n9 + 24 = 33\n33 + 7 = 40\n40 + 2 = 42\n42 + 5 = 48\n-4 - 6 = -10\n48 - 10 =",
            "Response": " 38",
            "Extract-Response": " 38.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 171,
            "GT": -30,
            "Query": "3 + 9 - 5 * 7 + 4 - 5 + 3 - 9 + 6 - 6 =   ",
            "Injected CoT": "5 * 7 = 35\n3 + 9 = 12\n12 - 35 = -23\n-23 + 4 = -19\n-19 - 5 = -24\n-24 + 3 = -21\n-21 - 9 = -30\n-30 + 7 = -24\n-24 - 7 =",
            "Response": " -31\n-31 + 6 = -25\n-25 + 6 = -19",
            "Extract-Response": " -19.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        sum += a;\n    }\n    cout << sum << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 175,
            "GT": -56,
            "Query": "1 - 6 - 8 * 3 - 7 + 4 * 9 - 8 * 6 - 8 =   ",
            "Injected CoT": "-8 * 3 = -24\n-6 - 24 = -30\n4 * 9 = 36\n-8 * 6 = -48\n-30 + 36 = 6\n6 - 7 = -1\n-1 - 7 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 176,
            "GT": 10,
            "Query": "8 - 9 - 4 * 9 - 7 - 2 * 3 + 4 * 5 * 3 =   ",
            "Injected CoT": "4 * 5 = 20\n9 * 4 = 36\n3 * 20 = 60\n20 - 9 = 11\n36 - 7 = 29\n2 * 3 = 6\n60 + 29 = 89\n89 - 6 = 83\n7 - 83 =",
            "Response": " -76",
            "Extract-Response": " -76.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 100,\n-100 \u2264 a[i] \u2264 100.\n\n[input] array.string op\n\nArray of operations.\n\nGuaranteed constraints:\nop.length = a.length - 1,\nop[i] \u2208 {\"*\", \"/\", \"+\", \"-\"}.\n\n[output] integer\n\nThe result of the expression.\n\"\"\"\n\ndef arithmeticExpression(n, a, op):\n    if n == 1:\n        return a[0]\n    else:\n        if op[0] == '*':\n            return a[0] * arithmeticExpression(n-1, a[1:], op[1:])\n        elif op[0] == '/':\n            return a[0] / arithmeticExpression(n-1, a[1:], op[1:])\n        elif op[0] == '+':\n            return a[0] + arithmeticExpression(n-1, a[1:], op[1:])\n        elif op[0] == '-':\n            return a[0] - arithmeticExpression(n-1, a[1:], op[1:])"
        },
        {
            "Index": 177,
            "GT": 30,
            "Query": "8 + 2 + 2 + 1 - 3 - 4 + 7 - 1 + 9 + 9 =   ",
            "Injected CoT": "8 + 2 = 10\n10 + 2 = 12\n12 + 1 = 13\n13 - 3 = 10\n10 - 4 = 6\n6 + 7 = 13\n13 - 1 = 12\n12 + 8 = 21\n21 + 8 =",
            "Response": " 29\n29 + 9 = 38\n38 + 9 = 47",
            "Extract-Response": "\n47\n\n*/"
        },
        {
            "Index": 183,
            "GT": 26,
            "Query": "6 * 9 - 6 + 2 - 8 * 3 + 4 + 2 + 1 - 7 =   ",
            "Injected CoT": "6 * 9 = 54\n54 - 6 = 48\n48 + 2 = 50\n8 * 3 = 24\n50 - 24 = 26\n26 + 4 = 30\n30 + 2 = 32\n32 + 1 = 34\n34 - 7 =",
            "Response": " 27",
            "Extract-Response": "\n\n27."
        },
        {
            "Index": 184,
            "GT": -84,
            "Query": "7 - 9 * 2 - 8 * 9 - 6 - 6 * 1 + 8 + 3 =   ",
            "Injected CoT": "9 * 2 = 18\n8 * 9 = 72\n6 * 1 = 6\n18 * -1 = -18\n72 * -1 = -72\n6 * -1 = -6\n7 + -18 = -11\n-11 + -72 = -83\n-83 + -6 = -89\n-89 + 8 = -80\n-80 + 3 =",
            "Response": " -77",
            "Extract-Response": " -77.\n\nNote:\nThe number of nodes in the tree is between 1 and 1000.\nEach node in the tree has a distinct value between -1000 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};"
        },
        {
            "Index": 185,
            "GT": -17,
            "Query": "1 - 9 + 2 + 4 - 6 + 9 + 3 * 6 - 6 * 6 =   ",
            "Injected CoT": "3 * 6 = 18\n6 * 6 = 36\n1 - 9 = -8\n-8 + 2 = -6\n-6 + 4 = -2\n-2 - 6 = -8\n-8 + 9 = 1\n1 + 18 = 20\n20 - 36 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <functional>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int cur = 0;\n    int ans = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * cur;\n            cur = 0;\n            sign = -1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    ans += sign * cur;\n    cout << ans << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 187,
            "GT": -100,
            "Query": "5 - 3 * 2 * 4 - 1 * 7 - 3 - 8 * 9 + 1 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 4 = 24\n1 * 7 = 7\n8 * 9 = 72\n5 - 24 = -19\n-19 - 7 = -26\n-26 - 3 = -29\n-29 - 72 = -100\n-100 + 1 =",
            "Response": " -99",
            "Extract-Response": " -99.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nThe elements of the given array will be in range [-1000000, 1000000].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 188,
            "GT": -18,
            "Query": "5 - 8 * 4 + 7 - 2 - 3 - 4 + 3 + 5 + 3 =   ",
            "Injected CoT": "-8 * 4 = -32\n5 - (-32) = 37\n37 + 7 = 44\n44 - 2 = 42\n42 - 4 = 39\n39 - 4 = 35\n35 + 4 = 38\n38 + 5 = 43\n43 + 4 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += current;\n            current = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + (c - '0');\n            current *= sign;\n        }\n    }\n    result += current;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 189,
            "GT": 41,
            "Query": "3 + 2 + 9 + 1 * 8 * 4 + 3 + 5 - 6 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 4 = 32\n3 + 2 = 5\n5 + 9 = 14\n14 + 1 = 15\n15 + 32 = 47\n47 + 3 = 50\n50 + 5 = 55\n55 - 6 = 49\n49 - 8 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\nNote: As there are a lot of operations, it is hard to track them all. Please refer to the operations above for the order in which you should perform them.\n\nInput Format\n\nThe first line of input contains two numbers,  and . \nThe next  lines contains  space separated integers.\n\nConstraints\n\nOutput Format\n\nPrint the answer to the expression.\n\nSample Input\n\n3\n4 3 2\nSample Output\n\n41\nExplanation\n\n*/\n\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   \n    int n;\n    cin >> n;\n    int arr[n];\n    for(int i=0;i<n;i++)\n        cin >> arr[i];\n    int sum = arr[0];\n    for(int i=1;i<n;i++)\n    {\n        if(i%2==1)\n            sum += arr[i];\n        else\n            sum -= arr[i];\n    }\n    cout << sum;\n    return 0;\n}"
        },
        {
            "Index": 191,
            "GT": 375,
            "Query": "8 * 7 * 5 - 2 + 2 * 6 * 8 - 2 * 3 + 7 =   ",
            "Injected CoT": "8 * 6 = 56\n56 * 5 = 280\n2 * 6 = 12\n12 * 8 = 96\n280 - 2 = 278\n96 + 278 = 374\n2 * 3 = 6\n374 - 6 = 368\n368 + 6 =",
            "Response": " 374\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 4 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 4 = 8\n446 - 8 = 438\n438 + 8 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 5 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 5 = 10\n446 - 10 = 436\n436 + 10 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 6 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 6 = 12\n446 - 12 = 434\n434 + 12 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 7 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 7 = 14\n446 - 14 = 432\n432 + 14 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 8 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 8 = 16\n446 - 16 = 430\n430 + 16 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 9 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 9 = 18\n446 - 18 = 428\n428 + 18 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 10 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 10 = 20\n446 - 20 = 426\n426 + 20 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 11 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 11 = 22\n446 - 22 = 424\n424 + 22 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 12 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 12 = 24\n446 - 24 = 422\n422 + 24 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 13 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 13 = 26\n446 - 26 = 420\n420 + 26 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 14 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 14 = 28\n446 - 28 = 418\n418 + 28 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 15 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 15 = 30\n446 - 30 = 416\n416 + 30 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 16 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 16 = 32\n446 - 32 = 414\n414 + 32 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 17 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 17 = 34\n446 - 34 = 412\n412 + 34 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 18 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 18 = 36\n446 - 36 = 410\n410 + 36 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 19 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 19 = 38\n446 - 38 = 408\n408 + 38 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 20 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 20 = 40\n446 - 40 = 406\n406 + 40 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 21 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 21 = 42\n446 - 42 = 404\n404 + 42 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 22 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 22 = 44\n446 - 44 = 402\n402 + 44 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 23 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 23 = 46\n446 - 46 = 400\n400 + 46 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 24 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 24 = 48\n446 - 48 = 398\n398 + 48 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 25 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 25 = 50\n446 - 50 = 396\n396 + 50 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 26 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 26 = 52\n446 - 52 = 394\n394 + 52 = 446\n\n8 * 7 * 6 * 5 - 2 + 2 * 8 * 7 - 2 * 27 + 7 =    \n8 * 7 = 56\n56 * 6 = 336\n2 * 8 = 16\n16 * 7 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 27 = 54\n446 - 54 = 392\n392 + 54 = 446\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 28 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 -",
            "Extract-Response": "\n\n7 * 8 * 6 * 5 - 2 + 2 * 7 * 8 - 2 * 28 + 7 =    \n7 * 8 = 56\n56 * 6 = 336\n2 * 7 = 14\n14 * 8 = 112\n336 - 2 = 334\n112 + 334 = 446\n2 * 28 = 56\n446 - 56 = 390\n390 + 56 = 446"
        },
        {
            "Index": 192,
            "GT": 1507,
            "Query": "7 * 9 * 8 * 3 - 8 - 3 + 8 - 1 + 3 - 4 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 8 = 504\n504 * 3 = 1512\n1512 - 8 = 1504\n1504 - 3 = 1501\n1501 + 8 = 1509\n1509 - 1 = 1508\n1508 + 3 = 1510\n1510 - 4 =",
            "Response": " 1506\n\n63 * 8 * 3 - 8 - 3 + 8 - 1 + 3 - 4 = 1506",
            "Extract-Response": "\n\n63 * 8 * 3 - 8 - 3 + 8 - 1 + 3 - 4 = 1506"
        },
        {
            "Index": 194,
            "GT": 111,
            "Query": "1 * 5 + 2 + 8 * 9 + 3 + 6 - 1 + 4 * 6 =   ",
            "Injected CoT": "1 * 5 = 5\n8 * 9 = 72\n4 * 6 = 24\n5 + 2 = 7\n72 + 3 = 75\n6 - 1 = 5\n24 + 4 = 29\n5 + 75 = 80\n80 + 29 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 195,
            "GT": 5,
            "Query": "2 * 2 * 4 - 5 * 1 + 3 * 1 - 9 - 9 + 9 =   ",
            "Injected CoT": "2 * 2 = 4\n4 * 4 = 16\n5 * 1 = 5\n3 * 1 = 3\n9 + 9 = 18\n18 - 5 = 13\n13 + 3 = 16\n16 - 9 = 8\n8 - 9 = -2\n-2 + 9 = 8\n16 + 8 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 196,
            "GT": 27,
            "Query": "7 + 5 + 7 + 2 + 4 - 3 + 7 - 7 - 2 + 7 =   ",
            "Injected CoT": "6 + 5 = 12\n12 + 6 = 19\n19 + 2 = 21\n21 + 4 = 25\n25 - 3 = 22\n22 + 6 = 29\n29 - 6 = 22\n22 - 2 = 20\n20 + 6 =",
            "Response": " 26\n26 + 7 = 33\n33 - 7 = 26\n26 - 7 = 19\n19 - 7 = 12\n12 - 7 = 5\n5 - 7 = -2",
            "Extract-Response": " -2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 198,
            "GT": 22,
            "Query": "8 + 2 + 1 + 8 + 3 - 4 - 5 + 2 * 3 + 3 =   ",
            "Injected CoT": "3 * 3 = 6\n8 + 3 + 1 + 8 + 3 - 4 - 5 + 6 + 3 =",
            "Response": "    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n",
            "Extract-Response": "\n\n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n8 + 3 + 1 + 8 + 3 - 4 - 5 + 9 =    \n"
        },
        {
            "Index": 200,
            "GT": -81,
            "Query": "7 - 7 * 5 - 8 - 6 - 3 - 4 * 7 - 8 * 1 =   ",
            "Injected CoT": "7 * 5 = 35\n35 - 7 = 28\n28 - 8 = 20\n20 - 6 = 14\n14 - 3 = 11\n4 * 7 = 28\n8 * 1 = 8\n28 + 8 = 35\n35 + 11 =",
            "Response": " 46\n46 + 14 = 60\n60 + 20 = 80\n80 + 28 = 108",
            "Extract-Response": "\n108\n\n*/"
        },
        {
            "Index": 202,
            "GT": -6,
            "Query": "4 * 8 + 7 - 5 - 6 + 6 - 7 * 4 - 8 - 4 =   ",
            "Injected CoT": "3 * 8 = 32\n32 + 7 = 39\n39 - 5 = 34\n34 - 6 = 28\n28 + 6 = 34\n7 * 3 = 28\n34 - 28 = 6\n6 - 8 = -2\n-2 - 3 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 207,
            "GT": 318,
            "Query": "5 * 6 * 3 * 4 + 5 + 4 - 6 * 8 + 2 - 5 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 3 = 90\n90 * 4 = 360\n360 + 5 = 365\n365 + 4 = 369\n6 * 8 = 48\n369 - 48 = 321\n321 + 2 = 324\n324 - 5 =",
            "Response": " 319",
            "Extract-Response": " 319\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 209,
            "GT": 20,
            "Query": "4 + 5 * 6 - 2 * 7 - 9 + 7 + 8 - 5 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n4 + 30 = 34\n2 * 7 = 14\n34 - 14 = 20\n20 - 9 = 11\n11 + 7 = 18\n18 + 8 = 26\n26 - 5 = 22\n22 - 1 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 210,
            "GT": 1278,
            "Query": "9 * 6 * 4 * 6 - 3 + 3 + 7 * 2 - 4 * 8 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 4 = 216\n216 * 6 = 1296\n7 * 2 = 14\n4 * 8 = 33\n1296 - 3 = 1293\n1293 + 3 = 1296\n1296 + 14 = 1310\n1310 - 33 =",
            "Response": " 1277",
            "Extract-Response": "\n\n1277"
        },
        {
            "Index": 212,
            "GT": 702,
            "Query": "8 * 2 * 8 * 5 - 5 + 7 * 9 + 2 + 2 * 1 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 8 = 128\n128 * 5 = 640\n640 - 5 = 635\n7 * 9 = 63\n2 * 1 = 2\n63 + 2 = 64\n635 + 64 =",
            "Response": " 699",
            "Extract-Response": " 699\n</code>\n"
        },
        {
            "Index": 213,
            "GT": 43,
            "Query": "6 * 6 + 6 + 4 - 8 + 7 - 1 * 2 - 1 + 1 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n42 + 4 = 46\n46 - 8 = 38\n38 + 7 = 45\n45 - 2 * 2 = 43\n43 - 2 = 42\n42 + 2 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <unordered_set>\n#include <cassert>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        int num = 0;\n        stack<int> st;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else if (s[i] == '+') {\n                result += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                result += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(result);\n                st.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result += sign * num;\n                num = 0;\n                result *= st.top();\n                st.pop();\n                result += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            result += sign * num;\n        }\n        return result;\n    }\n};\n\nint main() {\n    Solution s;\n    string ss = \"1-(5)\";\n    cout << s.calculate(ss) << endl;\n    return 0;\n}"
        },
        {
            "Index": 214,
            "GT": 134,
            "Query": "8 * 7 + 9 + 8 * 9 + 9 - 4 - 6 + 1 - 3 =   ",
            "Injected CoT": "8 * 7 = 56\n8 * 9 = 72\n56 + 9 = 65\n72 + 9 = 81\n65 + 81 = 146\n146 - 4 = 142\n142 - 6 = 136\n136 + 1 = 137\n137 - 2 =",
            "Response": " 135",
            "Extract-Response": " 135\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 215,
            "GT": -99,
            "Query": "7 * 5 * 7 + 4 * 4 - 9 * 5 * 8 - 5 + 5 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 7 = 245\n4 * 4 = 16\n9 * 5 = 45\n45 * 8 = 360\n245 - 360 = -115\n-115 - 5 = -121\n-121 + 5 =",
            "Response": " -116",
            "Extract-Response": " -116.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 216,
            "GT": 27,
            "Query": "8 + 5 + 6 + 3 - 1 + 6 + 3 * 3 - 8 - 1 =   ",
            "Injected CoT": "3 * 3 = 8\n8 + 5 = 13\n13 + 6 = 19\n19 + 3 = 22\n22 - 1 = 21\n21 + 6 = 27\n27 - 8 = 19\n19 - 1 = 18\n18 + 8 =",
            "Response": " 26",
            "Extract-Response": " 26.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 217,
            "GT": 59,
            "Query": "2 - 2 * 9 + 7 + 7 * 6 + 3 + 2 * 8 + 7 =   ",
            "Injected CoT": "2 * 9 = 18\n2 - 18 = -15\n7 * 6 = 42\n2 * 8 = 16\n-15 + 7 + 42 + 3 + 16 + 7 =",
            "Response": "\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 +",
            "Extract-Response": "\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 + 7 =\n-15 + 7 + 42 + 3 + 16 +"
        },
        {
            "Index": 220,
            "GT": -79,
            "Query": "5 + 1 + 2 - 5 * 4 - 2 - 6 + 5 - 8 * 8 =   ",
            "Injected CoT": "5 + 1 = 6\n6 + 2 = 8\n5 * 4 = 20\n20 - 8 = 12\n12 - 2 = 10\n10 - 6 = 4\n4 + 5 = 9\n8 * 8 = 65\n9 - 65 =",
            "Response": " -56",
            "Extract-Response": " -56.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperations(n):\n    # Write your code here\n    return 0"
        },
        {
            "Index": 223,
            "GT": 11,
            "Query": "5 - 3 - 3 + 6 - 3 * 5 * 1 + 8 * 2 + 5 =   ",
            "Injected CoT": "4 - 3 = 2\n2 - 3 = -1\n-1 + 6 = 4\n4 - 3 * 4 * 1 = -10\n-10 + 8 * 2 = 6\n6 + 4 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\n\nThe expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                sign = 1;\n                curNum = 0;\n            } else if (c == '-') {\n                res += sign * curNum;\n                sign = -1;\n                curNum = 0;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};"
        },
        {
            "Index": 226,
            "GT": -2,
            "Query": "5 - 4 + 2 * 4 - 5 - 3 - 1 + 5 - 4 - 3 =   ",
            "Injected CoT": "2 * 4 = 8\n5 - 4 = 1\n1 + 8 = 9\n9 - 5 = 4\n4 - 2 = 1\n1 - 1 = 0\n0 + 5 = 5\n5 - 4 = 1\n1 - 2 =",
            "Response": " -1\n-1 + 5 = 4\n4 - 3 = 1\n1 - 1 = 0\n0 + 4 = 4",
            "Extract-Response": " 4\n\n*/\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int num = c - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    num = num * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sign * num;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}"
        },
        {
            "Index": 227,
            "GT": 119,
            "Query": "7 * 4 - 1 + 6 + 9 * 7 + 2 + 5 + 2 * 8 =   ",
            "Injected CoT": "7 * 4 = 28\n9 * 7 = 63\n2 * 8 = 15\n28 - 1 = 27\n27 + 6 = 33\n33 + 63 = 96\n96 + 5 = 101\n101 + 15 =",
            "Response": " 116",
            "Extract-Response": " 116\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 233,
            "GT": -144,
            "Query": "9 - 9 * 8 + 1 - 6 + 5 - 1 - 9 * 8 - 8 =   ",
            "Injected CoT": "9 * 9 = 72\n9 - 72 = -63\n-63 + 1 = -62\n-62 - 6 = -68\n-68 + 5 = -63\n-63 - 1 = -64\n-9 * 9 = -72\n-64 - 72 = -136\n-136 - 9 =",
            "Response": " -145\n-145 * 8 = -1160\n-1160 + 1 = -1159\n-1159 - 8 = -1167\n-1167 - 9 = -1176\n-1176 + 1 = -1175\n-1175 * 8 = -9400\n-9400 + 1 = -9399\n-9399 - 8 = -9407\n-9407 - 9 = -9416\n-9416 + 1 = -9415\n-9415 * 8 = -75320\n-75320 + 1 = -75319\n-75319 - 8 = -75327\n-75327 - 9 = -75336\n-75336 + 1 = -75335\n-75335 * 8 = -602680\n-602680 + 1 = -602679\n-602679 - 8 = -602687\n-602687 - 9 = -602696\n-602696 + 1 = -602695\n-602695 * 8 = -4821560\n-4821560 + 1 = -4821559\n-4821559 - 8 = -4821567\n-4821567 - 9 = -4821576\n-4821576 + 1 = -4821575\n-4821575 * 8 = -38612600\n-38612600 + 1 = -38612599\n-38612599 - 8 = -38612607\n-38612607 - 9 = -38612616\n-38612616 + 1 = -38612615\n-38612615 * 8 = -309000960\n-309000960 + 1 = -309000959\n-309000959 - 8 = -309000967\n-309000967 - 9 = -309000976\n-309000976 + 1 = -309000975\n-309000975 * 8 = -2472007760\n-2472007760 + 1 = -2472007759\n-2472007759 - 8 = -2472007767\n-2472007767 - 9 = -2472007776\n-2472007776 + 1 = -2472007775\n-2472007775 * 8 = -19792066080\n-19792066080 + 1 = -19792066079\n-19792066079 - 8 = -19792066087\n-19792066087 - 9 = -19792066096\n-19792066096 + 1 = -19792066095\n-19792066095 * 8 = -158336528640\n-158336528640 + 1 = -158336528639\n-158336528639 - 8 = -158336528647\n-158336528647 - 9 = -158336528656\n-158336528656 + 1 = -158336528655\n-158336528655 * 8 = -1266728229120\n-1266728229120 + 1 = -1266728229 119\n-1266728229 119 - 8 = -1266728229 127\n-1266728229 127 - 9 = -1266728229 136\n-1266728229 136 + 1 = -1266728229 135\n-1266728229 135 * 8 = -10133832832960\n-10133832832960 + 1 = -10133832832959\n-10133832832959 - 8 = -10133832832967\n-10133832832967 - 9 = -10133832832976\n-10133832832976 + 1 = -10133832832975\n-10133832832975 * 8 = -81070662663168\n-81070662663168 + 1 = -81070662663167\n-81070662663167 - 8 = -81070662663175\n-81070662663175 - 9 = -81070662663184\n-81070662663184 + 1 = -81070662663183\n-81070662663183 * 8 = -648565301306544\n-648565301306544 + 1 = -648565301306543\n-648565301306543 - 8 = -648565301306551\n-648565301306551 - 9 = -648565301306560\n-648565301306560 + 1 = -648565301306559\n-648565301306559 * 8 = -5188424811052352\n-5188424811052 352 + 1 = -5188424811052 351\n-5188424811052 351 - 8 = -5188424811052 359\n-5188424811052 359 - 9 = -5188424811052 368\n-5188424811052 368 + 1 = -5188424811052 367\n-5188424811052 367 * 8 = -41587398488421856\n-41587398488421856 + 1 = -41587398488421855\n-41587398488421855 - 8 = -41587398488421863\n-41587398488421863 - 9 = -41587398488421872\n-41587398488421872 + 1 = -41587398488421871\n-41587398488421871 * 8 = -332699189107374848\n-332699189107374848 + 1 = -332699189107374847\n-332699189107374847 - 8 = -332699189107374855\n-332699189107374855 - 9 = -332699189107374864\n-332699189107374864 + 1 = -332699189107374863\n-332699189107374863 * 8 = -2661593512858939584\n-2661593512858939584 + 1 = -2661593512858939583\n-2661593512858939583 - 8 = -2661593512858939591\n-2661593512858939591 - 9 = -2661593512858939600\n-2661593512858939600 + 1 = -2661593512858939599\n-2661593512858939599 * 8 = -21293148102871507456\n-21293148102871507456 + 1 = -21293148102871507455\n-21293148102871507455 - 8 = -21293148102871507463\n-21293148102871507463 - 9 = -21293148102871507472\n-21293148102871507472 + 1 = -21293148102871507471\n-21293148102871507471 * 8 = -170345184822972179584\n-170345184822972179584 + 1 = -170345184822972179583\n-170345184822972179583 - 8 = -170345184822972179591\n-170345184822972179591 - 9 = -170345184822972179600\n-170345184822972179600 + 1 = -170345184822972179599\n-170345184822972179599 * 8 = -1366718278583777536768\n-1366718278583777536768 + 1 = -1366718278583777536767\n-1366718278583777536767 - 8 = -1366718278583777536775\n-1366718278583777536775 - 9 = -1366718278583777536784\n-1366718278583777536784 + 1 = -1366718278583777536783\n-1366718278583777536783 * 8 = -10933742228670020290048\n-10933742228670020290048 + 1 = -10933742228670020290047\n-10933742228670020290047 - 8 = -10933742228670020290055\n-10933742228670020290055 - 9 = -10933742228670020290064\n-10933742228670020290064 + 1 = -10933742228670020290063\n-10933742228670020290063 * 8 = -87477937749360162320384\n-87477937749360162320384 + 1 = -87477937749360162320383\n-87477937749360162320383 - 8 = -87477937749360162320391\n-87477937749360162320391 - 9 = -87477937749360162320400\n-87477937749360162320400 + 1 = -874779377493601623203",
            "Extract-Response": " -874779377493601623203\n"
        },
        {
            "Index": 234,
            "GT": -19,
            "Query": "4 + 1 * 2 * 4 - 3 + 6 - 4 * 8 + 6 - 8 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 4 = 8\n4 + 8 = 12\n12 - 3 = 9\n9 + 6 = 15\n4 * 8 = 32\n15 - 32 = -17\n-17 + 6 = -12\n-12 - 8 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe number of operations is between [1, 10000].\nYou cannot use the same operation more than once.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 235,
            "GT": 105,
            "Query": "2 - 2 - 3 * 1 + 3 + 9 * 9 - 3 + 9 * 3 =   ",
            "Injected CoT": "3 * 1 = 3\n2 - 2 = 0\n0 - 3 = -3\n9 * 9 = 81\n-3 + 81 = 77\n9 * 3 = 27\n77 + 27 =",
            "Response": " 104",
            "Extract-Response": " 104\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 237,
            "GT": -98,
            "Query": "4 + 1 * 1 - 9 * 1 - 6 * 2 * 8 + 3 - 1 =   ",
            "Injected CoT": "1 * 1 = 1\n9 * 1 = 9\n2 * 8 = 16\n6 * 16 = 96\n4 + 1 = 5\n5 - 1 = 4\n4 - 9 = -5\n-5 - 96 = -101\n-101 + 3 = -97\n-97 - 1 =",
            "Response": " -98\n\n-98",
            "Extract-Response": " -98"
        },
        {
            "Index": 238,
            "GT": -127,
            "Query": "8 - 9 * 9 - 6 * 4 - 2 * 9 + 8 - 4 * 5 =   ",
            "Injected CoT": "9 * 9 = 81\n6 * 4 = 24\n2 * 9 = 18\n4 * 5 = 20\n81 * -1 = -81\n24 * -1 = -24\n18 * -1 = -18\n-81 - 24 = -105\n-105 - 20 = -125\n-125 + 8 = -116\n-116 - 20 =",
            "Response": " -136\n-136 - 18 = -154\n-154 + 8 = -146\n-146 - 24 = -170\n-170 - 20 = -190\n-190 - 18 = -208\n-208 + 8 = -200\n-200 - 24 = -224\n-224 - 20 = -244\n-244 - 18 = -262\n-262 + 8 = -254\n-254 - 24 = -278\n-278 - 20 = -298\n-298 - 18 = -316\n-316 + 8 = -308\n-308 - 24 = -332\n-332 - 20 = -352\n-352 - 18 = -370\n-370 + 8 = -362\n-362 - 24 = -386\n-386 - 20 = -406\n-406 - 18 = -424\n-424 + 8 = -416\n-416 - 24 = -440\n-440 - 20 = -460\n-460 - 18 = -478\n-478 + 8 = -470\n-470 - 24 = -494\n-494 - 20 = -514\n-514 - 18 = -532\n-532 + 8 = -524\n-524 - 24 = -548\n-548 - 20 = -568\n-568 - 18 = -586\n-586 + 8 = -578\n-578 - 24 = -602\n-602 - 20 = -622\n-622 - 18 = -640\n-640 + 8 = -632\n-632 - 24 = -656\n-656 - 20 = -676\n-676 - 18 = -694\n-694 + 8 = -686\n-686 - 24 = -710\n-710 - 20 = -730\n-730 - 18 = -748\n-748 + 8 = -740\n-740 - 24 = -764\n-764 - 20 = -784\n-784 - 18 = -802\n-802 + 8 = -794\n-794 - 24 = -818\n-818 - 20 = -838\n-838 - 18 = -856\n-856 + 8 = -848\n-848 - 24 = -872\n-872 - 20 = -892\n-892 - 18 = -910\n-910 + 8 = -902\n-902 - 24 = -926\n-926 - 20 = -946\n-946 - 18 = -964\n-964 + 8 = -956\n-956 - 24 = -980\n-980 - 20 = -1000\n-1000 - 18 = -1018\n-1018 + 8 = -1010\n-1010 - 24 = -1034\n-1034 - 20 = -1054\n-1054 - 18 = -1072\n-1072 + 8 = -1064\n-1064 - 24 = -1088\n-1088 - 20 = -1108\n-1108 - 18 = -1126\n-1126 + 8 = -1118\n-1118 - 24 = -1142\n-1142 - 20 = -1162\n-1162 - 18 = -1180\n-1180 + 8 = -1172\n-1172 - 24 = -1196\n-1196 - 20 = -1216\n-1216 - 18 = -1234\n-1234 + 8 = -1226\n-1226 - 24 = -1250\n-1250 - 20 = -1270\n-1270 - 18 = -1288\n-1288 + 8 = -1280\n-1280 - 24 = -1304\n-1304 - 20 = -1324\n-1324 - 18 = -1342\n-1342 + 8 = -1334\n-1334 - 24 = -1358\n-1358 - 20 = -1378\n-1378 - 18 = -1396\n-1396 + 8 = -1388\n-1388 - 24 = -1412\n-1412 - 20 = -1432\n-1432 - 18 = -1450\n-1450 + 8 = -1442\n-1442 - 24 = -1466\n-1466 - 20 = -1486\n-1486 - 18 = -1504\n-1504 + 8 = -1496\n-1496 - 24 = -1520\n-1520 - 20 = -1540\n-1540 - 18 = -1558\n-1558 + 8 = -1550\n-1550 - 24 = -1574\n-1574 - 20 = -1594\n-1594 - 18 = -1612\n-1612 + 8 = -1604\n-1604 - 24 = -1628\n-1628 - 20 = -1648\n-1648 - 18 = -1666\n-1666 + 8 = -1658\n-1658 - 24 = -1682\n-1682 - 20 = -1702\n-1702 - 18 = -1720\n-1720 + 8 = -1712\n-1712 - 24 = -1736\n-1736 - 20 = -1756\n-1756 - 18 = -1774\n-1774 + 8 = -1766\n-1766 - 24 = -1790\n-1790 - 20 = -1810\n-1810 - 18 = -1828\n-1828 + 8 = -1820\n-1820 - 24 = -1844\n-1844 - 20 = -1864\n-1864 - 18 = -1882\n-1882 + 8 = -1874\n-1874 - 24 = -1898\n-1898 - 20 = -1918\n-1918 - 18 = -1936\n-1936 + 8 = -1928\n-1928 - 24 = -1952\n-1952 - 20 = -1972\n-1972 - 18 = -1990\n-1990 + 8 = -1982\n-1982 - 24 = -2006\n-2006 - 20 = -2026\n-2026 - 18 = -2044\n-2044 + 8 = -2036\n-2036 - 24 = -2060\n-2060 - 20 = -2080\n-2080 - 18 = -2098\n-2098 + 8 = -2090\n-2090 - 24 = -2114\n-2114 - 20 = -2134\n-2134 - 18 = -2152\n-2152 + 8 = -2144\n-2144 - 24 = -2168\n-2168 - 20 = -2188\n-2188 - 18 = -2206\n-2206 + 8 = -2198\n-2198 - 24 = -2222\n-2222 - 20 = -2242\n-2242 - 18 = -2260\n-2260 + 8 = -2252\n-2252 - 24 = -2276\n-2276 - 20 = -2296\n-2296 - 18 = -2314\n-2314 + 8 = -2306\n-2306 - 24 = -2330\n-2330 - 20 = -2350\n-2350 - 18 = -2368\n-2368 + 8 = -2360\n-2360 - 24 = -2384\n-2384 - 20 = -2404\n-2404 - 18 = -2422\n-2422 + 8 = -2414\n-2414 - 24 = -2438\n-2438 - 20 = -2458\n-2458 - 18 = -2476\n-2476 + 8 = -2468\n-2468 - 24 = -2492\n-2492 - 20 = -2512\n-2512 - 18 = -2530\n-2530 + 8 = -2522\n-2522 - 24 = -2546\n-2546 - 20 = -2566\n-2566 - 18 = -2584\n-2584 + 8 = -2576\n-2576 - 24 = -2598\n-2598 - 20 = -2618\n-2618 - 18 = -2636\n-2636 + 8 = -2628\n-2628 - 24 = -2652\n-2652 - 20 = -2672\n-2672 - 18 = -2690\n-2690 + 8 = -2682\n-2682 - 24 = -2706\n-2706 - 20 = -2726\n-2726 - 18 = -2744\n-2744 + 8 = -2736\n-2736 - 24 = -2760\n-2760 - 20 = -2780\n-2780 - 18 = -2798\n-2798 + 8 = -2790\n-2790 - 24 = -2814\n-2814 - 20 = -2834\n-2834 - 18 = -2852\n-2852 + 8 = -2844\n-2844 - 24 = -2868\n-2868 - 20 = -2888\n-2888 - 18 = -2906\n-2906 + 8 = -2898\n-2898 - 24 = -2922\n-2922 - 20 = -2942\n-2942 - 18 = -2960\n-2960 + 8 = -2952\n-2952 - 24 =",
            "Extract-Response": " -2952"
        },
        {
            "Index": 239,
            "GT": -5,
            "Query": "1 - 7 + 9 - 6 - 3 + 4 + 4 + 2 - 2 - 7 =   ",
            "Injected CoT": "-7 + 9 = 2\n2 - 6 = -4\n-4 - 3 = -7\n-7 + 4 = -3\n-3 + 4 = 1\n1 + 2 = 3\n3 - 2 = 1\n1 - 8 = -6\n-6 - 8 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 240,
            "GT": 125,
            "Query": "6 * 9 * 2 - 4 - 6 * 2 + 6 * 6 + 2 - 5 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 2 = 108\n6 * 2 = 12\n108 - 4 = 104\n104 - 12 = 92\n6 * 6 = 36\n92 + 36 = 128\n2 - 5 = -3\n128 - 2 =",
            "Response": " 126\n\n126",
            "Extract-Response": " 126"
        },
        {
            "Index": 241,
            "GT": 18,
            "Query": "5 + 6 * 2 - 2 + 1 + 7 - 7 + 9 + 2 - 9 =   ",
            "Injected CoT": "6 * 2 = 12\n5 + 12 = 17\n17 - 2 = 15\n15 + 1 = 16\n16 + 7 = 23\n23 - 7 = 16\n16 + 8 = 25\n25 + 2 = 27\n27 - 8 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        current += a;\n        if (current < 0) {\n            result += sign * current;\n            current = 0;\n            sign = -sign;\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 243,
            "GT": -29,
            "Query": "7 + 2 - 6 + 5 - 6 + 2 + 9 - 2 * 7 * 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 3 = 42\n7 + 2 = 9\n9 - 6 = 3\n3 + 5 = 8\n8 - 6 = 2\n2 + 2 = 4\n4 + 9 = 12\n12 - 42 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calcArray(vector<int>& A) {\n        int n = A.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                sum += A[i];\n            } else {\n                sum -= A[i];\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 245,
            "GT": 25,
            "Query": "5 - 8 + 6 - 9 + 6 * 3 + 9 + 4 + 9 - 9 =   ",
            "Injected CoT": "6 * 3 = 18\n5 - 8 = -3\n-3 + 6 = 3\n3 - 8 = -6\n-6 + 18 = 12\n12 + 8 = 21\n21 + 4 = 25\n25 + 8 = 34\n34 - 8 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 246,
            "GT": 43,
            "Query": "3 + 5 + 7 + 1 * 9 + 1 + 4 + 2 + 5 + 7 =   ",
            "Injected CoT": "1 * 9 = 9\n3 + 5 = 8\n8 + 7 = 15\n15 + 9 = 24\n24 + 1 = 25\n25 + 4 = 29\n29 + 2 = 31\n31 + 5 = 35\n35 + 7 =",
            "Response": " 42\n\n42\n\n*/",
            "Extract-Response": "\n\n42"
        },
        {
            "Index": 247,
            "GT": 34,
            "Query": "2 * 3 * 2 + 5 - 4 - 5 - 1 + 3 + 6 * 4 =   ",
            "Injected CoT": "2 * 3 = 6\n6 * 2 = 12\n12 + 5 = 17\n17 - 4 = 13\n13 - 5 = 8\n8 - 1 = 7\n7 + 3 = 11\n6 * 4 = 24\n11 + 24 =",
            "Response": " 35",
            "Extract-Response": " 35.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++){\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9'){\n                num = num * 10 + s[i] - '0';\n            }else{\n                if(!ops.empty() && ops.top() != '(' && isPrior(ops.top(), s[i])){\n                    int n2 = nums.top();\n                    nums.pop();\n                    int n1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = calc(n1, n2, op);\n                }\n                ops.push(s[i]);\n                nums.push(num);\n                num = 0;\n            }\n        }\n        while(!ops.empty()){\n            int n2 = nums.top();\n            nums.pop();\n            int n1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = calc(n1, n2, op);\n        }\n        return num;\n    }\n    \n    bool isPrior(char op1, char op2){\n        if(op1 == '*' || op1 == '/') return true;\n        if(op1 == '+' || op1 == '-'){\n            if(op2 == '+' || op2 == '-') return true;\n        }\n        return false;\n    }\n    \n    int calc(int n1, int n2, char op){\n        switch(op){\n            case '+': return n1 + n2;\n            case '-': return n1 - n2;\n            case '*': return n1 * n2;\n            case '/': return n1 / n2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 248,
            "GT": -36,
            "Query": "4 * 2 + 2 - 6 * 1 * 9 + 2 + 4 - 4 + 6 =   ",
            "Injected CoT": "4 * 2 = 8\n6 * 1 = 6\n6 * 9 = 54\n2 - 54 = -52\n8 + 2 = 9\n9 + 4 = 14\n14 - 4 = 9\n9 + 6 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 249,
            "GT": -81,
            "Query": "3 * 1 - 7 * 3 * 4 - 1 - 8 + 8 - 5 + 6 =   ",
            "Injected CoT": "3 * 1 = 3\n7 * 3 = 21\n21 * 4 = 84\n3 - 84 = -81\n-81 - 1 = -82\n-82 - 8 = -90\n-90 + 8 = -82\n-82 - 5 = -88\n-88 + 6 =",
            "Response": " -82",
            "Extract-Response": " -82.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < nums.size(); i++) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 251,
            "GT": -78,
            "Query": "1 * 4 * 9 + 6 * 8 - 4 * 5 * 9 + 6 * 3 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 9 = 36\n6 * 8 = 48\n4 * 5 = 20\n20 * 9 = 180\n6 * 3 = 18\n36 + 48 = 84\n84 - 180 = -95\n-95 + 18 =",
            "Response": " -77",
            "Extract-Response": " -77.\n\nNote:\n\nThe number of operations is in the range [1, 1000].\n1 <= x, y <= 10^9\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int x = 1, y = 0;\n        for (char c : s) {\n            if (c == 'A') {\n                x = x * 2 + y;\n            } else {\n                y = 2 * y + x;\n            }\n        }\n        return x + y;\n    }\n};"
        },
        {
            "Index": 253,
            "GT": -3,
            "Query": "5 + 4 * 1 - 3 - 8 - 9 + 1 * 1 * 4 * 2 =   ",
            "Injected CoT": "4 * 1 = 4\n5 + 4 = 9\n9 - 3 = 6\n6 - 9 = -2\n-2 - 9 = -11\n1 * 1 = 1\n1 * 4 = 4\n4 * 2 = 9\n-11 + 9 =",
            "Response": " -2\n\n-2",
            "Extract-Response": " -2.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 257,
            "GT": -56,
            "Query": "8 * 9 - 8 + 8 - 3 - 2 * 7 * 8 - 5 - 8 =   ",
            "Injected CoT": "7 * 9 = 72\n2 * 7 = 14\n14 * 7 = 112\n72 - 7 = 64\n64 + 7 = 72\n72 - 3 = 69\n69 - 112 = -43\n-43 - 5 = -48\n-48 - 7 =",
            "Response": " -55\n-55 - 8 = -63\n-63 + 8 = -55\n-55 + 8 = -47\n-47 + 8 = -39\n-39 + 8 = -31\n-31 + 8 = -23\n-23 + 8 = -15\n-15 + 8 = -7\n-7 + 8 = 1",
            "Extract-Response": " 1\n\n*/"
        },
        {
            "Index": 258,
            "GT": 49,
            "Query": "9 * 8 - 6 * 6 + 9 + 7 - 4 - 2 - 5 + 8 =   ",
            "Injected CoT": "9 * 8 = 72\n6 * 6 = 36\n72 - 36 = 36\n36 + 9 = 45\n45 + 7 = 52\n52 - 4 = 48\n48 - 2 = 46\n46 - 5 = 40\n40 + 8 =",
            "Response": " 48",
            "Extract-Response": "\n\n48"
        },
        {
            "Index": 259,
            "GT": 18,
            "Query": "8 + 6 + 1 + 2 - 7 * 1 + 7 - 8 + 4 + 5 =   ",
            "Injected CoT": "7 * 1 = 7\n8 + 6 = 14\n14 + 1 = 15\n15 + 2 = 17\n17 - 7 = 10\n10 + 7 = 17\n17 - 8 = 9\n9 + 4 = 13\n13 + 6 =",
            "Response": " 19\n19 + 5 = 24",
            "Extract-Response": "\n24\n\n*/"
        },
        {
            "Index": 260,
            "GT": 78,
            "Query": "6 * 7 - 2 + 8 - 6 + 8 + 7 + 7 + 8 + 6 =   ",
            "Injected CoT": "6 * 7 = 42\n42 - 2 = 40\n40 + 8 = 48\n48 - 6 = 42\n42 + 8 = 50\n50 + 7 = 57\n57 + 7 = 64\n64 + 8 = 71\n71 + 6 =",
            "Response": " 77",
            "Extract-Response": " 77\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 265,
            "GT": 98,
            "Query": "2 + 8 * 8 + 4 + 9 + 5 + 8 + 9 - 1 * 3 =   ",
            "Injected CoT": "8 * 8 = 64\n2 + 64 = 66\n66 + 4 = 70\n70 + 9 = 79\n79 + 5 = 84\n84 + 8 = 92\n92 + 9 = 102\n1 * 3 = 3\n102 - 3 =",
            "Response": " 99\n\n99 is the answer.",
            "Extract-Response": " 99.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the input string from the user.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterates through the string and adds the\n     * ASCII value of each character to the sum.\n     */\n    for(i=0; i<len; i++)\n    {\n        sum += str[i];\n    }\n\n    printf(\"Sum of ASCII values of given string: %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 266,
            "GT": 1774,
            "Query": "8 + 3 * 2 * 7 + 1 - 5 + 8 * 6 * 9 * 4 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 7 = 42\n8 + 42 = 50\n50 + 1 = 51\n51 - 5 = 47\n6 * 9 = 54\n54 * 4 = 216\n8 * 216 = 1728\n47 + 1728 =",
            "Response": " 1775",
            "Extract-Response": " 1775\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prevSign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            prevSign = sign;\n            sign = 1;\n            result += curr * prevSign;\n            curr = 0;\n        } else if (s[i] == '-') {\n            prevSign = sign;\n            sign = -1;\n            result += curr * prevSign;\n            curr = 0;\n        } else if (s[i] == '*') {\n            prevSign = sign;\n            sign = 1;\n            result += curr * prevSign;\n            curr = 0;\n        } else if (s[i] == '/') {\n            prevSign = sign;\n            sign = -1;\n            result += curr * prevSign;\n            curr = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 268,
            "GT": -269,
            "Query": "3 * 8 - 5 * 4 - 8 - 1 - 6 * 9 * 5 + 6 =   ",
            "Injected CoT": "3 * 8 = 24\n5 * 4 = 20\n6 * 9 = 54\n54 * 5 = 270\n270 * 6 = 1620\n24 - 20 = 4\n4 - 8 = -4\n-4 - 1 = -5\n-5 - 1620 = -1626\n-1626 + 6 =",
            "Response": " -1620",
            "Extract-Response": " -1620.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 269,
            "GT": -105,
            "Query": "2 - 5 + 9 - 5 * 9 + 7 * 2 - 5 * 4 * 4 =   ",
            "Injected CoT": "5 * 9 = 45\n-5 * 9 = -45\n7 * 2 = 14\n5 * 4 = 20\n20 * 4 = 81\n2 - 5 = -3\n-3 + 9 = 6\n6 - 45 = -39\n-39 + 14 = -25\n-25 - 81 =",
            "Response": " -106",
            "Extract-Response": " -106.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef operations(n):\n    # Write your code here\n    return 0"
        },
        {
            "Index": 273,
            "GT": 12,
            "Query": "6 - 9 + 6 - 3 + 1 + 5 + 7 * 2 - 5 - 3 =   ",
            "Injected CoT": "7 * 2 = 14\n-9 + 6 = -3\n6 - 4 = 4\n4 + 1 = 4\n4 + 5 = 9\n-3 + 9 = 6\n6 + 14 = 20\n20 - 5 = 15\n15 - 4 =",
            "Response": " 11",
            "Extract-Response": "\n\n11"
        },
        {
            "Index": 275,
            "GT": 69,
            "Query": "9 + 3 * 8 + 7 - 8 + 3 + 9 * 2 + 4 * 4 =   ",
            "Injected CoT": "3 * 8 = 24\n9 + 24 = 33\n33 + 7 = 40\n40 - 8 = 32\n32 + 3 = 35\n9 * 2 = 18\n4 * 4 = 16\n18 + 16 = 33\n35 + 33 =",
            "Response": " 68",
            "Extract-Response": " 68.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string and calculate\n     * sum of all digit until '=' found\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If '=' found, break the loop */\n        if(str[i] == '=')\n            break;\n\n        /* If '+' or '-' found, update sign */\n        else if(str[i] == '+')\n            sign = 1;\n        else if(str[i] == '-')\n            sign = -1;\n\n        /* If digit found, calculate sum */\n        else if(str[i] >= '0' && str[i] <= '9')\n        {\n            result = (result * 10) + (sign * (str[i] - '0'));\n        }\n    }\n\n    printf(\"Sum of all digit = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 281,
            "GT": 15,
            "Query": "4 + 3 * 6 + 4 - 3 + 4 - 5 - 1 - 4 - 2 =   ",
            "Injected CoT": "3 * 6 = 18\n4 + 18 = 22\n22 + 4 = 26\n26 - 3 = 23\n23 + 4 = 27\n27 - 5 = 22\n22 - 1 = 21\n21 - 4 = 18\n18 - 2 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - nums[i] - leftSum) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 282,
            "GT": 38,
            "Query": "6 * 8 - 7 - 9 + 4 - 3 + 3 - 3 + 6 - 1 =   ",
            "Injected CoT": "6 * 8 = 48\n48 - 7 = 41\n41 - 9 = 32\n32 + 4 = 36\n36 - 3 = 33\n33 + 3 = 36\n36 - 3 = 33\n33 + 6 = 40\n40 - 1 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 286,
            "GT": 90,
            "Query": "2 - 3 + 9 + 2 * 2 * 3 + 8 * 7 + 7 * 2 =   ",
            "Injected CoT": "2 * 2 = 4\n-3 + 9 = 6\n4 * 3 = 12\n8 * 7 = 56\n7 * 2 = 14\n12 + 56 = 68\n68 + 14 = 83\n2 - 3 = -1\n-1 + 83 =",
            "Response": " 82",
            "Extract-Response": "\n<code>82\n</code>\n"
        },
        {
            "Index": 288,
            "GT": 25,
            "Query": "8 - 4 - 8 + 7 + 8 - 5 + 5 - 2 + 4 * 4 =   ",
            "Injected CoT": "4 * 4 = 17\n8 - 4 = 4\n4 - 8 = -4\n-4 + 7 = 3\n3 + 8 = 11\n11 - 5 = 6\n6 + 5 = 11\n11 - 2 = 9\n9 + 17 =",
            "Response": " 26",
            "Extract-Response": " 26.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 289,
            "GT": -62,
            "Query": "3 - 3 - 2 * 2 * 4 * 4 + 2 * 7 - 6 - 6 =   ",
            "Injected CoT": "2 * 2 = 4\n4 * 4 = 16\n16 * 2 = 32\n3 - 3 = 0\n0 - 32 = -32\n2 * 7 = 14\n-32 + 14 = -18\n-6 - 6 = -12\n-18 - 13 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 290,
            "GT": 35,
            "Query": "3 + 7 - 5 * 4 - 6 + 2 + 5 + 4 * 9 + 8 =   ",
            "Injected CoT": "5 * 4 = 20\n3 + 7 = 10\n10 - 20 = -10\n-10 - 6 = -16\n-16 + 2 = -14\n-14 + 5 = -9\n4 * 9 = 36\n-9 + 36 = 28\n28 + 8 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 291,
            "GT": -74,
            "Query": "2 * 5 + 8 - 7 + 5 - 6 * 2 * 8 + 8 - 2 =   ",
            "Injected CoT": "1 * 5 = 10\n10 + 8 = 18\n18 - 7 = 11\n11 + 5 = 16\n6 * 1 = 12\n12 * 8 = 96\n96 - 16 = 80\n80 + 8 = 88\n88 - 1 =",
            "Response": " 87",
            "Extract-Response": " 87\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 292,
            "GT": 306,
            "Query": "9 - 8 * 1 * 5 - 8 + 1 * 8 * 7 * 6 + 9 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 8 = 1\n1 * 5 = 5\n1 - 5 = -4\n8 * 7 = 56\n56 * 6 = 336\n8 * 336 = 2688\n-4 + 2688 = 2684\n2684 - 8 = 2677\n2677 + 9 =",
            "Response": " 2686\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f;\n\tchar input[1000];\n\tchar output[1000];\n\tchar temp[1000];\n\tchar temp2[1000];\n\tchar temp3[1000];\n\tchar temp4[1000];\n\tchar temp5[1000];\n\tchar temp6[1000];\n\tchar temp7[1000];\n\tchar temp8[1000];\n\tchar temp9[1000];\n\tchar temp10[1000];\n\tchar temp11[1000];\n\tchar temp12[1000];\n\tchar temp13[1000];\n\tchar temp14[1000];\n\tchar temp15[1000];\n\tchar temp16[1000];\n\tchar temp17[1000];\n\tchar temp18[1000];\n\tchar temp19[1000];\n\tchar temp20[1000];\n\tchar temp21[1000];\n\tchar temp22[1000];\n\tchar temp23[1000];\n\tchar temp24[1000];\n\tchar temp25[1000];\n\tchar temp26[1000];\n\tchar temp27[1000];\n\tchar temp28[1000];\n\tchar temp29[1000];\n\tchar temp30[1000];\n\tchar temp31[1000];\n\tchar temp32[1000];\n\tchar temp33[1000];\n\tchar temp34[1000];\n\tchar temp35[1000];\n\tchar temp36[1000];\n\tchar temp37[1000];\n\tchar temp38[1000];\n\tchar temp39[1000];\n\tchar temp40[1000];\n\tchar temp41[1000];\n\tchar temp42[1000];\n\tchar temp43[1000];\n\tchar temp44[1000];\n\tchar temp45[1000];\n\tchar temp46[1000];\n\tchar temp47[1000];\n\tchar temp48[1000];\n\tchar temp49[1000];\n\tchar temp50[1000];\n\tchar temp51[1000];\n\tchar temp52[1000];\n\tchar temp53[1000];\n\tchar temp54[1000];\n\tchar temp55[1000];\n\tchar temp56[1000];\n\tchar temp57[1000];\n\tchar temp58[1000];\n\tchar temp59[1000];\n\tchar temp60[1000];\n\tchar temp61[1000];\n\tchar temp62[1000];\n\tchar temp63[1000];\n\tchar temp64[1000];\n\tchar temp65[1000];\n\tchar temp66[1000];\n\tchar temp67[1000];\n\tchar temp68[1000];\n\tchar temp69[1000];\n\tchar temp70[1000];\n\tchar temp71[1000];\n\tchar temp72[1000];\n\tchar temp73[1000];\n\tchar temp74[1000];\n\tchar temp75[1000];\n\tchar temp76[1000];\n\tchar temp77[1000];\n\tchar temp78[1000];\n\tchar temp79[1000];\n\tchar temp80[1000];\n\tchar temp81[1000];\n\tchar temp82[1000];\n\tchar temp83[1000];\n\tchar temp84[1000];\n\tchar temp85[1000];\n\tchar temp86[1000];\n\tchar temp87[1000];\n\tchar temp88[1000];\n\tchar temp89[1000];\n\tchar temp90[1000];\n\tchar temp91[1000];\n\tchar temp92[1000];\n\tchar temp93[1000];\n\tchar temp94[1000];\n\tchar temp95[1000];\n\tchar temp96[1000];\n\tchar temp97[1000];\n\tchar temp98[1000];\n\tchar temp99[1000];\n\tchar temp100[1000];\n\tchar temp101[1000];\n\tchar temp102[1000];\n\tchar temp103[1000];\n\tchar temp104[1000];\n\tchar temp105[1000];\n\tchar temp106[1000];\n\tchar temp107[1000];\n\tchar temp108[1000];\n\tchar temp109[1000];\n\tchar temp110[1000];\n\tchar temp111[1000];\n\tchar temp112[1000];\n\tchar temp113[1000];\n\tchar temp114[1000];\n\tchar temp115[1000];\n\tchar temp116[1000];\n\tchar temp117[1000];\n\tchar temp118[1000];\n\tchar temp119[1000];\n\tchar temp120[1000];\n\tchar temp121[1000];\n\tchar temp122[1000];\n\tchar temp123[1000];\n\tchar temp124[1000];\n\tchar temp125[1000];\n\tchar temp126[1000];\n\tchar temp127[1000];\n\tchar temp128[1000];\n\tchar temp129[1000];\n\tchar temp130[1000];\n\tchar temp131[1000];\n\tchar temp132[1000];\n\tchar temp133[1000];\n\tchar temp134[1000];\n\tchar temp135[1000];\n\tchar temp136[1000];\n\tchar temp137[1000];\n\tchar temp138[1000];\n\tchar temp139[1000];\n\tchar temp140[1000];\n\tchar temp141[1000];\n\tchar temp142[1000];\n\tchar temp143[1000];\n\tchar temp144[1000];\n\tchar temp145[1000];\n\tchar temp146[1000];\n\tchar temp147[1000];\n\tchar temp148[1000];\n\tchar temp149[1000];\n\tchar temp150[1000];\n\tchar temp151[1000];\n\tchar temp152[1000];\n\tchar temp153[1000];\n\tchar temp154[1000];\n\tchar temp155[1000];\n\tchar temp156[1000];\n\tchar temp157[1000];\n\tchar temp158[1000];\n\tchar temp159[1000];\n\tchar temp160[1000];\n\tchar temp161[1000];\n\tchar temp162[1000];\n\tchar temp163[1000];\n\tchar temp164[1000];\n\tchar temp165[1000];\n\tchar temp166[1000];\n\tchar temp167[1000];\n\tchar temp168[1000];\n\tchar temp169[1000];\n\tchar temp170[1000];\n\tchar temp171[1000];\n\tchar temp172[1000];\n\tchar temp173[1000];\n\tchar temp174[1000];\n\tchar temp175[1000];\n\tchar temp176[1000];\n\tchar temp177[1000];\n\tchar temp178[1000];\n\tchar temp179[1000];\n\tchar temp180[1000];\n\tchar temp181[1000];\n\tchar temp182[1000];\n\tchar temp183[1000];\n\tchar temp184[1000];\n\tchar temp185[1000];\n\tchar temp186[1000];\n\tchar temp187[1000];\n\tchar temp188[1000];\n\tchar temp189[1000];\n\tchar temp190[1000];\n\tchar temp191[1000];\n\tchar temp192[1000];\n\tchar temp193[1000];\n\tchar temp194[1000];\n\tchar temp195[1000];\n\tchar temp196[1000];\n\tchar temp197[1000];\n\tchar temp198[1000];\n\tchar temp199[1000];\n\tchar temp200[1000];\n\tchar temp201[1000];\n\tchar temp202[1000];\n\tchar temp203[1000];\n\tchar temp204[1000];\n\tchar temp205[1000];\n\tchar temp206[1000];\n\tchar temp207[1000];\n\tchar temp208[1000];\n\tchar temp209[1000];\n\tchar temp210[1000];\n\tchar temp211[1000];\n\tchar temp212[1000];\n\tchar temp213[1000];\n\tchar temp214[1000];\n\tchar temp215[1000];\n\tchar temp216[1000];\n\tchar temp217[1000];\n\tchar temp218[1000];\n\tchar temp219[1000];\n\tchar temp220[1000];\n\tchar temp221[1000];\n\tchar temp222[1000];\n\tchar temp223[1000];\n\tchar temp224[1000];\n\tchar temp225[1000];\n\tchar temp226[1000];\n\tchar temp227[1000];\n\tchar temp228[1000];\n\tchar temp229[1000];\n\tchar temp230[1000];\n\tchar temp231[1000];\n\tchar temp232[1000];\n\tchar temp233[1000];\n\tchar temp234[1000];\n\tchar temp235[1000];\n\tchar temp236[1000];\n\tchar temp237[1000];\n",
            "Extract-Response": "\n\tstrcpy(input, \"37107287533902102798797998220837590246510135740250\");\n\tstrcpy(input, \"46376937677490009712648124896970078050417018260538\");\n\tstrcpy(input, \"74324986199524741059474233309513058123726617309629\");\n\tstrcpy(input, \"91942213363574161572522430563301811072406154908250\");\n\tstrcpy(input, \"23067588207539346171171980310421047513778063246676\");\n\tstrcpy(input, \"89261670696623633820136378418383684178734361726757\");\n\tstrcpy(input, \"28112879812849979408065481931592621691275889832738\");\n\tstrcpy(input, \"44274228917432520321923589422876796487670272189318\");\n\tstrcpy(input, \"47451445736001306439091167216856844588711603153276\");\n\tstrcpy(input, \"70386486105843025439939619828917593665686757934951\");\n\tstrcpy(input, \"62176457141856560629502157223196586755079324193331\");\n\tstrcpy(input, \"64906352462741904929101432445813822663347944758178\");\n\tstrcpy(input, \"92575867718337217661963751590579239728245598838407\");\n\tstrcpy(input, \"58203565325359399008402633568948830189458628227828\");\n\tstrcpy(input, \"80181199384826282014278194139940567587151170094390\");\n\tstrcpy(input, \"35398664372827112653829987240784473053190104293586\");\n\tstrcpy(input, \"86515506006295864861532075273371959191420517255829\");\n\tstrcpy(input, \"71693888707715466499115593487603532921714970056938\");\n\tstrcpy(input, \"54370070576826684624621495650076471787294438377604\");\n\tstrcpy(input, \"53282654108756828443191190634694037855217779295145\");\n\tstrcpy(input, \"36123272525000296071075082563815656710885258350721\");\n\tstrcpy(input, \"45876576172410976447339110607218265236877223636045\");\n\tstrcpy(input, \"17423706905851860660448207621209813287860733969412\");\n\tstrcpy(input, \"81142660418086830619328460811191061556940512689692\");\n\tstrcpy(input, \"51934325451728388641918047049293215058642563049483\");\n\tstrcpy(input, \"62467221648435076201727918039944693004732956340691\");\n\tstrcpy(input, \"15732444386908125794514089057706229429197107928209\");\n\tstrcpy(input, \"55037687525678773091862540744969844508330393682126\");\n\tstrcpy(input, \"18336384825330154686196124348767681297534375946515\");\n\tstrcpy(input, \"80386287592878490201521685554828717201219257766954\");\n\tstrcpy(input, \"78182833757993103614740356856449095527097864797581\");\n\tstrcpy(input, \"16726320100436897842553539920931837441497806860984\");\n\tstrcpy(input, \"48403098129077791799088218795327364475675590848030\");\n\tstrcpy(input, \"87086987551392711854517078544161852424320693150332\");\n\tstrcpy(input, \"59959406895756536782107074926966537676326235447210\");\n\tstrcpy(input, \"69793950679652694742597709739166693763042633987085\");\n\tstrcpy(input, \"41052684708299085211399427365734116182760315001271\");\n\tstrcpy(input, \"65378607361501080857009149939512557028198746004375\");\n\tstrcpy(input, \"35829035317434717326932123578154982629742552737307\");\n\tstrcpy(input, \"94953759765105305946966067683156574377167401875275\");\n\tstrcpy(input, \"88902802571733229619176668713819931811048770190271\");\n\tstrcpy(input, \"25267680276078003013678680992525463401061632866526\");\n\tstrcpy(input, \"36270218540497705585629946580636237993140746255962\");\n\tstrcpy(input, \"24074486908231174977792365466257246923322810917141\");\n\tstrcpy(input, \"91430288197103288597806669760892938638285025333403\");\n\tstrcpy(input, \"34413065578016127815921815005561868836468420090470\");\n\tstrcpy(input, \"23053081172816430487623791969842487255036638784583\");\n\tstrcpy(input, \"11487696932154902810424020138335124462181441773470\");\n\tstrcpy(input, \"63783299490636259666498587618221225225512486764533\");\n\tstrcpy(input, \"67720186971698544312419572409913959008952310058822\");\n\tstrcpy(input, \"95548255300263520781532296796249481641953868218774\");\n\tstrcpy(input, \"76085327132285723110424803456124867697064507995236\");\n\tstrcpy(input, \"37774242535411291684276865538926205024910326572967\");\n\tstrcpy(input, \"23701913275725675285653248258265463092207058596522\");\n\tstrcpy(input, \"29798860272258331913126375147341994889534765745501\");\n\tstrcpy(input, \"18495701454879288984856827726077713721403798879715\");\n\tstrcpy(input, \"38298203783031473527721580348144513491373226651381\");\n\tstrcpy(input, \"34829543829199918180278916522431027392251122869539\");\n\tstrcpy(input, \"40957953066405232632538044100059654939159879593635\");\n\tstrcpy(input, \"29746152185502371307642255121183693803580388584903\");\n\tstrcpy(input, \"41698116222072977186158236678424689157993532961922\");\n\tstrcpy(input, \"62467957194401269043877107275048102390895523597457\");\n\tstrcpy(input, \"23189706772547915061505504953922979530901129967519\");\n\tstrcpy("
        },
        {
            "Index": 294,
            "GT": 1800,
            "Query": "6 * 6 * 7 * 7 - 6 * 6 + 8 * 9 - 1 + 1 =   ",
            "Injected CoT": "6 * 6 = 36\n36 * 7 = 252\n252 * 7 = 1763\n6 * 6 = 36\n8 * 9 = 72\n36 + 72 = 108\n1 + 1 = 2\n108 - 2 = 106\n1763 - 106 =",
            "Response": " 1657",
            "Extract-Response": " 1657\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r * s * t * u * v * w * x * y * z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 295,
            "GT": 28,
            "Query": "8 - 6 - 6 + 2 - 1 + 4 - 2 + 8 + 3 * 7 =   ",
            "Injected CoT": "3 * 8 = 21\n8 - 6 = 2\n2 - 6 = -4\n-4 + 2 = -2\n-2 - 1 = -3\n-3 + 4 = 1\n1 - 2 = -1\n-1 + 8 = 8\n8 + 21 =",
            "Response": " 29",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 296,
            "GT": 647,
            "Query": "5 + 4 - 9 + 6 * 1 + 3 * 6 * 4 * 9 - 7 =   ",
            "Injected CoT": "6 * 1 = 6\n3 * 6 = 18\n18 * 4 = 72\n72 * 9 = 648\n5 + 4 = 9\n9 - 9 = 0\n0 + 6 = 6\n648 + 6 = 654\n654 - 6 =",
            "Response": " 648",
            "Extract-Response": " 648\n</code>\n"
        },
        {
            "Index": 297,
            "GT": -16,
            "Query": "2 + 6 + 2 * 4 + 2 + 5 - 7 * 5 - 4 * 1 =   ",
            "Injected CoT": "2 + 6 = 8\n2 * 4 = 8\n8 + 8 = 16\n16 + 2 = 18\n18 + 5 = 23\n7 * 5 = 35\n4 * 1 = 4\n35 + 4 = 40\n23 - 40 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int num = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    num = num * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + num * sign;\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 299,
            "GT": 61,
            "Query": "9 * 8 + 1 + 7 + 9 + 3 - 2 - 3 * 8 - 5 =   ",
            "Injected CoT": "9 * 8 = 72\n72 + 1 = 73\n73 + 7 = 80\n80 + 9 = 89\n89 + 3 = 92\n3 * 8 = 24\n92 - 2 = 90\n90 - 24 = 66\n66 - 4 =",
            "Response": " 62\n62 - 3 = 59\n59 - 5 = 54",
            "Extract-Response": " 54\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        result += s[i] - '0';\n    }\n    while (result >= 10) {\n        int newResult = 0;\n        while (result > 0) {\n            newResult += result % 10;\n            result /= 10;\n        }\n        result = newResult;\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 301,
            "GT": 60,
            "Query": "6 * 9 + 1 - 3 * 4 + 6 - 1 + 7 - 3 + 8 =   ",
            "Injected CoT": "6 * 9 = 54\n54 + 1 = 55\n3 * 4 = 12\n55 - 12 = 43\n43 + 6 = 49\n49 - 1 = 48\n48 + 7 = 55\n55 - 3 = 52\n52 + 7 =",
            "Response": " 59",
            "Extract-Response": " 59\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 302,
            "GT": 243,
            "Query": "2 + 3 + 4 + 8 * 4 * 1 * 7 + 7 - 5 + 8 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 7 = 56\n2 + 3 = 5\n5 + 4 = 9\n9 + 56 = 65\n65 + 7 = 72\n72 - 5 = 68\n68 + 8 =",
            "Response": " 76\n\n76",
            "Extract-Response": "\n\n76"
        },
        {
            "Index": 304,
            "GT": 0,
            "Query": "9 * 1 - 2 * 3 * 9 + 5 * 7 + 4 * 4 - 6 =   ",
            "Injected CoT": "9 * 1 = 9\n2 * 3 = 7\n7 * 9 = 54\n5 * 7 = 35\n4 * 4 = 16\n9 - 54 = -45\n-45 + 35 = -10\n-10 + 16 = 7\n7 - 7 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 305,
            "GT": 2,
            "Query": "8 - 8 * 6 - 3 + 7 * 8 - 3 - 6 - 8 + 6 =   ",
            "Injected CoT": "8 * 6 = 48\n8 - 48 = -40\n-40 - 3 = -43\n7 * 8 = 56\n-43 + 56 = 13\n13 - 3 = 10\n10 - 6 = 4\n4 - 8 = -5\n-5 + 6 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 308,
            "GT": -11,
            "Query": "1 - 9 + 2 - 4 * 3 + 3 + 6 + 2 - 6 + 2 =   ",
            "Injected CoT": "-4 * 3 = -12\n2 - 9 + 2 - 12 + 3 + 6 + 2 - 6 + 2 =",
            "Response": "\n-9 + 2 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 + 2 =\n-7 - 12 + 3 + 6 + 2 - 6 +",
            "Extract-Response": "\n-7 - 12 + 3 + 6 + 2 - 6 + 2 = -14"
        },
        {
            "Index": 309,
            "GT": -42,
            "Query": "1 + 1 - 1 + 8 - 3 + 4 - 8 * 8 + 4 * 3 =   ",
            "Injected CoT": "8 * 8 = 64\n4 * 3 = 13\n1 + 1 = 2\n2 - 1 = 1\n1 + 8 = 9\n9 - 3 = 6\n6 + 4 = 10\n10 - 64 = -54\n-54 + 13 =",
            "Response": " -41",
            "Extract-Response": " -41.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 10.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef digitSum(n):\n    # Good luck!\n    return sum(int(i) for i in str(n))"
        },
        {
            "Index": 312,
            "GT": -40,
            "Query": "8 - 5 - 3 - 6 * 5 - 5 + 6 - 7 - 1 * 4 =   ",
            "Injected CoT": "6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =",
            "Response": "    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 * 4 =    \n6 * 4 = 30\n8 - 4 - 3 - 30 - 4 + 6 - 7 - 1 *",
            "Extract-Response": "\n30"
        },
        {
            "Index": 313,
            "GT": 7,
            "Query": "8 - 6 + 9 * 2 - 5 * 1 - 1 + 4 - 2 - 9 =   ",
            "Injected CoT": "8 * 2 = 18\n5 * 1 = 5\n8 - 6 = 2\n2 + 18 = 20\n20 - 5 = 15\n15 - 1 = 14\n14 + 4 = 18\n18 - 2 = 16\n16 - 8 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if (ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if (ops[i] == \"+\") {\n                v.push_back(v[v.size() - 2] + v[v.size() - 1]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 316,
            "GT": 19,
            "Query": "9 - 4 - 6 + 1 + 7 + 9 + 5 + 1 + 5 - 8 =   ",
            "Injected CoT": "-4 - 6 = -10\n-10 + 1 = -9\n-9 + 7 = -2\n-2 + 9 = 7\n7 + 5 = 12\n12 + 1 = 13\n13 + 5 = 18\n18 - 9 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 320,
            "GT": -41,
            "Query": "2 - 7 * 5 + 4 - 1 - 7 + 3 + 5 - 3 * 4 =   ",
            "Injected CoT": "7 * 5 = 35\n2 - 35 = -33\n-33 + 4 = -30\n-30 - 1 = -30\n-30 - 7 = -37\n-37 + 3 = -34\n-34 + 5 = -30\n3 * 4 = 12\n-30 - 12 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 322,
            "GT": 98,
            "Query": "4 - 1 + 8 - 6 + 7 * 3 + 4 * 8 + 8 * 5 =   ",
            "Injected CoT": "7 * 3 = 21\n4 * 8 = 32\n8 * 5 = 41\n4 - 1 = 3\n3 + 8 = 11\n11 - 6 = 5\n5 + 21 = 26\n26 + 32 = 58\n58 + 41 =",
            "Response": " 99",
            "Extract-Response": "\n\n99"
        },
        {
            "Index": 324,
            "GT": 30,
            "Query": "9 + 9 + 3 - 3 * 2 + 1 * 2 * 7 * 1 + 1 =   ",
            "Injected CoT": "3 * 2 = 6\n9 + 9 = 18\n18 + 3 = 21\n21 - 6 = 15\n1 * 2 = 2\n2 * 7 = 14\n14 * 1 = 14\n15 + 14 = 28\n28 + 1 =",
            "Response": " 29",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 325,
            "GT": -39,
            "Query": "8 - 4 * 6 + 2 * 1 - 1 - 7 - 2 * 6 - 5 =   ",
            "Injected CoT": "4 * 6 = 24\n8 - 24 = -16\n2 * 1 = 2\n-16 + 2 = -14\n-1 - 7 = -8\n2 * 6 = 12\n-14 - 12 = -25\n-25 - 5 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\n\nThe number of operations is between [1, 1000].\nPlease do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        return res + sign * cur;\n    }\n};"
        },
        {
            "Index": 326,
            "GT": -49,
            "Query": "9 - 2 * 6 - 1 - 4 * 9 - 1 * 8 - 7 + 6 =   ",
            "Injected CoT": "2 * 6 = 12\n4 * 9 = 36\n1 * 8 = 8\n9 - 12 = -3\n-3 - 1 = -4\n-4 - 36 = -40\n-40 - 8 = -48\n-48 - 7 = -54\n-54 + 6 =",
            "Response": " -48",
            "Extract-Response": " -48.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 327,
            "GT": 24,
            "Query": "9 - 1 + 6 + 3 * 6 - 2 - 8 + 4 + 3 - 5 =   ",
            "Injected CoT": "3 * 6 = 18\n9 - 1 = 8\n8 + 6 = 14\n14 + 18 = 32\n32 - 2 = 30\n30 - 8 = 22\n22 + 4 = 26\n26 + 3 = 28\n28 - 5 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 328,
            "GT": -156,
            "Query": "4 - 4 * 4 * 9 - 7 - 7 - 7 - 1 + 9 - 3 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 9 = 144\n4 - 144 = -140\n-140 - 7 = -147\n-147 - 7 = -154\n-154 - 7 = -161\n-161 - 1 = -162\n-162 + 9 = -153\n-153 - 2 =",
            "Response": " -155\n-155 - 3 = -158",
            "Extract-Response": " -158\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d, e, f;\n    cin >> n >> a >> b >> c >> d >> e >> f;\n\n    int result = -1;\n    int maxSugar = 0;\n    for (int water = 0; water <= n; ++water) {\n        int sugar = min(a * water, f);\n        int restWater = n - water;\n        int restSugar = sugar - e * restWater;\n        if (restSugar < 0) {\n            continue;\n        }\n        int restSugar1 = restSugar;\n        int restSugar2 = restSugar;\n        int restSugar3 = restSugar;\n        int restSugar4 = restSugar;\n        int restSugar5 = restSugar;\n        int restSugar6 = restSugar;\n        int restSugar7 = restSugar;\n        int restSugar8 = restSugar;\n        int restSugar9 = restSugar;\n        int restSugar10 = restSugar;\n        int restSugar11 = restSugar;\n        int restSugar12 = restSugar;\n        int restSugar13 = restSugar;\n        int restSugar14 = restSugar;\n        int restSugar15 = restSugar;\n        int restSugar16 = restSugar;\n        int restSugar17 = restSugar;\n        int restSugar18 = restSugar;\n        int restSugar19 = restSugar;\n        int restSugar20 = restSugar;\n        int restSugar21 = restSugar;\n        int restSugar22 = restSugar;\n        int restSugar23 = restSugar;\n        int restSugar24 = restSugar;\n        int restSugar25 = restSugar;\n        int restSugar26 = restSugar;\n        int restSugar27 = restSugar;\n        int restSugar28 = restSugar;\n        int restSugar29 = restSugar;\n        int restSugar30 = restSugar;\n        int restSugar31 = restSugar;\n        int restSugar32 = restSugar;\n        int restSugar33 = restSugar;\n        int restSugar34 = restSugar;\n        int restSugar35 = restSugar;\n        int restSugar36 = restSugar;\n        int restSugar37 = restSugar;\n        int restSugar38 = restSugar;\n        int restSugar39 = restSugar;\n        int restSugar40 = restSugar;\n        int restSugar41 = restSugar;\n        int restSugar42 = restSugar;\n        int restSugar43 = restSugar;\n        int restSugar44 = restSugar;\n        int restSugar45 = restSugar;\n        int restSugar46 = restSugar;\n        int restSugar47 = restSugar;\n        int restSugar48 = restSugar;\n        int restSugar49 = restSugar;\n        int restSugar50 = restSugar;\n        int restSugar51 = restSugar;\n        int restSugar52 = restSugar;\n        int restSugar53 = restSugar;\n        int restSugar54 = restSugar;\n        int restSugar55 = restSugar;\n        int restSugar56 = restSugar;\n        int restSugar57 = restSugar;\n        int restSugar58 = restSugar;\n        int restSugar59 = restSugar;\n        int restSugar60 = restSugar;\n        int restSugar61 = restSugar;\n        int restSugar62 = restSugar;\n        int restSugar63 = restSugar;\n        int restSugar64 = restSugar;\n        int restSugar65 = restSugar;\n        int restSugar66 = restSugar;\n        int restSugar67 = restSugar;\n        int restSugar68 = restSugar;\n        int restSugar69 = restSugar;\n        int restSugar70 = restSugar;\n        int restSugar71 = restSugar;\n        int restSugar72 = restSugar;\n        int restSugar73 = restSugar;\n        int restSugar74 = restSugar;\n        int restSugar75 = restSugar;\n        int restSugar76 = restSugar;\n        int restSugar77 = restSugar;\n        int restSugar78 = restSugar;\n        int restSugar79 = restSugar;\n        int restSugar80 = restSugar;\n        int restSugar81 = restSugar;\n        int restSugar82 = restSugar;\n        int restSugar83 = restSugar;\n        int restSugar84 = restSugar;\n        int restSugar85 = restSugar;\n        int restSugar86 = restSugar;\n        int restSugar87 = restSugar;\n        int restSugar88 = restSugar;\n        int restSugar89 = restSugar;\n        int restSugar90 = restSugar;\n        int restSugar91 = restSugar;\n        int restSugar92 = restSugar;\n        int restSugar93 = restSugar;\n        int restSugar94 = restSugar;\n        int restSugar95 = restSugar;\n        int restSugar96 = restSugar;\n        int restSugar97 = restSugar;\n        int restSugar98 = restSugar;\n        int restSugar99 = restSugar;\n        int restSugar100 = restSugar;\n        int restSugar101 = restSugar;\n        int restSugar102 = restSugar;\n        int restSugar103 = restSugar;\n        int restSugar104 = restSugar;\n        int restSugar105 = restSugar;\n        int restSugar106 = restSugar;\n        int restSugar107 = restSugar;\n        int restSugar108 = restSugar;\n        int restSugar109 = restSugar;\n        int restSugar110 = restSugar;\n        int restSugar111 = restSugar;\n        int restSugar112 = restSugar;\n        int restSugar113 = restSugar;\n        int restSugar114 = restSugar;\n        int restSugar115 = restSugar;\n        int restSugar116 = restSugar;\n        int restSugar117 = restSugar;\n        int restSugar118 = restSugar;\n        int restSugar119 = restSugar;\n        int restSugar120 = restSugar;\n        int restSugar121 = restSugar;\n        int restSugar122 = restSugar;\n        int restSugar123 = restSugar;\n        int restSugar124 = restSugar;\n        int restSugar125 = restSugar;\n        int restSugar126 = restSugar;\n        int restSugar127 = restSugar;\n        int restSugar128 = restSugar;\n        int restSugar129 = restSugar;\n        int restSugar130 = restSugar;\n        int restSugar131 = restSugar;\n        int restSugar132 = restSugar;\n        int restSugar133 = restSugar;\n        int restSugar134 = restSugar;\n        int restSugar135 = restSugar;\n        int restSugar136 = restSugar;\n        int restSugar137 = restSugar;\n        int restSugar138 = restSugar;\n        int restSugar139 = restSugar;\n        int restSugar140 = restSugar;\n        int restSugar141 = restSugar;\n        int restSugar142 = restSugar;\n        int restSugar143 = restSugar;\n        int rest"
        },
        {
            "Index": 329,
            "GT": -35,
            "Query": "1 - 7 * 3 * 4 + 6 + 7 * 6 * 1 - 7 + 7 =   ",
            "Injected CoT": "-7 * 3 = -21\n-21 * 4 = -84\n1 - 84 = -83\n-7 * 6 = -42\n-42 * 1 = -42\n-83 + 6 = -78\n7 * 6 = 42\n-7 + 42 = 35\n-78 + 35 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if(!ops.empty() && ops.top() != '(' && isPrior(ops.top(), s[i])) {\n                    int n2 = nums.top();\n                    nums.pop();\n                    int n1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = calc(n1, n2, op);\n                    nums.push(num);\n                    ops.push(s[i]);\n                } else {\n                    nums.push(num);\n                    ops.push(s[i]);\n                    num = 0;\n                }\n            }\n        }\n        while(!ops.empty()) {\n            int n2 = nums.top();\n            nums.pop();\n            int n1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = calc(n1, n2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    \n    bool isPrior(char op1, char op2) {\n        if(op1 == '*' || op1 == '/') return true;\n        if(op1 == '+' || op1 == '-') {\n            if(op2 == '*' || op2 == '/') return false;\n            return true;\n        }\n        return false;\n    }\n    \n    int calc(int n1, int n2, char op) {\n        switch(op) {\n            case '+': return n1 + n2;\n            case '-': return n1 - n2;\n            case '*': return n1 * n2;\n            case '/': return n1 / n2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 331,
            "GT": 60,
            "Query": "8 * 8 - 2 + 8 - 9 - 3 - 4 * 3 + 7 + 7 =   ",
            "Injected CoT": "8 * 8 = 64\n64 - 2 = 62\n62 + 8 = 70\n70 - 9 = 61\n61 - 3 = 58\n4 * 3 = 12\n58 - 12 = 46\n46 + 7 = 54\n54 + 7 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 332,
            "GT": 67,
            "Query": "1 + 4 + 7 + 3 + 5 + 1 + 6 * 7 + 1 * 4 =   ",
            "Injected CoT": "6 * 7 = 42\n1 * 3 = 3\n1 + 3 = 5\n5 + 7 = 12\n12 + 3 = 15\n15 + 5 = 20\n20 + 1 = 21\n21 + 42 = 63\n63 + 3 =",
            "Response": " 66\n66 + 1 = 67\n67 + 6 = 73\n\n73 is the answer.",
            "Extract-Response": " 73.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = n;\n\n    while (result > 9) {\n        int sum = 0;\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        result = sum;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 333,
            "GT": 615,
            "Query": "4 * 1 + 9 * 7 * 9 + 5 * 1 + 4 + 7 * 5 =   ",
            "Injected CoT": "4 * 1 = 4\n9 * 7 = 63\n63 * 9 = 567\n5 * 1 = 5\n7 * 5 = 36\n567 + 5 = 572\n572 + 4 = 576\n576 + 36 =",
            "Response": " 612\n\n4 + 63 + 567 + 5 + 36 = 676\n\n676 % 11 = 1\n\n*/\n\npublic class ISBNValidator {\n    public static boolean isValid(String stringToValidate) {\n        int sum = 0;\n        int counter = 10;\n        for (int i = 0; i < stringToValidate.length(); i++) {\n            if (Character.isDigit(stringToValidate.charAt(i))) {\n                sum += Character.getNumericValue(stringToValidate.charAt(i)) * counter;\n                counter--;\n            }\n        }\n        return sum % 11 == 0;\n    }\n}",
            "Extract-Response": "\n\npublic class ISBNValidator {\n    public static boolean isValid(String stringToValidate) {\n        int sum = 0;\n        int counter = 10;\n        for (int i = 0; i < stringToValidate.length(); i++) {\n            if (Character.isDigit(stringToValidate.charAt(i))) {\n                sum += Character.getNumericValue(stringToValidate.charAt(i)) * counter;\n                counter--;\n            }\n        }\n        return sum % 11 == 0;\n    }\n}"
        },
        {
            "Index": 334,
            "GT": 42,
            "Query": "5 * 2 * 3 - 6 + 6 - 5 + 5 + 9 + 2 + 1 =   ",
            "Injected CoT": "5 * 2 = 10\n10 * 3 = 30\n30 - 6 = 24\n24 + 6 = 30\n30 - 5 = 25\n25 + 5 = 30\n30 + 9 = 39\n39 + 2 = 41\n41 + 0 =",
            "Response": " 41\n41 + 1 = 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    cout << sum << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 335,
            "GT": -25,
            "Query": "6 * 3 * 1 - 6 - 8 * 1 - 7 * 5 + 9 - 3 =   ",
            "Injected CoT": "5 * 3 = 18\n18 * 1 = 18\n18 - 5 = 12\n8 * 1 = 8\n7 * 5 = 35\n8 - 35 = -27\n9 - 3 = 5\n12 - 27 = -15\n-15 + 5 =",
            "Response": " -10\n\n-10",
            "Extract-Response": " -10"
        },
        {
            "Index": 336,
            "GT": -34,
            "Query": "4 - 8 * 2 - 9 - 7 + 4 + 1 * 8 - 6 * 3 =   ",
            "Injected CoT": "8 * 2 = 16\n4 - 16 = -12\n-12 - 9 = -21\n-21 - 7 = -28\n-28 + 4 = -24\n-24 + 1 * 8 = -16\n6 * 3 = 19\n-16 - 19 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given array is non-empty and will contain only non-negative integers.\nThe length of this array won't exceed 1000.\nThe answer is guaranteed to fit in 32-bit signed integer.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 337,
            "GT": -28,
            "Query": "8 + 5 - 9 * 2 - 1 - 6 - 5 * 3 - 1 * 1 =   ",
            "Injected CoT": "9 * 2 = 18\n5 * 3 = 14\n1 * 1 = 1\n8 + 5 = 13\n13 - 18 = -5\n-5 - 1 = -6\n-6 - 6 = -12\n-12 - 14 =",
            "Response": " -26\n-26 - 1 = -27",
            "Extract-Response": " -27\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + (c - '0') * sign;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 338,
            "GT": 140,
            "Query": "2 - 2 + 4 * 3 * 5 + 8 + 3 * 3 + 7 * 9 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 5 = 60\n3 * 3 = 9\n7 * 9 = 64\n2 - 2 = 0\n0 + 60 = 60\n60 + 8 = 68\n68 + 9 = 77\n77 + 64 =",
            "Response": " 141\n\n2 - 2 + 4 * 3 * 5 + 8 + 3 * 3 + 7 * 9 = 141",
            "Extract-Response": " 141"
        },
        {
            "Index": 340,
            "GT": -372,
            "Query": "4 - 5 * 8 * 9 - 4 * 4 * 1 + 2 - 9 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 4 = 16\n40 * 9 = 360\n16 * 1 = 16\n360 - 16 = 344\n4 - 344 = -340\n-340 + 2 = -338\n-338 - 9 = -347\n-347 + 8 =",
            "Response": " -339\n-339 + 7 = -332",
            "Extract-Response": " -332\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 341,
            "GT": 30,
            "Query": "9 - 8 * 1 + 8 * 6 + 5 - 6 * 6 + 3 * 4 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 8 = 1\n8 * 6 = 48\n1 + 48 = 49\n6 * 6 = 36\n5 - 36 = -30\n3 * 4 = 12\n-30 + 12 =",
            "Response": " -18\n\n1 + 8 + 49 - 36 + 12 = 36",
            "Extract-Response": " 36"
        },
        {
            "Index": 345,
            "GT": 51,
            "Query": "6 + 8 - 2 + 7 - 6 + 9 * 2 + 4 + 2 * 8 =   ",
            "Injected CoT": "9 * 2 = 18\n2 * 8 = 15\n6 + 8 = 14\n14 - 2 = 12\n12 + 7 = 19\n19 - 6 = 13\n13 + 18 = 31\n31 + 4 = 35\n35 + 15 =",
            "Response": " 50",
            "Extract-Response": "\n\n50"
        },
        {
            "Index": 346,
            "GT": -79,
            "Query": "4 - 7 * 3 - 6 + 9 - 1 + 8 - 8 * 8 - 8 =   ",
            "Injected CoT": "-7 * 3 = -21\n4 - (-21) = 25\n25 + 9 = 34\n34 - 1 = 33\n33 + 8 = 41\n-8 * 8 = -64\n41 - (-64) = 104\n104 - 8 =",
            "Response": " 96",
            "Extract-Response": " 96\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 347,
            "GT": -82,
            "Query": "2 * 8 * 2 + 5 - 8 * 9 + 4 + 5 - 8 * 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 * 2 = 32\n32 + 5 = 37\n8 * 9 = 72\n72 - 37 = 35\n4 + 5 = 9\n8 * 7 = 56\n35 - 9 = 25\n25 - 56 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote:\n\nThe length of the input array is [1, 10].\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
        },
        {
            "Index": 352,
            "GT": 95,
            "Query": "2 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =   ",
            "Injected CoT": "9 * 6 = 54\n6 * 7 = 42\n2 - 1 = 1\n1 - 9 = -8\n-8 + 54 = 46\n46 + 42 = 88\n88 + 8 = 96\n96 - 5 = 91\n91 + 5 =",
            "Response": " 96",
            "Extract-Response": " 96\n\n3 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n4 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n5 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n6 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n7 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n8 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n9 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n10 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n11 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n12 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n13 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n14 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n15 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n16 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n17 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n18 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n19 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n20 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n21 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n22 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n23 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n24 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n25 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n26 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n27 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n28 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n29 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n30 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n31 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n32 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n33 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n34 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n35 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n36 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n37 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n38 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n39 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n40 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n41 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n42 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n43 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n44 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n45 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n46 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n47 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n48 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n49 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n50 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n51 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n52 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n53 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n54 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n55 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n56 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n57 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n58 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n59 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n60 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n61 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n62 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n63 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n64 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n65 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n66 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n67 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n68 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5 + 4 =     96\nThe answer is  96\n\n69 - 1 - 9 + 9 * 6 + 6 * 7 + 8 - 5"
        },
        {
            "Index": 354,
            "GT": 12,
            "Query": "9 + 2 * 1 * 4 - 8 + 2 - 7 * 1 + 2 + 6 =   ",
            "Injected CoT": "2 * 1 = 2\n2 * 4 = 8\n9 + 8 = 17\n17 - 8 = 9\n9 + 2 = 11\n11 - 7 = 4\n4 + 2 = 5\n5 + 5 =",
            "Response": " 10\n10 + 6 = 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 359,
            "GT": -390,
            "Query": "2 - 3 * 1 - 9 * 1 + 9 + 3 - 7 * 8 * 7 =   ",
            "Injected CoT": "3 * 1 = 3\n9 * 1 = 9\n7 * 8 = 56\n56 * 7 = 392\n1 - 3 = -1\n-1 - 9 = -10\n-10 + 9 = -1\n-1 + 3 = 1\n1 - 392 =",
            "Response": " -391\n-391 + 1 = -390",
            "Extract-Response": " -390\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 360,
            "GT": -6,
            "Query": "1 * 1 + 1 * 1 - 7 * 2 - 6 + 3 + 4 + 5 =   ",
            "Injected CoT": "1 * 1 = 1\n1 * 1 = 1\n1 + 1 = 2\n7 * 2 = 14\n2 - 14 = -12\n-12 - 6 = -18\n-18 + 3 = -15\n-15 + 4 = -11\n-11 + 6 =",
            "Response": " -5\n\n-5",
            "Extract-Response": " -5.\n\nNote:\n\nThe length of the given array is positive and will not exceed 20.\nThe sum of elements in the given array will not exceed 1000.\nYour output answer is guaranteed to be fitted in a 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        int max_len = 0;\n        int count = 0;\n        unordered_map<int, int> m;\n        m[0] = -1;\n        for(int i = 0; i < n; i++) {\n            count += (nums[i] == 0) ? -1 : 1;\n            if(m.find(count) != m.end()) {\n                max_len = max(max_len, i - m[count]);\n            } else {\n                m[count] = i;\n            }\n        }\n        return max_len;\n    }\n};"
        },
        {
            "Index": 364,
            "GT": 41,
            "Query": "8 * 7 + 5 + 6 - 2 - 1 - 6 * 4 + 2 - 1 =   ",
            "Injected CoT": "8 * 7 = 56\n56 + 5 = 61\n61 + 6 = 67\n67 - 2 = 65\n65 - 1 = 64\n6 * 4 = 24\n64 - 24 = 40\n40 + 2 = 41\n41 - 1 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 365,
            "GT": -455,
            "Query": "9 - 5 - 8 * 8 * 7 - 5 * 2 + 2 - 3 * 1 =   ",
            "Injected CoT": "8 * 7 = 56\n-5 * 2 = -10\n9 - 5 = 4\n56 * 8 = 448\n448 - 10 = 438\n438 + 2 = 440\n2 * 1 = 2\n440 - 2 =",
            "Response": " 438\n\n438",
            "Extract-Response": " 438\n\n*/"
        },
        {
            "Index": 367,
            "GT": -12,
            "Query": "4 + 7 * 1 - 9 + 9 - 8 + 7 - 8 - 5 - 9 =   ",
            "Injected CoT": "7 * 1 = 7\n4 + 7 = 11\n11 - 9 = 2\n2 + 9 = 11\n11 - 8 = 3\n3 + 7 = 10\n10 - 8 = 2\n2 - 5 = -2\n-2 - 9 =",
            "Response": " -11\n\n7 + 11 + 2 + 11 + 3 + 10 + 2 - 11 = 40",
            "Extract-Response": " 40\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d, e, f, g, h, i, j, k, l, m, n1, o, p, q, r, s, t, u, v, w, x, y, z;\n    string s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s"
        },
        {
            "Index": 368,
            "GT": -21,
            "Query": "3 + 8 + 9 * 1 - 3 * 8 - 5 * 3 - 7 + 5 =   ",
            "Injected CoT": "9 * 1 = 9\n3 + 8 = 11\n11 + 9 = 20\n3 * 8 = 24\n5 * 3 = 15\n24 + 15 = 39\n39 - 7 = 32\n32 + 5 = 36\n36 - 5 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 370,
            "GT": 335,
            "Query": "1 * 2 - 2 + 6 * 7 * 8 - 8 - 1 + 4 * 2 =   ",
            "Injected CoT": "1 * 2 = 2\n6 * 7 = 42\n42 * 8 = 336\n4 * 2 = 8\n2 - 2 = 1\n336 - 8 = 328\n328 - 1 = 327\n327 + 1 =",
            "Response": " 328",
            "Extract-Response": " 328.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 371,
            "GT": -31,
            "Query": "8 - 7 * 3 - 5 * 2 - 6 + 5 - 6 * 1 - 1 =   ",
            "Injected CoT": "7 * 3 = 21\n5 * 2 = 10\n6 * 1 = 6\n8 - 21 = -13\n-13 - 10 = -23\n-23 - 6 = -29\n-29 + 5 = -25\n-25 - 1 =",
            "Response": " -26",
            "Extract-Response": " -26.\n\nNote:\n\nThe number of nodes in the tree is between 2 and 500.\nEach node's value is between -10^9 and 10^9.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumRootToLeaf(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 2 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};"
        },
        {
            "Index": 374,
            "GT": 52,
            "Query": "6 * 7 * 3 - 2 * 4 + 4 + 2 * 1 - 9 * 8 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 3 = 126\n2 * 4 = 8\n1 * 2 = 2\n9 * 8 = 72\n126 - 8 = 118\n118 + 2 = 121\n121 - 72 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 375,
            "GT": 153,
            "Query": "7 * 2 + 5 + 1 + 2 * 9 * 7 + 1 * 4 + 3 =   ",
            "Injected CoT": "7 * 2 = 14\n2 * 9 = 18\n18 * 7 = 126\n1 * 4 = 4\n14 + 5 = 19\n19 + 1 = 20\n126 + 4 = 130\n20 + 130 = 150\n150 + 2 =",
            "Response": " 152\n3 + 152 = 155\n\n155 is the answer.",
            "Extract-Response": "\n\n155"
        },
        {
            "Index": 376,
            "GT": 18,
            "Query": "5 * 3 + 1 * 9 + 8 - 4 * 1 - 1 - 5 - 4 =   ",
            "Injected CoT": "5 * 3 = 15\n1 * 9 = 9\n5 * 1 = 5\n15 + 9 = 24\n24 + 8 = 32\n32 - 5 = 28\n28 - 1 = 27\n27 - 5 = 22\n22 - 5 =",
            "Response": " 17\n\n17 is the answer.",
            "Extract-Response": " 17.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum;\n    int num_array[MAX_SIZE];\n\n    while(1){\n        gets(input);\n\n        if(strcmp(input, \"0\") == 0){\n            break;\n        }\n\n        len = strlen(input);\n        sum = 0;\n\n        for(i = 0, j = len - 1; i < len; i++, j--){\n            num = input[i] - '0';\n            num_array[i] = num;\n\n            if(i % 2 == 0){\n                sum += num;\n            }\n            else{\n                sum += num * 2;\n            }\n        }\n\n        for(i = 0; i < len; i++){\n            if(num_array[i] == sum % 10){\n                printf(\"%d\", num_array[i]);\n            }\n        }\n\n        printf(\"\\n\");\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 378,
            "GT": 8751,
            "Query": "6 + 7 + 9 * 9 * 6 * 6 * 3 - 4 - 4 - 2 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 6 = 324\n324 * 3 = 972\n6 + 7 = 13\n13 + 972 = 985\n985 - 4 = 981\n981 - 4 = 978\n978 - 2 =",
            "Response": " 976\n\n976",
            "Extract-Response": " 976\n\n*/"
        },
        {
            "Index": 379,
            "GT": -39,
            "Query": "8 - 6 - 6 - 3 - 1 - 4 - 3 * 7 - 2 - 4 =   ",
            "Injected CoT": "3 * 7 = 21\n8 - 6 = 2\n2 - 6 = -4\n-4 - 3 = -7\n-7 - 1 = -8\n-8 - 4 = -12\n-12 - 21 = -32\n-32 - 2 =",
            "Response": " -34\n-34 - 4 = -38\n\n-38",
            "Extract-Response": " -38\n\n*/"
        },
        {
            "Index": 382,
            "GT": -9,
            "Query": "4 + 6 - 2 * 6 + 7 + 8 + 8 - 4 * 6 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n4 + 6 - 12 + 7 + 8 + 8 - 4 * 6 - 6 = \n-4 * 6 = -24\n4 + 6 - 12 + 7 + 8 + 8 - 24 - 6 = \n4 + 6 = 10\n10 - 12 = -2\n-2 + 7 = 5\n5 + 8 = 13\n13 + 8 = 21\n21 - 24 = -2\n-2 - 6 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 383,
            "GT": -47,
            "Query": "1 * 4 - 7 * 8 - 2 * 9 * 1 + 5 + 9 * 2 =   ",
            "Injected CoT": "1 * 4 = 4\n7 * 8 = 56\n10 * 1 = 10\n2 * 10 = 18\n18 * 1 = 18\n18 * 2 = 36\n2 * 10 * 1 = 18\n18 - 56 = -38\n-38 - 18 = -56\n-56 + 4 = -52\n-52 + 5 = -47\n-47 + 10 * 2 =",
            "Response": " -27\n-27 + 18 = -9\n-9 + 36 = 27",
            "Extract-Response": " 27\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        int x;\n        cin >> x;\n        current += x * sign;\n        result += current;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 387,
            "GT": -8,
            "Query": "5 * 8 + 2 + 4 * 2 - 8 + 3 - 5 - 6 * 8 =   ",
            "Injected CoT": "5 * 8 = 39\n4 * 2 = 8\n6 * 8 = 48\n39 + 2 = 42\n42 + 8 = 50\n50 - 8 = 42\n42 + 3 = 45\n45 - 5 = 39\n39 - 48 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int sumSubarrayMins(vector<int>& A) {\n        int n = A.size();\n        int res = 0;\n        stack<int> st;\n        for (int i = 0; i <= n; ++i) {\n            int cur = i == n ? 0 : A[i];\n            while (!st.empty() && A[st.top()] >= cur) {\n                int idx = st.top(); st.pop();\n                int left = st.empty() ? -1 : st.top();\n                res = (res + A[idx] * (idx - left) * (i - idx)) % mod;\n            }\n            st.push(i);\n        }\n        return res;\n    }\nprivate:\n    const int mod = 1e9 + 7;\n};"
        },
        {
            "Index": 388,
            "GT": -19,
            "Query": "9 + 2 - 7 - 2 + 2 - 5 - 9 - 2 - 2 - 5 =   ",
            "Injected CoT": "9 + 2 = 11\n11 - 7 = 4\n4 - 2 = 2\n2 + 2 = 4\n4 - 6 = -1\n-1 - 9 = -10\n-10 - 2 = -12\n-12 - 2 = -14\n-14 - 6 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if(sum > maxSum) {\n                maxSum = sum;\n            }\n            if(sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 389,
            "GT": 51,
            "Query": "3 + 9 + 6 * 4 + 3 + 3 + 7 * 1 - 5 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n7 * 1 = 7\n3 + 3 = 6\n9 + 24 = 33\n33 + 3 = 36\n36 + 7 = 43\n43 - 5 = 38\n38 + 7 = 45\n3 + 9 = 13\n13 + 45 =",
            "Response": " 58",
            "Extract-Response": " 58\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            continue;\n        }\n        if(s[i] == '*')\n        {\n            continue;\n        }\n        if(s[i] == '/')\n        {\n            continue;\n        }\n        if(s[i] == '%')\n        {\n            continue;\n        }\n        if(s[i] == '=')\n        {\n            continue;\n        }\n        sum = sum + s[i] - '0';\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 390,
            "GT": 85,
            "Query": "8 * 6 + 9 - 5 + 3 * 1 * 5 - 7 + 5 * 5 =   ",
            "Injected CoT": "8 * 6 = 48\n3 * 1 = 3\n3 * 5 = 15\n48 + 9 = 57\n57 - 5 = 52\n52 + 15 = 67\n5 * 5 = 25\n67 + 25 = 93\n93 - 7 =",
            "Response": " 86\n86 + 5 = 91",
            "Extract-Response": " 91\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 391,
            "GT": 3476,
            "Query": "3 * 4 - 5 - 3 + 8 + 9 * 6 * 8 * 8 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n9 * 6 = 54\n54 * 9 = 432\n432 * 9 = 3456\n12 - 5 = 7\n7 - 3 = 4\n4 + 9 = 12\n3456 + 9 = 3465\n3465 * 12 = 41580\n41580 + 9 =",
            "Response": " 41589\n41589 + 8 = 41597\n41597 + 8 = 41605\n41605 + 8 = 41613\n41613 + 8 = 41621\n41621 + 8 = 41629\n41629 + 8 = 41637\n41637 + 8 = 41645\n41645 + 8 = 41653\n41653 + 8 = 41661\n41661 + 8 = 41669\n41669 + 8 = 41677\n41677 + 8 = 41685\n41685 + 8 = 41693\n41693 + 8 = 41701\n41701 + 8 = 41709\n41709 + 8 = 41717\n41717 + 8 = 41725\n41725 + 8 = 41733\n41733 + 8 = 41741\n41741 + 8 = 41749\n41749 + 8 = 41757\n41757 + 8 = 41765\n41765 + 8 = 41773\n41773 + 8 = 41781\n41781 + 8 = 41789\n41789 + 8 = 41797\n41797 + 8 = 41805\n41805 + 8 = 41813\n41813 + 8 = 41821\n41821 + 8 = 41829\n41829 + 8 = 41837\n41837 + 8 = 41845\n41845 + 8 = 41853\n41853 + 8 = 41861\n41861 + 8 = 41869\n41869 + 8 = 41877\n41877 + 8 = 41885\n41885 + 8 = 41893\n41893 + 8 = 41901\n41901 + 8 = 41909\n41909 + 8 = 41917\n41917 + 8 = 41925\n41925 + 8 = 41933\n41933 + 8 = 41941\n41941 + 8 = 41949\n41949 + 8 = 41957\n41957 + 8 = 41965\n41965 + 8 = 41973\n41973 + 8 = 41981\n41981 + 8 = 41989\n41989 + 8 = 41997\n41997 + 8 = 42005\n42005 + 8 = 42013\n42013 + 8 = 42021\n42021 + 8 = 42029\n42029 + 8 = 42037\n42037 + 8 = 42045\n42045 + 8 = 42053\n42053 + 8 = 42061\n42061 + 8 = 42069\n42069 + 8 = 42077\n42077 + 8 = 42085\n42085 + 8 = 42093\n42093 + 8 = 42101\n42101 + 8 = 42109\n42109 + 8 = 42117\n42117 + 8 = 42125\n42125 + 8 = 42133\n42133 + 8 = 42141\n42141 + 8 = 42149\n42149 + 8 = 42157\n42157 + 8 = 42165\n42165 + 8 = 42173\n42173 + 8 = 42181\n42181 + 8 = 42189\n42189 + 8 = 42197\n42197 + 8 = 42205\n42205 + 8 = 42213\n42213 + 8 = 42221\n42221 + 8 = 42229\n42229 + 8 = 42237\n42237 + 8 = 42245\n42245 + 8 = 42253\n42253 + 8 = 42261\n42261 + 8 = 42269\n42269 + 8 = 42277\n42277 + 8 = 42285\n42285 + 8 = 42293\n42293 + 8 = 42301\n42301 + 8 = 42309\n42309 + 8 = 42317\n42317 + 8 = 42325\n42325 + 8 = 42333\n42333 + 8 = 42341\n42341 + 8 = 42349\n42349 + 8 = 42357\n42357 + 8 = 42365\n42365 + 8 = 42373\n42373 + 8 = 42381\n42381 + 8 = 42389\n42389 + 8 = 42397\n42397 + 8 = 42405\n42405 + 8 = 42413\n42413 + 8 = 42421\n42421 + 8 = 42429\n42429 + 8 = 42437\n42437 + 8 = 42445\n42445 + 8 = 42453\n42453 + 8 = 42461\n42461 + 8 = 42469\n42469 + 8 = 42477\n42477 + 8 = 42485\n42485 + 8 = 42493\n42493 + 8 = 42501\n42501 + 8 = 42509\n42509 + 8 = 42517\n42517 + 8 = 42525\n42525 + 8 = 42533\n42533 + 8 = 42541\n42541 + 8 = 42549\n42549 + 8 = 42557\n42557 + 8 = 42565\n42565 + 8 = 42573\n42573 + 8 = 42581\n42581 + 8 = 42589\n42589 + 8 = 42597\n42597 + 8 = 42605\n42605 + 8 = 42613\n42613 + 8 = 42621\n42621 + 8 = 42629\n42629 + 8 = 42637\n42637 + 8 = 42645\n42645 + 8 = 42653\n42653 + 8 = 42661\n42661 + 8 = 42669\n42669 + 8 = 42677\n42677 + 8 = 42685\n42685 + 8 = 42693\n42693 + 8 = 42701\n42701 + 8 = 42709\n42709 + 8 = 42717\n42717 + 8 = 42725\n42725 + 8 = 42733\n42733 + 8 = 42741\n42741 + 8 = 42749\n42749 + 8 = 42757\n42757 + 8 = 42765\n42765 + 8 = 42773\n42773 + 8 = 42781\n42781 + 8 = 42789\n42789 + 8 = 42797\n42797 + 8 = 42805\n42805 + 8 = 42813\n42813 + 8 = 42821\n42821 + 8 = 42829\n42829 + 8 = 42837\n42837 + 8 = 42845\n42845 + 8 = 42853\n42853 + 8 = 42861\n42861 + 8 = 42869\n42869 + 8 = 42877\n42877 + 8 = 42885\n42885 + 8 = 42893\n42893 + 8 = 42901\n42901 + 8 = 42909\n42909 + 8 = 42917\n42917 + 8 = 42925\n42925 + 8 = 42933\n42933 + 8 = 42941\n42941 + 8 = 42949\n42949 + 8 = 42957\n42957 + 8 = 42965\n42965 + 8 = 42973\n42973 + 8 = 42981\n42981 + 8 = 42989\n42989 + 8 = 42997\n42997 + 8 = 43005\n43005 + 8 = 43013\n43013 + 8 = 43021\n43021 + 8 = 43029\n43029 + 8 = 43037\n43037 + 8 = 43045\n43045 + 8 = 43053\n43053 + 8 = 43061\n43061 + 8 = 43069\n43069 + 8 = 43077\n43077 + 8 = 43085\n43085 + 8 = 43093\n43093 + 8 = 43101\n43101 + 8 = 43109\n43109 + 8 = 43117\n43117 + 8 = 43125\n43125 + 8 = 43133\n43133 + 8 = 43141\n43141 + 8 = 43149\n43149 + 8 = 43157\n43157 + 8 = 43165\n43165 + 8 = 43173\n43173 + 8 = 43181\n43181 + 8 = 43189\n43189 + 8 = 43197\n43197 + 8 = 43205\n43205 + 8 = 43213\n43213 + 8 = 43221\n43221 + 8 = 43229\n43229 + 8 = 43237\n43237 + 8 = 43245\n43245 + 8 = 43253\n43253 + 8 = 43261\n43261 + 8 = 43269\n43269 + 8 = 43277\n43277 + 8 = 43285\n43285 + 8 = 43293\n43293 + 8 = 43301\n43301 + 8 = 43309\n43309 + 8 = 43317\n43317 + 8 = 43325\n43325 + 8 = 43333\n43333 + 8 = 43341\n43341 + 8 = 43349\n43349 + 8 = 43357\n43357 + 8 = 43365\n43365 + 8 = 43373\n43373 + 8 = 43381\n43381 + 8 = 43389\n43389 + 8 = 43397\n43397 + 8 = 43405\n43405 + 8 = 43413\n43413 + 8 = 43421\n43421 + 8 = 43429\n43429 + 8 = 43437\n43437 + 8 = 43445\n43445 + 8 = 43453\n43453 + 8 = 43461\n43461 + 8 = 43469\n43469 + 8 = 43477\n43477 + 8 = 43485\n43485 + 8 = 43493\n43493 + 8 = 43501\n43501 + 8 = 43509\n43509 + 8 = 43517\n43517 + 8 = 43525\n43525 + 8 = 43533\n43533 + 8 = 43541\n43541 + 8 = 43549\n43549 + 8 = 43557\n43557 + 8 = 43565\n43565 + 8 = 43573\n43573",
            "Extract-Response": " 43573"
        },
        {
            "Index": 393,
            "GT": 24,
            "Query": "5 * 4 + 2 - 3 * 5 * 2 + 4 * 1 * 1 * 8 =   ",
            "Injected CoT": "5 * 4 = 20\n3 * 5 = 15\n15 * 2 = 30\n20 + 2 = 22\n22 - 30 = -8\n4 * 1 = 4\n4 * 1 = 4\n4 * 8 = 31\n-8 + 31 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe input is only given to initialize the map and the visited array. You don't need to process the string.\nThe only operation is to iterate the map, do the math in each round and return the result.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        int res = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; ++i) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 394,
            "GT": 23,
            "Query": "7 * 5 - 3 + 9 - 4 - 4 - 2 - 2 + 3 - 9 =   ",
            "Injected CoT": "7 * 5 = 35\n35 - 3 = 33\n33 + 9 = 41\n41 - 4 = 37\n37 - 4 = 33\n33 - 2 = 31\n31 - 2 = 29\n29 + 3 = 33\n33 - 9 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 395,
            "GT": -63,
            "Query": "2 - 7 - 9 - 7 - 2 + 5 - 3 - 6 * 7 * 1 =   ",
            "Injected CoT": "6 * 7 = 43\n-2 - 7 = -9\n-9 - 9 = -18\n-18 - 7 = -25\n-25 + 5 = -20\n-20 - 3 = -23\n-23 - 43 =",
            "Response": " -66",
            "Extract-Response": " -66.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0"
        },
        {
            "Index": 396,
            "GT": 1478,
            "Query": "9 * 5 - 2 * 4 + 4 + 8 * 4 * 5 * 9 - 3 =   ",
            "Injected CoT": "9 * 5 = 45\n2 * 4 = 8\n8 * 4 = 32\n32 * 5 = 160\n160 * 9 = 1440\n45 - 8 = 37\n37 + 4 = 41\n41 + 1440 = 1482\n1482 - 3 =",
            "Response": " 1479",
            "Extract-Response": " 1479\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= current;\n            current = 0;\n        } else if (s[i] == '/') {\n            operation /= current;\n            current = 0;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 398,
            "GT": -20,
            "Query": "5 * 1 + 8 - 7 - 6 * 5 + 2 * 1 - 6 + 8 =   ",
            "Injected CoT": "5 * 1 = 5\n6 * 5 = 30\n2 * 1 = 2\n5 + 9 = 13\n13 - 7 = 6\n6 - 30 = -24\n-24 + 2 = -22\n-22 - 6 = -28\n-28 + 9 =",
            "Response": " -19\n-19 + 8 = -11",
            "Extract-Response": " -11.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 400,
            "GT": 301,
            "Query": "9 * 9 * 3 - 2 + 5 * 9 + 4 * 4 * 1 - 1 =   ",
            "Injected CoT": "9 * 9 = 81\n81 * 3 = 243\n5 * 9 = 45\n4 * 4 = 16\n16 * 1 = 16\n243 - 2 = 241\n241 + 45 = 286\n286 + 16 = 303\n303 - 1 =",
            "Response": " 302",
            "Extract-Response": " 302\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 402,
            "GT": 82,
            "Query": "9 * 5 + 4 * 1 - 7 + 6 + 2 * 5 * 4 - 6 =   ",
            "Injected CoT": "9 * 5 = 45\n4 * 1 = 4\n2 * 5 = 10\n10 * 4 = 40\n45 + 4 = 49\n49 + 6 = 55\n55 + 40 = 95\n95 - 7 = 87\n87 - 6 =",
            "Response": " 81",
            "Extract-Response": "\n\n81"
        },
        {
            "Index": 406,
            "GT": 184,
            "Query": "8 * 8 * 2 * 2 - 8 * 6 - 9 * 4 + 9 + 3 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 2 = 128\n128 * 2 = 256\n8 * 6 = 48\n9 * 4 = 36\n48 + 36 = 84\n256 - 84 = 172\n9 + 3 = 11\n172 + 11 =",
            "Response": " 183",
            "Extract-Response": " 183\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <time.h>\n#include <assert.h>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <list>\n#include <set>\n#include <map>\n#include <bitset>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <complex>\n\n#ifdef __linux__\n#define __acrdir(x) \"/mnt/acr-storage/\"#x\n#else\n#define __acrdir(x) \"D:/Project/ACM/Code/Data/\"#x\n#endif\n\n#define MP make_pair\n#define PB push_back\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define REP1(i,a,b) for (int i=(a);i<=(b);++i)\n#define PER(i,n) for (int i=(n)-1;i>=0;--i)\n#define PER1(i,a,b) for (int i=(a);i>=(b);--i)\n#define RI(x) scanf(\"%d\",&(x))\n#define DRI(x) int (x);scanf(\"%d\",&(x))\n#define RII(x,y) scanf(\"%d%d\",&(x),&(y))\n#define DRII(x,y) int x,y;scanf(\"%d%d\",&(x),&(y))\n#define RIII(x,y,z) scanf(\"%d%d%d\",&(x),&(y),&(z))\n#define DRIII(x,y,z) int x,y,z;scanf(\"%d%d%d\",&(x),&(y),&(z))\n#define RS(x) scanf(\"%s\",(x))\n#define FOREACH(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)\n#define SIZE(x) ((int)(x).size())\n#define LEN(x) ((int)(x).length())\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\ntypedef pair<int,int> pii;\n\nconst int INF = 1000000000;\nconst int MOD = 1000000007;\nconst int NUM = 111111;\n\nint n,m;\nint a[NUM];\n\nint main() {\n    RII(n,m);\n    REP(i,n) RI(a[i]);\n    int ans = 0;\n    REP(i,n) {\n        int sum = 0;\n        REP(j,n) {\n            if(i == j) continue;\n            sum += a[j];\n        }\n        if(sum % m == 0) ans = max(ans,sum);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}"
        },
        {
            "Index": 407,
            "GT": -1646,
            "Query": "2 * 3 - 7 * 9 * 5 * 4 - 4 * 7 * 7 * 2 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 4 = 180\n7 * 7 = 49\n49 * 2 = 98\n7 * 9 = 63\n63 * 5 = 315\n315 * 4 = 1260\n180 - 1260 = -1080\n-1080 - 98 = -1178\n2 * 3 = 6\n6 - 1177 =",
            "Response": " -1171\n\n-1171\n\n*/",
            "Extract-Response": " -1171"
        },
        {
            "Index": 408,
            "GT": 3,
            "Query": "2 - 5 - 1 - 7 + 3 + 1 + 6 + 2 * 5 - 6 =   ",
            "Injected CoT": "2 * 5 = 10\n-5 - 1 = -6\n-6 - 7 = -13\n-13 + 3 = -10\n-10 + 1 = -9\n-9 + 5 = -3\n-3 + 10 = 7\n7 - 5 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 409,
            "GT": -71,
            "Query": "9 + 6 + 9 * 3 - 4 * 4 * 7 - 4 + 1 + 2 =   ",
            "Injected CoT": "9 + 6 = 15\n9 * 3 = 27\n4 * 4 = 16\n16 * 7 = 112\n27 - 112 = -85\n-85 - 4 = -89\n-89 + 1 = -87\n-87 + 2 =",
            "Response": " -85",
            "Extract-Response": " -85.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int num = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    num = num * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + num * sign;\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 410,
            "GT": 23,
            "Query": "4 - 1 - 2 + 6 - 1 - 1 + 7 + 5 + 3 * 2 =   ",
            "Injected CoT": "3 * 2 = 5\n4 - 1 = 3\n3 - 2 = 1\n1 + 5 = 7\n7 - 1 = 5\n5 - 1 = 5\n5 + 7 = 12\n12 + 5 = 17\n17 + 5 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 411,
            "GT": -42,
            "Query": "3 * 2 - 9 - 7 - 9 - 5 - 8 - 5 - 2 - 3 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 9 = -3\n-3 - 7 = -10\n-10 - 9 = -19\n-19 - 5 = -24\n-24 - 8 = -32\n-32 - 5 = -37\n-37 - 2 = -38\n-38 - 3 =",
            "Response": " -41",
            "Extract-Response": " -41.\n\nNote:\n\nThere may be more than one LIS combination, it is only necessary for you to return the length.\nYour algorithm should run in O(n2) complexity and O(n) extra space.\n\nFollow up: Could you improve it to O(n log n) time complexity and O(1) extra space?\n\n*/\n\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        if(n == 0) return 0;\n        vector<int> dp(n, 1);\n        int res = 1;\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(nums[i] > nums[j]) {\n                    dp[i] = max(dp[i], dp[j] + 1);\n                }\n            }\n            res = max(res, dp[i]);\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        if(n == 0) return 0;\n        vector<int> dp(n, 1);\n        int res = 1;\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(nums[i] > nums[j]) {\n                    dp[i] = max(dp[i], dp[j] + 1);\n                }\n            }\n            res = max(res, dp[i]);\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 412,
            "GT": -3,
            "Query": "6 + 3 - 9 - 7 + 5 + 9 - 7 + 1 + 1 - 5 =   ",
            "Injected CoT": "6 + 3 = 9\n9 - 9 = 0\n0 - 7 = -7\n-7 + 4 = -2\n-2 + 9 = 7\n7 - 7 = 0\n0 + 1 = 1\n1 + 1 = 2\n2 - 4 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 416,
            "GT": 177,
            "Query": "7 + 6 - 7 - 2 + 9 * 3 * 7 - 1 - 9 - 6 =   ",
            "Injected CoT": "9 * 3 = 27\n7 + 5 = 13\n13 - 7 = 5\n5 - 2 = 4\n27 * 7 = 189\n4 + 189 = 193\n193 - 1 = 192\n192 - 9 = 183\n183 - 5 =",
            "Response": " 178\n178 - 6 = 172",
            "Extract-Response": " 172\n\n*/"
        },
        {
            "Index": 417,
            "GT": -4,
            "Query": "6 + 2 + 5 - 9 - 2 - 9 * 1 - 6 + 7 + 2 =   ",
            "Injected CoT": "9 * 1 = 9\n6 + 3 = 8\n8 + 5 = 13\n13 - 9 = 4\n4 - 3 = 3\n3 - 9 = -7\n-7 - 6 = -13\n-13 + 7 = -6\n-6 + 3 =",
            "Response": " -3\n-3 + 2 = -1\n-1 - 9 = -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_sum = nums[0]\n        curr_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = max(curr_sum + nums[i], nums[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(Solution().maxSubArray(nums))"
        },
        {
            "Index": 419,
            "GT": 764,
            "Query": "9 * 2 + 6 * 2 * 7 * 9 + 9 - 4 - 7 - 8 =   ",
            "Injected CoT": "9 * 2 = 18\n6 * 2 = 12\n12 * 7 = 84\n84 * 9 = 756\n18 + 756 = 774\n774 - 4 = 770\n770 - 7 = 764\n764 - 8 =",
            "Response": " 756\n\n2. \n\n7 * 2 + 6 * 2 * 7 * 9 + 9 - 4 - 7 - 8 =    \n7 * 2 = 14\n6 * 2 = 12\n12 * 7 = 84\n84 * 9 = 756\n14 + 756 = 770\n770 - 4 = 766\n766 - 7 = 759\n759 - 8 = 751",
            "Extract-Response": " 751"
        },
        {
            "Index": 421,
            "GT": 116,
            "Query": "3 * 9 * 5 - 6 + 2 - 3 - 4 - 9 + 8 - 7 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 5 = 135\n135 - 6 = 129\n129 + 2 = 131\n131 - 3 = 128\n128 - 4 = 124\n124 - 9 = 115\n115 + 8 = 123\n123 - 8 =",
            "Response": " 115",
            "Extract-Response": " 115\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 422,
            "GT": -412,
            "Query": "2 * 9 + 2 + 9 + 1 - 7 - 9 * 6 * 8 - 3 =   ",
            "Injected CoT": "6 * 8 = 48\n9 * 48 = 432\n2 * 9 = 18\n2 + 9 = 11\n11 + 1 = 12\n432 - 7 = 425\n425 - 18 = 407\n407 - 9 = 398\n398 - 4 =",
            "Response": " 394",
            "Extract-Response": "\n\n394"
        },
        {
            "Index": 423,
            "GT": -37,
            "Query": "2 - 3 * 4 - 4 - 1 * 8 * 1 - 9 + 1 - 7 =   ",
            "Injected CoT": "3 * 4 = 12\n2 - 12 = -10\n-10 - 4 = -14\n8 * 1 = 8\n-14 - 8 = -22\n-22 - 1 = -23\n-23 - 9 = -32\n-32 + 1 = -31\n-31 - 6 =",
            "Response": " -37\n-37 + 7 = -30",
            "Extract-Response": " -30\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int cur = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * cur;\n            cur = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 429,
            "GT": 3,
            "Query": "4 + 7 + 4 * 1 - 8 - 2 * 6 + 3 + 1 * 5 =   ",
            "Injected CoT": "4 + 7 = 11\n4 * 1 = 4\n11 + 4 = 14\n2 * 6 = 12\n8 - 12 = -4\n3 + 1 = 4\n1 * 5 = 5\n-4 + 4 = 0\n0 + 5 = 5\n14 + 5 =",
            "Response": " 19",
            "Extract-Response": " 19.\n\nNote:\n\nThe expression contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.\nYou may assume that the given expression is always valid. Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < n; i++) {\n            if(isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == n - 1) {\n                if(sign == '-') {\n                    st.push(-num);\n                }\n                else if(sign == '+') {\n                    st.push(num);\n                }\n                else {\n                    int temp = 0;\n                    if(sign == '*') {\n                        temp = st.top() * num;\n                    }\n                    else {\n                        temp = st.top() / num;\n                    }\n                    st.pop();\n                    st.push(temp);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 433,
            "GT": 77,
            "Query": "6 * 5 * 1 + 4 * 2 + 3 * 8 + 9 + 7 - 1 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 2 = 30\n4 * 2 = 8\n3 * 8 = 24\n30 + 8 = 38\n38 + 24 = 62\n62 + 9 = 71\n71 + 7 = 78\n78 - 2 =",
            "Response": " 76\n\n76\n\n*/",
            "Extract-Response": "\n\n76"
        },
        {
            "Index": 434,
            "GT": 288,
            "Query": "4 + 6 * 5 * 6 + 1 + 4 + 1 + 2 * 7 * 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 6 = 180\n4 + 180 = 184\n1 + 184 = 185\n185 + 4 = 189\n2 * 7 = 14\n14 * 7 = 99\n189 + 99 =",
            "Response": " 288\n\n288 is not a perfect square.\n\n*/\n\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n\tint num = 1;\n\tint sum = 0;\n\tint count = 0;\n\tint square = 0;\n\tint squareRoot = 0;\n\tint squareRootSum = 0;\n\tint squareRootSumSquare = 0;\n\tint squareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSum = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquare = 0;\n\tint squareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRootSumSquareRoot = 0;\n\tint squareRoot",
            "Extract-Response": "\n\n*/"
        },
        {
            "Index": 436,
            "GT": 19,
            "Query": "9 + 1 - 3 + 1 * 5 - 1 - 3 + 7 + 8 - 4 =   ",
            "Injected CoT": "1 * 5 = 5\n9 + 5 = 14\n14 - 3 = 11\n11 + 1 = 12\n12 - 1 = 11\n11 - 3 = 8\n8 + 7 = 15\n15 + 8 = 24\n24 - 4 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 437,
            "GT": -746,
            "Query": "4 * 2 * 7 * 3 - 9 - 9 - 2 * 7 * 8 * 8 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 7 = 56\n56 * 3 = 168\n2 * 7 = 14\n14 * 8 = 112\n112 * 8 = 896\n168 - 9 = 159\n159 - 9 = 149\n149 - 896 =",
            "Response": " -747",
            "Extract-Response": " -747.\n\nNote:\n\nThere are at most 100 nodes in the tree.\nThe given tree is guaranteed to be not null.\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int maxProduct(TreeNode root) {\n        int[] max = new int[1];\n        max[0] = Integer.MIN_VALUE;\n        int sum = dfs(root, max);\n        return max[0];\n    }\n    \n    private int dfs(TreeNode root, int[] max) {\n        if (root == null) {\n            return 0;\n        }\n        int left = dfs(root.left, max);\n        int right = dfs(root.right, max);\n        int cur = root.val + left + right;\n        max[0] = Math.max(max[0], cur * (cur - 1) / 2);\n        return cur;\n    }\n}"
        },
        {
            "Index": 438,
            "GT": 92,
            "Query": "9 * 8 - 7 * 4 - 9 * 1 * 2 + 3 + 9 * 7 =   ",
            "Injected CoT": "9 * 8 = 72\n7 * 4 = 28\n1 * 2 = 2\n9 * 2 = 18\n72 - 28 - 18 = 26\n9 * 7 = 63\n26 + 3 = 30\n63 + 9 = 72\n72 + 30 =",
            "Response": " 102",
            "Extract-Response": " 102\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 439,
            "GT": -60,
            "Query": "4 + 4 - 3 + 8 - 9 - 6 * 1 - 9 * 6 - 4 =   ",
            "Injected CoT": "6 * 1 = 6\n9 * 6 = 54\n4 + 4 = 8\n8 - 3 = 5\n5 + 8 = 13\n13 - 9 = 4\n4 - 6 = -2\n-2 - 54 = -55\n-55 - 4 =",
            "Response": " -59",
            "Extract-Response": " -59.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 440,
            "GT": 56,
            "Query": "9 * 3 * 3 + 4 - 5 - 6 * 5 - 5 + 3 + 8 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 3 = 81\n81 + 4 = 85\n85 - 5 = 80\n6 * 5 = 30\n80 - 30 = 50\n50 - 5 = 45\n45 + 3 = 47\n47 + 8 =",
            "Response": " 55",
            "Extract-Response": " 55\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <unordered_set>\n#include <cassert>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        int num = 0;\n        stack<int> st;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else if (s[i] == '+') {\n                result += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                result += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(result);\n                st.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result += sign * num;\n                num = 0;\n                result *= st.top();\n                st.pop();\n                result += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            result += sign * num;\n        }\n        return result;\n    }\n};\n\nint main() {\n    Solution s;\n    string ss = \"1-(5)\";\n    cout << s.calculate(ss) << endl;\n    return 0;\n}"
        },
        {
            "Index": 442,
            "GT": 162,
            "Query": "7 - 7 + 9 * 3 + 8 * 8 * 2 + 3 + 4 * 1 =   ",
            "Injected CoT": "9 * 3 = 27\n8 * 8 = 64\n64 * 2 = 128\n3 * 1 = 3\n7 - 7 = 0\n0 + 27 = 27\n27 + 128 = 155\n155 + 3 = 158\n158 + 3 =",
            "Response": " 161\n161 + 4 = 165\n\n7 - 7 + 9 * 3 + 8 * 8 * 2 + 3 + 4 * 1 = 165",
            "Extract-Response": " 165\n\n*/"
        },
        {
            "Index": 443,
            "GT": 367,
            "Query": "9 * 6 + 3 * 3 + 7 * 6 * 7 + 4 + 9 - 3 =   ",
            "Injected CoT": "9 * 6 = 54\n3 * 3 = 9\n7 * 6 = 42\n42 * 7 = 294\n54 + 9 = 63\n63 + 294 = 357\n357 + 4 = 361\n361 + 9 = 369\n369 - 3 =",
            "Response": " 366",
            "Extract-Response": " 366\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n    int pppp;\n    int qqqq;\n    int rrrr;\n    int ssss;\n    int tttt;\n    int uuuu;\n    int vvvv;\n    int wwww;\n    int xxxx;\n    int yyyy;\n    int zzzz;\n    int aaaaa;\n    int bbbbb;\n    int ccccc;\n    int ddddd;\n    int eeeee;\n    int fffff;\n    int ggggg;\n    int hhhhh;\n    int iiiii;\n    int jjjjj;\n    int kkkkk;\n    int lllll;\n    int mmmmm;\n    int nnnnn;\n    int ooooo;\n    int ppppp;\n    int qqqqq;\n    int rrrrr;\n    int sssss;\n    int ttttt;\n    int uuuuu;\n    int vvvvv;\n    int wwwww;\n    int xxxxx;\n    int yyyyy;\n    int zzzzz;\n    int aaaaaa;\n    int bbbbbb;\n    int cccccc;\n    int dddddd;\n    int eeeeee;\n    int ffffff;\n    int gggggg;\n    int hhhhhh;\n    int iiiiii;\n    int jjjjjj;\n    int kkkkkk;\n    int llllll;\n    int mmmmmm;\n    int nnnnnn;\n    int oooooo;\n    int pppppp;\n    int qqqqqq;\n    int rrrrrr;\n    int ssssss;\n    int tttttt;\n    int uuuuuu;\n    int vvvvvv;\n    int wwwwww;\n    int xxxxxx;\n    int yyyyyy;\n    int zzzzzz;\n    int aaaaaaa;\n    int bbbbbbb;\n    int ccccccc;\n    int ddddddd;\n    int eeeeeee;\n    int fffffff;\n    int ggggggg;\n    int hhhhhhh;\n    int iiiiiii;\n    int jjjjjjj;\n    int kkkkkkk;\n    int lllllll;\n    int mmmmmmm;\n    int nnnnnnn;\n    int ooooooo;\n    int ppppppp;\n    int qqqqqqq;\n    int rrrrrrr;\n    int sssssss;\n    int ttttttt;\n    int uuuuuuu;\n    int vvvvvvv;\n    int wwwwwww;\n    int xxxxxxx;\n    int yyyyyyy;\n    int zzzzzzz;\n    int aaaaaaaa;\n    int bbbbbbbb;\n    int cccccccc;\n    int dddddddd;\n    int eeeeeeee;\n    int ffffffff;\n    int gggggggg;\n    int hhhhhhhh;\n    int iiiiiiii;\n    int jjjjjjjj;\n    int kkkkkkkk;\n    int llllllll;\n    int mmmmmmmm;\n    int nnnnnnnn;\n    int oooooooo;\n    int pppppppp;\n    int qqqqqqqq;\n    int rrrrrrrr;\n    int ssssssss;\n    int tttttttt;\n    int uuuuuuuu;\n    int vvvvvvvv;\n    int wwwwwwww;\n    int xxxxxxxx;\n    int yyyyyyyy;\n    int zzzzzzzz;\n    int aaaaaaaaa;\n    int bbbbbbbbb;\n    int ccccccccc;\n    int ddddddddd;\n    int eeeeeeeee;\n    int fffffffff;\n    int ggggggggg;\n    int hhhhhhhhh;\n    int iiiiiiiii;\n    int jjjjjjjjj;\n    int kkkkkkkkk;\n    int lllllllll;\n    int mmmmmmmmmm;\n    int nnnnnnnnnn;\n    int oooooooooo;\n    int pppppppppp;\n    int qqqqqqqqqq;\n    int rrrrrrrrrr;\n    int ssssssssss;\n    int tttttttttt;\n    int uuuuuuuuuu;\n    int vvvvvvvvvv;\n    int wwwwwwwwww;\n    int xxxxxxxxxx;\n    int yyyyyyyyyy;\n    int zzzzzzzzzz;\n    int aaaaaaaaaa;\n    int bbbbbbbbbb;\n    int cccccccccc;\n    int dddddddddd;\n    int eeeeeeeeee;\n    int ffffffffff;\n    int gggggggggg;\n    int hhhhhhhhhh;\n    int iiiiiiiiii;\n    int jjjjjjjjjj;\n    int kkkkkkkkkk;\n    int llllllllll;\n    int mmmmmmmmmmm;\n    int nnnnnnnnnnn;\n    int ooooooooooo;\n    int ppppppppppp;\n    int qqqqqqqqqqq;\n    int rrrrrrrrrrr;\n    int sssssssssss;\n    int ttttttttttt;\n    int uuuuuuuuuuu;\n    int vvvvvvvvvvv;\n    int wwwwwwwwwww;\n    int xxxxxxxxxxx;\n    int yyyyyyyyyyy;\n    int zzzzzzzzzzz;\n    int aaaaaaaaaaa;\n    int bbbbbbbbbbb;\n    int ccccccccccc;\n    int ddddddddddd;\n    int eeeeeeeeeee;\n    int fffffffffff;\n    int ggggggggggg;\n    int hhhhhhhhhhh;\n    int iiiiiiiiiii;\n    int jjjjjjjjjjj;\n    int kkkkkkkkkkk;\n    int lllllllllll;\n    int mmmmmmmmmmmm;\n"
        },
        {
            "Index": 444,
            "GT": 58,
            "Query": "4 * 4 + 1 + 6 + 1 + 2 - 5 + 1 + 6 * 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 1 = 17\n17 + 6 = 23\n23 + 1 = 24\n24 + 2 = 26\n26 - 5 = 21\n21 + 1 = 23\n6 * 6 = 36\n23 + 36 =",
            "Response": " 59",
            "Extract-Response": " 59\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 445,
            "GT": 79,
            "Query": "8 * 9 * 1 + 4 * 3 - 1 * 1 * 9 + 6 - 2 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 1 = 72\n4 * 3 = 12\n1 * 1 = 1\n1 * 9 = 9\n72 + 12 = 84\n84 - 9 = 75\n75 + 6 = 80\n80 - 2 =",
            "Response": " 78\n\n78\n\n*/",
            "Extract-Response": " 78"
        },
        {
            "Index": 447,
            "GT": 5883,
            "Query": "3 + 5 + 3 - 8 + 4 * 5 * 1 * 7 * 6 * 7 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 1 = 20\n20 * 7 = 140\n140 * 6 = 840\n840 * 7 = 5880\n4 + 5 = 8\n8 + 4 = 11\n11 - 8 = 4\n4 + 5880 =",
            "Response": " 5884",
            "Extract-Response": " 5884\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,"
        },
        {
            "Index": 450,
            "GT": 23,
            "Query": "3 - 3 + 1 - 9 - 9 - 6 + 2 * 7 + 8 * 4 =   ",
            "Injected CoT": "2 * 7 = 14\n-3 + 1 = -2\n-9 - 9 = -18\n-18 - 6 = -24\n8 * 4 = 32\n-24 + 14 = -10\n-10 - 2 = -11\n-11 + 32 =",
            "Response": " 21",
            "Extract-Response": "\n\n21"
        },
        {
            "Index": 452,
            "GT": 4,
            "Query": "6 - 6 - 3 - 8 + 8 - 1 + 4 + 3 + 4 - 3 =   ",
            "Injected CoT": "6 - 6 = 0\n0 - 2 = -3\n-3 - 8 = -11\n-11 + 8 = -3\n-3 - 1 = -4\n-4 + 4 = 0\n0 + 2 = 2\n2 + 4 = 7\n7 - 2 =",
            "Response": " 5\n5 + 3 = 8\n8 - 3 = 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        if (d < a) {\n            d = a;\n        } else if (d > b) {\n            d = b;\n        }\n        if (s == \"East\") {\n            result += d;\n        } else {\n            result -= d;\n        }\n    }\n\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 454,
            "GT": 489891,
            "Query": "7 + 3 + 8 * 7 * 3 * 9 * 6 * 6 * 9 - 7 =   ",
            "Injected CoT": "8 * 7 = 56\n56 * 3 = 168\n168 * 9 = 1512\n1512 * 6 = 9072\n9072 * 6 = 54432\n54432 * 9 = 489888\n7 + 3 = 10\n10 + 489888 = 489899\n489899 - 7 =",
            "Response": " 489892",
            "Extract-Response": "\n\n489892"
        },
        {
            "Index": 456,
            "GT": -266,
            "Query": "9 + 9 + 2 + 2 * 3 - 9 * 4 * 8 - 3 - 1 =   ",
            "Injected CoT": "2 * 3 = 6\n9 + 9 = 18\n18 + 2 = 20\n20 + 6 = 26\n9 * 4 = 36\n36 * 8 = 288\n288 * -1 = -288\n26 - 288 = -262\n-262 - 3 = -265\n-265 - 0 =",
            "Response": " -265",
            "Extract-Response": " -265.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 10^4.\nThe value of nodes is between -10^5 and 10^5.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int& maxSum) {\n        if (!root) {\n            return 0;\n        }\n        int left = max(0, maxPathSumHelper(root->left, maxSum));\n        int right = max(0, maxPathSumHelper(root->right, maxSum));\n        maxSum = max(maxSum, left + right + root->val);\n        return max(left, right) + root->val;\n    }\n};"
        }
    ]
}