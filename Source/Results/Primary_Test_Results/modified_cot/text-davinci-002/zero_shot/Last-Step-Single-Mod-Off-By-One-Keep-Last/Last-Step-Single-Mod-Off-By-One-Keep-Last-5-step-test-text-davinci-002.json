{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Last-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 5,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Last-Step-Single-Mod-Off-By-One-Keep-Last\\Last-Step-Single-Mod-Off-By-One-Keep-Last-5-step-test-text-davinci-002.json",
    "Total": 250,
    "Total Accurate": 4,
    "Total Accuracy": 1.6,
    "Percent of Answers Containing CoT": 11.200000000000001,
    "CoT Accuracy": 0.0,
    "Non-CoT Accuracy": 1.8018018018018018,
    "ci_radius": 1.5554054185324158,
    "ci_upper": 3.155405418532416,
    "ci_lower": 0.04459458146758433,
    "Matches Expected": 79.60000000000001,
    "Matches Expected ci_radius": 4.995255246331262,
    "Matches Expected ci_upper": 84.59525524633128,
    "Matches Expected ci_lower": 74.60474475366874,
    "ME ci_radius": 4.995255246331262,
    "ME ci_upper": 84.59525524633128,
    "ME ci_lower": 74.60474475366874,
    "Baseline Accuracy": 1.6,
    "Trials": [
        {
            "Index": 0,
            "GT": -18,
            "Query": "6 - 4 + 7 + 9 - 9 * 4 =   ",
            "Injected CoT": "9 * 4 = 35\n6 - 4 = 2\n2 + 7 = 9\n9 + 9 = 18\n18 - 35 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer arr\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 arr.length \u2264 1000,\n-1000 \u2264 arr[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(arr):\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            count += arr[i] - arr[i+1] + 1\n            arr[i+1] = arr[i] + 1\n    return count",
            "Expected Answer": -17,
            "Answer": -17.0,
            "Final Answer": -17.0
        },
        {
            "Index": 2,
            "GT": 65,
            "Query": "3 + 5 + 8 + 9 + 8 * 5 =   ",
            "Injected CoT": "8 * 4 = 40\n3 + 4 + 8 + 9 + 40 =",
            "Response": " \n64",
            "Extract-Response": "\n64",
            "Expected Answer": 64,
            "Answer": 64.0,
            "Final Answer": 64.0
        },
        {
            "Index": 3,
            "GT": 15,
            "Query": "9 + 7 + 7 - 1 - 5 - 2 =   ",
            "Injected CoT": "9 + 7 = 16\n16 + 7 = 23\n23 - 1 = 22\n22 - 5 = 18\n18 - 2 =",
            "Response": " 16\n\n16\n*/",
            "Extract-Response": " 16.",
            "Expected Answer": 16,
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 4,
            "GT": 122,
            "Query": "6 - 5 + 2 * 7 * 8 + 9 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 8 = 112\n6 - 5 = 1\n112 + 1 = 112\n112 + 9 =",
            "Response": " 121",
            "Extract-Response": "\n\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45",
            "Expected Answer": 121,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 5,
            "GT": 587,
            "Query": "8 * 9 * 8 + 6 + 3 + 2 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 8 = 576\n576 + 6 = 582\n582 + 3 = 585\n585 + 1 =",
            "Response": " 586\n\n*/\n\npublic class Solution {\n    public int[] plusOne(int[] digits) {\n        int carry = 1;\n        for (int i = digits.length - 1; i >= 0; i--) {\n            int sum = digits[i] + carry;\n            digits[i] = sum % 10;\n            carry = sum / 10;\n        }\n        if (carry == 1) {\n            int[] result = new int[digits.length + 1];\n            result[0] = 1;\n            for (int i = 0; i < digits.length; i++) {\n                result[i + 1] = digits[i];\n            }\n            return result;\n        }\n        return digits;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int[] plusOne(int[] digits) {\n        int carry = 1;\n        for (int i = digits.length - 1; i >= 0; i--) {\n            int sum = digits[i] + carry;\n            digits[i] = sum % 10;\n            carry = sum / 10;\n        }\n        if (carry == 1) {\n            int[] result = new int[digits.length + 1];\n            result[0] = 1;\n            for (int i = 0; i < digits.length; i++) {\n                result[i + 1] = digits[i];\n            }\n            return result;\n        }\n        return digits;\n    }\n}",
            "Expected Answer": 586,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 6,
            "GT": -4,
            "Query": "9 - 8 + 4 + 2 - 4 - 7 =   ",
            "Injected CoT": "9 - 8 = 1\n1 + 4 = 5\n5 + 2 = 7\n7 - 4 = 2\n2 - 7 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 7,
            "GT": 56,
            "Query": "4 * 8 + 1 * 7 * 4 - 4 =   ",
            "Injected CoT": "5 * 8 = 32\n1 * 7 = 7\n7 * 5 = 28\n32 + 28 = 60\n60 - 5 =",
            "Response": " 55\n\n55\n\n*/",
            "Extract-Response": " 55.",
            "Expected Answer": 55,
            "Answer": 55.0,
            "Final Answer": 55.0
        },
        {
            "Index": 8,
            "GT": 24,
            "Query": "8 - 5 * 1 + 6 + 3 * 5 =   ",
            "Injected CoT": "5 * 1 = 5\n8 - 5 = 3\n3 + 6 = 10\n3 * 5 = 15\n10 + 15 =",
            "Response": " 25",
            "Extract-Response": " 25.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 1000.\nEach node in the tree has a distinct value between 1 and 1000.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};",
            "Expected Answer": 25,
            "Answer": 25.0,
            "Final Answer": 25.0
        },
        {
            "Index": 9,
            "GT": 60,
            "Query": "5 * 7 + 5 + 8 + 8 + 4 =   ",
            "Injected CoT": "5 * 7 = 35\n35 + 5 = 40\n40 + 8 = 48\n48 + 8 = 56\n56 + 3 =",
            "Response": " 59",
            "Extract-Response": " 59\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, sum = 0;\n    scanf(\"%d\", &n);\n    while (n)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Expected Answer": 59,
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 11,
            "GT": 10,
            "Query": "5 - 2 * 3 + 8 * 2 - 5 =   ",
            "Injected CoT": "2 * 3 = 6\n8 * 2 = 16\n5 - 6 = -1\n-1 + 16 = 16\n16 - 5 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 12,
            "GT": -44,
            "Query": "6 * 5 - 9 - 7 * 9 - 2 =   ",
            "Injected CoT": "6 * 5 = 30\n7 * 9 = 63\n30 - 9 = 21\n21 - 63 = -42\n-42 - 1 =",
            "Response": " -43",
            "Extract-Response": " -43\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            currentNumber *= sign * operation;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '/') {\n            currentNumber *= sign * operation;\n            sign = 1;\n            operation = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -43,
            "Answer": -43.0,
            "Final Answer": -43.0
        },
        {
            "Index": 13,
            "GT": -37,
            "Query": "1 * 7 * 4 - 7 * 8 - 9 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 4 = 28\n7 * 8 = 56\n28 - 56 = -28\n-28 - 10 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\nNote:\nThe sum of the integers will not exceed 100.\nIf the answer is over 100, return -1.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -38,
            "Answer": -38.0,
            "Final Answer": -38.0
        },
        {
            "Index": 16,
            "GT": -23,
            "Query": "1 + 9 - 4 * 9 - 1 + 4 =   ",
            "Injected CoT": "4 * 9 = 36\n1 + 9 = 10\n10 - 36 = -26\n-26 - 1 = -28\n-28 + 4 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Expected Answer": -24,
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 17,
            "GT": 44,
            "Query": "5 * 1 + 7 + 8 * 3 + 8 =   ",
            "Injected CoT": "5 * 1 = 5\n7 * 3 = 24\n5 + 7 = 12\n24 + 12 = 36\n36 + 7 =",
            "Response": " 43\n43 + 8 = 51\n51 + 8 = 59",
            "Extract-Response": " 59\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = n;\n    while (result >= 10) {\n        int sum = 0;\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        result = sum;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 43,
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 18,
            "GT": 62,
            "Query": "4 + 6 + 8 * 5 + 2 * 6 =   ",
            "Injected CoT": "8 * 5 = 40\n2 * 6 = 13\n4 + 6 = 10\n10 + 40 = 50\n50 + 13 =",
            "Response": " 63",
            "Extract-Response": " 63\n</code>\n",
            "Expected Answer": 63,
            "Answer": 63.0,
            "Final Answer": 63.0
        },
        {
            "Index": 19,
            "GT": 16,
            "Query": "5 - 5 + 2 * 5 + 3 * 2 =   ",
            "Injected CoT": "2 * 5 = 10\n3 * 2 = 7\n5 - 5 = 0\n0 + 10 = 10\n10 + 7 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nYou may assume that the array does not change.\nThere are many calls to sumRange function.\n*/\n\nclass NumArray {\npublic:\n    NumArray(vector<int> &nums) {\n        int n = nums.size();\n        sums.resize(n + 1);\n        for (int i = 0; i < n; ++i) {\n            sums[i + 1] = sums[i] + nums[i];\n        }\n    }\n\n    int sumRange(int i, int j) {\n        return sums[j + 1] - sums[i];\n    }\nprivate:\n    vector<int> sums;\n};\n\n\n// Your NumArray object will be instantiated and called as such:\n// NumArray numArray(nums);\n// numArray.sumRange(0, 1);\n// numArray.sumRange(0, 2);",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 20,
            "GT": -41,
            "Query": "8 - 5 * 7 - 5 * 4 + 6 =   ",
            "Injected CoT": "5 * 7 = 35\n5 * 4 = 20\n8 - 35 = -27\n-27 - 20 = -47\n-47 + 5 =",
            "Response": " -42\n-42 + 6 = -36",
            "Extract-Response": " -36\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 1; i <= n; ++i) {\n        int sum = 0;\n        int x = i;\n        while (x > 0) {\n            sum += x % 10;\n            x /= 10;\n        }\n        if (sum >= a && sum <= b) {\n            result += i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -42,
            "Answer": -36.0,
            "Final Answer": -36.0
        },
        {
            "Index": 21,
            "GT": 74,
            "Query": "8 + 5 + 2 + 7 * 9 - 4 =   ",
            "Injected CoT": "7 * 9 = 63\n8 + 5 = 13\n13 + 2 = 15\n15 + 63 = 79\n79 - 4 =",
            "Response": " 75",
            "Extract-Response": " 75.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int cur = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + cur * sign;\n            }\n        }\n        return result;\n    }\n};",
            "Expected Answer": 75,
            "Answer": 75.0,
            "Final Answer": 75.0
        },
        {
            "Index": 24,
            "GT": 60,
            "Query": "8 * 8 + 6 - 6 - 9 + 5 =   ",
            "Injected CoT": "8 * 8 = 64\n64 + 6 = 70\n70 - 6 = 64\n64 - 9 = 55\n55 + 4 =",
            "Response": " 59",
            "Extract-Response": " 59\n</code>\n",
            "Expected Answer": 59,
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 25,
            "GT": 1898,
            "Query": "5 + 7 * 5 * 6 * 9 + 3 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 5 = 175\n175 * 6 = 1050\n1050 * 9 = 9450\n9450 + 5 = 9455\n9455 + 4 =",
            "Response": " 9459\n9459 + 3 = 9462\n\n9462\n\n*/",
            "Extract-Response": " 9462",
            "Expected Answer": 9459,
            "Answer": 9462.0,
            "Final Answer": 9462.0
        },
        {
            "Index": 26,
            "GT": 11,
            "Query": "1 + 1 * 6 - 5 + 3 * 3 =   ",
            "Injected CoT": "1 * 6 = 6\n1 + 6 = 7\n3 * 3 = 9\n7 - 5 = 3\n3 + 9 =",
            "Response": " 12",
            "Extract-Response": "\n\n12",
            "Expected Answer": 12,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 27,
            "GT": -12,
            "Query": "2 * 7 - 8 - 4 - 8 - 6 =   ",
            "Injected CoT": "2 * 7 = 14\n14 - 8 = 7\n7 - 4 = 2\n2 - 8 = -6\n-6 - 7 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the given array won't exceed 10000.\nAll the integers in the given array are in the range of [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); ++i) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); ++i) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 28,
            "GT": 17,
            "Query": "6 + 2 * 8 + 7 - 8 - 4 =   ",
            "Injected CoT": "2 * 8 = 16\n6 + 16 = 22\n22 + 7 = 29\n29 - 8 = 21\n21 - 3 =",
            "Response": " 18",
            "Extract-Response": "\n\n18.",
            "Expected Answer": 18,
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 29,
            "GT": 12,
            "Query": "5 - 4 + 1 - 4 + 7 * 2 =   ",
            "Injected CoT": "7 * 2 = 14\n5 - 4 = 1\n1 + 1 = 2\n2 - 4 = -3\n-3 + 14 =",
            "Response": " 11",
            "Extract-Response": "\n\n11.",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 31,
            "GT": 35,
            "Query": "3 * 2 * 5 + 3 + 4 - 2 =   ",
            "Injected CoT": "3 * 3 = 6\n6 * 5 = 30\n30 + 3 = 33\n33 + 4 = 37\n37 - 3 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == ' ')\n        {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        }\n        else if (s[i] == '+')\n        {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            num = 0;\n            sign = -1;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n    result += sign * num;\n    cout << result << endl;\n    return 0;\n}",
            "Expected Answer": 34,
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 32,
            "GT": 85,
            "Query": "9 * 8 + 8 * 3 - 4 - 7 =   ",
            "Injected CoT": "9 * 8 = 72\n8 * 3 = 24\n72 + 24 = 96\n96 - 4 = 93\n93 - 7 =",
            "Response": " 86",
            "Extract-Response": " 86\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 86,
            "Answer": 86.0,
            "Final Answer": 86.0
        },
        {
            "Index": 33,
            "GT": 27,
            "Query": "4 + 3 + 4 + 9 + 7 * 1 =   ",
            "Injected CoT": "7 * 1 = 7\n4 + 3 = 7\n7 + 4 = 11\n11 + 9 = 19\n19 + 7 =",
            "Response": " 26\n\n26 is the checksum, which is the right most digit of the sum of the rest of the digits.\n\nFor example, 1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1112 produces 2, since 1 + 1 + 1 + 2 = 5 is not less than 9, the second digit (1) is taken.\n\n1111 produces 4, since 1 + 1 + 1 + 1 = 4 is less than 9, only its last digit is taken.\n\n1112 produces 2, since 1 + 1",
            "Extract-Response": "\n\n2.",
            "Expected Answer": 26,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 35,
            "GT": 9,
            "Query": "6 + 5 + 9 + 4 - 6 - 9 =   ",
            "Injected CoT": "6 + 5 = 11\n11 + 8 = 20\n20 + 4 = 24\n24 - 6 = 18\n18 - 8 =",
            "Response": " 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 10,
            "Answer": 10.0,
            "Final Answer": 10.0
        },
        {
            "Index": 36,
            "GT": -14,
            "Query": "4 * 2 - 3 * 3 * 3 + 5 =   ",
            "Injected CoT": "3 * 3 = 9\n4 * 2 = 8\n9 * 9 = 81\n8 - 81 = -73\n-73 + 4 =",
            "Response": " -69\n-69 + 5 = -64",
            "Extract-Response": " -64\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, len, sum = 0, sign = 1;\n    scanf(\"%s\", s);\n    len = strlen(s);\n    for(i = 0; i < len; i++)\n    {\n        if(s[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(s[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            n = s[i] - '0';\n            sum = sum + sign * n * pow(3, len - i - 1);\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/",
            "Expected Answer": -69,
            "Answer": -64.0,
            "Final Answer": -64.0
        },
        {
            "Index": 37,
            "GT": 55,
            "Query": "7 * 6 + 9 + 4 - 9 + 9 =   ",
            "Injected CoT": "7 * 6 = 42\n42 + 10 = 51\n51 + 4 = 55\n55 - 10 = 46\n46 + 10 =",
            "Response": " 56",
            "Extract-Response": " 56.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the string from user.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string and\n     * calculate sum of all digits.\n     */\n    for(i = 0; i < len; i++)\n    {\n        if(isdigit(str[i]))\n        {\n            sum += (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all digits = %d\", sum);\n\n    return 0;\n}",
            "Expected Answer": 56,
            "Answer": 56.0,
            "Final Answer": 56.0
        },
        {
            "Index": 40,
            "GT": -30,
            "Query": "4 - 2 + 4 - 9 * 2 * 2 =   ",
            "Injected CoT": "9 * 2 = 18\n4 - 2 = 2\n2 + 4 = 5\n5 - 18 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        sign = '+'\n        num = 0\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-*/' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                elif sign == '/':\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 42,
            "GT": 10,
            "Query": "4 * 2 + 1 + 9 - 5 - 3 =   ",
            "Injected CoT": "4 * 2 = 8\n8 + 1 = 9\n9 + 9 = 18\n18 - 5 = 14\n14 - 3 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 43,
            "GT": 27,
            "Query": "8 * 8 * 1 + 3 - 8 * 5 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 1 = 64\n64 + 3 = 67\n8 * 5 = 41\n67 - 41 =",
            "Response": " 26",
            "Extract-Response": " 26\n</code>\n",
            "Expected Answer": 26,
            "Answer": 26.0,
            "Final Answer": 26.0
        },
        {
            "Index": 44,
            "GT": 5,
            "Query": "7 + 1 - 1 - 1 + 4 - 5 =   ",
            "Injected CoT": "7 + 1 = 8\n8 - 1 = 7\n7 - 1 = 6\n6 + 4 = 10\n10 - 4 =",
            "Response": " 6\n6 - 5 = 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int x;\n        cin >> x;\n        if (x == 1) {\n            if (a > 0) {\n                --a;\n            } else if (b > 0) {\n                --b;\n                ++result;\n            } else {\n                ++result;\n            }\n        } else {\n            if (b > 0) {\n                --b;\n                --result;\n            } else {\n                result += 2;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 6,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 45,
            "GT": 17,
            "Query": "1 + 9 * 4 - 6 - 5 - 9 =   ",
            "Injected CoT": "9 * 4 = 36\n1 + 36 = 37\n37 - 6 = 31\n31 - 5 = 27\n27 - 9 =",
            "Response": " 18",
            "Extract-Response": "\n\n18.",
            "Expected Answer": 18,
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 48,
            "GT": 137,
            "Query": "9 * 1 * 2 * 7 + 6 + 5 =   ",
            "Injected CoT": "9 * 1 = 9\n9 * 2 = 18\n18 * 7 = 126\n126 + 6 = 131\n131 + 5 =",
            "Response": " 136",
            "Extract-Response": " 136\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int num, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l25, m25, n25",
            "Expected Answer": 136,
            "Answer": 136.0,
            "Final Answer": 136.0
        },
        {
            "Index": 50,
            "GT": 35,
            "Query": "7 - 5 + 9 + 4 + 4 * 5 =   ",
            "Injected CoT": "4 * 5 = 20\n7 - 5 = 2\n2 + 9 = 11\n11 + 4 = 14\n14 + 20 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int sum = 0;\n    int num = 0;\n    int sign = 1;\n\n    /* Reads and stores the string */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /* Iterates through the string */\n    for(i=0; i<len; i++)\n    {\n        /* If the current character is a digit */\n        if(isdigit(str[i]))\n        {\n            /* Convert the digit into integer and update the sum */\n            num = (num * 10) + (str[i] - '0');\n        }\n        /* If the current character is a '+' or '-' */\n        else if(str[i] == '+' || str[i] == '-')\n        {\n            /* Update the sum with the previous number */\n            sum = sum + (sign * num);\n\n            /* If the current character is a '+', set sign as 1 */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n            /* If the current character is a '-', set sign as -1 */\n            else\n            {\n                sign = -1;\n            }\n\n            /* Reset the number to 0 */\n            num = 0;\n        }\n        /* If the current character is a '*' */\n        else if(str[i] == '*')\n        {\n            /* Update the sum with the previous number */\n            sum = sum + (sign * num);\n\n            /* Reset the number to 0 */\n            num = 0;\n\n            /* Set sign as 1 */\n            sign = 1;\n        }\n    }\n\n    /* Update the sum with the last number */\n    sum = sum + (sign * num);\n\n    printf(\"The answer is %d\", sum);\n\n    return 0;\n}",
            "Expected Answer": 34,
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 51,
            "GT": -43,
            "Query": "3 - 5 * 9 - 6 + 1 + 4 =   ",
            "Injected CoT": "5 * 9 = 45\n3 - 45 = -42\n-42 - 6 = -48\n-48 + 1 = -46\n-46 + 4 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -42,
            "Answer": -42.0,
            "Final Answer": -42.0
        },
        {
            "Index": 52,
            "GT": -12,
            "Query": "6 - 2 - 8 - 2 - 8 + 2 =   ",
            "Injected CoT": "6 - 1 = 4\n4 - 8 = -4\n-4 - 1 = -6\n-6 - 8 = -14\n-14 + 1 =",
            "Response": " -13\n-13 + 8 = -5\n-5 + 1 = -4\n-4 + 8 = 4",
            "Extract-Response": " 4\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstring>\n#include <ctime>\n#include <cstdlib>\n#include <cassert>\n\nusing namespace std;\n\n#define mem(a, v) memset(a, v, sizeof (a))\n#define x first\n#define y second\n#define all(a) (a).begin(), (a).end()\n#define mp make_pair\n#define pb push_back\n#define sz(x) int((x).size())\n#define rep(i, n) for (int i = 0; i < int(n); i ++)\n#define repi(i, a, n) for (int i = (a); i < int(n); i ++)\n#define repe(x, v) for (auto x: (v))\n\nint main () {\n    std::ios_base::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    vector <int> a(n);\n    rep(i, n) {\n        cin >> a[i];\n    }\n    int ans = 0;\n    rep(i, n) {\n        ans += a[i] - 1;\n    }\n    cout << ans;\n    return 0;\n}",
            "Expected Answer": -13,
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 53,
            "GT": -28,
            "Query": "4 + 1 - 4 - 1 - 7 * 4 =   ",
            "Injected CoT": "7 * 4 = 28\n4 + 1 = 5\n5 - 4 = 1\n1 - 1 = 1\n1 - 28 =",
            "Response": " -27",
            "Extract-Response": " -27.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Expected Answer": -27,
            "Answer": -27.0,
            "Final Answer": -27.0
        },
        {
            "Index": 54,
            "GT": 36,
            "Query": "4 + 5 + 5 * 6 - 1 * 3 =   ",
            "Injected CoT": "5 * 6 = 30\n1 * 3 = 3\n4 + 5 = 9\n9 + 30 = 38\n38 - 3 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add the\n     * previously stored number to result.\n     * If current character is '-', then subtract\n     * the previously stored number from result.\n     * If current character is a digit, multiply the\n     * digit with sign (1 or -1) and store the\n     * temporary result in num.\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add num to result */\n        if(str[i]=='+')\n        {\n            result = result + num;\n\n            /* Reset sign to positive */\n            sign = 1;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        /* If current character is '-', subtract num from result */\n        else if(str[i]=='-')\n        {\n            result = result + num;\n\n            /* Reset sign to negative */\n            sign = -1;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        /* If current character is a digit */\n        else if(isdigit(str[i]))\n        {\n            /* Convert char to int and multiply with sign */\n            num = num * 10 + (str[i] - '0');\n        }\n    }\n\n    /* If num is not 0, then add num to result */\n    if(num != 0)\n    {\n        result = result + num;\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 55,
            "GT": 95,
            "Query": "7 * 9 - 2 * 5 + 6 * 7 =   ",
            "Injected CoT": "7 * 9 = 63\n2 * 5 = 10\n6 * 7 = 43\n63 - 10 = 53\n53 + 43 =",
            "Response": " 96",
            "Extract-Response": " 96\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            } else if (operation == '/') {\n                result /= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    } else if (operation == '/') {\n        result /= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 96,
            "Answer": 96.0,
            "Final Answer": 96.0
        },
        {
            "Index": 71,
            "GT": 17,
            "Query": "7 + 1 * 9 + 1 - 3 + 3 =   ",
            "Injected CoT": "1 * 9 = 9\n7 + 9 = 16\n16 + 1 = 17\n17 - 4 = 14\n14 + 4 =",
            "Response": " 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n15 + 3 = 18\n18 - 3 = 15\n",
            "Extract-Response": " 15.",
            "Expected Answer": 18,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 72,
            "GT": 82,
            "Query": "2 + 7 * 7 - 1 + 4 * 8 =   ",
            "Injected CoT": "7 * 7 = 49\n2 + 49 = 51\n4 * 8 = 32\n51 - 1 = 51\n51 + 32 =",
            "Response": " 83",
            "Extract-Response": " 83.\n\nNote:\nThe length of given array won't exceed 1000.\nThere are only integers in the given array.\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 83,
            "Answer": 83.0,
            "Final Answer": 83.0
        },
        {
            "Index": 73,
            "GT": 35,
            "Query": "6 * 5 + 1 + 7 * 1 - 3 =   ",
            "Injected CoT": "6 * 5 = 30\n7 * 1 = 7\n30 + 1 = 31\n31 + 7 = 37\n37 - 3 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            sum += s[i + 1] - '0';\n            i++;\n        }\n        else if(s[i] == '-')\n        {\n            sum -= s[i + 1] - '0';\n            i++;\n        }\n        else if(s[i] == '*')\n        {\n            sum *= s[i + 1] - '0';\n            i++;\n        }\n        else if(s[i] == '/')\n        {\n            sum /= s[i + 1] - '0';\n            i++;\n        }\n        else if(s[i] == '%')\n        {\n            sum %= s[i + 1] - '0';\n            i++;\n        }\n        else\n        {\n            sum += s[i] - '0';\n        }\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}",
            "Expected Answer": 34,
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 74,
            "GT": -1,
            "Query": "2 * 1 - 1 - 9 + 1 * 7 =   ",
            "Injected CoT": "2 * 1 = 2\n2 - 1 = 1\n1 - 9 = -7\n1 * 7 = 7\n-7 + 7 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer is  0\n\n2 * 1 - 1 - 9 + 1 * 7 =     0\nThe answer",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 76,
            "GT": -4,
            "Query": "4 + 5 - 5 + 2 - 2 * 5 =   ",
            "Injected CoT": "4 + 5 = 9\n9 - 5 = 4\n4 + 2 = 5\n5 - 2 * 5 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        int max_len = 0;\n        int count = 0;\n        unordered_map<int, int> m;\n        m[0] = -1;\n        for(int i = 0; i < n; i++) {\n            if(nums[i] == 0)\n                count--;\n            else\n                count++;\n            if(m.find(count) != m.end()) {\n                max_len = max(max_len, i - m[count]);\n            }\n            else {\n                m[count] = i;\n            }\n        }\n        return max_len;\n    }\n};",
            "Expected Answer": -5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 77,
            "GT": 60,
            "Query": "6 * 6 - 5 - 1 + 5 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 5 = 31\n31 - 1 = 31\n5 * 6 = 31\n31 + 31 =",
            "Response": " 62",
            "Extract-Response": " 62\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 62,
            "Answer": 62.0,
            "Final Answer": 62.0
        },
        {
            "Index": 78,
            "GT": -31,
            "Query": "1 * 5 * 2 - 6 - 7 * 5 =   ",
            "Injected CoT": "1 * 5 = 5\n5 * 2 = 10\n7 * 5 = 35\n10 - 6 = 5\n5 - 35 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\nThe space used by your function should be constant, O(1).\nYou may not modify the values in the list, only nodes itself can be changed.\n\n*/\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* dummy = new ListNode(0);\n        ListNode* cur = dummy;\n        int carry = 0;\n        while(l1 || l2 || carry) {\n            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + carry;\n            carry = sum / 10;\n            cur->next = new ListNode(sum % 10);\n            cur = cur->next;\n            l1 = l1 ? l1->next : l1;\n            l2 = l2 ? l2->next : l2;\n        }\n        return dummy->next;\n    }\n};",
            "Expected Answer": -30,
            "Answer": -30.0,
            "Final Answer": -30.0
        },
        {
            "Index": 79,
            "GT": 29,
            "Query": "1 * 9 + 2 * 6 + 3 + 5 =   ",
            "Injected CoT": "1 * 9 = 9\n2 * 6 = 12\n3 + 5 = 8\n9 + 12 = 22\n22 + 8 =",
            "Response": " 30\n\n1 * 9 + 2 * 6 + 3 * 5 = \n1 * 9 = 9\n2 * 6 = 12\n3 * 5 = 15\n9 + 12 = 21\n21 + 15 = 36",
            "Extract-Response": "\n36",
            "Expected Answer": 30,
            "Answer": 36.0,
            "Final Answer": 36.0
        },
        {
            "Index": 80,
            "GT": 25,
            "Query": "9 - 4 + 3 * 6 + 9 - 7 =   ",
            "Injected CoT": "3 * 6 = 18\n9 - 4 = 5\n5 + 18 = 23\n23 + 9 = 32\n32 - 6 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Expected Answer": 26,
            "Answer": 26.0,
            "Final Answer": 26.0
        },
        {
            "Index": 81,
            "GT": -32,
            "Query": "4 - 3 - 3 + 2 - 4 * 8 =   ",
            "Injected CoT": "4 - 3 = 1\n1 - 3 = -2\n-2 + 2 = -1\n4 * 8 = 32\n-1 - 32 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": -33,
            "Answer": -33.0,
            "Final Answer": -33.0
        },
        {
            "Index": 82,
            "GT": 36,
            "Query": "2 * 3 + 2 * 3 + 8 * 3 =   ",
            "Injected CoT": "2 * 3 = 6\n2 * 3 = 6\n8 * 3 = 25\n6 + 6 = 12\n12 + 25 =",
            "Response": " 37",
            "Extract-Response": " 37.\n\nNote:\nYou may assume that the secret number and your friend's guess only contain digits, and their lengths are always equal.\n\n*/\n\nclass Solution {\npublic:\n    int getHint(string secret, string guess) {\n        int len = secret.size();\n        int a = 0, b = 0;\n        vector<int> s(10, 0), g(10, 0);\n        for (int i = 0; i < len; ++i) {\n            if (secret[i] == guess[i]) {\n                ++a;\n            } else {\n                ++s[secret[i] - '0'];\n                ++g[guess[i] - '0'];\n            }\n        }\n        for (int i = 0; i < 10; ++i) {\n            b += min(s[i], g[i]);\n        }\n        return to_string(a) + \"A\" + to_string(b) + \"B\";\n    }\n};",
            "Expected Answer": 37,
            "Answer": 37.0,
            "Final Answer": 37.0
        },
        {
            "Index": 83,
            "GT": 325,
            "Query": "7 - 5 - 1 + 9 * 4 * 9 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 9 = 323\n7 - 5 = 2\n2 - 1 = 1\n1 + 323 =",
            "Response": " 324",
            "Extract-Response": " 324\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Expected Answer": 324,
            "Answer": 324.0,
            "Final Answer": 324.0
        },
        {
            "Index": 84,
            "GT": 32,
            "Query": "8 + 2 * 6 + 5 + 1 * 7 =   ",
            "Injected CoT": "2 * 6 = 12\n8 + 12 = 20\n20 + 5 = 25\n1 * 6 = 6\n25 + 6 =",
            "Response": " 31\n\n31\n\n*/",
            "Extract-Response": "\n\n31",
            "Expected Answer": 31,
            "Answer": 31.0,
            "Final Answer": 31.0
        },
        {
            "Index": 85,
            "GT": -31,
            "Query": "5 + 9 - 3 * 6 - 3 * 9 =   ",
            "Injected CoT": "3 * 6 = 18\n3 * 9 = 28\n5 + 9 = 14\n14 - 18 = -4\n-4 - 28 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -32,
            "Answer": -32.0,
            "Final Answer": -32.0
        },
        {
            "Index": 86,
            "GT": 73,
            "Query": "5 * 2 * 8 - 7 - 5 + 5 =   ",
            "Injected CoT": "5 * 2 = 10\n10 * 8 = 80\n80 - 7 = 73\n73 - 5 = 67\n67 + 5 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 5 * 2 * 8 - 7 - 5 + 5;\n    b = 5 * 2 * 8 - 7 - 5 + 5;\n    c = 5 * 2 * 8 - 7 - 5 + 5;\n    d = 5 * 2 * 8 - 7 - 5 + 5;\n    e = 5 * 2 * 8 - 7 - 5 + 5;\n    f = 5 * 2 * 8 - 7 - 5 + 5;\n    g = 5 * 2 * 8 - 7 - 5 + 5;\n    h = 5 * 2 * 8 - 7 - 5 + 5;\n    i = 5 * 2 * 8 - 7 - 5 + 5;\n    j = 5 * 2 * 8 - 7 - 5 + 5;\n    k = 5 * 2 * 8 - 7 - 5 + 5;\n    l = 5 * 2 * 8 - 7 - 5 + 5;\n    m = 5 * 2 * 8 - 7 - 5 + 5;\n    n = 5 * 2 * 8 - 7 - 5 + 5;\n    o = 5 * 2 * 8 - 7 - 5 + 5;\n    p = 5 * 2 * 8 - 7 - 5 + 5;\n    q = 5 * 2 * 8 - 7 - 5 + 5;\n    r = 5 * 2 * 8 - 7 - 5 + 5;\n    s = 5 * 2 * 8 - 7 - 5 + 5;\n    t = 5 * 2 * 8 - 7 - 5 + 5;\n    u = 5 * 2 * 8 - 7 - 5 + 5;\n    v = 5 * 2 * 8 - 7 - 5 + 5;\n    w = 5 * 2 * 8 - 7 - 5 + 5;\n    x = 5 * 2 * 8 - 7 - 5 + 5;\n    y = 5 * 2 * 8 - 7 - 5 + 5;\n    z = 5 * 2 * 8 - 7 - 5 + 5;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 72,
            "Answer": 72.0,
            "Final Answer": 72.0
        },
        {
            "Index": 87,
            "GT": -44,
            "Query": "2 * 2 + 8 - 2 - 6 * 9 =   ",
            "Injected CoT": "2 * 2 = 4\n4 + 8 = 12\n12 - 2 = 11\n6 * 9 = 54\n11 - 54 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634,",
            "Expected Answer": -43,
            "Answer": -43.0,
            "Final Answer": -43.0
        },
        {
            "Index": 88,
            "GT": -43,
            "Query": "8 * 4 - 5 - 7 * 9 - 7 =   ",
            "Injected CoT": "8 * 4 = 32\n32 - 5 = 27\n7 * 9 = 63\n27 - 63 = -35\n-35 - 7 =",
            "Response": " -42",
            "Extract-Response": " -42.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nThe answer is guaranteed to be fit in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -42,
            "Answer": -42.0,
            "Final Answer": -42.0
        },
        {
            "Index": 89,
            "GT": 1,
            "Query": "9 * 2 + 1 - 5 - 4 - 9 =   ",
            "Injected CoT": "8 * 2 = 18\n18 + 1 = 19\n19 - 5 = 14\n14 - 4 = 10\n10 - 8 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        int n = nums.size();\n        int sum = 0;\n        int count = 0;\n        unordered_map<int, int> m;\n        m[0] = 1;\n        for (int i = 0; i < n; i++) {\n            sum += nums[i];\n            if (m.find(sum - k) != m.end()) {\n                count += m[sum - k];\n            }\n            m[sum]++;\n        }\n        return count;\n    }\n};",
            "Expected Answer": 2,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 90,
            "GT": 141,
            "Query": "5 * 5 * 6 + 4 - 7 - 6 =   ",
            "Injected CoT": "5 * 5 = 25\n25 * 7 = 150\n150 + 4 = 154\n154 - 7 = 147\n147 - 7 =",
            "Response": " 140",
            "Extract-Response": "\n\n140.",
            "Expected Answer": 140,
            "Answer": 140.0,
            "Final Answer": 140.0
        },
        {
            "Index": 91,
            "GT": 37,
            "Query": "8 + 5 + 1 * 9 + 7 + 8 =   ",
            "Injected CoT": "1 * 9 = 9\n8 + 5 = 13\n13 + 9 = 22\n22 + 7 = 28\n28 + 8 =",
            "Response": " 36\n\n36 is a perfect number.\n\nWrite a function:\n\ndef solution(n)\n\nthat, given a positive integer N, returns the N-th perfect number. The function should return -1 if no perfect number exists for the given N.\n\nFor example, given N = 2, the function should return 28, as explained above.\n\nWrite an efficient algorithm for the following assumptions:\n\nN is an integer within the range [1..100,000].\n\nCopyright 2009\u20132019 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.\n\nYou can check it out the result at https://app.codility.com/demo/results/training7V7C7M-7V7/ .\n\n# you can write to stdout for debugging purposes, e.g.\n# print(\"this is a debug message\")\n\ndef solution(N):\n    # write your code in Python 3.6\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/",
            "Extract-Response": "\n\ndef solution(N):\n    # write your code in Python 3.6\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/qq_35246620/article/details/82907946\n    # \u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u89e3\u6cd5\uff0c\u53c2",
            "Expected Answer": 36,
            "Answer": 3.6,
            "Final Answer": 3.6
        },
        {
            "Index": 92,
            "GT": -43,
            "Query": "4 - 7 * 6 + 6 - 3 - 8 =   ",
            "Injected CoT": "-7 * 6 = -42\n4 - (-42) = 46\n46 + 6 = 52\n52 - 3 = 50\n50 - 8 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 42,
            "Answer": 42.0,
            "Final Answer": 42.0
        },
        {
            "Index": 94,
            "GT": 76,
            "Query": "8 + 4 * 3 * 7 - 4 * 4 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 7 = 84\n8 + 84 = 93\n4 * 4 = 16\n93 - 16 =",
            "Response": " 77",
            "Extract-Response": " 77\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, result = 0, sign = 1;\n\n    /* Input string from user */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through each character of input string and\n     * check for numeric digits\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If it's not a numeric digit then break */\n        if(str[i] < '0' || str[i] > '9')\n            break;\n\n        /* Convert numeric digits into number */\n        num = str[i] - '0';\n\n        /*\n         * If i == 0, then it's a single digit number\n         * and add into result.\n         */\n        if(i == 0)\n        {\n            result = num;\n        }\n        /*\n         * If i > 0, then it's a 2 digit number and\n         * add into result.\n         */\n        else\n        {\n            result = (result * 10) + num;\n        }\n    }\n\n    /*\n     * If i < len, then it means string contains non-numeric\n     * character, so check for sign of number.\n     */\n    if(i < len)\n    {\n        /*\n         * If string is like \"10 + 5\", then increment 'i'\n         * so that '+' will be processed.\n         */\n        if(str[i] == ' ' || str[i] == '\\t')\n        {\n            i++;\n        }\n\n        /*\n         * If string is like \"10 + 5\", then increment 'i'\n         * so that '+' will be processed.\n         */\n        if(str[i] == '+' || str[i] == '-')\n        {\n            /* If '+', then simply add into result */\n            if(str[i] == '+')\n            {\n                /* Nothing to do, just continue */\n            }\n            /* If '-', then simply subtract from result */\n            else\n            {\n                sign = -1;\n            }\n\n            /*\n             * If string is like \"10 + 5\", then increment 'i'\n             * so that '5' will be processed.\n             */\n            i++;\n        }\n\n        /*\n         * If string is like \"10 * 5\", then increment 'i'\n         * so that '*' will be processed.\n         */\n        if(str[i] == '*')\n        {\n            /*\n             * If string is like \"10 * 5\", then increment 'i'\n             * so that '5' will be processed.\n             */\n            i++;\n\n            /*\n             * If string is like \"10 * 5\", then increment 'i'\n             * so that '5' will be processed.\n             */\n            if(str[i] == ' ' || str[i] == '\\t')\n            {\n                i++;\n            }\n\n            /*\n             * If string is like \"10 * 5\", then increment 'i'\n             * so that '5' will be processed.\n             */\n            if(str[i] == '+' || str[i] == '-')\n            {\n                /* If '+', then simply add into result */\n                if(str[i] == '+')\n                {\n                    /* Nothing to do, just continue */\n                }\n                /* If '-', then simply subtract from result */\n                else\n                {\n                    sign = -1;\n                }\n\n                /*\n                 * If string is like \"10 * 5\", then increment 'i'\n                 * so that '5' will be processed.\n                 */\n                i++;\n            }\n\n            /*\n             * If string is like \"10 * 5\", then increment 'i'\n             * so that '5' will be processed.\n             */\n            if(str[i] == '*')\n            {\n                /*\n                 * If string is like \"10 * 5\", then increment 'i'\n                 * so that '5' will be processed.\n                 */\n                i++;\n\n                /*\n                 * If string is like \"10 * 5\", then increment 'i'\n                 * so that '5' will be processed.\n                 */\n                if(str[i] == ' ' || str[i] == '\\t')\n                {\n                    i++;\n                }\n\n                /*\n                 * If string is like \"10 * 5\", then increment 'i'\n                 * so that '5' will be processed.\n                 */\n                if(str[i] == '+' || str[i] == '-')\n                {\n                    /* If '+', then simply add into result */\n                    if(str[i] == '+')\n                    {\n                        /* Nothing to do, just continue */\n                    }\n                    /* If '-', then simply subtract from result */\n                    else\n                    {\n                        sign = -1;\n                    }\n\n                    /*\n                     * If string is like \"10 * 5\", then increment 'i'\n                     * so that '5' will be processed.\n                     */\n                    i++;\n                }\n\n                /*\n                 * If string is like \"10 * 5\", then increment 'i'\n                 * so that '5' will be processed.\n                 */\n                if(str[i] == '*')\n                {\n                    /*\n                     * If string is like \"10 * 5\", then increment 'i'\n                     * so that '5' will be processed.\n                     */\n                    i++;\n\n                    /*\n                     * If string is like \"10 * 5\", then increment 'i'\n                     * so that '5' will be processed.\n                     */\n                    if(str[i] == ' ' || str[i] == '\\t')\n                    {\n                        i++;\n                    }\n\n                    /*\n                     * If string is like \"10 * 5\", then increment 'i'\n                     * so that '5' will be processed.\n                     */\n                    if(str[i] == '+' || str[i] == '-')\n                    {\n                        /* If '+', then simply add into result */\n                        if(str[i] == '+')\n                        {\n                            /* Nothing to do, just continue */\n                        }\n                        /* If '-', then simply subtract from result */\n                        else\n                        {\n                            sign = -1;\n                        }\n\n                        /*\n                         * If string is like \"10 * 5\", then increment 'i'\n                         * so that '5' will be processed.\n                         */\n                        i++;\n                    }\n\n                    /*\n                     * If string is like \"10 * 5\", then increment 'i'\n                     * so that '5' will be processed.\n                     */\n                    if(str[i] == '*')\n                    {\n                        /*\n                         * If string is like \"10 * 5\", then increment 'i'\n                         * so that '5' will be processed.\n                         */\n                        i++;\n\n                        /*\n                         * If string is like \"10 * 5\", then increment 'i'\n                         * so that '5' will be processed.\n                         */\n                        if(str[i] == ' ' || str[i] == '\\t')\n                        {\n                            i++;\n                        }\n\n                        /*\n                         * If string is like \"10 * 5\", then increment 'i'\n                         * so that '5' will be processed.\n                         */\n                        if(str[i] == '+' || str[i] == '-')\n                        {\n                            /* If '+', then simply add into result */\n                            if(str[i] == '+')\n                            {\n                                /* Nothing to do, just continue */\n                            }\n                            /* If '-', then simply subtract from result */\n                            else\n                            {\n                                sign = -1;\n                            }\n\n                            /*\n                             * If string is like \"10 * 5\", then increment 'i'\n                             * so that '5' will be processed.\n                             */\n                            i++;\n                        }\n\n                        /*\n                         * If string is like \"10 * 5\", then increment 'i'\n                         * so that '5' will be processed.\n                         */\n                        if(str[i] == '*')\n                        {\n                            /*\n                             * If string is like \"10 * 5\", then increment 'i'\n                             * so that '",
            "Expected Answer": 77,
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 95,
            "GT": -28,
            "Query": "5 * 5 - 7 * 8 + 4 - 1 =   ",
            "Injected CoT": "5 * 5 = 25\n7 * 8 = 56\n25 - 56 = -31\n-31 + 4 = -27\n-27 - 0 =",
            "Response": " -27",
            "Extract-Response": " -27.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int num = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    num = num * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + num * sign;\n            }\n        }\n        return result;\n    }\n};",
            "Expected Answer": -27,
            "Answer": -27.0,
            "Final Answer": -27.0
        },
        {
            "Index": 97,
            "GT": 152,
            "Query": "6 * 5 * 7 - 9 * 6 - 4 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 7 = 210\n9 * 6 = 54\n210 - 54 = 155\n155 - 4 =",
            "Response": " 151",
            "Extract-Response": " 151\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488, n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499, n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510, n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521, n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532, n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543, n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554, n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565, n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576, n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587, n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598, n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609, n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620, n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631, n632, n633, n634, n635, n636, n637, n638, n639, n640, n641, n642, n643, n644, n645, n646",
            "Expected Answer": 151,
            "Answer": 151.0,
            "Final Answer": 151.0
        },
        {
            "Index": 98,
            "GT": 15,
            "Query": "3 + 5 + 2 - 7 + 4 * 3 =   ",
            "Injected CoT": "2 + 5 = 8\n8 + 2 = 10\n10 - 7 = 2\n4 * 2 = 12\n2 + 12 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nCan you solve this challenge in 3 lines of code or less?\n\nGood luck!\n\n*/\n\n//Solution\n\nint arithmetic(int a, int b, char op) {\n    switch(op) {\n        case '+':\n            return a + b;\n        case '-':\n            return a - b;\n        case '*':\n            return a * b;\n        case '/':\n            return a / b;\n        default:\n            return 0;\n    }\n}",
            "Expected Answer": 14,
            "Answer": 14.0,
            "Final Answer": 14.0
        },
        {
            "Index": 99,
            "GT": -49,
            "Query": "5 - 3 * 7 * 3 + 9 * 1 =   ",
            "Injected CoT": "3 * 7 = 21\n21 * 3 = 63\n9 * 1 = 9\n63 - 9 = 54\n6 - 54 =",
            "Response": " -48",
            "Extract-Response": " -48.\n\nNote:\n\nThe input numbers are in the range [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Expected Answer": -48,
            "Answer": -48.0,
            "Final Answer": -48.0
        },
        {
            "Index": 100,
            "GT": -8,
            "Query": "5 - 3 - 5 * 2 - 4 + 4 =   ",
            "Injected CoT": "5 * 2 = 10\n3 - 10 = -7\n-7 - 4 = -12\n-12 + 4 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2147483648, 2147483647].\n */\n\npublic class LC_1041_RobotBoundedInCircle {\n    public boolean isRobotBounded(String instructions) {\n        int x = 0, y = 0, i = 0, d[][] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        for (int j = 0; j < instructions.length(); ++j)\n            if (instructions.charAt(j) == 'R')\n                i = (i + 1) % 4;\n            else if (instructions.charAt(j) == 'L')\n                i = (i + 3) % 4;\n            else {\n                x += d[i][0]; y += d[i][1];\n            }\n        return x == 0 && y == 0 || i > 0;\n    }\n}",
            "Expected Answer": -8,
            "Answer": -8.0,
            "Final Answer": -8.0
        },
        {
            "Index": 101,
            "GT": -15,
            "Query": "8 - 3 * 9 - 6 + 8 + 2 =   ",
            "Injected CoT": "3 * 9 = 27\n8 - 27 = -19\n-19 - 6 = -25\n-25 + 8 = -17\n-17 + 3 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -14,
            "Answer": -14.0,
            "Final Answer": -14.0
        },
        {
            "Index": 103,
            "GT": -105,
            "Query": "9 - 9 * 2 * 6 - 1 - 5 =   ",
            "Injected CoT": "9 * 2 = 18\n18 * 6 = 108\n9 - 108 = -99\n-99 - 1 = -100\n-100 - 4 =",
            "Response": " -104\n-104 - 5 = -109",
            "Extract-Response": " -109\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c;\n    cin >> n >> a >> b >> c;\n    vector<int> d(n);\n    for (size_t i = 0; i < n; i++) {\n        cin >> d[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; i++) {\n        int diff = abs(d[i] - b);\n        result += min(diff, abs(a - b) + abs(c - d[i]));\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -104,
            "Answer": -109.0,
            "Final Answer": -109.0
        },
        {
            "Index": 104,
            "GT": -305,
            "Query": "2 - 5 * 9 * 7 + 9 - 1 =   ",
            "Injected CoT": "5 * 9 = 45\n2 - 45 = -43\n-43 * 7 = -301\n-301 + 9 = -292\n-292 - 0 =",
            "Response": " -292",
            "Extract-Response": " -292.\n\nNote:\n\nThe input will be between 1 and 1000.\nFollow up:\n\nWhat if you can't use division and multiplication?\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if(!ops.empty() && ops.top() != '(' && (ops.top() == '*' || ops.top() == '/')) {\n                    int op = ops.top(); ops.pop();\n                    int n1 = nums.top(); nums.pop();\n                    num = (op == '*') ? n1 * num : n1 / num;\n                }\n                nums.push(num);\n                num = 0;\n                ops.push(s[i]);\n            }\n        }\n        if(!ops.empty() && ops.top() != '(' && (ops.top() == '*' || ops.top() == '/')) {\n            int op = ops.top(); ops.pop();\n            int n1 = nums.top(); nums.pop();\n            num = (op == '*') ? n1 * num : n1 / num;\n        }\n        nums.push(num);\n        num = 0;\n        while(!ops.empty()) {\n            char op = ops.top(); ops.pop();\n            int n2 = nums.top(); nums.pop();\n            int n1 = nums.top(); nums.pop();\n            num = (op == '+') ? n1 + n2 : n1 - n2;\n            nums.push(num);\n        }\n        return nums.top();\n    }\n};",
            "Expected Answer": -292,
            "Answer": -292.0,
            "Final Answer": -292.0
        },
        {
            "Index": 106,
            "GT": -21,
            "Query": "4 - 2 * 6 - 9 - 7 + 3 =   ",
            "Injected CoT": "2 * 6 = 12\n4 - 12 = -8\n-8 - 9 = -17\n-17 - 7 = -23\n-23 + 3 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = nums[0];\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -20,
            "Answer": -20.0,
            "Final Answer": -20.0
        },
        {
            "Index": 109,
            "GT": 10,
            "Query": "1 + 1 - 1 - 6 + 6 + 9 =   ",
            "Injected CoT": "1 + 1 = 2\n2 - 1 = 1\n1 - 6 = -5\n-5 + 6 = 1\n1 + 10 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 110,
            "GT": 23520,
            "Query": "6 * 7 * 4 * 7 * 5 * 4 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 3 = 168\n168 * 7 = 1176\n1176 * 5 = 5880\n5880 * 3 =",
            "Response": " 17640\n17640 * 4 = 70560\n70560 * 7 = 493920\n493920 * 4 = 1977680\n\n*/\n\npublic class LargestProductInASeries {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tString num = \"73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280644448664523874930358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224137565705605749026140797296865241453510047482166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091888458015616609791913387549920052406368991256071760605886116467109405077541002256983155200055935729725",
            "Extract-Response": "\n\n\" + largestProduct(num, 13));\n\t}\n\t\n\tpublic static long largestProduct(String num, int n) {\n\t\t\n\t\tlong max = 0;\n\t\t\n\t\tfor (int i = 0; i < num.length() - n; i++) {\n\t\t\t\n\t\t\tlong product = 1;\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\n\t\t\t\tproduct *= num.charAt(i + j) - '0';\n\t\t\t}\n\t\t\t\n\t\t\tif (product > max) {\n\t\t\t\t\n\t\t\t\tmax = product;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn max;\n\t}\n}",
            "Expected Answer": 17640,
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 111,
            "GT": 14,
            "Query": "7 + 5 + 1 * 2 - 5 + 5 =   ",
            "Injected CoT": "1 * 2 = 2\n7 + 6 = 12\n12 + 2 = 14\n14 - 6 = 9\n9 + 6 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else if(s[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum * 10 + (s[i] - '0');\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 114,
            "GT": -6,
            "Query": "3 + 8 - 7 - 8 + 2 - 4 =   ",
            "Injected CoT": "3 + 8 = 11\n11 - 7 = 4\n4 - 8 = -4\n-4 + 2 = -3\n-3 - 4 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -7,
            "Answer": -7.0,
            "Final Answer": -7.0
        },
        {
            "Index": 115,
            "GT": 8,
            "Query": "2 - 9 + 6 + 2 + 4 + 3 =   ",
            "Injected CoT": "2 - 9 = -7\n-7 + 6 = -1\n-1 + 2 = 1\n1 + 4 = 4\n4 + 3 =",
            "Response": " 7\n\n7\n\n*/",
            "Extract-Response": " 7.",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 116,
            "GT": 148,
            "Query": "3 - 3 - 2 + 6 * 5 * 5 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 5 = 151\n3 - 3 = 0\n0 - 2 = -2\n-2 + 151 =",
            "Response": " 149",
            "Extract-Response": " 149\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n",
            "Expected Answer": 149,
            "Answer": 149.0,
            "Final Answer": 149.0
        },
        {
            "Index": 117,
            "GT": 381,
            "Query": "4 * 9 + 9 + 8 * 6 * 7 =   ",
            "Injected CoT": "4 * 9 = 36\n8 * 6 = 48\n36 + 9 = 45\n48 * 7 = 336\n45 + 336 = 380\n380 + 48 =",
            "Response": " 428",
            "Extract-Response": " 428\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                result += a[i];\n                a[i] = -1;\n                b[j] = -1;\n                break;\n            }\n        }\n    }\n\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == -1 || b[j] == -1) {\n                continue;\n            }\n            if (a[i] % b[j] == 0) {\n                result += b[j];\n                b[j] = -1;\n                break;\n            }\n            if (b[j] % a[i] == 0) {\n                result += a[i];\n                a[i] = -1;\n                break;\n            }\n        }\n    }\n\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == -1 || b[j] == -1) {\n                continue;\n            }\n            if (a[i] == b[j]) {\n                result += a[i];\n                a[i] = -1;\n                b[j] = -1;\n                break;\n            }\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 428,
            "Answer": 428.0,
            "Final Answer": 428.0
        },
        {
            "Index": 118,
            "GT": -27,
            "Query": "6 - 6 * 6 * 1 - 1 + 4 =   ",
            "Injected CoT": "6 * 6 = 36\n36 * 1 = 36\n6 - 36 = -30\n-30 - 1 = -32\n-32 + 4 =",
            "Response": " -28\n\n-28\n\n*/",
            "Extract-Response": "\n\n-28",
            "Expected Answer": -28,
            "Answer": -28.0,
            "Final Answer": -28.0
        },
        {
            "Index": 119,
            "GT": -19,
            "Query": "5 - 9 - 1 * 4 * 2 - 7 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 2 = 8\n9 + 8 = 17\n5 - 17 = -13\n-13 - 7 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -20,
            "Answer": -20.0,
            "Final Answer": -20.0
        },
        {
            "Index": 120,
            "GT": 23,
            "Query": "4 * 5 + 1 - 7 + 5 + 4 =   ",
            "Injected CoT": "3 * 5 = 20\n20 + 1 = 21\n21 - 7 = 14\n14 + 5 = 19\n19 + 3 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 4 * 5 + 1 - 7 + 5 + 4;\n    b = 4 * 5 + 1 - 7 + 5 + 4;\n    c = 4 * 5 + 1 - 7 + 5 + 4;\n    d = 4 * 5 + 1 - 7 + 5 + 4;\n    e = 4 * 5 + 1 - 7 + 5 + 4;\n    f = 4 * 5 + 1 - 7 + 5 + 4;\n    g = 4 * 5 + 1 - 7 + 5 + 4;\n    h = 4 * 5 + 1 - 7 + 5 + 4;\n    i = 4 * 5 + 1 - 7 + 5 + 4;\n    j = 4 * 5 + 1 - 7 + 5 + 4;\n    k = 4 * 5 + 1 - 7 + 5 + 4;\n    l = 4 * 5 + 1 - 7 + 5 + 4;\n    m = 4 * 5 + 1 - 7 + 5 + 4;\n    n = 4 * 5 + 1 - 7 + 5 + 4;\n    o = 4 * 5 + 1 - 7 + 5 + 4;\n    p = 4 * 5 + 1 - 7 + 5 + 4;\n    q = 4 * 5 + 1 - 7 + 5 + 4;\n    r = 4 * 5 + 1 - 7 + 5 + 4;\n    s = 4 * 5 + 1 - 7 + 5 + 4;\n    t = 4 * 5 + 1 - 7 + 5 + 4;\n    u = 4 * 5 + 1 - 7 + 5 + 4;\n    v = 4 * 5 + 1 - 7 + 5 + 4;\n    w = 4 * 5 + 1 - 7 + 5 + 4;\n    x = 4 * 5 + 1 - 7 + 5 + 4;\n    y = 4 * 5 + 1 - 7 + 5 + 4;\n    z = 4 * 5 + 1 - 7 + 5 + 4;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 22,
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 121,
            "GT": 13,
            "Query": "3 * 4 - 5 * 1 + 3 * 2 =   ",
            "Injected CoT": "3 * 4 = 12\n5 * 1 = 5\n3 * 2 = 6\n12 - 5 = 8\n8 + 6 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\n-10000 <= B[i] <= 10000\n*/\n\nclass Solution {\npublic:\n    int maxUncrossedLines(vector<int>& A, vector<int>& B) {\n        int m = A.size();\n        int n = B.size();\n        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n        for(int i = 1; i <= m; i++) {\n            for(int j = 1; j <= n; j++) {\n                if(A[i-1] == B[j-1]) {\n                    dp[i][j] = dp[i-1][j-1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};",
            "Expected Answer": 14,
            "Answer": 14.0,
            "Final Answer": 14.0
        },
        {
            "Index": 122,
            "GT": 11,
            "Query": "8 * 3 + 6 + 2 - 3 * 7 =   ",
            "Injected CoT": "8 * 3 = 24\n24 + 6 = 30\n30 + 2 = 31\n3 * 7 = 21\n31 - 21 =",
            "Response": " 10",
            "Extract-Response": " 10\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635",
            "Expected Answer": 10,
            "Answer": 10.0,
            "Final Answer": 10.0
        },
        {
            "Index": 123,
            "GT": 7,
            "Query": "7 - 1 + 8 - 4 * 2 + 1 =   ",
            "Injected CoT": "4 * 2 = 8\n7 - 0 = 6\n6 + 8 = 14\n14 - 8 = 6\n6 + 0 =",
            "Response": " 6\n6 - 1 = 5\n5 + 6 = 11\n11 - 6 = 5\n5 + 0 = 5\n5 - 1 = 4\n4 + 5 = 9\n9 - 5 = 4\n4 + 0 = 4\n4 - 1 = 3\n3 + 4 = 7\n7 - 4 = 3\n3 + 0 = 3\n3 - 1 = 2\n2 + 3 = 5\n5 - 3 = 2\n2 + 0 = 2\n2 - 1 = 1\n1 + 2 = 3\n3 - 2 = 1\n1 + 0 = 1\n1 - 1 = 0\n0 + 1 = 1\n1 - 1 = 0",
            "Extract-Response": " 0\n\n*/",
            "Expected Answer": 6,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 124,
            "GT": 9,
            "Query": "1 - 4 + 7 * 2 - 1 * 2 =   ",
            "Injected CoT": "7 * 2 = 14\n-4 + 14 = 10\n-1 * 2 = -2\n1 - 10 = -10\n-10 - 2 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a + b + c, a * b * c, a * (b + c), (a + b) * c, a + b * c, a * b + c)",
            "Expected Answer": -12,
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 125,
            "GT": -31,
            "Query": "4 - 1 * 1 - 7 * 5 + 1 =   ",
            "Injected CoT": "2 * 2 = 2\n7 * 5 = 35\n4 - 2 = 3\n3 - 2 = 2\n2 - 35 = -33\n-33 + 2 =",
            "Response": " -31\n\n-31",
            "Extract-Response": " -31\n\n*/",
            "Expected Answer": -31,
            "Answer": -31.0,
            "Final Answer": -31.0
        },
        {
            "Index": 127,
            "GT": 6,
            "Query": "5 - 9 + 1 + 1 * 9 * 1 =   ",
            "Injected CoT": "1 * 9 = 9\n5 - 9 = -4\n-4 + 1 = -3\n-3 + 9 = 7\n7 * 1 =",
            "Response": " 7\n\n7\n\n*/",
            "Extract-Response": " 7.",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 128,
            "GT": 4,
            "Query": "9 * 9 - 9 * 9 + 4 * 1 =   ",
            "Injected CoT": "9 * 9 = 81\n9 * 9 = 81\n3 * 1 = 3\n81 - 81 = 0\n0 + 3 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 3,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 129,
            "GT": 15,
            "Query": "1 - 6 * 4 - 2 + 5 * 8 =   ",
            "Injected CoT": "6 * 4 = 24\n1 - 24 = -23\n5 * 8 = 40\n-2 + 40 = 37\n-23 - 37 =",
            "Response": " -60",
            "Extract-Response": " -60.\n\nNote:\n\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int cal(string s, int i, int j, int sign) {\n        if (i > j) return 0;\n        int num = 0;\n        while (i <= j && s[i] != '+' && s[i] != '-' && s[i] != '*') {\n            num = num * 10 + s[i++] - '0';\n        }\n        int left = cal(s, i + 1, j, s[i] == '-' ? -1 : 1);\n        while (i <= j) {\n            if (s[i] == '+' || s[i] == '-') {\n                return num + sign * left;\n            } else if (s[i] == '*') {\n                int right = cal(s, i + 2, j, s[i + 1] == '-' ? -1 : 1);\n                return num * sign * right;\n            }\n            i++;\n        }\n        return num * sign;\n    }\n    int calculate(string s) {\n        return cal(s, 0, s.size() - 1, 1);\n    }\n};",
            "Expected Answer": -60,
            "Answer": -60.0,
            "Final Answer": -60.0
        },
        {
            "Index": 130,
            "GT": 3,
            "Query": "7 - 2 - 5 - 2 + 2 + 3 =   ",
            "Injected CoT": "7 - 2 = 5\n5 - 5 = 1\n1 - 2 = -2\n-2 + 2 = 1\n1 + 3 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\n\nThe given integer is in the range [-10000, 10000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 4,
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 131,
            "GT": 199,
            "Query": "8 * 7 * 5 - 9 * 8 - 9 =   ",
            "Injected CoT": "8 * 7 = 56\n56 * 5 = 280\n10 * 8 = 72\n280 - 72 = 208\n208 - 10 =",
            "Response": " 198\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10;\n    int sum11, sum12, sum13, sum14, sum15, sum16, sum17, sum18, sum19, sum20;\n    int sum21, sum22, sum23, sum24, sum25, sum26, sum27, sum28, sum29, sum30;\n    int sum31, sum32, sum33, sum34, sum35, sum36, sum37, sum38, sum39, sum40;\n    int sum41, sum42, sum43, sum44, sum45, sum46, sum47, sum48, sum49, sum50;\n    int sum51, sum52, sum53, sum54, sum55, sum56, sum57, sum58, sum59, sum60;\n    int sum61, sum62, sum63, sum64, sum65, sum66, sum67, sum68, sum69, sum70;\n    int sum71, sum72, sum73, sum74, sum75, sum76, sum77, sum78, sum79, sum80;\n    int sum81, sum82, sum83, sum84, sum85, sum86, sum87, sum88, sum89, sum90;\n    int sum91, sum92, sum93, sum94, sum95, sum96, sum97, sum98, sum99, sum100;\n    int sum101, sum102, sum103, sum104, sum105, sum106, sum107, sum108, sum109, sum110;\n    int sum111, sum112, sum113, sum114, sum115, sum116, sum117, sum118, sum119, sum120;\n    int sum121, sum122, sum123, sum124, sum125, sum126, sum127, sum128, sum129, sum130;\n    int sum131, sum132, sum133, sum134, sum135, sum136, sum137, sum138, sum139, sum140;\n    int sum141, sum142, sum143, sum144, sum145, sum146, sum147, sum148, sum149, sum150;\n    int sum151, sum152, sum153, sum154, sum155, sum156, sum157, sum158, sum159, sum160;\n    int sum161, sum162, sum163, sum164, sum165, sum166, sum167, sum168, sum169, sum170;\n    int sum171, sum172, sum173, sum174, sum175, sum176, sum177, sum178, sum179, sum180;\n    int sum181, sum182, sum183, sum184, sum185, sum186, sum187, sum188, sum189, sum190;\n    int sum191, sum192, sum193, sum194, sum195, sum196, sum197, sum198, sum199, sum200;\n    int sum201, sum202, sum203, sum204, sum205, sum206, sum207, sum208, sum209, sum210;\n    int sum211, sum212, sum213, sum214, sum215, sum216, sum217, sum218, sum219, sum220;\n    int sum221, sum222, sum223, sum224, sum225, sum226, sum227, sum228, sum229, sum230;\n    int sum231, sum232, sum233, sum234, sum235, sum236, sum237, sum238, sum239, sum240;\n    int sum241, sum242, sum243, sum244, sum245, sum246, sum247, sum248, sum249, sum250;\n    int sum251, sum252, sum253, sum254, sum255, sum256, sum257, sum258, sum259, sum260;\n    int sum261, sum262, sum263, sum264, sum265, sum266, sum267, sum268, sum269, sum270;\n    int sum271, sum272, sum273, sum274, sum275, sum276, sum277, sum278, sum279, sum280;\n    int sum281, sum282, sum283, sum284, sum285, sum286, sum287, sum288, sum289, sum290;\n    int sum291, sum292, sum293, sum294, sum295, sum296, sum297, sum298, sum299, sum300;\n    int sum301, sum302, sum303, sum304, sum305, sum306, sum307, sum308, sum309, sum310;\n    int sum311, sum312, sum313, sum314, sum315, sum316, sum317, sum318, sum319, sum320;\n    int sum321, sum322, sum323, sum324, sum325, sum326, sum327, sum328, sum329, sum330;\n    int sum331, sum332, sum333, sum334, sum335, sum336, sum337, sum338, sum339, sum340;\n    int sum341, sum342, sum343, sum344, sum345, sum346, sum347, sum348, sum349, sum350;\n    int sum351, sum352, sum353, sum354, sum355, sum356, sum357, sum358, sum359, sum360;\n    int sum361, sum362, sum363, sum364, sum365, sum366, sum367, sum368, sum369, sum370;\n    int sum371, sum372, sum373, sum374, sum375, sum376, sum377, sum378, sum379, sum380;\n    int sum381, sum382, sum383, sum384, sum385, sum386, sum387, sum388, sum389, sum390;\n    int sum391, sum392, sum393, sum394, sum395, sum396, sum397, sum398, sum399, sum400;\n    int sum401, sum402, sum403, sum404, sum405, sum406, sum407, sum408, sum409, sum410;\n    int sum411, sum412, sum413, sum414, sum415, sum416, sum417, sum418, sum419, sum420;\n    int sum421, sum422, sum423, sum424, sum425, sum426, sum427, sum428, sum429, sum430;\n    int sum431, sum432, sum433, sum434, sum435, sum436, sum437, sum438, sum439, sum440;\n    int sum441, sum442, sum443, sum444, sum445, sum446, sum447, sum448, sum449, sum450;\n    int sum451, sum452, sum453, sum454, sum455, sum456, sum457, sum458, sum459, sum460;\n    int sum461, sum462, sum463, sum464, sum465, sum466, sum467, sum468, sum469, sum470;\n    int sum471, sum472, sum473, sum474, sum475, sum476, sum477, sum478, sum479, sum480;\n    int sum481, sum482, sum483, sum484, sum485, sum486, sum487, sum488, sum489, sum490;\n    int sum491, sum492, sum493, sum494, sum495, sum496, sum497, sum498, sum499, sum500;\n    int sum501, sum502, sum503, sum504, sum505, sum506, sum507, sum508, sum509, sum510;\n    int sum511, sum512, sum513, sum514, sum515, sum516, sum517, sum518, sum519, sum520;\n    int sum521, sum522, sum523, sum524, sum525, sum526, sum527, sum528, sum529, sum530;\n    int sum531, sum532, sum533, sum534, sum535, sum536, sum537, sum538, sum539, sum540;\n    int sum541, sum542, sum543, sum544, sum545, sum546, sum547, sum548, sum549, sum550;\n    int sum551, sum552, sum553, sum554, sum555, sum556, sum557, sum558, sum559, sum560;\n    int sum561, sum562, sum563, sum564, sum565, sum566, sum567, sum568, sum569, sum570;\n    int sum571, sum572, sum573, sum574, sum575, sum576, sum577, sum578, sum579, sum580;\n    int sum581, sum582, sum583, sum584, sum585,",
            "Extract-Response": " sum586, sum587, sum588, sum589, sum590;\n    int sum591, sum592, sum593, sum594, sum595, sum596, sum597, sum598, sum599, sum600;\n    int sum601, sum602, sum603, sum604, sum605, sum606, sum607, sum608, sum609, sum610;\n    int sum611, sum612, sum613, sum614, sum615, sum616, sum617, sum618, sum619, sum620;\n    int sum621, sum622, sum623, sum624, sum625, sum626, sum627, sum628, sum629, sum630;\n    int sum631, sum632, sum633, sum634, sum635, sum636, sum637, sum638, sum639, sum640;\n    int sum641, sum642, sum643, sum644, sum645, sum646, sum647, sum648, sum649, sum650;\n    int sum651, sum652, sum653, sum654, sum655, sum656, sum657, sum658, sum659, sum660;\n    int sum661, sum662, sum663, sum664, sum665, sum666, sum667, sum668, sum669, sum670;\n    int sum671, sum672, sum673, sum674, sum675, sum676, sum677, sum678, sum679, sum680;\n    int sum681, sum682, sum683, sum684, sum685, sum686, sum687, sum688, sum689, sum690;\n    int sum691, sum692, sum693, sum694, sum695, sum696, sum697, sum698, sum699, sum700;\n    int sum701, sum702, sum703, sum704, sum705, sum706, sum707, sum708, sum709, sum710;\n    int sum711, sum712, sum713, sum714, sum715, sum716, sum717, sum718, sum719, sum720;\n    int sum721, sum722, sum723, sum724, sum725, sum726, sum727, sum728, sum729, sum730;\n    int sum731, sum732, sum733, sum734, sum735, sum736, sum737, sum738, sum739, sum740;\n    int sum741, sum742, sum743, sum744, sum745, sum746, sum747, sum748, sum749, sum750;\n    int sum751, sum752, sum753, sum754, sum755, sum756, sum757, sum758, sum759, sum760;\n    int sum761, sum762, sum763, sum764, sum765, sum766, sum767, sum768, sum769, sum770;\n    int sum771, sum772, sum773, sum774, sum775, sum776, sum777, sum778, sum779, sum780;\n    int sum781, sum782, sum783, sum784, sum785, sum786, sum787, sum788, sum789, sum790;\n    int sum791, sum792, sum793, sum794, sum795, sum796, sum797, sum798, sum799, sum800;\n    int sum801, sum802, sum803, sum804, sum805, sum806, sum807, sum808, sum809, sum810;\n    int sum811, sum812, sum813, sum814, sum815, sum816, sum817, sum818, sum819, sum820;\n    int sum821, sum822, sum823, sum824, sum825, sum826, sum827, sum828, sum829, sum830;\n    int sum831, sum832, sum833, sum834, sum835, sum836, sum837, sum838, sum839, sum840;\n    int sum841, sum842, sum843, sum844, sum845, sum846, sum847, sum848, sum849, sum850;\n    int sum851, sum852, sum853, sum854, sum855, sum856, sum857, sum858, sum859, sum860;\n    int sum861, sum862, sum863, sum864, sum865, sum866, sum867, sum868, sum869, sum870;\n    int sum871, sum872, sum873, sum874, sum875, sum876, sum877, sum878, sum879, sum880;\n    int sum881, sum882, sum883, sum884, sum885, sum886, sum887, sum888, sum889, sum890;\n    int sum891, sum892, sum893, sum894, sum895, sum896, sum897, sum898, sum899, sum900;\n    int sum901, sum902, sum903, sum904, sum905, sum906, sum907, sum908, sum909, sum910;\n    int sum911, sum912, sum913, sum914, sum915, sum916, sum917, sum918, sum919, sum920;\n    int sum921, sum922, sum923, sum924, sum925, sum926, sum927, sum928, sum929, sum930;\n    int sum931, sum932, sum933, sum934, sum935, sum936, sum937, sum938, sum939, sum940;\n    int sum941, sum942, sum943, sum944, sum945, sum946, sum947, sum948, sum949, sum950;\n    int sum951, sum952, sum953, sum954, sum955, sum956, sum957, sum958, sum959, sum960;\n    int sum961, sum962, sum963, sum964, sum965, sum966, sum967, sum968, sum969, sum970;\n    int sum971, sum972, sum973, sum974, sum975, sum976, sum977, sum978, sum979, sum980;\n    int sum981, sum982, sum983, sum984, sum985, sum986, sum987, sum988, sum989, sum990;\n    int sum991, sum992, sum993, sum994, sum995, sum996, sum997, sum998, sum999, sum1000;\n    int sum1001, sum1002, sum1003, sum1004, sum1005, sum1006, sum1007, sum1008, sum1009, sum1010;\n    int sum1011, sum1012, sum1013, sum1014, sum1015, sum1016, sum1017, sum1018, sum1019, sum1020;\n    int sum1021, sum1022, sum1023, sum1024, sum1025, sum1026, sum1027, sum1028, sum1029, sum1030;\n    int sum1031, sum1032, sum1033, sum1034, sum1035, sum1036, sum1037, sum1038, sum1039, sum1040;\n    int sum1041, sum1042, sum1043, sum1044, sum1045, sum1046, sum1047, sum1048, sum1049, sum1050;\n    int sum1051, sum1052, sum1053, sum1054, sum1055, sum1056, sum1057, sum1058, sum1059, sum1060;\n    int sum1061, sum1062, sum1063, sum1064, sum1065, sum1066, sum1067, sum1068, sum1069, sum1070;\n    int sum1071, sum1072, sum1073, sum1074, sum1075, sum1076, sum1077, sum1078, sum1079, sum1080;\n    int sum1081, sum1082, sum1083, sum1084, sum1085, sum1086, sum1087, sum1088, sum1089, sum1090;\n    int sum1091, sum1092, sum1093, sum1094, sum1095, sum1096, sum1097, sum1098, sum1099, sum1100;\n    int sum1101, sum1102, sum1103, sum1104, sum1105, sum1106, sum1107, sum1108, sum1109, sum1110",
            "Expected Answer": 198,
            "Answer": 586.0,
            "Final Answer": 586.0
        },
        {
            "Index": 132,
            "GT": 16,
            "Query": "8 - 5 * 1 + 1 + 4 * 3 =   ",
            "Injected CoT": "5 * 1 = 5\n8 - 5 = 3\n1 + 3 = 4\n4 * 3 = 13\n4 + 13 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\n\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 133,
            "GT": 199,
            "Query": "6 * 8 * 4 + 8 - 3 + 2 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 4 = 192\n192 + 8 = 200\n200 - 3 = 197\n197 + 3 =",
            "Response": " 200",
            "Extract-Response": " 200.\n\nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= 20000\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        if not A:\n            return 0\n        res = 0\n        for i in range(len(A[0])):\n            for j in range(1, len(A)):\n                if A[j][i] < A[j - 1][i]:\n                    res += 1\n                    break\n        return res\n\n\nif __name__ == \"__main__\":\n    A = [\"zyx\", \"wvu\", \"tsr\"]\n    print(Solution().minDeletionSize(A))",
            "Expected Answer": 200,
            "Answer": 200.0,
            "Final Answer": 200.0
        },
        {
            "Index": 135,
            "GT": 118,
            "Query": "8 * 8 - 8 + 7 * 9 - 1 =   ",
            "Injected CoT": "8 * 8 = 64\n7 * 9 = 63\n64 - 8 = 56\n56 + 63 = 120\n120 - 1 =",
            "Response": " 119",
            "Extract-Response": "\n\n119",
            "Expected Answer": 119,
            "Answer": 119.0,
            "Final Answer": 119.0
        },
        {
            "Index": 137,
            "GT": -100,
            "Query": "1 - 5 * 6 * 3 - 6 - 5 =   ",
            "Injected CoT": "6 * 6 = 30\n30 * 3 = 90\n1 - 90 = -89\n-89 - 6 = -95\n-95 - 6 =",
            "Response": " -101",
            "Extract-Response": " -101.\n\nNote:\n\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                sign = 1;\n                curNum = 0;\n            } else if (c == '-') {\n                res += sign * curNum;\n                sign = -1;\n                curNum = 0;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};",
            "Expected Answer": -101,
            "Answer": -101.0,
            "Final Answer": -101.0
        },
        {
            "Index": 138,
            "GT": 11,
            "Query": "9 + 3 + 9 - 9 * 2 + 8 =   ",
            "Injected CoT": "9 + 2 = 12\n12 + 9 = 21\n9 * 2 = 18\n21 - 18 = 2\n2 + 8 =",
            "Response": " 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else if (currentSign == '-') {\n                result -= currentNumber;\n            } else if (currentSign == '*') {\n                result *= currentNumber;\n            } else if (currentSign == '/') {\n                result /= currentNumber;\n            }\n            currentNumber = 0;\n            currentSign = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else if (currentSign == '-') {\n        result -= currentNumber;\n    } else if (currentSign == '*') {\n        result *= currentNumber;\n    } else if (currentSign == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 10,
            "Answer": 10.0,
            "Final Answer": 10.0
        },
        {
            "Index": 139,
            "GT": 80,
            "Query": "8 * 3 + 1 * 8 * 8 - 8 =   ",
            "Injected CoT": "8 * 3 = 24\n1 * 8 = 8\n8 * 8 = 64\n24 + 8 = 32\n32 * 64 = 2049\n2049 - 8 =",
            "Response": " 2041\n\n*/\n\n// Solution\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\n\n    int result = solveMeFirst(n);\n\n    fout << result << \"\\n\";\n\n    fout.close();\n\n    return 0;\n}",
            "Extract-Response": "\n\n2041",
            "Expected Answer": 2041,
            "Answer": 2041.0,
            "Final Answer": 2041.0
        },
        {
            "Index": 140,
            "GT": -7,
            "Query": "3 - 4 + 9 * 1 - 5 * 3 =   ",
            "Injected CoT": "9 * 1 = 9\n5 * 3 = 14\n3 - 4 = -1\n-1 + 9 = 8\n8 - 14 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[input] array.integer b\n\nAn array of integers of the same length as a.\n\nGuaranteed constraints:\nb.length = a.length,\n-1000 \u2264 b[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef exp_eval(a, b):\n    return eval(''.join(map(str, a)) + ''.join(map(str, b)))",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 141,
            "GT": 88,
            "Query": "9 * 1 * 5 * 2 * 1 - 2 =   ",
            "Injected CoT": "9 * 1 = 9\n9 * 5 = 45\n45 * 1 = 90\n90 * 1 = 90\n90 - 1 =",
            "Response": " 89\n\n89 * 2 = 178\n178 * 1 = 178\n178 - 2 = 176\n\n176 * 1 = 176\n176 - 1 = 175\n\n175 * 1 = 175\n175 - 1 = 174\n\n174 * 1 = 174\n174 - 1 = 173\n\n173 * 1 = 173\n173 - 1 = 172\n\n172 * 1 = 172\n172 - 1 = 171\n\n171 * 1 = 171\n171 - 1 = 170\n\n170 * 1 = 170\n170 - 1 = 169\n\n169 * 1 = 169\n169 - 1 = 168\n\n168 * 1 = 168\n168 - 1 = 167\n\n167 * 1 = 167\n167 - 1 = 166\n\n166 * 1 = 166\n166 - 1 = 165\n\n165 * 1 = 165\n165 - 1 = 164\n\n164 * 1 = 164\n164 - 1 = 163\n\n163 * 1 = 163\n163 - 1 = 162\n\n162 * 1 = 162\n162 - 1 = 161\n\n161 * 1 = 161\n161 - 1 = 160\n\n160 * 1 = 160\n160 - 1 = 159\n\n159 * 1 = 159\n159 - 1 = 158\n\n158 * 1 = 158\n158 - 1 = 157\n\n157 * 1 = 157\n157 - 1 = 156\n\n156 * 1 = 156\n156 - 1 = 155\n\n155 * 1 = 155\n155 - 1 = 154\n\n154 * 1 = 154\n154 - 1 = 153\n\n153 * 1 = 153\n153 - 1 = 152\n\n152 * 1 = 152\n152 - 1 = 151\n\n151 * 1 = 151\n151 - 1 = 150\n\n150 * 1 = 150\n150 - 1 = 149\n\n149 * 1 = 149\n149 - 1 = 148\n\n148 * 1 = 148\n148 - 1 = 147\n\n147 * 1 = 147\n147 - 1 = 146\n\n146 * 1 = 146\n146 - 1 = 145\n\n145 * 1 = 145\n145 - 1 = 144\n\n144 * 1 = 144\n144 - 1 = 143\n\n143 * 1 = 143\n143 - 1 = 142\n\n142 * 1 = 142\n142 - 1 = 141\n\n141 * 1 = 141\n141 - 1 = 140\n\n140 * 1 = 140\n140 - 1 = 139\n\n139 * 1 = 139\n139 - 1 = 138\n\n138 * 1 = 138\n138 - 1 = 137\n\n137 * 1 = 137\n137 - 1 = 136\n\n136 * 1 = 136\n136 - 1 = 135\n\n135 * 1 = 135\n135 - 1 = 134\n\n134 * 1 = 134\n134 - 1 = 133\n\n133 * 1 = 133\n133 - 1 = 132\n\n132 * 1 = 132\n132 - 1 = 131\n\n131 * 1 = 131\n131 - 1 = 130\n\n130 * 1 = 130\n130 - 1 = 129\n\n129 * 1 = 129\n129 - 1 = 128\n\n128 * 1 = 128\n128 - 1 = 127\n\n127 * 1 = 127\n127 - 1 = 126\n\n126 * 1 = 126\n126 - 1 = 125\n\n125 * 1 = 125\n125 - 1 = 124\n\n124 * 1 = 124\n124 - 1 = 123\n\n123 * 1 = 123\n123 - 1 = 122\n\n122 * 1 = 122\n122 - 1 = 121\n\n121 * 1 = 121\n121 - 1 = 120\n\n120 * 1 = 120\n120 - 1 = 119\n\n119 * 1 = 119\n119 - 1 = 118\n\n118 * 1 = 118\n118 - 1 = 117\n\n117 * 1 = 117\n117 - 1 = 116\n\n116 * 1 = 116\n116 - 1 = 115\n\n115 * 1 = 115\n115 - 1 = 114\n\n114 * 1 = 114\n114 - 1 = 113\n\n113 * 1 = 113\n113 - 1 = 112\n\n112 * 1 = 112\n112 - 1 = 111\n\n111 * 1 = 111\n111 - 1 = 110\n\n110 * 1 = 110\n110 - 1 = 109\n\n109 * 1 = 109\n109 - 1 = 108\n\n108 * 1 = 108\n108 - 1 = 107\n\n107 * 1 = 107\n107 - 1 = 106\n\n106 * 1 = 106\n106 - 1 = 105\n\n105 * 1 = 105\n105 - 1 = 104\n\n104 * 1 = 104\n104 - 1 = 103\n\n103 * 1 = 103\n103 - 1 = 102\n\n102 * 1 = 102\n102 - 1 = 101\n\n101 * 1 = 101\n101 - 1 = 100\n\n100 * 1 = 100\n100 - 1 = 99\n\n99 * 1 = 99\n99 - 1 = 98\n\n98 * 1 = 98\n98 - 1 = 97\n\n97 * 1 = 97\n97 - 1 = 96\n\n96 * 1 = 96\n96 - 1 = 95\n\n95 * 1 = 95\n95 - 1 = 94\n\n94 * 1 = 94\n94 - 1 = 93\n\n93 * 1 = 93\n93 - 1 = 92\n\n92 * 1 = 92\n92 - 1 = 91\n\n91 * 1 = 91\n91 - 1 = 90\n\n90 * 1 = 90\n90 - 1 = 89\n\n89 * 1 = 89\n89 - 1 = 88\n\n88 * 1 = 88\n88 - 1 = 87\n\n87 * 1 = 87\n87 - 1 = 86\n\n86 * 1 = 86\n86 - 1 = 85\n\n85 * 1 = 85\n85 - 1 = 84\n\n84 * 1 = 84\n84 - 1 = 83\n\n83 * 1 = 83\n83 - 1 = 82\n\n82 * 1 = 82\n82 - 1 = 81\n\n81 * 1 = 81\n81 - 1 = 80\n\n80 * 1 = 80\n80 - 1 = 79\n\n79 * 1 = 79\n79 - 1 = 78\n\n78 * 1 = 78\n78 - 1 = 77\n\n77 * 1 = 77\n77 - 1 = 76\n\n76 * 1 = 76\n76 - 1 = 75\n\n75 * 1 = 75\n75 - 1 = 74\n\n74 * 1 = 74\n74 - 1 = 73\n\n73 * 1 = 73\n73 - 1 = 72\n\n72 * 1 = 72\n72 - 1 = 71\n\n71 * 1 = 71\n71 - 1 = 70\n\n70 * 1 = 70\n70 - 1 = 69\n\n69 * 1 = 69\n69 - 1 = 68\n\n68 * 1 = 68\n68 - 1 = 67\n\n67 * 1 = 67\n67 - 1 = 66\n\n66 * 1 = 66\n66 - 1 = 65\n\n65 * 1 = 65\n65 - 1 = 64\n\n64 * 1 = 64\n64 - 1 = 63\n\n63 * 1 = 63\n63 - 1 = 62\n\n62 * 1 = 62\n62 - 1 = 61\n\n61 * 1 = 61\n61 - 1 = 60\n\n60 * 1 = 60\n60 - 1 = 59\n\n59 * 1 = 59\n59 - 1 = 58\n\n58 * 1 = 58\n58 - 1 = 57\n\n57 * 1 = 57\n57 - 1 = 56\n\n56 * 1 = 56\n56 - 1 = 55\n\n55 * 1 = 55\n55 - 1 = 54\n\n54 * 1 = 54\n54 - 1 = 53\n\n53 * 1 = 53\n53 - 1 = 52\n\n52 * 1 = 52\n52 - 1 = 51\n\n51 * 1 = 51\n51 - 1 = 50\n\n50 * 1 = 50\n50 - 1 = 49\n\n49 * 1 = 49\n49 - 1 = 48\n\n48 * 1 = 48\n48 - 1 = 47\n\n47 * 1 = 47\n47 - 1 = 46\n\n46 * 1 = 46\n46 - 1 = 45\n\n45 * 1 = 45\n45 - 1 = 44\n\n44 * 1 = 44\n44 - 1 = 43\n\n43 * 1 = 43\n43 - 1 = 42\n\n42 * 1 = 42\n42 - 1 = 41\n\n41 * 1 = 41\n41 - 1 = 40\n\n40 * 1 = 40\n40 - 1 = 39\n\n39 * 1 = 39\n39 - 1 = 38\n\n38 * 1 = 38\n38 - 1 = 37\n\n37 * 1 = 37\n37 - 1 = 36\n\n36 * 1 = 36\n36 - 1 = 35\n\n35 * 1 = 35\n35 - 1 = 34\n\n34 * 1 = 34\n34 - 1 = 33\n\n33 * 1 = 33\n33 - 1 = 32\n\n32 * 1 = 32\n32 - 1 = 31\n\n31 * 1 = 31\n31 - 1 = 30\n\n30 * 1 = 30\n30 - 1 = 29\n\n29 * 1 = 29\n29 - 1 = 28\n\n28 * 1 = 28\n28 - 1 = 27\n\n27 * 1 = 27\n27 - 1 = 26\n\n26 * 1 = 26\n26 - 1 = 25\n\n25 * 1 = 25\n25 - 1 = 24\n\n24 *",
            "Extract-Response": "\n\n24",
            "Expected Answer": 89,
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 142,
            "GT": -104,
            "Query": "2 * 6 - 2 * 8 * 7 - 4 =   ",
            "Injected CoT": "2 * 6 = 12\n2 * 8 = 16\n16 * 7 = 112\n12 - 112 = -101\n-101 - 4 =",
            "Response": " -105",
            "Extract-Response": " -105.\n\nNote:\n\nThere will be at most 15 operations of either type you can perform on your list.\nYou won't be given the order of the operations.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -105,
            "Answer": -105.0,
            "Final Answer": -105.0
        },
        {
            "Index": 143,
            "GT": 7,
            "Query": "5 * 1 - 2 + 7 + 5 - 8 =   ",
            "Injected CoT": "5 * 1 = 5\n5 - 2 = 3\n3 + 7 = 10\n10 + 5 = 15\n15 - 9 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define SWAP(v,x) swap(v,x)\n#define MP make_pair\n#define SORT(v) sort(v.begin(),v.end())\n#define REVERSE(v) reverse(v.begin(),v.end())\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define FORD(i,a,b) for(int i=(a);i>=(b);i--)\n\n#define ALL(v) v.begin(),v.end()\n\ntypedef pair<int,int> pii;\ntypedef pair<LL,LL> pll;\ntypedef pair<double,double> pdd;\n\nint abs(int x) {return x<0 ? -x : x;}\nint abs(LL x) {return x<0 ? -x : x;}\n\n#define x first\n#define y second\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout<<setprecision(10);\n\n    string s;\n    cin>>s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    bool neg = false;\n    for(int i = 0; i < n; i++) {\n        if(s[i] == '-') {\n            neg = true;\n        } else if(s[i] == '+') {\n            neg = false;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n            if(i == n-1 || s[i+1] == '+' || s[i+1] == '-') {\n                if(neg) {\n                    cur = -cur;\n                }\n                ans += cur;\n                cur = 0;\n            }\n        }\n    }\n    cout<<ans<<endl;\n\n    return 0;\n}",
            "Expected Answer": 6,
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 144,
            "GT": 373,
            "Query": "2 * 4 * 6 * 8 - 2 - 9 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 6 = 48\n48 * 8 = 384\n384 - 2 = 382\n382 - 10 =",
            "Response": " 372",
            "Extract-Response": " 372\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488, n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499, n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510, n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521, n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532, n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543, n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554, n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565, n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576, n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587, n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598, n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609, n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620, n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631, n632, n633, n634, n635, n636, n637, n638, n639, n640, n641, n642, n643, n644, n645, n646",
            "Expected Answer": 372,
            "Answer": 372.0,
            "Final Answer": 372.0
        },
        {
            "Index": 145,
            "GT": 105,
            "Query": "4 - 4 + 1 * 3 * 7 * 5 =   ",
            "Injected CoT": "1 * 3 = 3\n3 * 7 = 21\n21 * 5 = 106\n4 - 4 = 0\n0 + 106 =",
            "Response": " 106\n\n3 - 4 + 1 * 3 * 7 * 5 =    \n3 - 4 = -1\n-1 + 1 * 3 * 7 * 5 = -1 + 105 = 104\n\n4 - 4 + 1 * 3 * 7 * 5 =    \n4 - 4 = 0\n0 + 1 * 3 * 7 * 5 = 0 + 105 = 105\n\n5 - 4 + 1 * 3 * 7 * 5 =    \n5 - 4 = 1\n1 + 1 * 3 * 7 * 5 = 1 + 105 = 106\n\n6 - 4 + 1 * 3 * 7 * 5 =    \n6 - 4 = 2\n2 + 1 * 3 * 7 * 5 = 2 + 105 = 107\n\n7 - 4 + 1 * 3 * 7 * 5 =    \n7 - 4 = 3\n3 + 1 * 3 * 7 * 5 = 3 + 105 = 108\n\n8 - 4 + 1 * 3 * 7 * 5 =    \n8 - 4 = 4\n4 + 1 * 3 * 7 * 5 = 4 + 105 = 109\n\n9 - 4 + 1 * 3 * 7 * 5 =    \n9 - 4 = 5\n5 + 1 * 3 * 7 * 5 = 5 + 105 = 110\n\n10 - 4 + 1 * 3 * 7 * 5 =    \n10 - 4 = 6\n6 + 1 * 3 * 7 * 5 = 6 + 105 = 111\n\n11 - 4 + 1 * 3 * 7 * 5 =    \n11 - 4 = 7\n7 + 1 * 3 * 7 * 5 = 7 + 105 = 112\n\n12 - 4 + 1 * 3 * 7 * 5 =    \n12 - 4 = 8\n8 + 1 * 3 * 7 * 5 = 8 + 105 = 113\n\n13 - 4 + 1 * 3 * 7 * 5 =    \n13 - 4 = 9\n9 + 1 * 3 * 7 * 5 = 9 + 105 = 114\n\n14 - 4 + 1 * 3 * 7 * 5 =    \n14 - 4 = 10\n10 + 1 * 3 * 7 * 5 = 10 + 105 = 115\n\n15 - 4 + 1 * 3 * 7 * 5 =    \n15 - 4 = 11\n11 + 1 * 3 * 7 * 5 = 11 + 105 = 116\n\n16 - 4 + 1 * 3 * 7 * 5 =    \n16 - 4 = 12\n12 + 1 * 3 * 7 * 5 = 12 + 105 = 117\n\n17 - 4 + 1 * 3 * 7 * 5 =    \n17 - 4 = 13\n13 + 1 * 3 * 7 * 5 = 13 + 105 = 118\n\n18 - 4 + 1 * 3 * 7 * 5 =    \n18 - 4 = 14\n14 + 1 * 3 * 7 * 5 = 14 + 105 = 119\n\n19 - 4 + 1 * 3 * 7 * 5 =    \n19 - 4 = 15\n15 + 1 * 3 * 7 * 5 = 15 + 105 = 120\n\n20 - 4 + 1 * 3 * 7 * 5 =    \n20 - 4 = 16\n16 + 1 * 3 * 7 * 5 = 16 + 105 = 121\n\n21 - 4 + 1 * 3 * 7 * 5 =    \n21 - 4 = 17\n17 + 1 * 3 * 7 * 5 = 17 + 105 = 122\n\n22 - 4 + 1 * 3 * 7 * 5 =    \n22 - 4 = 18\n18 + 1 * 3 * 7 * 5 = 18 + 105 = 123\n\n23 - 4 + 1 * 3 * 7 * 5 =    \n23 - 4 = 19\n19 + 1 * 3 * 7 * 5 = 19 + 105 = 124\n\n24 - 4 + 1 * 3 * 7 * 5 =    \n24 - 4 = 20\n20 + 1 * 3 * 7 * 5 = 20 + 105 = 125\n\n25 - 4 + 1 * 3 * 7 * 5 =    \n25 - 4 = 21\n21 + 1 * 3 * 7 * 5 = 21 + 105 = 126\n\n26 - 4 + 1 * 3 * 7 * 5 =    \n26 - 4 = 22\n22 + 1 * 3 * 7 * 5 = 22 + 105 = 127\n\n27 - 4 + 1 * 3 * 7 * 5 =    \n27 - 4 = 23\n23 + 1 * 3 * 7 * 5 = 23 + 105 = 128\n\n28 - 4 + 1 * 3 * 7 * 5 =    \n28 - 4 = 24\n24 + 1 * 3 * 7 * 5 = 24 + 105 = 129\n\n29 - 4 + 1 * 3 * 7 * 5 =    \n29 - 4 = 25\n25 + 1 * 3 * 7 * 5 = 25 + 105 = 130\n\n30 - 4 + 1 * 3 * 7 * 5 =    \n30 - 4 = 26\n26 + 1 * 3 * 7 * 5 = 26 + 105 = 131\n\n31 - 4 + 1 * 3 * 7 * 5 =    \n31 - 4 = 27\n27 + 1 * 3 * 7 * 5 = 27 + 105 = 132\n\n32 - 4 + 1 * 3 * 7 * 5 =    \n32 - 4 = 28\n28 + 1 * 3 * 7 * 5 = 28 + 105 = 133\n\n33 - 4 + 1 * 3 * 7 * 5 =    \n33 - 4 = 29\n29 + 1 * 3 * 7 * 5 = 29 + 105 = 134\n\n34 - 4 + 1 * 3 * 7 * 5 =    \n34 - 4 = 30\n30 + 1 * 3 * 7 * 5 = 30 + 105 = 135\n\n35 - 4 + 1 * 3 * 7 * 5 =    \n35 - 4 = 31\n31 + 1 * 3 * 7 * 5 = 31 + 105 = 136\n\n36 - 4 + 1 * 3 * 7 * 5 =    \n36 - 4 = 32\n32 + 1 * 3 * 7 * 5 = 32 + 105 = 137\n\n37 - 4 + 1 * 3 * 7 * 5 =    \n37 - 4 = 33\n33 + 1 * 3 * 7 * 5 = 33 + 105 = 138\n\n38 - 4 + 1 * 3 * 7 * 5 =    \n38 - 4 = 34\n34 + 1 * 3 * 7 * 5 = 34 + 105 = 139\n\n39 - 4 + 1 * 3 * 7 * 5 =    \n39 - 4 = 35\n35 + 1 * 3 * 7 * 5 = 35 + 105 = 140\n\n40 - 4 + 1 * 3 * 7 * 5 =    \n40 - 4 = 36\n36 + 1 * 3 * 7 * 5 = 36 + 105 = 141\n\n41 - 4 + 1 * 3 * 7 * 5 =    \n41 - 4 = 37\n37 + 1 * 3 * 7 * 5 = 37 + 105 = 142\n\n42 - 4 + 1 * 3 * 7 * 5 =    \n42 - 4 = 38\n38 + 1 * 3 * 7 * 5 = 38 + 105 = 143\n\n43 - 4 + 1 * 3 * 7 * 5 =    \n43 - 4 = 39\n39 + 1 * 3 * 7 * 5 = 39 + 105 = 144\n\n44 - 4 + 1 * 3 * 7 * 5 =    \n44 - 4 = 40\n40 + 1 * 3 * 7 * 5 = 40 + 105 = 145\n\n45 - 4 + 1 * 3 * 7 * 5 =    \n45 - 4 = 41\n41 + 1 * 3 * 7 * 5 = 41 + 105 = 146\n\n46 - 4 + 1 * 3 * 7 * 5 =    \n46 - 4 = 42\n42 + 1 * 3 * 7 * 5 = 42 + 105 = 147\n\n47 - 4 + 1 * 3 * 7 * 5 =    \n47 - 4 = 43\n43 + 1 * 3 * 7 * 5 = 43 + 105 = 148\n\n48 - 4 + 1 * 3 * 7 * 5 =    \n48 - 4 = 44\n44 + 1 * 3 * 7 * 5 = 44 + 105 = 149\n\n49 - 4 + 1 * 3 * 7 * 5 =    \n49 - 4 = 45\n45 + 1 * 3 * 7 * 5 = 45 + 105 = 150\n\n50 - 4 + 1 * 3 * 7 * 5 =    \n50 - 4 = 46\n46 + 1 * 3 * 7 * 5 = 46 + 105 = 151\n\n51 - 4 + 1 * 3 * 7 * 5 =    \n51 - 4 = 47\n47 + 1 * 3 * 7 * 5 = 47 + 105 = 152\n\n52 - 4 + 1 * 3 * 7 * 5 =    \n52 - 4 = 48\n48 + 1 * 3 * 7 * 5 = 48 + 105 = 153\n\n53 - 4 + 1 * 3 * 7 * 5 =    \n53 - 4 = 49\n49 + 1 * 3 * 7 * 5 = 49 + 105 = 154\n\n54 - 4 + 1 * 3 * 7 * 5 =    \n54 - 4 = 50\n50 + 1 * 3 * 7 * 5 = 50 + 105 = 155\n\n55 - 4 + 1 * 3 * 7 * 5 =    \n55 - 4 = 51\n51 + 1 * 3 * 7 * 5 = 51 + 105 = 156\n\n56 - 4 + 1 * 3 * 7 * 5 =    \n56 - 4 = 52\n52 + 1 * 3 * 7 * 5 = 52 + 105",
            "Extract-Response": "\n\n106",
            "Expected Answer": 106,
            "Answer": 106.0,
            "Final Answer": 106.0
        },
        {
            "Index": 146,
            "GT": -7,
            "Query": "3 + 4 - 2 * 3 - 8 * 1 =   ",
            "Injected CoT": "2 * 3 = 6\n7 * 1 = 7\n3 + 4 = 7\n7 - 6 = 1\n1 - 7 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < nums.size(); i++) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 147,
            "GT": 95,
            "Query": "5 + 6 * 9 + 7 * 4 + 8 =   ",
            "Injected CoT": "6 * 9 = 54\n7 * 4 = 28\n5 + 54 = 59\n59 + 28 = 86\n86 + 8 =",
            "Response": " 94\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num, sum = 0, rem;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    while (num > 0)\n    {\n        rem = num % 10;\n        sum = sum + rem;\n        num = num / 10;\n    }\n    printf(\"Sum of digits of the number = %d\", sum);\n    return 0;\n}",
            "Extract-Response": "\n\nSum of digits of the number = 46",
            "Expected Answer": 94,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 148,
            "GT": 22,
            "Query": "5 * 3 - 2 + 8 + 9 - 8 =   ",
            "Injected CoT": "5 * 3 = 15\n15 - 2 = 13\n13 + 7 = 21\n21 + 9 = 30\n30 - 7 =",
            "Response": " 23",
            "Extract-Response": " 23\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,t,flag;\n    char str[100];\n    scanf(\"%d\",&t);\n    getchar();\n    for(i=1;i<=t;i++)\n    {\n        gets(str);\n        flag=0;\n        n=strlen(str);\n        for(j=0;j<n;j++)\n        {\n            if(str[j]=='=')\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==1)\n        {\n            k=0;\n            l=0;\n            m=0;\n            for(j=0;j<n;j++)\n            {\n                if(str[j]=='+')\n                {\n                    k=k+l;\n                    l=0;\n                }\n                else if(str[j]=='-')\n                {\n                    k=k+l;\n                    l=0;\n                    m=1;\n                }\n                else if(str[j]=='=')\n                {\n                    k=k+l;\n                    l=0;\n                    break;\n                }\n                else\n                {\n                    l=l*10+(str[j]-48);\n                }\n            }\n            if(m==1)\n            {\n                k=k-l;\n            }\n            else\n            {\n                k=k+l;\n            }\n            printf(\"%d\\n\",k);\n        }\n        else\n        {\n            k=0;\n            l=0;\n            m=0;\n            for(j=0;j<n;j++)\n            {\n                if(str[j]=='+')\n                {\n                    k=k+l;\n                    l=0;\n                }\n                else if(str[j]=='-')\n                {\n                    k=k+l;\n                    l=0;\n                    m=1;\n                }\n                else\n                {\n                    l=l*10+(str[j]-48);\n                }\n            }\n            if(m==1)\n            {\n                k=k-l;\n            }\n            else\n            {\n                k=k+l;\n            }\n            printf(\"%d\\n\",k);\n        }\n    }\n    return 0;\n}",
            "Expected Answer": 23,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 149,
            "GT": 42,
            "Query": "1 + 1 - 6 + 7 * 7 - 3 =   ",
            "Injected CoT": "1 + 1 = 2\n2 - 6 = -4\n7 * 7 = 49\n-4 + 49 = 46\n46 - 3 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 43,
            "Answer": 43.0,
            "Final Answer": 43.0
        },
        {
            "Index": 150,
            "GT": 0,
            "Query": "2 + 3 + 6 + 1 - 4 - 8 =   ",
            "Injected CoT": "2 + 3 = 5\n5 + 6 = 11\n11 + 1 = 12\n12 - 4 = 7\n7 - 7 =",
            "Response": " 0",
            "Extract-Response": " 0.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 151,
            "GT": 18,
            "Query": "3 + 9 + 8 + 1 - 8 + 5 =   ",
            "Injected CoT": "3 + 9 = 12\n12 + 8 = 20\n20 + 1 = 21\n21 - 8 = 14\n14 + 5 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 19,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 152,
            "GT": 17,
            "Query": "2 - 4 + 9 + 6 * 1 + 4 =   ",
            "Injected CoT": "6 * 1 = 6\n-4 + 6 = 3\n3 + 9 = 11\n11 + 4 = 15\n15 + 3 =",
            "Response": " 18",
            "Extract-Response": "\n\n18.",
            "Expected Answer": 18,
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 155,
            "GT": 21,
            "Query": "5 + 6 + 6 - 4 + 2 * 4 =   ",
            "Injected CoT": "2 * 4 = 7\n5 + 6 = 11\n11 + 6 = 17\n17 - 4 = 13\n13 + 7 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', add the previously stored number to result\n     * If current character is '-', subtract the previously stored number from result\n     * If current character is '*', multiply the previously stored number with result\n     * If current character is '/', divide the previously stored number with result\n     * If current character is '%', take modulus using the previously stored number and result\n     * If current character is '^', raise power using the previously stored number and result\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add the previously stored number to result */\n        if(str[i] == '+')\n        {\n            result = result + num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Reset sign to positive */\n            sign = 1;\n        }\n        /* If current character is '-', subtract the previously stored number from result */\n        else if(str[i] == '-')\n        {\n            result = result + num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Reset sign to negative */\n            sign = -1;\n        }\n        /* If current character is '*', multiply the previously stored number with result */\n        else if(str[i] == '*')\n        {\n            result = result * num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Reset sign to positive */\n            sign = 1;\n        }\n        /* If current character is '/', divide the previously stored number with result */\n        else if(str[i] == '/')\n        {\n            result = result / num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Reset sign to positive */\n            sign = 1;\n        }\n        /* If current character is '%', take modulus using the previously stored number and result */\n        else if(str[i] == '%')\n        {\n            result = result % num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Reset sign to positive */\n            sign = 1;\n        }\n        /* If current character is '^', raise power using the previously stored number and result */\n        else if(str[i] == '^')\n        {\n            result = pow(result, num);\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Reset sign to positive */\n            sign = 1;\n        }\n        /* If current character is a number */\n        else if((str[i] >= '0') && (str[i] <= '9'))\n        {\n            /* Convert character to number */\n            num = num * 10 + (str[i] - '0');\n        }\n    }\n\n    /* If num is not 0, add it to result */\n    if(num != 0)\n    {\n        result = result + (sign * num);\n    }\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}",
            "Expected Answer": 20,
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 156,
            "GT": 61,
            "Query": "2 + 8 * 5 - 2 + 7 * 3 =   ",
            "Injected CoT": "8 * 5 = 39\n2 + 39 = 42\n7 * 3 = 21\n42 - 2 = 39\n39 + 21 =",
            "Response": " 60",
            "Extract-Response": "\n\n60.",
            "Expected Answer": 60,
            "Answer": 60.0,
            "Final Answer": 60.0
        },
        {
            "Index": 157,
            "GT": -83,
            "Query": "7 + 9 + 1 - 4 * 5 * 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 5 = 100\n7 + 9 = 16\n16 + 1 = 18\n18 - 100 =",
            "Response": " -82",
            "Extract-Response": " -82.\n\nNote:\n\nThe input numbers are in the range [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Expected Answer": -82,
            "Answer": -82.0,
            "Final Answer": -82.0
        },
        {
            "Index": 159,
            "GT": 160,
            "Query": "3 * 6 * 5 + 6 + 8 * 8 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 5 = 91\n8 * 8 = 64\n6 + 64 = 70\n91 + 70 =",
            "Response": " 161",
            "Extract-Response": " 161.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int threeSumMulti(vector<int>& A, int target) {\n        int n = A.size();\n        long long ans = 0;\n        for(int i = 0; i < n; i++) {\n            int j = i + 1;\n            int k = n - 1;\n            while(j < k) {\n                if(A[i] + A[j] + A[k] == target) {\n                    if(A[j] == A[k]) {\n                        ans += (k - j + 1) * (k - j) / 2;\n                        break;\n                    }\n                    int left = 1;\n                    int right = 1;\n                    while(j + 1 < k && A[j] == A[j + 1]) {\n                        j++;\n                        left++;\n                    }\n                    while(k - 1 > j && A[k] == A[k - 1]) {\n                        k--;\n                        right++;\n                    }\n                    ans += left * right;\n                    j++;\n                    k--;\n                } else if(A[i] + A[j] + A[k] < target) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return ans % 1000000007;\n    }\n};",
            "Expected Answer": 161,
            "Answer": 161.0,
            "Final Answer": 161.0
        },
        {
            "Index": 160,
            "GT": 21,
            "Query": "9 + 7 + 7 - 8 + 2 * 3 =   ",
            "Injected CoT": "9 + 7 = 16\n16 + 7 = 23\n23 - 8 = 15\n2 * 3 = 7\n15 + 7 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 22,
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 161,
            "GT": -20,
            "Query": "9 - 3 + 2 - 7 * 4 * 1 =   ",
            "Injected CoT": "7 * 0 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <functional>\n#include <stdio.h>\n#include <sstream>\n#include <fstream>\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n\nint main() {\n\tstring s;\n\tcin >> s;\n\n\tint n = s.size();\n\tint ans = 0;\n\tint cur = 0;\n\tint sign = 1;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == '+') {\n\t\t\tans += cur;\n\t\t\tcur = 0;\n\t\t\tsign = 1;\n\t\t}\n\t\telse if (s[i] == '-') {\n\t\t\tans += cur;\n\t\t\tcur = 0;\n\t\t\tsign = -1;\n\t\t}\n\t\telse if (s[i] == '*') {\n\t\t\tans *= cur;\n\t\t\tcur = 0;\n\t\t\tsign = 1;\n\t\t}\n\t\telse {\n\t\t\tcur = cur * 10 + s[i] - '0';\n\t\t}\n\t}\n\tans += cur;\n\tcout << ans << endl;\n\treturn 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 162,
            "GT": 9,
            "Query": "8 + 5 - 3 - 7 * 1 + 6 =   ",
            "Injected CoT": "7 * 1 = 7\n8 + 5 = 13\n13 - 2 = 10\n10 - 7 = 2\n2 + 6 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 8,
            "Answer": 8.0,
            "Final Answer": 8.0
        },
        {
            "Index": 163,
            "GT": 25,
            "Query": "3 + 1 - 2 + 9 + 7 + 7 =   ",
            "Injected CoT": "3 + 1 = 4\n4 - 2 = 2\n2 + 9 = 11\n11 + 7 = 17\n17 + 7 =",
            "Response": " 24",
            "Extract-Response": "\n<code>24\n</code>\n",
            "Expected Answer": 24,
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 165,
            "GT": 2,
            "Query": "8 - 5 - 6 + 7 - 1 * 2 =   ",
            "Injected CoT": "8 - 5 = 3\n3 - 6 = -3\n-3 + 7 = 5\n1 * 2 = 2\n5 - 2 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <cmath>\n#include <climits>\n#include <cctype>\n#include <iterator>\n#include <numeric>\n\nusing namespace std;\n\nstatic int __initialSetup = [] {\n    ios::sync_with_stdio(false); // toggle off cout & cin, instead, use printf & scanf\n    cin.tie(nullptr);            // untie cin & cout\n    return 0;\n}();\n\nclass Solution\n{\n  public:\n    int calculate(string s)\n    {\n        int n = s.size();\n        if (n == 0)\n            return 0;\n        int res = 0;\n        int sign = 1;\n        stack<int> st;\n        for (int i = 0; i < n; ++i)\n        {\n            if (s[i] == ' ')\n                continue;\n            if (s[i] == '+')\n            {\n                sign = 1;\n            }\n            else if (s[i] == '-')\n            {\n                sign = -1;\n            }\n            else if (s[i] == '(')\n            {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            }\n            else if (s[i] == ')')\n            {\n                res = res * st.top() + st.top() * st.top();\n                st.pop();\n                st.pop();\n            }\n            else\n            {\n                int cur = s[i] - '0';\n                while (i + 1 < n && isdigit(s[i + 1]))\n                {\n                    cur = cur * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                res += cur * sign;\n            }\n        }\n        return res;\n    }\n};",
            "Expected Answer": 3,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 168,
            "GT": -52,
            "Query": "5 - 8 + 9 - 9 - 7 * 7 =   ",
            "Injected CoT": "-7 * 7 = -49\n5 - 7 + 9 - 9 - (-49) =",
            "Response": " \n5 - 7 + 9 - 9 - (-49) = \n5 - 7 + 9 - 9 + 49 = \n5 - 7 + 9 + 40 = \n-2 + 9 + 40 = \n47",
            "Extract-Response": "\n\n47",
            "Expected Answer": 47,
            "Answer": 47.0,
            "Final Answer": 47.0
        },
        {
            "Index": 169,
            "GT": -324,
            "Query": "7 - 9 * 7 * 5 - 4 * 4 =   ",
            "Injected CoT": "9 * 7 = 63\n63 * 5 = 315\n4 * 4 = 15\n7 - 315 = -308\n-308 - 15 =",
            "Response": " -323\n\n-323\n\n*/",
            "Extract-Response": " -323",
            "Expected Answer": -323,
            "Answer": -323.0,
            "Final Answer": -323.0
        },
        {
            "Index": 172,
            "GT": 148,
            "Query": "9 * 9 + 2 * 2 + 9 * 7 =   ",
            "Injected CoT": "9 * 9 = 81\n2 * 2 = 4\n9 * 7 = 62\n81 + 4 = 85\n85 + 62 =",
            "Response": " 147",
            "Extract-Response": "\n<code>1 + 4 + 7 = 12\n</code>\n",
            "Expected Answer": 147,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 173,
            "GT": 28,
            "Query": "8 + 4 + 8 + 9 + 2 - 3 =   ",
            "Injected CoT": "8 + 4 = 12\n12 + 8 = 20\n20 + 9 = 29\n29 + 2 = 31\n31 - 2 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 29,
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 174,
            "GT": 241,
            "Query": "6 * 6 * 7 - 1 - 1 - 9 =   ",
            "Injected CoT": "6 * 6 = 36\n36 * 7 = 252\n252 - 1 = 251\n251 - 1 = 250\n250 - 10 =",
            "Response": " 240\n\n240 / 6 = 40\n\n40 / 6 = 6.666666666666667\n\n6.666666666666667 / 7 = 0.9523809523809523",
            "Extract-Response": " 0.9523809523809523\n\n*/\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(solution(240, 7, 6));\n    }\n\n    public static double solution(int A, int B, int C) {\n        double result = 1;\n        for (int i = 1; i <= A; i++) {\n            result *= i;\n        }\n        for (int i = 1; i <= B; i++) {\n            result /= i;\n        }\n        for (int i = 1; i <= C; i++) {\n            result /= i;\n        }\n        return result;\n    }\n}",
            "Expected Answer": 240,
            "Answer": 0.9523809523809523,
            "Final Answer": 0.9523809523809523
        },
        {
            "Index": 175,
            "GT": 23,
            "Query": "4 + 6 * 3 - 7 - 1 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n4 + 18 = 22\n22 - 7 = 15\n15 - 1 = 14\n14 + 10 =",
            "Response": " 24",
            "Extract-Response": "\n\n24",
            "Expected Answer": 24,
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 176,
            "GT": -30,
            "Query": "4 - 3 + 5 - 9 * 3 - 9 =   ",
            "Injected CoT": "-9 * 3 = -27\n5 - 3 + 5 - 27 - 9 =",
            "Response": "\n5 - 3 + 5 - 18 =\n5 - 3 + 2 =\n4",
            "Extract-Response": " 4.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -29,
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 177,
            "GT": 24,
            "Query": "2 * 4 + 6 * 2 + 8 - 4 =   ",
            "Injected CoT": "2 * 3 = 8\n6 * 2 = 12\n8 + 12 = 20\n20 - 3 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 178,
            "GT": 36,
            "Query": "1 * 6 * 6 * 1 - 7 + 7 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 6 = 36\n36 * 1 = 36\n36 - 6 = 29\n29 + 6 =",
            "Response": " 35\n\n1 * 6 * 6 * 1 - 7 + 7 = 35\n\n1 * 6 * 6 * 1 - 7 + 7 = 35",
            "Extract-Response": " 35\n\n*/",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 179,
            "GT": 7,
            "Query": "3 + 5 - 7 - 4 + 8 + 2 =   ",
            "Injected CoT": "3 + 6 = 8\n8 - 7 = 1\n1 - 4 = -3\n-3 + 8 = 6\n6 + 2 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 8,
            "Answer": 8.0,
            "Final Answer": 8.0
        },
        {
            "Index": 180,
            "GT": 8,
            "Query": "2 + 2 - 9 + 6 + 7 * 1 =   ",
            "Injected CoT": "2 + 2 = 4\n4 - 9 = -5\n-5 + 6 = 1\n1 + 7 = 7\n7 * 1 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def FindGreatestSumOfSubArray(self, array):\n        # write code here\n        if not array:\n            return 0\n        curSum = maxSum = array[0]\n        for num in array[1:]:\n            curSum = max(curSum + num, num)\n            maxSum = max(maxSum, curSum)\n        return maxSum",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 181,
            "GT": 11,
            "Query": "7 - 1 * 9 + 2 + 4 + 7 =   ",
            "Injected CoT": "1 * 9 = 9\n8 - 9 = -2\n-2 + 2 = 0\n0 + 4 = 4\n4 + 8 =",
            "Response": " 12\n\n7 - 1 * 9 + 2 + 4 + 7 = 12",
            "Extract-Response": "\n\n12",
            "Expected Answer": 12,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 182,
            "GT": -68,
            "Query": "3 - 7 + 5 - 6 - 9 * 7 =   ",
            "Injected CoT": "-9 * 7 = -63\n3 - 7 = -4\n-4 + 5 = 1\n1 - 6 = -6\n-6 - 63 =",
            "Response": " -69",
            "Extract-Response": " -69.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 2;\n        }\n        else if(input[i] == '/')\n        {\n            sign = 3;\n        }\n        else\n        {\n            j = i;\n\n            while(i < len && isdigit(input[i]))\n            {\n                i++;\n            }\n\n            if(sign == 2)\n            {\n                result *= atoi(input + j);\n            }\n            else if(sign == 3)\n            {\n                result /= atoi(input + j);\n            }\n            else\n            {\n                result += sign * atoi(input + j);\n            }\n\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": -69,
            "Answer": -69.0,
            "Final Answer": -69.0
        },
        {
            "Index": 183,
            "GT": -7,
            "Query": "2 - 6 + 8 - 7 + 5 - 9 =   ",
            "Injected CoT": "2 - 6 = -4\n-4 + 8 = 4\n4 - 7 = -3\n-3 + 5 = 2\n2 - 8 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -6,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 184,
            "GT": -5,
            "Query": "1 * 2 * 1 - 8 + 3 - 2 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 1 = 2\n2 - 8 = -6\n-6 + 3 = -2\n-2 - 2 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum",
            "Expected Answer": -4,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 186,
            "GT": -17,
            "Query": "7 - 7 - 9 + 1 - 1 * 9 =   ",
            "Injected CoT": "7 - 7 = 0\n0 - 9 = -9\n-9 + 0 = -8\n-8 - 0 * 9 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        max_product = nums[0]\n        min_product = nums[0]\n        res = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                max_product, min_product = min_product, max_product\n\n            max_product = max(max_product * cur, cur)\n            min_product = min(min_product * cur, cur)\n\n            res = max(res, max_product)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution2:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution3:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution4:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution5:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution6:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution7:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution8:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution9:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n\n        for i in range(1, len(nums)):\n            cur = nums[i]\n            if cur < 0:\n                cur_max, cur_min = cur_min, cur_max\n\n            cur_max = max(cur_max * cur, cur)\n            cur_min = min(cur_min * cur, cur)\n\n            res = max(res, cur_max)\n\n        return res\n\n\n# Runtime: 84 ms, faster than 97.09% of Python3 online submissions for Maximum Product Subarray.\n# Memory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Maximum Product Subarray.\nclass Solution10:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        res = nums[0]\n        cur_max",
            "Expected Answer": -8,
            "Answer": -8.0,
            "Final Answer": -8.0
        },
        {
            "Index": 187,
            "GT": 58,
            "Query": "1 * 6 + 4 * 4 + 6 * 6 =   ",
            "Injected CoT": "1 * 6 = 6\n4 * 4 = 16\n6 * 6 = 36\n6 + 16 = 23\n23 + 36 =",
            "Response": " 59",
            "Extract-Response": " 59\n</code>\n",
            "Expected Answer": 59,
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 189,
            "GT": 14,
            "Query": "3 + 4 + 7 - 7 + 4 + 3 =   ",
            "Injected CoT": "3 + 4 = 7\n7 + 7 = 14\n14 + 4 = 17\n17 + 3 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 20,
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 190,
            "GT": -14,
            "Query": "9 - 5 - 5 * 6 + 5 + 7 =   ",
            "Injected CoT": "5 * 6 = 30\n9 - 5 = 4\n4 - 30 = -26\n-26 + 5 = -21\n-21 + 8 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 191,
            "GT": -21,
            "Query": "7 - 6 * 5 - 7 + 3 * 3 =   ",
            "Injected CoT": "6 * 5 = 30\n7 - 30 = -23\n3 * 3 = 10\n-23 + 10 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 194,
            "GT": 115,
            "Query": "5 * 6 - 5 + 6 * 3 * 5 =   ",
            "Injected CoT": "5 * 6 = 30\n6 * 3 = 18\n30 - 5 = 25\n18 * 5 = 89\n25 + 89 =",
            "Response": " 114",
            "Extract-Response": " 114\n</code>\n",
            "Expected Answer": 114,
            "Answer": 114.0,
            "Final Answer": 114.0
        },
        {
            "Index": 195,
            "GT": 61,
            "Query": "8 * 9 - 7 + 9 - 8 - 5 =   ",
            "Injected CoT": "8 * 9 = 72\n72 - 7 = 65\n65 + 9 = 74\n74 - 8 = 66\n66 - 4 =",
            "Response": " 62",
            "Extract-Response": " 62\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 62,
            "Answer": 62.0,
            "Final Answer": 62.0
        },
        {
            "Index": 197,
            "GT": 179,
            "Query": "8 - 4 + 7 * 1 * 5 * 5 =   ",
            "Injected CoT": "7 * 1 = 7\n5 * 5 = 25\n8 - 5 = 5\n7 * 25 = 175\n5 + 175 =",
            "Response": " 180",
            "Extract-Response": " 180\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum,num,flag;\n    while(scanf(\"%s\",s)!=EOF)\n    {\n        sum=0;\n        flag=0;\n        len=strlen(s);\n        for(i=0;i<len;i++)\n        {\n            if(s[i]=='+'||s[i]=='-'||s[i]=='*'||s[i]=='/')\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0)\n        {\n            printf(\"%s\\n\",s);\n            continue;\n        }\n        for(i=0;i<len;i++)\n        {\n            if(s[i]=='+'||s[i]=='-'||s[i]=='*'||s[i]=='/')\n            {\n                num=0;\n                for(j=i-1;j>=0;j--)\n                {\n                    num=num+s[j]-'0';\n                    num=num*10;\n                }\n                num=num/10;\n                if(s[i]=='+')\n                {\n                    sum=sum+num;\n                }\n                else if(s[i]=='-')\n                {\n                    sum=sum-num;\n                }\n                else if(s[i]=='*')\n                {\n                    sum=sum*num;\n                }\n                else if(s[i]=='/')\n                {\n                    sum=sum/num;\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}",
            "Expected Answer": 180,
            "Answer": 180.0,
            "Final Answer": 180.0
        },
        {
            "Index": 199,
            "GT": -13,
            "Query": "6 + 2 - 6 * 5 + 2 + 7 =   ",
            "Injected CoT": "6 * 5 = 30\n2 - 30 = -28\n-28 + 2 = -26\n-26 + 8 =",
            "Response": " -18\n-18 + 2 = -16\n-16 + 7 = -9",
            "Extract-Response": " -9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int digitSum = 0;\n        int number = a + i;\n        while (number > 0) {\n            digitSum += number % 10;\n            number /= 10;\n        }\n        if (digitSum >= a && digitSum <= b) {\n            result += a + i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -18,
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 200,
            "GT": 24,
            "Query": "3 * 9 - 7 + 1 * 1 * 4 =   ",
            "Injected CoT": "3 * 9 = 27\n27 - 7 = 20\n2 * 2 = 2\n20 + 2 * 4 =",
            "Response": " 28",
            "Extract-Response": "\n\n28.",
            "Expected Answer": 28,
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 201,
            "GT": 147,
            "Query": "3 + 8 + 8 * 8 + 8 * 9 =   ",
            "Injected CoT": "3 + 8 = 11\n8 * 8 = 64\n8 * 9 = 72\n11 + 64 = 74\n74 + 72 =",
            "Response": " 146\n\n3 + 8 + 8 * 8 + 8 * 9 = \n3 + 8 = 11\n8 * 8 = 64\n8 * 9 = 72\n11 + 64 = 74\n74 + 72 = 146\n\n3 + 8 + 8 * 8 + 8 * 9 = \n3 + 8 = 11\n8 * 8 = 64\n8 * 9 = 72\n11 + 64 = 74\n74 + 72 = 146",
            "Extract-Response": "\n\n3 + 8 + 8 * 8 + 8 * 9 = 146",
            "Expected Answer": 146,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 202,
            "GT": 13,
            "Query": "6 - 7 + 5 - 7 + 7 + 9 =   ",
            "Injected CoT": "6 - 7 = -1\n-1 + 5 = 5\n5 - 7 = -3\n-3 + 7 = 5\n5 + 9 =",
            "Response": " 14",
            "Extract-Response": "\n\n14",
            "Expected Answer": 14,
            "Answer": 14.0,
            "Final Answer": 14.0
        },
        {
            "Index": 204,
            "GT": -18,
            "Query": "9 - 5 - 2 * 8 - 2 - 4 =   ",
            "Injected CoT": "2 * 8 = 16\n8 - 5 - 16 - 2 - 4 =",
            "Response": " \n5 - 16 - 2 - 4 = \n-11 - 2 - 4 = \n-13 - 4 = \n-17",
            "Extract-Response": "\n-17.\n\n*/",
            "Expected Answer": -19,
            "Answer": -17.0,
            "Final Answer": -17.0
        },
        {
            "Index": 205,
            "GT": 18,
            "Query": "1 * 1 + 5 + 7 * 2 - 2 =   ",
            "Injected CoT": "1 * 1 = 1\n7 * 1 = 14\n1 + 5 = 6\n6 + 14 = 20\n20 - 1 =",
            "Response": " 19",
            "Extract-Response": "\n\n19",
            "Expected Answer": 19,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 207,
            "GT": 4,
            "Query": "8 + 1 - 2 * 1 - 8 + 5 =   ",
            "Injected CoT": "2 * 1 = 2\n8 + 1 = 9\n9 - 2 = 7\n7 - 8 = -1\n-1 + 6 =",
            "Response": " 5\n\n5\n\n*/",
            "Extract-Response": " 5.",
            "Expected Answer": 5,
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 209,
            "GT": -3,
            "Query": "9 - 3 - 3 - 3 - 9 + 6 =   ",
            "Injected CoT": "9 - 3 = 7\n7 - 3 = 3\n3 - 3 = 0\n0 - 9 = -9\n-9 + 7 =",
            "Response": " -2\n-2 + 3 = 1\n1 + 0 = 1\n1 + 9 = 10\n10 + 6 = 16",
            "Extract-Response": " 16\n\n*/\n\npublic class AddDigits {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Expected Answer": -2,
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 210,
            "GT": 29,
            "Query": "3 * 4 + 6 + 1 * 9 + 2 =   ",
            "Injected CoT": "3 * 4 = 12\n1 * 9 = 9\n12 + 6 = 18\n18 + 9 = 26\n26 + 2 =",
            "Response": " 28",
            "Extract-Response": "\n\n28.",
            "Expected Answer": 28,
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 211,
            "GT": 141,
            "Query": "5 * 8 + 5 * 4 * 5 + 1 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 5 = 20\n5 * 20 = 100\n40 + 100 = 140\n140 + 0 =",
            "Response": " 140\n\n*/\n\npublic class Solution {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nThe idea is that the final sum of the digit is the remainder of the sum of the digit and 9.\n\nFor example:\n\nnum = 38\n\nThe sum of the digit is 3 + 8 = 11.\n\nThe remainder of the sum of the digit and 9 is 2.\n\nSo the final sum of the digit is 2.\n\n*/",
            "Expected Answer": 140,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 213,
            "GT": 56,
            "Query": "9 * 2 + 5 * 9 - 7 * 1 =   ",
            "Injected CoT": "9 * 2 = 18\n5 * 9 = 45\n7 * 1 = 7\n18 + 45 = 64\n64 - 7 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\n\nThe length of given array won't exceed 1000.\nThere is only one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};",
            "Expected Answer": 57,
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 214,
            "GT": 12,
            "Query": "3 - 2 + 8 - 8 + 5 + 6 =   ",
            "Injected CoT": "3 - 2 = 1\n1 + 8 = 9\n9 - 8 = 1\n1 + 5 = 7\n7 + 7 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 14,
            "Answer": 14.0,
            "Final Answer": 14.0
        },
        {
            "Index": 215,
            "GT": 25,
            "Query": "4 * 9 - 3 - 9 - 5 + 6 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 3 = 33\n33 - 9 = 24\n24 - 5 = 19\n19 + 5 =",
            "Response": " 24",
            "Extract-Response": "\n\n24",
            "Expected Answer": 24,
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 216,
            "GT": -377,
            "Query": "7 * 8 - 6 * 8 * 9 - 1 =   ",
            "Injected CoT": "7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 2 =",
            "Response": " -378\n\n7 * 8 - 6 * 8 * 9 - 2 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 3 = -379\n\n7 * 8 - 6 * 8 * 9 - 3 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 4 = -380\n\n7 * 8 - 6 * 8 * 9 - 4 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 5 = -381\n\n7 * 8 - 6 * 8 * 9 - 5 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 6 = -382\n\n7 * 8 - 6 * 8 * 9 - 6 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 7 = -383\n\n7 * 8 - 6 * 8 * 9 - 7 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 8 = -384\n\n7 * 8 - 6 * 8 * 9 - 8 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 9 = -385\n\n7 * 8 - 6 * 8 * 9 - 9 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 10 = -386\n\n7 * 8 - 6 * 8 * 9 - 10 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 11 = -387\n\n7 * 8 - 6 * 8 * 9 - 11 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 12 = -388\n\n7 * 8 - 6 * 8 * 9 - 12 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 13 = -389\n\n7 * 8 - 6 * 8 * 9 - 13 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 14 = -390\n\n7 * 8 - 6 * 8 * 9 - 14 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 15 = -391\n\n7 * 8 - 6 * 8 * 9 - 15 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 16 = -392\n\n7 * 8 - 6 * 8 * 9 - 16 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 17 = -393\n\n7 * 8 - 6 * 8 * 9 - 17 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 18 = -394\n\n7 * 8 - 6 * 8 * 9 - 18 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 19 = -395\n\n7 * 8 - 6 * 8 * 9 - 19 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 20 = -396\n\n7 * 8 - 6 * 8 * 9 - 20 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 21 = -397\n\n7 * 8 - 6 * 8 * 9 - 21 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 22 = -398\n\n7 * 8 - 6 * 8 * 9 - 22 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 23 = -399\n\n7 * 8 - 6 * 8 * 9 - 23 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 24 = -400\n\n7 * 8 - 6 * 8 * 9 - 24 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 25 = -401\n\n7 * 8 - 6 * 8 * 9 - 25 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 26 = -402\n\n7 * 8 - 6 * 8 * 9 - 26 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 27 = -403\n\n7 * 8 - 6 * 8 * 9 - 27 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 28 = -404\n\n7 * 8 - 6 * 8 * 9 - 28 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 29 = -405\n\n7 * 8 - 6 * 8 * 9 - 29 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 30 = -406\n\n7 * 8 - 6 * 8 * 9 - 30 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 31 = -407\n\n7 * 8 - 6 * 8 * 9 - 31 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 32 = -408\n\n7 * 8 - 6 * 8 * 9 - 32 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 33 = -409\n\n7 * 8 - 6 * 8 * 9 - 33 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 34 = -410\n\n7 * 8 - 6 * 8 * 9 - 34 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 35 = -411\n\n7 * 8 - 6 * 8 * 9 - 35 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 36 = -412\n\n7 * 8 - 6 * 8 * 9 - 36 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 37 = -413\n\n7 * 8 - 6 * 8 * 9 - 37 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 38 = -414\n\n7 * 8 - 6 * 8 * 9 - 38 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 39 = -415\n\n7 * 8 - 6 * 8 * 9 - 39 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 40 = -416\n\n7 * 8 - 6 * 8 * 9 - 40 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 41 = -417\n\n7 * 8 - 6 * 8 * 9 - 41 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 42 = -418\n\n7 * 8 - 6 * 8 * 9 - 42 =    \n7 * 8 = 56\n6 * 8 = 48\n48 * 9 = 432\n56 - 432 = -376\n-376 - 43 = -419\n\n7 * 8 - 6 * 8 * 9 - 43 =    \n7 * 8 = 56\n6 * 8 = 48\n48 *",
            "Extract-Response": "\n-420",
            "Expected Answer": -378,
            "Answer": -420.0,
            "Final Answer": -420.0
        },
        {
            "Index": 217,
            "GT": 8,
            "Query": "1 + 2 + 4 * 3 - 9 + 2 =   ",
            "Injected CoT": "4 * 3 = 12\n1 + 3 = 3\n3 + 12 = 15\n15 - 9 = 6\n6 + 3 =",
            "Response": " 9\n9 + 2 = 11",
            "Extract-Response": " 11\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 9,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 218,
            "GT": 45,
            "Query": "5 * 8 + 3 + 3 - 7 + 6 =   ",
            "Injected CoT": "5 * 8 = 40\n40 + 3 = 43\n43 + 3 = 46\n46 - 7 = 39\n39 + 7 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 219,
            "GT": 20,
            "Query": "2 * 5 + 2 - 1 + 1 * 9 =   ",
            "Injected CoT": "2 * 5 = 10\n10 + 2 = 12\n12 - 1 = 11\n1 * 10 = 10\n11 + 10 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = -1;\n        } else if (s[i] == '=') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 21,
            "Answer": 21.0,
            "Final Answer": 21.0
        },
        {
            "Index": 220,
            "GT": -74,
            "Query": "3 - 3 - 5 * 4 - 6 * 9 =   ",
            "Injected CoT": "5 * 4 = 20\n6 * 9 = 53\n3 - 3 = 0\n0 - 20 = -20\n-20 - 53 =",
            "Response": " -73",
            "Extract-Response": " -73.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if(!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    nums.push(applyOp(op1, op2, ops.top()));\n                    ops.pop();\n                }\n                ops.push(s[i]);\n            }\n        }\n        while(!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            nums.push(applyOp(op1, op2, ops.top()));\n            ops.pop();\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if(op2 == '(' || op2 == ')') return false;\n        if((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch(op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Expected Answer": -73,
            "Answer": -73.0,
            "Final Answer": -73.0
        },
        {
            "Index": 221,
            "GT": 1095,
            "Query": "5 * 3 * 8 * 9 + 6 + 9 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 8 = 120\n120 * 8 = 1080\n1080 + 6 = 1086\n1086 + 8 =",
            "Response": " 1094",
            "Extract-Response": " 1094\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num, sum = 0, rem;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n\n    while(num != 0)\n    {\n        rem = num % 10;\n        sum = sum + rem;\n        num = num / 10;\n    }\n\n    printf(\"Sum of digits = %d\", sum);\n\n    return 0;\n}",
            "Expected Answer": 1094,
            "Answer": 1094.0,
            "Final Answer": 1094.0
        },
        {
            "Index": 222,
            "GT": 83,
            "Query": "8 * 6 + 2 - 3 + 4 * 9 =   ",
            "Injected CoT": "8 * 6 = 48\n4 * 9 = 36\n48 + 36 = 84\n84 + 2 = 87\n87 - 3 =",
            "Response": " 84\n84 + 4 = 88",
            "Extract-Response": "\n\n88",
            "Expected Answer": 84,
            "Answer": 88.0,
            "Final Answer": 88.0
        },
        {
            "Index": 223,
            "GT": 605,
            "Query": "2 * 4 * 5 * 5 * 3 + 5 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 6 = 40\n40 * 6 = 200\n200 * 3 = 600\n600 + 6 =",
            "Response": " 606\n\n2 * 4 * 5 * 5 * 3 + 5 = 606",
            "Extract-Response": "\n\n2 * 4 * 5 * 5 * 3 + 5 = 606",
            "Expected Answer": 606,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 224,
            "GT": 14,
            "Query": "3 * 1 * 7 - 5 + 2 - 4 =   ",
            "Injected CoT": "3 * 1 = 3\n3 * 7 = 21\n21 - 5 = 16\n16 + 2 = 18\n18 - 3 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 225,
            "GT": 54,
            "Query": "6 * 6 - 9 + 1 * 9 * 3 =   ",
            "Injected CoT": "6 * 6 = 36\n9 * 3 = 26\n1 * 26 = 26\n36 - 9 = 26\n26 + 26 =",
            "Response": " 52",
            "Extract-Response": " 52.\n\nNote:\n\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contain only digits 0-9.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String multiply(String num1, String num2) {\n        int len1 = num1.length();\n        int len2 = num2.length();\n        int[] pos = new int[len1 + len2];\n        for (int i = len1 - 1; i >= 0; i--) {\n            for (int j = len2 - 1; j >= 0; j--) {\n                int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');\n                int p1 = i + j;\n                int p2 = i + j + 1;\n                int sum = mul + pos[p2];\n                pos[p1] += sum / 10;\n                pos[p2] = sum % 10;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int p : pos) {\n            if (!(sb.length() == 0 && p == 0)) {\n                sb.append(p);\n            }\n        }\n        return sb.length() == 0 ? \"0\" : sb.toString();\n    }\n}",
            "Expected Answer": 52,
            "Answer": 52.0,
            "Final Answer": 52.0
        },
        {
            "Index": 226,
            "GT": 89,
            "Query": "2 * 4 * 9 * 1 + 8 + 9 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 9 = 72\n72 * 1 = 72\n72 + 8 = 81\n81 + 9 =",
            "Response": " 90\n\n2 * 4 * 9 * 1 + 8 + 9 = 90\n\n2 * 4 * 9 * 1 + 8 + 9 = 90",
            "Extract-Response": "\n\n90",
            "Expected Answer": 90,
            "Answer": 90.0,
            "Final Answer": 90.0
        },
        {
            "Index": 229,
            "GT": 166,
            "Query": "9 * 3 * 3 * 2 + 8 - 4 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 3 = 81\n81 * 2 = 162\n162 + 8 = 170\n170 - 3 =",
            "Response": " 167",
            "Extract-Response": " 167\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <string>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <list>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\n#define phl puts(\"Hello\")\n#define sf scanf\n#define pf printf\n#define fo(i, n) for(i = 0; i < n; i++)\n#define of(i, n) for(i = n - 1; i >= 0; i--)\n#define CLR(n, v) memset(n, v, sizeof( n ))\n#define pb push_back\n#define lim(v) v.begin(), v.end()\n#define sz(v) ((int)v,size())\n#define equals(a, b) (fabs(a-b)<eps)\n\n#define white 0\n#define black 1\n\nconst double PI = 2 * acos ( 0.0 );\nconst double eps = 1e-9;\n\ntypedef long long lld;\ntypedef unsigned long long llu;\ntypedef pair<int, int> pi;\ntypedef  vector<int> vi;\ntypedef vector<pi> vpi;\n\ntemplate <class T> T jog(T a, T b) { return a + b; }\ntemplate <class T> T bog(T a, T b) { return a - b; }\ntemplate <class T> T gon(T a, T b) { return a * b; }\ntemplate <class T> T sq(T x) {return x * x;}\ntemplate <class T> T gcd( T a, T b ) { return b == 0 ? a : gcd(b, a % b); }\ntemplate <class T> T lcm ( T a, T b ) { return ( a / gcd ( a, b ) ) * b; }\ntemplate <class T> T power ( T a, T p ) { int res = 1, x = a; while ( p ) { if ( p & 1 ) res = res * x; x = x * x; p >>= 1; } return res;}\ntemplate <class T> T cordinatlenth(T a, T b, T c, T d) { return sqrt( sq(a - c) + sq(b - d) ); }\ntemplate<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}\nint toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}\nlld bigmod ( lld a, lld p, lld mod )\n{\n    lld res = 1, x = a;\n    while ( p ) {\n        if ( p & 1 ) res = ( res * x ) % mod;\n        x = ( x * x ) % mod;\n        p >>= 1;\n    }\n    return res;\n}\n\n/*\n#define M 1000005\nint phi[M];\n\nvoid calculatePhi()\n{\n    for (int i = 1; i < M; i++) phi[i] = i;\n    for (int p = 2; p < M; p++)\n        if (phi[p] == p) // p is a prime\n            for (int k = p; k < M; k += p) phi[k] -= phi[k] / p;\n}\n*/\n\n/*\nconst int pr = 500001;\nint prime[ 41539 ], ind;\nbool mark[ pr ];\nvoid primelist()\n{\n    for(int i = 4; i < pr; i += 2) mark[ i ] = false;\n    for(int i = 3; i < pr; i += 2) mark[ i ] = true; mark[ 2 ] = true;\n    for(int i = 3, sq = sqrt( pr ); i < sq; i += 2)\n        if(mark[ i ])\n            for(int j = i * i; j < pr; j += i + i) mark[ j ] = false;\n    prime[ 0 ] = 2; ind = 1;\n    for(int i = 3; i < pr; i += 2)\n        if(mark[ i ]) ind++; printf(\"%d\\n\", ind);\n}\n*/\n\nint diraction1[] = {-1, 0, 0, 1, 1, -1, -1, 1};\nint diraction2[] = {0, -1, 1, 0, 1, -1, 1, -1};\nint horsed1[] = {-2, -2, -1, 1, 2, 2, 1, -1};\nint horsed2[] = {1, -1, -2, -2, -1, 1, 2, 2};\n\nvoid input();\n\n/**************************Templet end*********************************/\n\nint n, m, k;\n\nint main()\n{\n    //#ifdef monkey\n        //freopen(\"input.txt\", \"r\", stdin);\n        //freopen(\"output.txt\", \"w\", stdout);\n    //#endif\n    input();\n\n    return 0;\n}\nvoid input()\n{\n    sf(\"%d %d %d\", &n, &m, &k);\n    int res = 0;\n    for(int i = 1; i <= n; i++)\n    {\n        int a, b; sf(\"%d %d\", &a, &b);\n        if(a <= m && b <= k) res++;\n    }\n    pf(\"%d\\n\", res);\n}",
            "Expected Answer": 167,
            "Answer": 167.0,
            "Final Answer": 167.0
        },
        {
            "Index": 230,
            "GT": 12,
            "Query": "2 + 4 + 1 * 8 + 5 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n2 + 4 = 6\n6 + 8 = 14\n14 + 5 = 18\n18 - 7 =",
            "Response": " 11",
            "Extract-Response": " 11.\n\nNote:\nThe length of the input array is between [1, 10,000].\nThe elements of the given array will be in the range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 232,
            "GT": 3,
            "Query": "6 + 7 - 1 - 5 - 6 + 2 =   ",
            "Injected CoT": "6 + 7 = 13\n13 - 2 = 12\n12 - 5 = 7\n7 - 6 = 2\n2 + 2 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 4,
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 233,
            "GT": -18,
            "Query": "8 + 3 - 9 * 3 + 5 - 7 =   ",
            "Injected CoT": "9 * 3 = 27\n8 + 3 = 11\n11 - 27 = -16\n-16 + 5 = -11\n-11 - 6 =",
            "Response": " -17",
            "Extract-Response": " -17\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -17,
            "Answer": -17.0,
            "Final Answer": -17.0
        },
        {
            "Index": 234,
            "GT": -12,
            "Query": "3 * 2 * 1 * 2 - 8 * 3 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 1 = 6\n6 * 2 = 11\n8 * 3 = 24\n11 - 24 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\n\nThe number of operations is in the range [1, 1000].\nIt's guaranteed that the result will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int cal(int n) {\n        if (n == 0) return 1;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 6;\n        if (n == 4) return 4;\n        return cal(n - 1) * (n - 3);\n    }\n    int integerBreak(int n) {\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        int res = 1;\n        while (n > 4) {\n            res *= 3;\n            n -= 3;\n        }\n        res *= n;\n        return res;\n    }\n};",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 235,
            "GT": 37,
            "Query": "9 - 7 + 2 + 4 * 7 + 5 =   ",
            "Injected CoT": "4 * 7 = 28\n9 - 7 = 2\n2 + 2 = 4\n4 + 28 = 31\n31 + 5 =",
            "Response": " 36",
            "Extract-Response": "\n36\n",
            "Expected Answer": 36,
            "Answer": 36.0,
            "Final Answer": 36.0
        },
        {
            "Index": 236,
            "GT": -3,
            "Query": "8 - 2 - 3 - 3 - 5 + 2 =   ",
            "Injected CoT": "8 - 3 = 6\n6 - 3 = 3\n3 - 3 = 0\n0 - 5 = -5\n-5 + 3 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -2,
            "Answer": -2.0,
            "Final Answer": -2.0
        },
        {
            "Index": 237,
            "GT": 444,
            "Query": "6 * 2 + 6 * 6 * 4 * 3 =   ",
            "Injected CoT": "6 * 2 = 11\n6 * 6 = 36\n36 * 4 = 144\n144 * 3 = 432\n11 + 432 =",
            "Response": " 443\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    sort(a.begin(), a.end());\n    int result = 0;\n    for (size_t i = 0; i < m; ++i) {\n        if (a[i] < 0) {\n            result += a[i];\n        }\n    }\n    cout << -result << endl;\n\n    return 0;\n}",
            "Extract-Response": " \u2212443.",
            "Expected Answer": 443,
            "Answer": 443.0,
            "Final Answer": 443.0
        },
        {
            "Index": 239,
            "GT": 16,
            "Query": "6 + 1 + 1 + 5 + 5 - 2 =   ",
            "Injected CoT": "6 + 1 = 7\n7 + 1 = 8\n8 + 5 = 13\n13 + 5 = 19\n19 - 2 =",
            "Response": " 17\n\n17",
            "Extract-Response": "\n\n17",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 240,
            "GT": 1,
            "Query": "8 - 3 - 2 - 3 - 6 + 7 =   ",
            "Injected CoT": "8 - 3 = 5\n5 - 2 = 3\n3 - 3 = 0\n0 - 6 = -6\n-6 + 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,t,r,s,a,b,c,d,e,f,g,h,u,v,w,x,y,z,max,min,sum,count,rem,num,len;\n    char str[100000];\n    scanf(\"%d\",&t);\n    for(r=1;r<=t;r++)\n    {\n        scanf(\"%s\",str);\n        len=strlen(str);\n        sum=0;\n        for(i=0;i<len;i++)\n        {\n            if(str[i]=='+')\n            {\n                sum=sum+1;\n            }\n            else if(str[i]=='-')\n            {\n                sum=sum-1;\n            }\n        }\n        printf(\"Case #%d: %d\\n\",r,sum);\n    }\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 241,
            "GT": 213,
            "Query": "7 + 9 * 3 * 8 - 5 * 2 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 8 = 216\n7 + 216 = 223\n5 * 2 = 11\n223 - 11 =",
            "Response": " 212",
            "Extract-Response": " 212\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634",
            "Expected Answer": 212,
            "Answer": 212.0,
            "Final Answer": 212.0
        },
        {
            "Index": 242,
            "GT": 14,
            "Query": "4 + 8 + 4 + 3 + 2 - 7 =   ",
            "Injected CoT": "4 + 8 = 12\n12 + 4 = 16\n16 + 3 = 19\n19 + 2 = 21\n21 - 8 =",
            "Response": " 13",
            "Extract-Response": " 13.\n\nNote:\nThe length of the given array won't exceed 1000.\nThere are only positive integers in the array.\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 13,
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 243,
            "GT": 118,
            "Query": "7 + 2 * 9 * 5 + 3 * 7 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 5 = 90\n3 * 7 = 22\n7 + 90 = 97\n97 + 22 =",
            "Response": " 119\n\n2 * 9 * 5 + 3 * 7 = 45 + 21 = 66\n\n2 * 9 * 5 + 3 * 7 = 45 + 21 = 66\n\n2 * 9 * 5 + 3 * 7 = 45 + 21 = 66",
            "Extract-Response": " 66.\n\nNote:\n\nThe number of given integers will be between 3 and 1000.\nThe integers will be in the range of -1000..1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max1 = INT_MIN, max2 = INT_MIN, min1 = INT_MAX, min2 = INT_MAX;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] > max1) {\n                max2 = max1;\n                max1 = nums[i];\n            } else if(nums[i] > max2) {\n                max2 = nums[i];\n            }\n            if(nums[i] < min1) {\n                min2 = min1;\n                min1 = nums[i];\n            } else if(nums[i] < min2) {\n                min2 = nums[i];\n            }\n        }\n        return max(max1 * max2, min1 * min2);\n    }\n};",
            "Expected Answer": 119,
            "Answer": 66.0,
            "Final Answer": 66.0
        },
        {
            "Index": 246,
            "GT": -34,
            "Query": "3 - 6 * 4 - 1 * 9 - 4 =   ",
            "Injected CoT": "6 * 3 = 24\n3 - 24 = -21\n-1 * 9 = -9\n-21 - 9 = -30\n-30 - 3 =",
            "Response": " -33\n-33 - 4 = -37\n\n-37",
            "Extract-Response": " -37\n\n*/",
            "Expected Answer": -33,
            "Answer": -37.0,
            "Final Answer": -37.0
        },
        {
            "Index": 248,
            "GT": 36,
            "Query": "8 + 8 * 5 - 5 - 4 - 3 =   ",
            "Injected CoT": "8 * 5 = 40\n8 + 40 = 48\n48 - 5 = 43\n43 - 4 = 39\n39 - 2 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, sum;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        sum = 0;\n        for(j = 1; j <= i; j++)\n        {\n            for(k = 1; k <= j; k++)\n            {\n                sum = sum + j;\n            }\n        }\n        printf(\"%d \", sum);\n    }\n    return 0;\n}",
            "Expected Answer": 37,
            "Answer": 37.0,
            "Final Answer": 37.0
        },
        {
            "Index": 249,
            "GT": 39,
            "Query": "7 * 9 - 2 - 3 * 9 + 5 =   ",
            "Injected CoT": "7 * 9 = 63\n63 - 2 = 61\n3 * 9 = 27\n61 - 27 = 34\n34 + 6 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 250,
            "GT": 17,
            "Query": "2 * 4 - 6 + 2 + 5 + 8 =   ",
            "Injected CoT": "2 * 4 = 7\n7 - 6 = 2\n2 + 2 = 4\n4 + 5 = 9\n9 + 7 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 16,
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 251,
            "GT": 243,
            "Query": "9 * 2 + 6 * 9 * 4 + 9 =   ",
            "Injected CoT": "10 * 2 = 18\n6 * 10 = 54\n54 * 4 = 216\n216 + 18 = 234\n234 + 10 =",
            "Response": " 244\n\n2 * 4 * 4 * 6 * 9 = 576\n\n2 * 4 * 6 * 9 = 576\n\n2 * 6 * 9 = 108\n\n2 * 9 = 18\n\n18 + 108 = 126\n\n2 * 4 * 4 * 6 = 192\n\n2 * 4 * 6 = 48\n\n2 * 6 = 12\n\n12 + 48 = 60\n\n2 * 4 * 4 = 32\n\n2 * 4 = 8\n\n8 + 32 = 40\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2",
            "Extract-Response": "\n\n2 * 4 * 4 * 6 * 9 = 576\n\n2 * 4 * 6 * 9 = 576\n\n2 * 6 * 9 = 108\n\n2 * 9 = 18\n\n18 + 108 = 126\n\n2 * 4 * 4 * 6 = 192\n\n2 * 4 * 6 = 48\n\n2 * 6 = 12\n\n12 + 48 = 60\n\n2 * 4 * 4 = 32\n\n2 * 4 = 8\n\n8 + 32 = 40\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 * 4 = 8\n\n2 * 4 = 8\n\n8 + 8 = 16\n\n2 *",
            "Expected Answer": 244,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 253,
            "GT": -16,
            "Query": "3 - 3 - 2 - 8 + 2 - 8 =   ",
            "Injected CoT": "3 - 3 = 0\n0 - 2 = -2\n-2 - 7 = -10\n-10 + 2 = -8\n-8 - 7 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum",
            "Expected Answer": -15,
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 255,
            "GT": 37,
            "Query": "3 * 9 + 8 - 1 + 1 * 3 =   ",
            "Injected CoT": "4 * 9 = 27\n27 + 8 = 35\n35 - 1 = 34\n1 * 4 = 4\n34 + 4 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 38,
            "Answer": 38.0,
            "Final Answer": 38.0
        },
        {
            "Index": 256,
            "GT": -23,
            "Query": "3 - 7 * 1 - 2 * 9 - 1 =   ",
            "Injected CoT": "-7 * 1 = -7\n2 * 9 = 18\n-7 - 18 = -25\n2 - 25 =",
            "Response": " -23\n\n-23\n\n*/",
            "Extract-Response": " -23",
            "Expected Answer": -23,
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 257,
            "GT": 88,
            "Query": "4 * 6 * 4 + 9 - 9 - 8 =   ",
            "Injected CoT": "4 * 6 = 24\n24 * 4 = 97\n97 + 9 = 105\n105 - 9 = 97\n97 - 8 =",
            "Response": " 89",
            "Extract-Response": "\n\n89",
            "Expected Answer": 89,
            "Answer": 89.0,
            "Final Answer": 89.0
        },
        {
            "Index": 258,
            "GT": -114,
            "Query": "1 * 2 - 5 * 4 * 6 + 4 =   ",
            "Injected CoT": "1 * 2 = 2\n5 * 4 = 20\n20 * 6 = 120\n-5 * 120 = -601\n-601 + 4 =",
            "Response": " -597",
            "Extract-Response": " -597 in base -7.\n\nNote:\nThe input will be in range [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    string baseNeg2(int N) {\n        if (N == 0) return \"0\";\n        string res;\n        while (N != 0) {\n            res = to_string(N & 1) + res;\n            N = -(N >> 1);\n        }\n        return res;\n    }\n};",
            "Expected Answer": -597,
            "Answer": -597.0,
            "Final Answer": -597.0
        },
        {
            "Index": 259,
            "GT": 58,
            "Query": "7 * 9 - 1 * 2 + 3 - 6 =   ",
            "Injected CoT": "7 * 9 = 63\n1 * 2 = 2\n63 - 2 = 61\n61 + 3 = 65\n65 - 6 =",
            "Response": " 59",
            "Extract-Response": " 59\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else if (currentSign == '-') {\n                result -= currentNumber;\n            } else if (currentSign == '*') {\n                result *= currentNumber;\n            } else if (currentSign == '/') {\n                result /= currentNumber;\n            }\n            currentNumber = 0;\n            currentSign = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else if (currentSign == '-') {\n        result -= currentNumber;\n    } else if (currentSign == '*') {\n        result *= currentNumber;\n    } else if (currentSign == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 59,
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 260,
            "GT": -44,
            "Query": "1 - 7 * 4 - 4 * 5 + 3 =   ",
            "Injected CoT": "-7 * 4 = -28\n4 * 5 = 20\n-28 - 20 = -48\n-48 + 4 =",
            "Response": " -44\n-44 + 3 = -41",
            "Extract-Response": " -41\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d;\n    cin >> n >> a >> b >> c >> d;\n    string s;\n    cin >> s;\n    s = \" \" + s;\n\n    bool ok = true;\n    for (size_t i = a; i < c; ++i) {\n        if (s[i] == '#' && s[i + 1] == '#') {\n            ok = false;\n            break;\n        }\n    }\n\n    for (size_t i = b; i < d; ++i) {\n        if (s[i] == '#' && s[i + 1] == '#') {\n            ok = false;\n            break;\n        }\n    }\n\n    if (c < d) {\n        for (size_t i = b; i <= d; ++i) {\n            if (s[i] == '#' && s[i - 1] == '#' && s[i + 1] == '#') {\n                ok = false;\n                break;\n            }\n        }\n    } else {\n        for (size_t i = a; i <= c; ++i) {\n            if (s[i] == '#' && s[i - 1] == '#' && s[i + 1] == '#') {\n                ok = false;\n                break;\n            }\n        }\n    }\n\n    if (ok) {\n        cout << \"Yes\" << endl;\n    } else {\n        cout << \"No\" << endl;\n    }\n\n    return 0;\n}",
            "Expected Answer": -44,
            "Answer": -41.0,
            "Final Answer": -41.0
        },
        {
            "Index": 261,
            "GT": 58,
            "Query": "9 * 5 - 6 + 8 * 3 - 5 =   ",
            "Injected CoT": "9 * 5 = 45\n8 * 3 = 24\n45 - 6 = 39\n39 + 24 = 62\n62 - 5 =",
            "Response": " 57",
            "Extract-Response": " 57\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635",
            "Expected Answer": 57,
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 262,
            "GT": 7,
            "Query": "6 - 8 + 4 - 6 + 7 + 4 =   ",
            "Injected CoT": "6 - 8 = -2\n-2 + 4 = 2\n2 - 6 = -4\n-4 + 7 = 2\n2 + 4 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 6,
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 263,
            "GT": 25,
            "Query": "9 + 1 * 5 - 5 + 8 + 8 =   ",
            "Injected CoT": "1 * 5 = 5\n9 + 5 = 14\n14 - 5 = 9\n9 + 9 = 17\n17 + 9 =",
            "Response": " 26\n26 + 8 = 34\n34 + 8 = 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = n;\n    while (n > 0) {\n        result += n % 10;\n        n /= 10;\n    }\n\n    while (result >= 10) {\n        int tmp = result;\n        result = 0;\n        while (tmp > 0) {\n            result += tmp % 10;\n            tmp /= 10;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 26,
            "Answer": 42.0,
            "Final Answer": 42.0
        },
        {
            "Index": 264,
            "GT": 62,
            "Query": "7 + 3 - 8 + 6 * 9 + 6 =   ",
            "Injected CoT": "6 * 9 = 54\n7 + 3 = 10\n10 - 8 = 2\n2 + 54 = 55\n55 + 6 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i,j,len,sum=0,temp;\n    gets(str);\n    len=strlen(str);\n    for(i=0;i<len;i++)\n    {\n        if(str[i]=='+')\n        {\n            temp=0;\n            for(j=i-1;j>=0;j--)\n            {\n                temp=temp*10+(str[j]-48);\n            }\n            sum=sum+temp;\n        }\n        else if(str[i]=='-')\n        {\n            temp=0;\n            for(j=i-1;j>=0;j--)\n            {\n                temp=temp*10+(str[j]-48);\n            }\n            sum=sum-temp;\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
            "Expected Answer": 61,
            "Answer": 61.0,
            "Final Answer": 61.0
        },
        {
            "Index": 265,
            "GT": -3,
            "Query": "9 * 1 - 3 - 3 * 4 + 3 =   ",
            "Injected CoT": "9 * 1 = 9\n9 - 3 = 6\n3 * 4 = 12\n6 - 12 = -5\n-5 + 3 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -2,
            "Answer": -2.0,
            "Final Answer": -2.0
        },
        {
            "Index": 267,
            "GT": 82,
            "Query": "6 + 1 * 4 + 9 + 9 * 7 =   ",
            "Injected CoT": "1 * 4 = 4\n6 + 4 = 9\n9 * 7 = 63\n9 + 9 + 63 =",
            "Response": " 81\n\n4 + 9 = 13\n13 * 7 = 91\n13 + 91 = 104\n\n4 + 9 + 13 = 26\n26 * 7 = 182\n26 + 182 = 208\n\n4 + 9 + 13 + 26 = 52\n52 * 7 = 364\n52 + 364 = 416\n\n4 + 9 + 13 + 26 + 52 = 105\n105 * 7 = 735\n105 + 735 = 840\n\n4 + 9 + 13 + 26 + 52 + 105 = 210\n210 * 7 = 1470\n210 + 1470 = 1680\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 = 420\n420 * 7 = 2940\n420 + 2940 = 3360\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 = 841\n841 * 7 = 5847\n841 + 5847 = 6688\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 = 1682\n1682 * 7 = 11764\n1682 + 11764 = 13446\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 + 1682 = 3364\n3364 * 7 = 23528\n3364 + 23528 = 26902\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 + 1682 + 3364 = 6729\n6729 * 7 = 47032\n6729 + 47032 = 53761\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 + 1682 + 3364 + 6729 = 13458\n13458 * 7 = 94224\n13458 + 94224 = 107680\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 + 1682 + 3364 + 6729 + 13458 = 26916\n26916 * 7 = 188120\n26916 + 188120 = 214936\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 + 1682 + 3364 + 6729 + 13458 + 26916 = 53832\n53832 * 7 = 376824\n53832 + 376824 = 431656\n\n4 + 9 + 13 + 26 + 52 + 105 + 210 + 420 + 841 + 1682 + 3364 + 6729 + 13458 + 26916 + 53832 = 107664\n107664 * 7 = 753248\n107664 + 753248 = 860896",
            "Extract-Response": " 860896\n\n*/",
            "Expected Answer": 81,
            "Answer": 860896.0,
            "Final Answer": 860896.0
        },
        {
            "Index": 268,
            "GT": 43,
            "Query": "3 + 1 - 3 - 7 + 7 * 7 =   ",
            "Injected CoT": "7 * 7 = 49\n3 + 1 = 4\n4 - 3 = 1\n1 - 7 = -5\n-5 + 49 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, len, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        len = strlen(s);\n        sum = 0;\n        for(j = 0; j < len; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n            {\n                sum += s[j - 1] - '0';\n            }\n            else if(s[j] == '-')\n            {\n                sum -= s[j - 1] - '0';\n            }\n            else if(s[j] == '*')\n            {\n                sum *= s[j - 1] - '0';\n            }\n            else if(s[j] == '/')\n            {\n                sum /= s[j - 1] - '0';\n            }\n            else if(s[j] == '%')\n            {\n                sum %= s[j - 1] - '0';\n            }\n            else if(s[j] == '^')\n            {\n                sum = pow(sum, s[j - 1] - '0');\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Expected Answer": 44,
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 270,
            "GT": 104,
            "Query": "9 + 4 * 9 + 8 * 8 - 5 =   ",
            "Injected CoT": "4 * 9 = 36\n8 * 8 = 64\n9 + 36 = 45\n45 + 64 = 110\n110 - 5 =",
            "Response": " 105\n\n105",
            "Extract-Response": " 105\n\n*/",
            "Expected Answer": 105,
            "Answer": 105.0,
            "Final Answer": 105.0
        },
        {
            "Index": 271,
            "GT": 85,
            "Query": "9 * 4 + 6 * 9 - 1 - 4 =   ",
            "Injected CoT": "9 * 3 = 36\n6 * 9 = 54\n36 + 54 = 90\n90 - 1 = 89\n89 - 3 =",
            "Response": " 86\n86 - 4 = 82",
            "Extract-Response": " 82\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, sum, count;\n    int a[10];\n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &a[i]);\n    }\n    for(i = 0; i < n; i++)\n    {\n        sum = 0;\n        count = 0;\n        for(j = i; j < n; j++)\n        {\n            sum = sum + a[j];\n            count++;\n            if(sum % 9 == 0)\n            {\n                for(k = i; k <= j; k++)\n                {\n                    printf(\"%d \", a[k]);\n                }\n                printf(\"\\n\");\n            }\n        }\n    }\n    return 0;\n}",
            "Expected Answer": 86,
            "Answer": 82.0,
            "Final Answer": 82.0
        },
        {
            "Index": 272,
            "GT": 197,
            "Query": "5 - 5 + 7 * 9 * 3 + 8 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 3 = 189\n5 - 5 = 0\n0 + 189 = 189\n189 + 7 =",
            "Response": " 196\n196 + 8 = 204",
            "Extract-Response": "\n\n204",
            "Expected Answer": 196,
            "Answer": 204.0,
            "Final Answer": 204.0
        },
        {
            "Index": 273,
            "GT": 69,
            "Query": "2 + 9 * 5 + 6 + 4 * 4 =   ",
            "Injected CoT": "9 * 5 = 45\n2 + 45 = 48\n4 * 4 = 16\n6 + 16 = 22\n48 + 22 =",
            "Response": " 70",
            "Extract-Response": "\n<code>70\n</code>\n",
            "Expected Answer": 70,
            "Answer": 70.0,
            "Final Answer": 70.0
        },
        {
            "Index": 274,
            "GT": -416,
            "Query": "8 - 4 * 3 * 4 * 9 + 8 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 4 = 48\n48 * 9 = 432\n7 - 432 = -424\n-424 + 7 =",
            "Response": " -417\n-417 + 8 = -409\n\n-409",
            "Extract-Response": " -409\n\n*/",
            "Expected Answer": -417,
            "Answer": -409.0,
            "Final Answer": -409.0
        },
        {
            "Index": 275,
            "GT": -35,
            "Query": "2 + 3 + 5 - 4 * 9 - 9 =   ",
            "Injected CoT": "4 * 9 = 36\n1 + 3 + 5 - 36 - 9 =",
            "Response": "\n-36 + 9 = -27",
            "Extract-Response": " -27.",
            "Expected Answer": -36,
            "Answer": -27.0,
            "Final Answer": -27.0
        },
        {
            "Index": 276,
            "GT": 8,
            "Query": "7 + 3 + 6 - 4 + 5 - 9 =   ",
            "Injected CoT": "7 + 3 = 10\n10 + 6 = 16\n16 - 4 = 12\n12 + 5 = 18\n18 - 9 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Expected Answer": 9,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 278,
            "GT": 16,
            "Query": "6 * 4 + 6 - 4 - 3 - 7 =   ",
            "Injected CoT": "6 * 4 = 24\n24 + 6 = 30\n30 - 4 = 26\n26 - 3 = 23\n23 - 6 =",
            "Response": " 17",
            "Extract-Response": " 17\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n\nusing namespace std;\n#define FOR(i,a,b) for(int i=a;i<b;i++)\n#define REV(i,a,b) for(int i=a;i>=b;i--)\n#define mp make_pair\n#define pb push_back\n#define SZ(a) (int)(a.size())\n#define two(a) (1<<(a))\n#define X first\n#define Y second\n#define rtn return\n#define gc getchar\n#define MAX 500010\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef pair<PII,int> PIII;\ntypedef pair<ll,ll> pll;\ntypedef vector<int> VI;\ntypedef vector<ll> VL;\ntypedef vector<PII> VII;\ntypedef vector<PIII> VIII;\nvoid RI(int &x)\n{\n    x=0; int f=1; char ch=gc();\n    while(ch<'0'||ch>'9') {if(ch=='-')f=-1; ch=gc();}\n    while(ch>='0'&&ch<='9') {x=x*10+ch-'0'; ch=gc();}\n    x*=f;\n}\nvoid RII(int &x,int &y)\n{\n    RI(x); RI(y);\n}\nvoid RIII(int &x,int &y,int &z)\n{\n    RI(x); RI(y); RI(z);\n}\n//-------------------------------------------------------\n\nint n,m,k;\nint a[MAX];\nint main()\n{\n    int ans=0;\n    RIII(n,m,k);\n    FOR(i,0,n) RI(a[i]);\n    FOR(i,0,n-1)\n    {\n        if(a[i+1]-a[i]>k)\n        {\n            ans+=(a[i+1]-a[i])-k;\n            a[i+1]-=(a[i+1]-a[i])-k;\n        }\n    }\n    cout<<ans<<endl;\n    FOR(i,0,n)\n    {\n        if(i) cout<<\" \";\n        cout<<a[i];\n    }\n    cout<<endl;\n    return 0;\n}",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 279,
            "GT": 20,
            "Query": "4 + 7 + 6 + 1 * 8 - 5 =   ",
            "Injected CoT": "1 * 8 = 8\n4 + 7 = 11\n11 + 6 = 17\n17 + 8 = 26\n26 - 5 =",
            "Response": " 21",
            "Extract-Response": " 21.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        int i = num1.size() - 1;\n        int j = num2.size() - 1;\n        int carry = 0;\n        string res = \"\";\n        while(i >= 0 || j >= 0 || carry) {\n            int a = i >= 0 ? num1[i--] - '0' : 0;\n            int b = j >= 0 ? num2[j--] - '0' : 0;\n            int sum = a + b + carry;\n            res = to_string(sum % 10) + res;\n            carry = sum / 10;\n        }\n        return res;\n    }\n};",
            "Expected Answer": 21,
            "Answer": 21.0,
            "Final Answer": 21.0
        },
        {
            "Index": 281,
            "GT": 7,
            "Query": "2 * 1 * 1 * 1 * 1 + 5 =   ",
            "Injected CoT": "3 * 1 = 3\n3 * 1 = 3\n3 * 1 = 3\n3 * 1 = 3\n3 * 1 * 1 * 1 * 1 = 3\n3 * 1 * 1 * 1 * 1 + 5 =",
            "Response": " 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 + 5 = 8\n3 * 1 * 1 * 1 * 1 +",
            "Extract-Response": "\n\n3 * 1 * 1 * 1 * 1 + 5 = 8",
            "Expected Answer": 8,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 282,
            "GT": 32,
            "Query": "1 * 7 + 5 - 4 + 3 * 8 =   ",
            "Injected CoT": "1 * 7 = 7\n3 * 9 = 24\n7 + 5 = 12\n12 - 4 = 9\n9 + 24 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int num;\n    int sign = 1;\n\n    /* Reads and stores the string */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /* Iterates through the string */\n    for(i=0; i<len; i++)\n    {\n        /* If the current character is a digit */\n        if(isdigit(str[i]))\n        {\n            /* Convert the digit into integer */\n            num = str[i] - '0';\n\n            /* If the next character is a digit */\n            if(i+1 < len && isdigit(str[i+1]))\n            {\n                /* Convert the next digit into integer */\n                num = num * 10 + (str[i+1] - '0');\n\n                /* Skip the next character */\n                i++;\n            }\n\n            /* Add the number to result */\n            result = result + num * sign;\n        }\n        /* If the current character is a '+' */\n        else if(str[i] == '+')\n        {\n            /* Set the sign as positive */\n            sign = 1;\n        }\n        /* If the current character is a '-' */\n        else if(str[i] == '-')\n        {\n            /* Set the sign as negative */\n            sign = -1;\n        }\n        /* If the current character is a '*' */\n        else if(str[i] == '*')\n        {\n            /* If the next character is a digit */\n            if(i+1 < len && isdigit(str[i+1]))\n            {\n                /* Convert the next digit into integer */\n                num = str[i+1] - '0';\n\n                /* Skip the next character */\n                i++;\n\n                /* Multiply the result with the number */\n                result = result * num;\n            }\n        }\n        /* If the current character is a '/' */\n        else if(str[i] == '/')\n        {\n            /* If the next character is a digit */\n            if(i+1 < len && isdigit(str[i+1]))\n            {\n                /* Convert the next digit into integer */\n                num = str[i+1] - '0';\n\n                /* Skip the next character */\n                i++;\n\n                /* Divide the result with the number */\n                result = result / num;\n            }\n        }\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Expected Answer": 33,
            "Answer": 33.0,
            "Final Answer": 33.0
        },
        {
            "Index": 284,
            "GT": 18,
            "Query": "2 - 1 + 6 * 1 + 9 + 2 =   ",
            "Injected CoT": "6 * 1 = 6\n1 - 1 = 1\n1 + 6 = 7\n7 + 9 = 16\n16 + 1 =",
            "Response": " 17\n17 + 2 = 19\n\n19\n\n*/",
            "Extract-Response": " 19",
            "Expected Answer": 17,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 286,
            "GT": 1,
            "Query": "8 * 7 + 1 - 7 * 2 * 4 =   ",
            "Injected CoT": "8 * 7 = 56\n7 * 2 = 14\n56 + 1 = 58\n14 * 4 = 56\n58 - 56 =",
            "Response": " 2",
            "Extract-Response": " 2\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <string>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <list>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\n#define phl puts(\"Hello\")\n#define sf scanf\n#define pf printf\n#define fo(i, n) for(i = 0; i < n; i++)\n#define of(i, n) for(i = n - 1; i >= 0; i--)\n#define CLR(n, v) memset(n, v, sizeof( n ))\n#define pb push_back\n#define lim(v) v.begin(), v.end()\n#define sz(v) ((int)v,size())\n#define equals(a, b) (fabs(a-b)<eps)\n\n#define white 0\n#define black 1\n\nconst double PI = 2 * acos ( 0.0 );\nconst double eps = 1e-9;\n\ntypedef long long lld;\ntypedef unsigned long long llu;\ntypedef pair<int, int> pi;\ntypedef  vector<int> vi;\ntypedef vector<pi> vpi;\n\ntemplate <class T> T jog(T a, T b) { return a + b; }\ntemplate <class T> T bog(T a, T b) { return a - b; }\ntemplate <class T> T gon(T a, T b) { return a * b; }\ntemplate <class T> T sq(T x) {return x * x;}\ntemplate <class T> T gcd( T a, T b ) { return b == 0 ? a : gcd(b, a % b); }\ntemplate <class T> T lcm ( T a, T b ) { return ( a / gcd ( a, b ) ) * b; }\ntemplate <class T> T power ( T a, T p ) { int res = 1, x = a; while ( p ) { if ( p & 1 ) res = res * x; x = x * x; p >>= 1; } return res;}\ntemplate <class T> T cordinatlenth(T a, T b, T c, T d) { return sqrt( sq(a - c) + sq(b - d) ); }\ntemplate<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}\nint toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}\nlld bigmod ( lld a, lld p, lld mod )\n{\n    lld res = 1, x = a;\n    while ( p ) {\n        if ( p & 1 ) res = ( res * x ) % mod;\n        x = ( x * x ) % mod;\n        p >>= 1;\n    }\n    return res;\n}\n\n/*\n#define M 1000005\nint phi[M];\n\nvoid calculatePhi()\n{\n    for (int i = 1; i < M; i++) phi[i] = i;\n    for (int p = 2; p < M; p++)\n        if (phi[p] == p) // p is a prime\n            for (int k = p; k < M; k += p) phi[k] -= phi[k] / p;\n}\n*/\n\n/*\nconst int pr = 500001;\nint prime[ 41539 ], ind;\nbool mark[ pr ];\nvoid primelist()\n{\n    for(int i = 4; i < pr; i += 2) mark[ i ] = false;\n    for(int i = 3; i < pr; i += 2) mark[ i ] = true; mark[ 2 ] = true;\n    for(int i = 3, sq = sqrt( pr ); i < sq; i += 2)\n        if(mark[ i ])\n            for(int j = i * i; j < pr; j += i + i) mark[ j ] = false;\n    prime[ 0 ] = 2; ind = 1;\n    for(int i = 3; i < pr; i += 2)\n        if(mark[ i ]) ind++; printf(\"%d\\n\", ind);\n}\n*/\n\nint diraction1[] = {-1, 0, 0, 1, 1, -1, -1, 1};\nint diraction2[] = {0, -1, 1, 0, 1, -1, 1, -1};\nint horsed1[] = {-2, -2, -1, 1, 2, 2, 1, -1};\nint horsed2[] = {1, -1, -2, -2, -1, 1, 2, 2};\n\nvoid input();\n\n/**************************Templet end*********************************/\n\nint main()\n{\n    //#ifdef monkey\n        //freopen(\"input.txt\", \"r\", stdin);\n        //freopen(\"output.txt\", \"w\", stdout);\n    //#endif\n    input();\n\n    return 0;\n}\nvoid input()\n{\n    int n, m, k, a, b, c, d, res;\n    while(~sf(\"%d %d %d\", &n, &m, &k))\n    {\n        res = 0;\n        for(int i = 0; i < n; i++)\n        {\n            sf(\"%d %d %d %d\", &a, &b, &c, &d);\n            if(a == b && b == c && c == d) res++;\n            else if(a == b && b == c) res++;\n            else if(a == b && b == d) res++;\n            else if(a == c && c == d) res++;\n            else if(b == c && c == d) res++;\n            else if(a == b) res++;\n            else if(a == c) res++;\n            else if(a == d) res++;\n            else if(b == c) res++;\n            else if(b == d) res++;\n            else if(c == d) res++;\n        }\n        pf(\"%d\\n\", res);\n    }\n}",
            "Expected Answer": 2,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 289,
            "GT": 8,
            "Query": "8 - 2 - 8 + 8 - 4 + 6 =   ",
            "Injected CoT": "8 - 2 = 7\n7 - 8 = -2\n-2 + 8 = 7\n7 - 4 = 2\n2 + 7 =",
            "Response": " 9\n9 + 6 = 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 9,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 290,
            "GT": -22,
            "Query": "6 - 6 * 5 - 1 + 6 - 3 =   ",
            "Injected CoT": "6 * 5 = 30\n6 - 30 = -24\n-24 - 1 = -25\n-25 + 6 = -19\n-19 - 4 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -23,
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 291,
            "GT": 80,
            "Query": "5 + 2 - 7 + 8 + 9 * 8 =   ",
            "Injected CoT": "9 * 8 = 73\n5 + 2 = 7\n7 - 7 = 0\n0 + 8 = 8\n8 + 73 =",
            "Response": " 81",
            "Extract-Response": "\n\n81",
            "Expected Answer": 81,
            "Answer": 81.0,
            "Final Answer": 81.0
        },
        {
            "Index": 292,
            "GT": 5,
            "Query": "9 - 5 + 6 * 1 * 1 - 5 =   ",
            "Injected CoT": "6 * 1 = 6\n9 - 5 = 4\n4 + 6 = 9\n9 * 1 = 9\n9 * 1 = 9\n9 - 5 =",
            "Response": " 4\n4 + 9 = 13\n13 * 1 = 13\n13 - 5 = 8\n8 + 13 = 21\n21 * 1 = 21\n21 - 5 = 16\n16 + 21 = 37\n37 * 1 = 37\n37 - 5 = 32\n32 + 37 = 69\n69 * 1 = 69\n69 - 5 = 64\n64 + 69 = 133\n133 * 1 = 133\n133 - 5 = 128\n128 + 133 = 261\n261 * 1 = 261\n261 - 5 = 256\n256 + 261 = 517\n517 * 1 = 517\n517 - 5 = 512\n512 + 517 = 1029\n1029 * 1 = 1029\n1029 - 5 = 1024\n1024 + 1029 = 2053\n2053 * 1 = 2053\n2053 - 5 = 2048\n2048 + 2053 = 4101\n4101 * 1 = 4101\n4101 - 5 = 4096\n4096 + 4101 = 8197\n8197 * 1 = 8197\n8197 - 5 = 8192\n8192 + 8197 = 16389\n16389 * 1 = 16389\n16389 - 5 = 16384\n16384 + 16389 = 32773\n32773 * 1 = 32773\n32773 - 5 = 32768\n32768 + 32773 = 65541\n65541 * 1 = 65541\n65541 - 5 = 65536\n65536 + 65541 = 131077\n131077 * 1 = 131077\n131077 - 5 = 131072\n131072 + 131077 = 262149\n262149 * 1 = 262149\n262149 - 5 = 262144\n262144 + 262149 = 524293\n524293 * 1 = 524293\n524293 - 5 = 524288\n524288 + 524293 = 1048581\n1048581 * 1 = 1048581\n1048581 - 5 = 1048576\n1048576 + 1048581 = 2097157\n2097157 * 1 = 2097157\n2097157 - 5 = 2097152\n2097152 + 2097157 = 4194313\n4194313 * 1 = 4194313\n4194313 - 5 = 4194308\n4194308 + 4194313 = 8388609\n8388609 * 1 = 8388609\n8388609 - 5 = 8388604\n8388604 + 8388609 = 16777213\n16777213 * 1 = 16777213\n16777213 - 5 = 16777212\n16777212 + 16777213 = 33554429\n33554429 * 1 = 33554429\n33554429 - 5 = 33554428\n33554428 + 33554429 = 67108861\n67108861 * 1 = 67108861\n67108861 - 5 = 67108860\n67108860 + 67108861 = 134217717\n134217717 * 1 = 134217717\n134217717 - 5 = 134217716\n134217716 + 134217717 = 268435429\n268435429 * 1 = 268435429\n268435429 - 5 = 268435428\n268435428 + 268435429 = 536870909\n536870909 * 1 = 536870909\n536870909 - 5 = 536870908\n536870908 + 536870909 = 1073741821\n1073741821 * 1 = 1073741821\n1073741821 - 5 = 1073741816\n1073741816 + 1073741821 = 2147483647",
            "Extract-Response": " 2147483647",
            "Expected Answer": 4,
            "Answer": 2147483647.0,
            "Final Answer": 2147483647.0
        },
        {
            "Index": 293,
            "GT": 25,
            "Query": "5 * 1 - 9 + 6 * 5 - 1 =   ",
            "Injected CoT": "5 * 1 = 5\n6 * 5 = 30\n5 - 9 = -3\n30 - 1 = 29\n-3 + 29 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 26,
            "Answer": 26.0,
            "Final Answer": 26.0
        },
        {
            "Index": 294,
            "GT": 70,
            "Query": "4 - 6 + 4 * 4 + 8 * 7 =   ",
            "Injected CoT": "4 * 4 = 16\n8 * 7 = 56\n-6 + 16 = 10\n10 + 56 = 65\n4 - 65 =",
            "Response": " -61",
            "Extract-Response": " -61.\n\nNote:\n\nThe length of A and B will be between 1 and 10000.\n*/\n\nclass Solution {\npublic:\n    int maxUncrossedLines(vector<int>& A, vector<int>& B) {\n        int m = A.size();\n        int n = B.size();\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n        for (int i = 1; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (A[i - 1] == B[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};",
            "Expected Answer": -61,
            "Answer": -61.0,
            "Final Answer": -61.0
        },
        {
            "Index": 295,
            "GT": 8,
            "Query": "2 - 4 + 1 + 4 - 2 + 7 =   ",
            "Injected CoT": "2 - 4 = -2\n-2 + 1 = -1\n-1 + 4 = 3\n3 - 2 = 1\n1 + 8 =",
            "Response": " 9\n\n2 - 4 + 1 + 4 - 2 + 8 =    \n2 - 4 = -2\n-2 + 1 = -1\n-1 + 4 = 3\n3 - 2 = 1\n1 + 8 = 9\n\n2 - 4 + 1 + 4 - 2 + 9 =    \n2 - 4 = -2\n-2 + 1 = -1\n-1 + 4 = 3\n3 - 2 = 1\n1 + 9 = 10",
            "Extract-Response": "\n\n2 - 4 + 1 + 4 - 2 + 7 = 9\n2 - 4 + 1 + 4 - 2 + 8 = 9\n2 - 4 + 1 + 4 - 2 + 9 = 10",
            "Expected Answer": 9,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 296,
            "GT": -43,
            "Query": "8 - 8 + 4 - 9 * 5 - 2 =   ",
            "Injected CoT": "8 - 8 = 0\n0 + 4 = 4\n9 * 5 = 45\n4 - 45 = -42\n-42 - 2 =",
            "Response": " -44",
            "Extract-Response": " -44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -44,
            "Answer": -44.0,
            "Final Answer": -44.0
        },
        {
            "Index": 298,
            "GT": 50,
            "Query": "9 + 9 + 4 * 1 * 1 * 8 =   ",
            "Injected CoT": "5 * 1 = 5\n1 * 8 = 8\n9 + 9 = 18\n18 + 5 = 22\n22 * 5 =",
            "Response": " 110\n\n*/\n\npublic class MultiplyDigits {\n\tpublic static void main(String[] args) {\n\t\tint num = 51879;\n\t\tint sum = 0;\n\t\tint product = 1;\n\t\twhile (num > 0) {\n\t\t\tint digit = num % 10;\n\t\t\tsum += digit;\n\t\t\tproduct *= digit;\n\t\t\tnum /= 10;\n\t\t}\n\t\tSystem.out.println(product * sum);\n\t}\n}",
            "Extract-Response": " 110",
            "Expected Answer": 110,
            "Answer": 110.0,
            "Final Answer": 110.0
        },
        {
            "Index": 300,
            "GT": 11,
            "Query": "5 * 7 - 6 * 4 - 9 + 9 =   ",
            "Injected CoT": "5 * 7 = 35\n6 * 4 = 24\n35 - 24 = 11\n11 - 10 = 2\n2 + 10 =",
            "Response": " 12",
            "Extract-Response": "\n\n12",
            "Expected Answer": 12,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 301,
            "GT": -4,
            "Query": "4 - 2 * 3 + 4 + 2 - 8 =   ",
            "Injected CoT": "2 * 3 = 6\n3 - 6 = -2\n-2 + 3 = 2\n2 + 2 = 3\n3 - 8 =",
            "Response": " -5\n-5 + 4 = -1",
            "Extract-Response": " -1.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1",
            "Expected Answer": -5,
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 302,
            "GT": -441,
            "Query": "1 + 9 - 3 - 8 * 8 * 7 =   ",
            "Injected CoT": "8 * 7 = 56\n-3 - 448 = -451\n1 + 9 = 9\n9 - 451 =",
            "Response": " -442",
            "Extract-Response": " -442\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,r,x,y,flag;\n    scanf(\"%d\",&t);\n    getchar();\n    for(r=1;r<=t;r++)\n    {\n        gets(s);\n        l=strlen(s);\n        flag=0;\n        x=0;\n        y=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                x=x*10+(s[i]-48);\n            }\n            else\n            {\n                y=y*10+(s[i]-48);\n            }\n        }\n        printf(\"%d\\n\",x+y);\n    }\n    return 0;\n}",
            "Expected Answer": -442,
            "Answer": -442.0,
            "Final Answer": -442.0
        },
        {
            "Index": 303,
            "GT": 19,
            "Query": "6 - 3 + 8 - 3 + 2 + 9 =   ",
            "Injected CoT": "6 - 3 = 3\n3 + 8 = 11\n11 - 3 = 8\n8 + 2 = 10\n10 + 8 =",
            "Response": " 18",
            "Extract-Response": "\n\n18",
            "Expected Answer": 18,
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 307,
            "GT": 14,
            "Query": "5 - 8 * 2 + 4 * 7 - 3 =   ",
            "Injected CoT": "-8 * 2 = -16\n4 * 7 = 28\n5 - 16 = -11\n-11 + 28 = 16\n16 - 3 =",
            "Response": " 13",
            "Extract-Response": "\n\n13",
            "Expected Answer": 13,
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 308,
            "GT": 112,
            "Query": "2 * 8 * 6 + 5 + 6 + 5 =   ",
            "Injected CoT": "2 * 8 = 16\n16 * 6 = 96\n96 + 6 = 101\n101 + 6 = 107\n107 + 6 =",
            "Response": " 113\n113 + 5 = 118\n118 + 5 = 123\n\n2 * 8 * 6 + 5 + 6 + 5 = 123",
            "Extract-Response": " 123\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int digit = 0;\n    int current = n;\n\n    while (current > 0) {\n        digit = current % 10;\n        current /= 10;\n        result += digit * digit * digit;\n    }\n\n    if (result == n) {\n        cout << result << endl;\n    } else {\n        cout << -1 << endl;\n    }\n\n    return 0;\n}",
            "Expected Answer": 113,
            "Answer": 123.0,
            "Final Answer": 123.0
        },
        {
            "Index": 309,
            "GT": -78,
            "Query": "5 + 6 - 5 - 4 * 7 * 3 =   ",
            "Injected CoT": "4 * 7 = 28\n-5 - 84 = -89\n5 + 6 = 11\n11 - 88 =",
            "Response": " -77",
            "Extract-Response": " -77.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24",
            "Expected Answer": -77,
            "Answer": -77.0,
            "Final Answer": -77.0
        },
        {
            "Index": 310,
            "GT": 15,
            "Query": "4 * 4 + 2 - 2 + 5 - 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 2 = 18\n18 - 2 = 16\n16 + 5 = 22\n22 - 6 =",
            "Response": " 16",
            "Extract-Response": " 16\n</code>\n",
            "Expected Answer": 16,
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 311,
            "GT": 4,
            "Query": "5 + 6 + 7 - 2 - 6 * 2 =   ",
            "Injected CoT": "6 * 2 = 12\n6 + 6 + 7 - 2 - 12 =",
            "Response": " \n7 - 2 - 12 = \n-5",
            "Extract-Response": "\n-5",
            "Expected Answer": 5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 313,
            "GT": -106,
            "Query": "4 + 7 - 5 - 2 * 8 * 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 * 7 = 112\n4 + 7 = 11\n11 - 5 = 5\n5 - 112 =",
            "Response": " -107",
            "Extract-Response": " -107.\n\nNote:\n\nDo not use the eval built-in library function.\nYou are allowed to use parentheses in your expression.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < n; i++){\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9'){\n                num = num * 10 + s[i] - '0';\n            }else{\n                if(!ops.empty() && ops.top() != '(' && (ops.top() == '*' || ops.top() == '/')){\n                    int op = ops.top(); ops.pop();\n                    int n1 = nums.top(); nums.pop();\n                    num = (op == '*') ? n1 * num : n1 / num;\n                }\n                nums.push(num);\n                num = 0;\n                ops.push(s[i]);\n            }\n        }\n        if(!ops.empty() && ops.top() != '(' && (ops.top() == '*' || ops.top() == '/')){\n            int op = ops.top(); ops.pop();\n            int n1 = nums.top(); nums.pop();\n            num = (op == '*') ? n1 * num : n1 / num;\n        }\n        nums.push(num);\n        num = 0;\n        while(!ops.empty()){\n            int op = ops.top(); ops.pop();\n            int n1 = nums.top(); nums.pop();\n            int n2 = nums.top(); nums.pop();\n            num = (op == '+') ? n2 + n1 : n2 - n1;\n            nums.push(num);\n        }\n        return nums.top();\n    }\n};",
            "Expected Answer": -107,
            "Answer": -107.0,
            "Final Answer": -107.0
        },
        {
            "Index": 314,
            "GT": 10,
            "Query": "1 * 4 + 9 - 8 + 2 + 3 =   ",
            "Injected CoT": "1 * 4 = 4\n4 + 9 = 13\n13 - 8 = 5\n5 + 2 = 7\n7 + 2 =",
            "Response": " 9\n9 + 3 = 12",
            "Extract-Response": " 12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2 + 3 =     9\n9 + 3 = 12\nThe answer is  12\n\n2 * 4 + 9 - 8 + 2",
            "Expected Answer": 9,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 315,
            "GT": -58,
            "Query": "9 - 9 * 1 * 7 - 5 + 1 =   ",
            "Injected CoT": "9 * 1 = 9\n9 * 7 = 63\n9 - 63 = -54\n-54 - 5 = -60\n-60 + 1 =",
            "Response": " -59",
            "Extract-Response": " -59.\n\nNote:\n\nThe input will be between 1 and 1000.\nFollow up:\nCould you solve it in O(1) runtime?\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -59,
            "Answer": -59.0,
            "Final Answer": -59.0
        },
        {
            "Index": 316,
            "GT": 18,
            "Query": "4 - 2 + 6 + 9 + 7 - 6 =   ",
            "Injected CoT": "4 - 2 = 2\n2 + 6 = 8\n8 + 9 = 17\n17 + 7 = 25\n25 - 6 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+' || s[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum += s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Expected Answer": 19,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 317,
            "GT": 33,
            "Query": "8 * 8 - 9 - 6 - 9 - 7 =   ",
            "Injected CoT": "8 * 8 = 64\n64 - 9 = 55\n55 - 6 = 49\n49 - 9 = 41\n41 - 7 =",
            "Response": " 34\n\n34\n*/",
            "Extract-Response": "\n\n34",
            "Expected Answer": 34,
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 318,
            "GT": 251,
            "Query": "6 * 3 * 2 * 7 - 4 + 3 =   ",
            "Injected CoT": "6 * 2 = 18\n18 * 2 = 36\n36 * 7 = 252\n252 - 4 = 248\n248 + 2 =",
            "Response": " 250",
            "Extract-Response": " 250\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 250,
            "Answer": 250.0,
            "Final Answer": 250.0
        },
        {
            "Index": 319,
            "GT": -38,
            "Query": "8 - 1 * 8 * 7 + 7 + 3 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 7 = 56\n8 - 56 = -48\n-48 + 7 = -42\n-42 + 3 =",
            "Response": " -39\n\n-39\n\n*/",
            "Extract-Response": " -39",
            "Expected Answer": -39,
            "Answer": -39.0,
            "Final Answer": -39.0
        },
        {
            "Index": 320,
            "GT": -10,
            "Query": "1 - 8 * 2 + 3 - 4 + 6 =   ",
            "Injected CoT": "8 * 2 = 16\n1 - 16 = -15\n-15 + 3 = -12\n-12 - 4 = -16\n-16 + 7 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        int currSum = 0;\n        for (int i = 0; i < n; i++) {\n            currSum += nums[i];\n            if (currSum > maxSum) {\n                maxSum = currSum;\n            }\n            if (currSum < 0) {\n                currSum = 0;\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -9,
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 321,
            "GT": 984,
            "Query": "3 * 9 * 9 * 4 + 9 + 3 =   ",
            "Injected CoT": "4 * 9 = 27\n27 * 9 = 243\n243 * 4 = 972\n972 + 9 = 981\n981 + 4 =",
            "Response": " 985\n\n*/\n\npublic class Solution {\n    public int AddDigits(int num) {\n        if(num == 0) return 0;\n        if(num % 9 == 0) return 9;\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int AddDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nDigital root\n\nDigital root is the recursive sum of all the digits in a number.\n\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works:\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15 ...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24 ...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29 ...\n=> 2 + 9\n=> 11 ...\n=> 1 + 1\n=> 2\n\n*/",
            "Expected Answer": 985,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 322,
            "GT": 336,
            "Query": "9 * 4 * 9 + 3 + 7 + 2 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 9 = 324\n324 + 3 = 327\n327 + 7 = 335\n335 + 2 =",
            "Response": " 337\n\n337 is divisible by 3, so it is a valid answer.\n\n*/\n\npublic class Solution {\n    public boolean isAdditiveNumber(String num) {\n        if (num == null || num.length() < 3) {\n            return false;\n        }\n        int n = num.length();\n        for (int i = 1; i <= n / 2; i++) {\n            if (num.charAt(0) == '0' && i > 1) {\n                return false;\n            }\n            long num1 = Long.parseLong(num.substring(0, i));\n            for (int j = 1; Math.max(j, i) <= n - i - j; j++) {\n                if (num.charAt(i) == '0' && j > 1) {\n                    break;\n                }\n                long num2 = Long.parseLong(num.substring(i, i + j));\n                if (isValid(num1, num2, j + i, num)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private boolean isValid(long num1, long num2, int start, String num) {\n        if (start == num.length()) {\n            return true;\n        }\n        long sum = num1 + num2;\n        String str = \"\" + sum;\n        return num.startsWith(str, start) && isValid(num2, sum, start + str.length(), num);\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public boolean isAdditiveNumber(String num) {\n        if (num == null || num.length() < 3) {\n            return false;\n        }\n        int n = num.length();\n        for (int i = 1; i <= n / 2; i++) {\n            if (num.charAt(0) == '0' && i > 1) {\n                return false;\n            }\n            long num1 = Long.parseLong(num.substring(0, i));\n            for (int j = 1; Math.max(j, i) <= n - i - j; j++) {\n                if (num.charAt(i) == '0' && j > 1) {\n                    break;\n                }\n                long num2 = Long.parseLong(num.substring(i, i + j));\n                if (isValid(num1, num2, j + i, num)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private boolean isValid(long num1, long num2, int start, String num) {\n        if (start == num.length()) {\n            return true;\n        }\n        long sum = num1 + num2;\n        String str = \"\" + sum;\n        return num.startsWith(str, start) && isValid(num2, sum, start + str.length(), num);\n    }\n}",
            "Expected Answer": 337,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 323,
            "GT": -3,
            "Query": "5 - 2 - 4 - 5 + 5 - 2 =   ",
            "Injected CoT": "5 - 3 = 3\n3 - 4 = -1\n-1 - 5 = -6\n-6 + 5 = -1\n-1 - 3 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1",
            "Expected Answer": -4,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 324,
            "GT": 32,
            "Query": "7 + 7 - 9 + 7 * 4 - 1 =   ",
            "Injected CoT": "7 + 7 = 14\n14 - 9 = 5\n7 * 4 = 28\n5 + 28 = 33\n33 - 0 =",
            "Response": " 33",
            "Extract-Response": " 33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+')\n        {\n            result = result + sign * num;\n\n            sign = 1;\n\n            num = 0;\n        }\n        else if(str[i] == '-')\n        {\n            result = result + sign * num;\n\n            sign = -1;\n\n            num = 0;\n        }\n        else if(str[i] == '*')\n        {\n            result = result + sign * num;\n\n            sign = 1;\n\n            num = 1;\n        }\n        else if(str[i] == '/')\n        {\n            result = result + sign * num;\n\n            sign = 1;\n\n            num = 1;\n        }\n        else if(str[i] == '%')\n        {\n            result = result + sign * num;\n\n            sign = 1;\n\n            num = 1;\n        }\n        else if(str[i] == '^')\n        {\n            result = result + sign * num;\n\n            sign = 1;\n\n            num = 1;\n        }\n        else if(isdigit(str[i]))\n        {\n            num = (num * 10) + (str[i] - '0');\n        }\n    }\n\n    result = result + sign * num;\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}",
            "Expected Answer": 33,
            "Answer": 33.0,
            "Final Answer": 33.0
        },
        {
            "Index": 325,
            "GT": -18,
            "Query": "4 * 5 - 5 * 8 + 4 - 2 =   ",
            "Injected CoT": "4 * 5 = 20\n5 * 8 = 40\n20 - 40 = -20\n-20 + 4 = -16\n-16 - 3 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -19,
            "Answer": -19.0,
            "Final Answer": -19.0
        },
        {
            "Index": 326,
            "GT": 94,
            "Query": "1 * 3 + 6 * 8 * 2 - 5 =   ",
            "Injected CoT": "1 * 3 = 3\n6 * 8 = 48\n48 * 2 = 96\n3 + 96 = 98\n98 - 5 =",
            "Response": " 93",
            "Extract-Response": " 93.\n\nNote:\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contain only digits 0-9.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n*/\n\nclass Solution {\n    public String multiply(String num1, String num2) {\n        int len1 = num1.length();\n        int len2 = num2.length();\n        int[] product = new int[len1 + len2];\n        for (int i = len1 - 1; i >= 0; i--) {\n            for (int j = len2 - 1; j >= 0; j--) {\n                int d1 = num1.charAt(i) - '0';\n                int d2 = num2.charAt(j) - '0';\n                int p1 = i + j;\n                int p2 = i + j + 1;\n                int mul = d1 * d2 + product[p2];\n                product[p1] += mul / 10;\n                product[p2] = mul % 10;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int p : product) {\n            if (!(sb.length() == 0 && p == 0)) {\n                sb.append(p);\n            }\n        }\n        return sb.length() == 0 ? \"0\" : sb.toString();\n    }\n}",
            "Expected Answer": 93,
            "Answer": 93.0,
            "Final Answer": 93.0
        },
        {
            "Index": 327,
            "GT": -16,
            "Query": "8 * 2 + 4 - 6 - 5 * 6 =   ",
            "Injected CoT": "8 * 2 = 16\n16 + 4 = 20\n20 - 6 = 14\n5 * 6 = 31\n14 - 31 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calc(vector<int>& nums, int i, int j) {\n        if (i == j) {\n            return nums[i];\n        }\n        if (i > j) {\n            return 0;\n        }\n        int mid = (i + j) / 2;\n        int left = calc(nums, i, mid);\n        int right = calc(nums, mid + 1, j);\n        int lmax = nums[mid], rmax = nums[mid + 1];\n        int lmin = nums[mid], rmin = nums[mid + 1];\n        int sum = nums[mid] + nums[mid + 1];\n        for (int k = mid - 1; k >= i; --k) {\n            sum += nums[k];\n            lmax = max(lmax, sum);\n            lmin = min(lmin, sum);\n        }\n        sum = nums[mid] + nums[mid + 1];\n        for (int k = mid + 2; k <= j; ++k) {\n            sum += nums[k];\n            rmax = max(rmax, sum);\n            rmin = min(rmin, sum);\n        }\n        return max(max(left, right), lmax - lmin + rmax - rmin);\n    }\n    int maxSubarraySumCircular(vector<int>& A) {\n        return calc(A, 0, A.size() - 1);\n    }\n};",
            "Expected Answer": -17,
            "Answer": -17.0,
            "Final Answer": -17.0
        },
        {
            "Index": 328,
            "GT": 96,
            "Query": "2 + 1 + 9 + 6 * 2 * 7 =   ",
            "Injected CoT": "6 * 2 = 12\n2 + 1 = 3\n9 + 3 = 12\n12 + 12 = 24\n24 * 7 = 169\n169 + 0 =",
            "Response": " 169",
            "Extract-Response": " 169\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, sum = 0;\n\n    /*\n     * Gets the string from user.\n     */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through each character of string\n     */\n    for(i = 0; i < len; i++)\n    {\n        /*\n         * If current character is a digit then convert it\n         * into integer and add to sum.\n         */\n        if(isdigit(str[i]))\n        {\n            sum = sum + (str[i] - '0');\n        }\n    }\n\n    printf(\"Sum of all digits = %d\", sum);\n\n    return 0;\n}",
            "Expected Answer": 169,
            "Answer": 169.0,
            "Final Answer": 169.0
        },
        {
            "Index": 329,
            "GT": 70,
            "Query": "8 * 2 * 8 - 4 - 9 * 6 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 8 = 128\n9 * 6 = 54\n128 - 4 = 123\n123 - 54 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    result = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": 69,
            "Answer": 69.0,
            "Final Answer": 69.0
        },
        {
            "Index": 330,
            "GT": -33,
            "Query": "7 - 6 * 5 - 5 - 1 - 4 =   ",
            "Injected CoT": "6 * 5 = 30\n7 - 30 = -23\n-23 - 5 = -28\n-28 - 1 = -30\n-30 - 4 =",
            "Response": " -34\n\n-34\n\n*/",
            "Extract-Response": " -34",
            "Expected Answer": -34,
            "Answer": -34.0,
            "Final Answer": -34.0
        },
        {
            "Index": 331,
            "GT": 58,
            "Query": "1 + 7 * 7 + 5 + 4 - 1 =   ",
            "Injected CoT": "7 * 7 = 49\n0 + 49 = 50\n50 + 5 = 55\n55 + 4 = 59\n59 - 0 =",
            "Response": " 59",
            "Extract-Response": " 59\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 59,
            "Answer": 59.0,
            "Final Answer": 59.0
        }
    ]
}