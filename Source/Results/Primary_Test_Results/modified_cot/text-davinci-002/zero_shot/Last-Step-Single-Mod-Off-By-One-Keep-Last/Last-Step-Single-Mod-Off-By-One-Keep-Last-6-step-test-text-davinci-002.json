{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Last-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 6,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Last-Step-Single-Mod-Off-By-One-Keep-Last\\Last-Step-Single-Mod-Off-By-One-Keep-Last-6-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 1,
            "GT": 874,
            "Query": "3 * 8 * 9 * 4 + 8 - 3 + 5 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 9 = 216\n216 * 4 = 864\n864 + 8 = 872\n872 - 3 = 869\n869 + 6 =",
            "Response": " 875",
            "Extract-Response": " 875\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num"
        },
        {
            "Index": 4,
            "GT": 709,
            "Query": "5 - 4 * 4 + 2 * 5 * 8 * 9 =   ",
            "Injected CoT": "4 * 4 = 16\n2 * 5 = 10\n10 * 8 = 80\n80 * 9 = 719\n5 - 16 = -11\n-11 + 719 =",
            "Response": " 708",
            "Extract-Response": " 708\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n    int sign;\n\n    /* Input string from user */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n    sum = 0;\n    sign = 1;\n\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+' or '-' */\n        if(i == 0 && (str[i] == '+' || str[i] == '-'))\n        {\n            /* If '+', then add to sum */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n            /* If '-', then subtract from sum */\n            else\n            {\n                sign = -1;\n            }\n\n            continue;\n        }\n\n        /* If current character is 'x' or 'X' */\n        else if(str[i] == 'x' || str[i] == 'X')\n        {\n            /* If 'x' or 'X' is found before any digit */\n            if(i == 0)\n            {\n                num = 1;\n            }\n            /* If 'x' or 'X' is found after any digit */\n            else\n            {\n                num = (str[i-1] - '0');\n            }\n\n            sum = sum + (num * sign);\n\n            /* Reset sign to '+' */\n            sign = 1;\n        }\n\n        /* If current character is '+' or '-' */\n        else if(str[i] == '+' || str[i] == '-')\n        {\n            /* If '+', then add to sum */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n            /* If '-', then subtract from sum */\n            else\n            {\n                sign = -1;\n            }\n        }\n\n        /* If current character is a digit */\n        else\n        {\n            /* Convert character to digit and add to sum */\n            num = (str[i] - '0');\n\n            sum = sum + (num * sign);\n        }\n    }\n\n    printf(\"Sum of all digits = %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 5,
            "GT": -24,
            "Query": "1 - 2 * 2 + 1 - 5 * 3 - 7 =   ",
            "Injected CoT": "-2 * 2 = -4\n1 - -4 = 5\n-5 * 3 = -15\n5 - 15 = -10\n-10 - 8 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int current = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 7,
            "GT": 23,
            "Query": "3 - 3 + 4 * 6 + 4 - 4 - 1 =   ",
            "Injected CoT": "3 - 3 = 0\n4 * 6 = 25\n0 + 25 = 25\n25 + 4 = 28\n28 - 4 = 25\n25 - 1 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 10,
            "GT": 15,
            "Query": "9 - 8 + 7 * 4 + 4 - 2 * 9 =   ",
            "Injected CoT": "7 * 4 = 28\n9 - 8 = 1\n1 + 28 = 29\n4 - 2 = 2\n2 * 9 = 18\n29 + 4 = 32\n32 - 18 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 11,
            "GT": -43,
            "Query": "9 - 8 - 6 - 4 + 1 - 7 * 5 =   ",
            "Injected CoT": "9 - 8 = 1\n1 - 6 = -5\n-5 - 4 = -9\n-9 + 1 = -9\n-9 - 7 * 5 =",
            "Response": " -9 - 35 = -44",
            "Extract-Response": " -44.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    while(1){\n        printf(\"Enter an expression: \");\n        gets(input);\n\n        len = strlen(input);\n\n        if(len == 0){\n            break;\n        }\n\n        num1 = 0;\n        num2 = 0;\n        result = 0;\n        op = '+';\n\n        for(i=0; i<len; i++){\n            if(input[i] == ' '){\n                continue;\n            }\n\n            if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/'){\n                op = input[i];\n            }\n            else{\n                num2 = num2 * 10 + (input[i] - '0');\n\n                if(op == '+'){\n                    result = num1 + num2;\n                    num1 = result;\n                    num2 = 0;\n                }\n                else if(op == '-'){\n                    result = num1 - num2;\n                    num1 = result;\n                    num2 = 0;\n                }\n                else if(op == '*'){\n                    result = num1 * num2;\n                    num1 = result;\n                    num2 = 0;\n                }\n                else if(op == '/'){\n                    result = num1 / num2;\n                    num1 = result;\n                    num2 = 0;\n                }\n            }\n        }\n\n        printf(\"Result = %d\\n\", result);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 13,
            "GT": 12,
            "Query": "2 * 4 - 2 - 1 - 3 + 2 * 5 =   ",
            "Injected CoT": "2 * 4 = 8\n8 - 2 = 6\n6 - 1 = 5\n5 - 3 = 2\n2 * 5 = 11\n2 + 11 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 14,
            "GT": 35,
            "Query": "5 - 8 + 7 * 2 - 3 + 9 * 3 =   ",
            "Injected CoT": "7 * 2 = 14\n-8 + 14 = 6\n9 * 3 = 27\n5 - 3 = 2\n6 + 27 = 34\n2 + 34 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 15,
            "GT": -3,
            "Query": "3 + 5 - 1 + 9 - 1 - 3 * 6 =   ",
            "Injected CoT": "3 + 5 = 8\n8 - 1 = 7\n7 + 9 = 16\n16 - 1 = 15\n3 * 6 = 17\n15 - 17 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 16,
            "GT": 7,
            "Query": "2 * 4 + 7 + 6 - 9 - 8 + 3 =   ",
            "Injected CoT": "2 * 5 = 8\n8 + 7 = 15\n15 + 6 = 21\n21 - 9 = 12\n12 - 8 = 5\n5 + 3 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7 + 6 - 9 - 8 + 3 =     8\nThe answer is  8\n\n2 * 4 + 7"
        },
        {
            "Index": 18,
            "GT": 23,
            "Query": "1 + 9 * 3 * 1 - 7 + 1 + 1 =   ",
            "Injected CoT": "9 * 3 = 27\n1 + 27 = 28\n28 * 1 = 28\n28 - 7 = 21\n21 + 1 = 21\n21 + 1 =",
            "Response": " 22\n\n22\n\n*/",
            "Extract-Response": " 22."
        },
        {
            "Index": 19,
            "GT": -36,
            "Query": "7 - 9 * 3 - 4 - 8 - 1 - 3 =   ",
            "Injected CoT": "9 * 3 = 27\n7 - 27 = -20\n-20 - 4 = -24\n-24 - 8 = -32\n-32 - 1 = -32\n-32 - 3 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nNote:\nThere are at least two nodes in this BST.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int &maxSum) {\n        if (!root) return 0;\n        int left = maxPathSumHelper(root->left, maxSum);\n        int right = maxPathSumHelper(root->right, maxSum);\n        int curr = root->val;\n        if (left > 0) curr += left;\n        if (right > 0) curr += right;\n        maxSum = max(maxSum, curr);\n        return max(root->val, max(root->val + left, root->val + right));\n    }\n};"
        },
        {
            "Index": 20,
            "GT": -36,
            "Query": "1 - 9 * 7 + 7 + 5 + 5 + 9 =   ",
            "Injected CoT": "8 * 7 = 63\n1 - 63 = -62\n-62 + 7 = -55\n-55 + 5 = -50\n-50 + 5 = -45\n-45 + 8 =",
            "Response": " -37\n\n-37 + 9 = -28\n\n-28 + 7 = -21\n\n-21 + 5 = -16\n\n-16 + 5 = -11\n\n-11 + 9 = -2\n\n-2 + 7 = 5\n\n5 + 5 = 10\n\n10 + 9 = 19",
            "Extract-Response": " 19\n\n*/"
        },
        {
            "Index": 21,
            "GT": 160,
            "Query": "6 * 5 * 5 + 7 + 2 - 8 + 9 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 5 = 150\n150 + 7 = 157\n157 + 2 = 159\n159 - 8 = 151\n151 + 10 =",
            "Response": " 161",
            "Extract-Response": " 161\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum * 10 + (s[i] - '0');\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 23,
            "GT": 19,
            "Query": "6 + 5 * 9 - 2 * 8 - 8 * 2 =   ",
            "Injected CoT": "5 * 9 = 45\n6 + 45 = 51\n2 * 8 = 16\n8 * 2 = 16\n51 - 16 = 36\n36 - 16 =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 26,
            "GT": 44,
            "Query": "6 + 7 * 4 + 3 * 1 + 9 - 2 =   ",
            "Injected CoT": "7 * 4 = 28\n3 * 1 = 3\n6 + 28 = 34\n34 + 3 = 37\n37 + 9 = 47\n47 - 2 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    printf(\"Enter a string: \");\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] >= '0' && s[i] <= '9')\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 28,
            "GT": 79,
            "Query": "7 + 6 * 8 + 4 + 9 + 6 + 5 =   ",
            "Injected CoT": "6 * 8 = 48\n7 + 48 = 55\n55 + 4 = 59\n59 + 9 = 68\n68 + 6 = 74\n74 + 6 =",
            "Response": " 80\n80 + 5 = 85\n\n85 is the checksum, which is the right most digit of the card number.\n\nIt can be done!\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n    // ensure proper usage\n    if (argc != 2)\n    {\n        fprintf(stderr, \"Usage: ./luhn num\\n\");\n        return 1;\n    }\n\n    // get card number\n    char *card_num = argv[1];\n\n    // check for non-numeric characters\n    for (int i = 0, n = strlen(card_num); i < n; i++)\n    {\n        if (card_num[i] < '0' || card_num[i] > '9')\n        {\n            fprintf(stderr, \"Usage: ./luhn num\\n\");\n            return 1;\n        }\n    }\n\n    // calculate checksum\n    int sum = 0;\n    int digit = 0;\n    int even = 0;\n\n    for (int i = 0, n = strlen(card_num); i < n; i++)\n    {\n        digit = card_num[i] - '0';\n\n        if (even)\n        {\n            digit *= 2;\n            if (digit > 9)\n            {\n                digit -= 9;\n            }\n        }\n\n        sum += digit;\n        even = !even;\n    }\n\n    // check if checksum is valid\n    if (sum % 10 == 0)\n    {\n        printf(\"VALID\\n\");\n    }\n    else\n    {\n        printf(\"INVALID\\n\");\n    }\n\n    return 0;\n}",
            "Extract-Response": "\n\nVALID"
        },
        {
            "Index": 29,
            "GT": -13,
            "Query": "2 * 5 + 5 + 1 - 6 * 6 + 7 =   ",
            "Injected CoT": "2 * 5 = 10\n10 + 5 = 15\n15 + 1 = 16\n6 * 6 = 36\n16 - 36 = -21\n-21 + 7 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 31,
            "GT": 42,
            "Query": "3 * 4 + 4 * 7 + 1 * 1 * 2 =   ",
            "Injected CoT": "3 * 4 = 12\n4 * 7 = 28\n1 * 1 = 1\n12 + 28 = 40\n40 + 3 =",
            "Response": " 43\n\n3 * 4 + 4 * 7 + 1 * 1 * 2 = 43",
            "Extract-Response": "\n\n43"
        },
        {
            "Index": 32,
            "GT": -376,
            "Query": "5 - 1 - 7 * 7 * 8 + 3 + 9 =   ",
            "Injected CoT": "7 * 8 = 56\n-1 - 56 = -57\n-57 * 7 = -399\n5 - 399 = -394\n-394 + 3 = -390\n-390 + 9 =",
            "Response": " -381",
            "Extract-Response": " -381.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 34,
            "GT": -38,
            "Query": "7 - 9 - 8 * 7 + 9 * 3 - 7 =   ",
            "Injected CoT": "-8 * 8 = -56\n9 * 3 = 27\n-9 - 56 = -65\n-65 + 27 = -38\n-38 - 8 =",
            "Response": " -46",
            "Extract-Response": " -46\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 35,
            "GT": -284,
            "Query": "2 + 9 * 5 - 6 * 8 * 7 + 5 =   ",
            "Injected CoT": "9 * 5 = 45\n6 * 8 = 48\n48 * 7 = 336\n2 + 45 = 47\n47 - 336 = -288\n-288 + 5 =",
            "Response": " -283",
            "Extract-Response": " -283.\n\nNote:\nYou may assume that the expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                num = num * 10 + c - '0';\n            } else {\n                res += sign * num;\n                num = 0;\n                if (c == '+') sign = 1;\n                if (c == '-') sign = -1;\n                if (c == '(') {\n                    st.push(res);\n                    st.push(sign);\n                    res = 0;\n                    sign = 1;\n                }\n                if (c == ')') {\n                    res = st.top() * res + st.top() - 1;\n                    st.pop();\n                    st.pop();\n                }\n            }\n        }\n        return res + sign * num;\n    }\n};"
        },
        {
            "Index": 36,
            "GT": -11,
            "Query": "4 - 4 + 5 + 4 + 8 - 4 * 7 =   ",
            "Injected CoT": "4 - 4 = 0\n0 + 5 = 5\n5 + 4 = 9\n9 + 8 = 16\n4 * 7 = 28\n16 - 28 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef exp(a):\n    # your code here\n    return"
        },
        {
            "Index": 37,
            "GT": 4,
            "Query": "1 - 2 * 9 + 3 + 6 + 2 * 6 =   ",
            "Injected CoT": "2 * 9 = 18\n1 - 18 = -17\n-17 + 3 = -14\n-14 + 6 = -8\n2 * 6 = 11\n-8 + 11 =",
            "Response": " 3",
            "Extract-Response": " 3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 38,
            "GT": 133,
            "Query": "8 * 7 - 3 + 3 * 3 * 8 + 8 =   ",
            "Injected CoT": "8 * 7 = 56\n3 * 3 = 9\n9 * 8 = 72\n56 - 3 = 53\n53 + 72 = 126\n126 + 8 =",
            "Response": " 134",
            "Extract-Response": " 134\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s,t,u,v,w,x,y,z,ans;\n    char ch[100];\n    while(scanf(\"%s\",ch)==1)\n    {\n        n=strlen(ch);\n        ans=0;\n        for(i=0;i<n;i++)\n        {\n            if(ch[i]>='A' && ch[i]<='Z')\n            {\n                ans=ans+ch[i]-64;\n            }\n            else if(ch[i]>='a' && ch[i]<='z')\n            {\n                ans=ans+ch[i]-96;\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
        },
        {
            "Index": 40,
            "GT": 20,
            "Query": "1 * 1 + 6 - 4 + 7 + 5 * 2 =   ",
            "Injected CoT": "1 * 1 = 1\n5 * 2 = 9\n1 + 6 = 7\n7 - 4 = 3\n3 + 7 = 9\n9 + 9 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 41,
            "GT": -62,
            "Query": "8 - 7 * 4 * 2 - 7 + 1 - 8 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 2 = 56\n7 - 56 = -48\n-48 - 7 = -55\n-55 + 1 = -54\n-54 - 7 =",
            "Response": " -61\n-61 - 8 = -69",
            "Extract-Response": " -69\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l25, m25, n25, o25, p25, q25, r25, s25, t25, u25, v25, w25, x25, y25,"
        },
        {
            "Index": 42,
            "GT": 24207,
            "Query": "6 * 9 * 8 * 7 * 8 + 3 * 5 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 8 = 432\n432 * 7 = 3024\n3024 * 8 = 24192\n3 * 5 = 16\n24192 + 16 =",
            "Response": " 24208",
            "Extract-Response": "\n<code>24208\n</code>\n"
        },
        {
            "Index": 43,
            "GT": -16,
            "Query": "1 * 7 + 5 + 1 - 5 - 6 * 4 =   ",
            "Injected CoT": "1 * 7 = 7\n7 + 5 = 12\n12 + 1 = 13\n13 - 5 = 7\n6 * 4 = 24\n7 - 24 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 44,
            "GT": -7,
            "Query": "9 - 5 - 2 * 6 + 9 - 2 * 4 =   ",
            "Injected CoT": "2 * 6 = 12\n5 - 12 = -7\n-7 + 9 = 2\n2 * 4 = 8\n2 - 8 = -7\n-7 + 2 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < nums.size(); i++) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 46,
            "GT": -32,
            "Query": "4 - 9 - 9 * 2 + 5 - 7 - 7 =   ",
            "Injected CoT": "9 * 2 = 18\n4 - 9 = -5\n-5 - 18 = -23\n-23 + 5 = -18\n-18 - 7 = -26\n-26 - 7 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 47,
            "GT": 25,
            "Query": "4 * 7 + 2 - 9 * 5 + 8 * 5 =   ",
            "Injected CoT": "4 * 7 = 28\n9 * 5 = 45\n8 * 5 = 39\n28 + 2 = 30\n30 - 45 = -15\n-15 + 39 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 48,
            "GT": 18,
            "Query": "4 + 5 - 2 + 6 + 5 + 5 - 5 =   ",
            "Injected CoT": "4 + 5 = 9\n9 - 2 = 7\n7 + 6 = 13\n13 + 5 = 18\n18 + 5 = 22\n22 - 5 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 49,
            "GT": 3581,
            "Query": "7 * 8 - 3 + 7 * 8 * 9 * 7 =   ",
            "Injected CoT": "7 * 8 = 56\n56 - 3 = 54\n8 * 9 = 72\n72 * 7 = 504\n54 + 504 =",
            "Response": " 558",
            "Extract-Response": "\n\n558."
        },
        {
            "Index": 50,
            "GT": 11,
            "Query": "5 + 6 - 2 + 5 - 2 - 9 + 8 =   ",
            "Injected CoT": "5 + 6 = 11\n11 - 2 = 9\n9 + 5 = 14\n14 - 2 = 12\n12 - 9 = 4\n4 + 8 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 51,
            "GT": 1,
            "Query": "3 * 4 - 9 + 3 + 2 * 2 - 9 =   ",
            "Injected CoT": "3 * 4 = 12\n12 - 9 = 3\n3 + 3 = 6\n2 * 2 = 4\n6 + 4 = 11\n11 - 9 =",
            "Response": " 2",
            "Extract-Response": " 2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 52,
            "GT": 24,
            "Query": "8 * 4 - 7 * 4 - 7 + 9 * 3 =   ",
            "Injected CoT": "8 * 4 = 32\n6 * 4 = 28\n32 - 28 = 4\n9 * 3 = 27\n4 + 27 = 31\n31 - 6 =",
            "Response": " 25\n\n25\n\n*/",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 53,
            "GT": 5,
            "Query": "9 - 1 * 1 + 6 - 9 + 7 - 7 =   ",
            "Injected CoT": "1 * 1 = 1\n9 - 1 = 8\n8 + 6 = 14\n14 - 9 = 5\n5 + 7 = 13\n13 - 7 =",
            "Response": " 6\n\n6",
            "Extract-Response": " 6"
        },
        {
            "Index": 54,
            "GT": 42,
            "Query": "4 * 7 - 7 + 1 + 2 + 6 * 3 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 7 = 21\n1 + 21 = 22\n22 + 2 = 25\n6 * 3 = 18\n25 + 18 =",
            "Response": " 43",
            "Extract-Response": " 43.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions will result in no division by zero and there is no contradiction.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0')\n                    num = num * 10 + s[i++] - '0';\n                res += sign * num;\n                --i;\n            }\n            else if (c == '+') sign = 1;\n            else if (c == '-') sign = -1;\n            else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            }\n            else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 55,
            "GT": 69,
            "Query": "7 + 6 + 7 * 5 + 5 + 2 * 8 =   ",
            "Injected CoT": "7 + 6 = 13\n7 * 5 = 35\n2 * 8 = 15\n13 + 35 = 48\n48 + 5 = 53\n53 + 15 =",
            "Response": " 68",
            "Extract-Response": " 68\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n\n        printf(\"%d\\n\", sum);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 59,
            "GT": -6,
            "Query": "9 - 7 * 1 - 5 * 3 - 2 + 9 =   ",
            "Injected CoT": "7 * 1 = 7\n5 * 3 = 15\n10 - 7 = 2\n2 - 15 = -13\n-13 - 2 = -15\n-15 + 10 =",
            "Response": " -5\n-5 + 9 = 4",
            "Extract-Response": " 4\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int x;\n        cin >> x;\n        if (a <= x && x <= b) {\n            ++result;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 62,
            "GT": 1,
            "Query": "4 * 2 + 9 + 4 - 7 - 8 - 5 =   ",
            "Injected CoT": "4 * 2 = 8\n8 + 9 = 17\n17 + 4 = 21\n21 - 7 = 14\n14 - 8 = 6\n6 - 4 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 63,
            "GT": 9,
            "Query": "3 * 8 - 2 * 3 - 3 * 1 - 6 =   ",
            "Injected CoT": "3 * 8 = 24\n2 * 3 = 7\n3 * 1 = 3\n24 - 7 - 3 - 7 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int threeSumMulti(vector<int>& A, int target) {\n        int n = A.size();\n        long long ans = 0;\n        for (int i = 0; i < n - 2; i++) {\n            int j = i + 1, k = n - 1;\n            while (j < k) {\n                if (A[i] + A[j] + A[k] == target) {\n                    if (A[j] == A[k]) {\n                        ans += (k - j + 1) * (k - j) / 2;\n                        break;\n                    }\n                    int left = 1, right = 1;\n                    while (j + 1 < k && A[j] == A[j + 1]) {\n                        j++;\n                        left++;\n                    }\n                    while (k - 1 > j && A[k] == A[k - 1]) {\n                        k--;\n                        right++;\n                    }\n                    ans += left * right;\n                    j++;\n                    k--;\n                } else if (A[i] + A[j] + A[k] < target) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return ans % int(1e9 + 7);\n    }\n};"
        },
        {
            "Index": 67,
            "GT": 119,
            "Query": "6 + 5 + 9 * 4 + 9 * 2 * 4 =   ",
            "Injected CoT": "9 * 4 = 36\n9 * 2 * 4 = 72\n6 + 5 = 11\n11 + 36 = 46\n46 + 72 =",
            "Response": " 118\n\n*/\n\npublic class Solution {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nThe idea is that the final sum of the digit is the remainder of the sum of the digit and 9.\n\nFor example:\n\nnum = 38\n\nThe process is like: 3 + 8 = 11, 1 + 1 = 2. So the sum of the digit is 2.\n\nWe can get the remainder directly using a faster way:\n\n1 + (38 - 1) % 9 = 1 + (38 + 8) % 9 = 1 + (46) % 9 = 1 + 2 = 3\n\n*/"
        },
        {
            "Index": 68,
            "GT": 33,
            "Query": "6 * 1 * 1 + 7 * 4 - 2 + 1 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 1 = 6\n6 + 7 = 13\n13 * 4 = 52\n52 - 2 = 51\n51 + 1 =",
            "Response": " 52",
            "Extract-Response": " 52\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+'||s[i]=='-'||s[i]=='*'||s[i]=='/')\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n    {\n        printf(\"The answer is  %d\",atoi(s));\n    }\n    else\n    {\n        for(i=0;i<len;i++)\n        {\n            if(s[i]=='+')\n            {\n                for(j=0;j<i;j++)\n                {\n                    sum=sum+s[j]-48;\n                }\n                for(k=i+1;k<len;k++)\n                {\n                    sum=sum+s[k]-48;\n                }\n                printf(\"The answer is  %d\",sum);\n                break;\n            }\n            else if(s[i]=='-')\n            {\n                for(j=0;j<i;j++)\n                {\n                    sum=sum+s[j]-48;\n                }\n                for(k=i+1;k<len;k++)\n                {\n                    sum=sum-s[k]+48;\n                }\n                printf(\"The answer is  %d\",sum);\n                break;\n            }\n            else if(s[i]=='*')\n            {\n                for(j=0;j<i;j++)\n                {\n                    sum=sum+s[j]-48;\n                }\n                for(k=i+1;k<len;k++)\n                {\n                    sum=sum*(s[k]-48);\n                }\n                printf(\"The answer is  %d\",sum);\n                break;\n            }\n            else if(s[i]=='/')\n            {\n                for(j=0;j<i;j++)\n                {\n                    sum=sum+s[j]-48;\n                }\n                for(k=i+1;k<len;k++)\n                {\n                    sum=sum/(s[k]-48);\n                }\n                printf(\"The answer is  %d\",sum);\n                break;\n            }\n        }\n    }\n    return 0;\n}"
        },
        {
            "Index": 69,
            "GT": -60,
            "Query": "7 + 9 - 2 - 2 * 5 * 8 + 6 =   ",
            "Injected CoT": "5 * 8 = 40\n2 * 40 = 80\n7 + 9 = 16\n16 - 2 = 14\n14 - 80 = -65\n-65 + 6 =",
            "Response": " -59",
            "Extract-Response": " -59.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer a\n\nGuaranteed constraints:\n-1000 \u2264 a \u2264 1000.\n\n[input] integer b\n\nGuaranteed constraints:\n-1000 \u2264 b \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef add(a, b):\n    return a + b"
        },
        {
            "Index": 70,
            "GT": 52,
            "Query": "6 + 9 * 4 + 2 + 6 * 1 + 2 =   ",
            "Injected CoT": "9 * 4 = 36\n6 + 36 = 42\n6 * 1 = 6\n2 + 6 = 7\n42 + 7 =",
            "Response": " 49\n\n49\n\n*/",
            "Extract-Response": " 49"
        },
        {
            "Index": 72,
            "GT": 23,
            "Query": "9 + 2 + 9 + 1 + 2 - 3 + 3 =   ",
            "Injected CoT": "9 + 2 = 11\n11 + 9 = 20\n20 + 1 = 21\n21 + 2 = 23\n23 - 4 = 20\n20 + 4 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 74,
            "GT": 39,
            "Query": "6 + 4 * 5 + 5 - 4 + 8 + 4 =   ",
            "Injected CoT": "4 * 5 = 20\n6 + 20 = 26\n26 + 5 = 31\n31 - 4 = 27\n27 + 8 = 34\n34 + 4 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 77,
            "GT": 23,
            "Query": "4 + 1 * 5 + 8 * 2 - 8 + 6 =   ",
            "Injected CoT": "1 * 5 = 5\n8 * 2 = 16\n4 + 5 = 9\n9 + 16 = 25\n25 - 8 = 16\n16 + 6 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &a);\n\n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &b);\n\n    printf(\"Enter the third number: \");\n    scanf(\"%d\", &c);\n\n    printf(\"Enter the fourth number: \");\n    scanf(\"%d\", &d);\n\n    printf(\"Enter the fifth number: \");\n    scanf(\"%d\", &e);\n\n    printf(\"Enter the sixth number: \");\n    scanf(\"%d\", &f);\n\n    printf(\"Enter the seventh number: \");\n    scanf(\"%d\", &g);\n\n    printf(\"Enter the eighth number: \");\n    scanf(\"%d\", &h);\n\n    printf(\"Enter the ninth number: \");\n    scanf(\"%d\", &i);\n\n    printf(\"Enter the tenth number: \");\n    scanf(\"%d\", &j);\n\n    printf(\"Enter the eleventh number: \");\n    scanf(\"%d\", &k);\n\n    printf(\"Enter the twelfth number: \");\n    scanf(\"%d\", &l);\n\n    printf(\"Enter the thirteenth number: \");\n    scanf(\"%d\", &m);\n\n    printf(\"Enter the fourteenth number: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the fifteenth number: \");\n    scanf(\"%d\", &o);\n\n    printf(\"Enter the sixteenth number: \");\n    scanf(\"%d\", &p);\n\n    printf(\"Enter the seventeenth number: \");\n    scanf(\"%d\", &q);\n\n    printf(\"Enter the eighteenth number: \");\n    scanf(\"%d\", &r);\n\n    printf(\"Enter the nineteenth number: \");\n    scanf(\"%d\", &s);\n\n    printf(\"Enter the twentieth number: \");\n    scanf(\"%d\", &t);\n\n    printf(\"Enter the twenty-first number: \");\n    scanf(\"%d\", &u);\n\n    printf(\"Enter the twenty-second number: \");\n    scanf(\"%d\", &v);\n\n    printf(\"Enter the twenty-third number: \");\n    scanf(\"%d\", &w);\n\n    printf(\"Enter the twenty-fourth number: \");\n    scanf(\"%d\", &x);\n\n    printf(\"Enter the twenty-fifth number: \");\n    scanf(\"%d\", &y);\n\n    printf(\"Enter the twenty-sixth number: \");\n    scanf(\"%d\", &z);\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 78,
            "GT": -21,
            "Query": "3 - 7 * 7 - 5 - 5 + 7 * 5 =   ",
            "Injected CoT": "7 * 7 = 49\n3 - 49 = -46\n-46 - 5 = -51\n-51 - 5 = -55\n7 * 5 = 35\n-55 + 35 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 79,
            "GT": 4,
            "Query": "4 - 4 + 5 - 6 + 3 + 7 - 5 =   ",
            "Injected CoT": "4 - 4 = 0\n0 + 6 = 6\n6 - 6 = -1\n-1 + 3 = 2\n2 + 7 = 9\n9 - 6 =",
            "Response": " 3",
            "Extract-Response": " 3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 80,
            "GT": 65,
            "Query": "3 + 8 * 4 - 4 + 8 * 4 + 2 =   ",
            "Injected CoT": "8 * 4 = 32\n3 + 32 = 35\n35 - 4 = 31\n8 * 4 = 32\n31 + 32 = 62\n62 + 2 =",
            "Response": " 64\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a = 8;\n    int b = 4;\n    int c = 3;\n    int d = 2;\n    int e = a * b;\n    int f = c + e;\n    int g = f - b;\n    int h = a * b;\n    int i = g + h;\n    int j = i + d;\n    printf(\"%d\\n\", j);\n    return 0;\n}",
            "Extract-Response": "\n64"
        },
        {
            "Index": 81,
            "GT": 36,
            "Query": "4 + 7 + 6 - 7 - 6 + 4 * 8 =   ",
            "Injected CoT": "4 + 7 = 11\n11 + 6 = 17\n17 - 7 = 10\n10 - 6 = 4\n4 * 8 = 31\n10 + 31 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,"
        },
        {
            "Index": 82,
            "GT": 85,
            "Query": "2 + 3 * 5 * 1 + 4 + 8 * 8 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 1 = 15\n2 + 15 = 17\n17 + 4 = 21\n8 * 8 = 65\n21 + 65 =",
            "Response": " 86\n\n86",
            "Extract-Response": " 86\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0, num, mul;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n        else if(str[i] == '+')\n            continue;\n        else if(str[i] == '*')\n        {\n            mul = 1;\n            for(j = i - 1; j >= 0; j--)\n            {\n                if(str[j] == ' ')\n                    continue;\n                else if(str[j] == '+')\n                    break;\n                else\n                {\n                    num = str[j] - '0';\n                    mul *= num;\n                }\n            }\n            sum += mul;\n        }\n        else\n        {\n            num = str[i] - '0';\n            sum += num;\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}"
        },
        {
            "Index": 83,
            "GT": 13,
            "Query": "7 + 1 + 2 * 7 - 1 * 1 * 9 =   ",
            "Injected CoT": "2 * 7 = 14\n1 * 1 = 1\n14 - 1 = 14\n7 + 1 = 8\n8 + 14 =",
            "Response": " 22\n\n22\n\n*/",
            "Extract-Response": " 22"
        },
        {
            "Index": 85,
            "GT": 70,
            "Query": "2 - 3 + 6 * 6 - 1 + 6 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n2 - 3 = -1\n-1 + 36 = 34\n34 - 1 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 86,
            "GT": -80,
            "Query": "2 - 6 - 1 - 2 * 6 - 9 * 7 =   ",
            "Injected CoT": "2 * 6 = 12\n-9 * 7 = -63\n-6 - 1 = -6\n-6 - 12 =",
            "Response": " -18\n-18 - 63 = -81",
            "Extract-Response": " -81\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int current = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        current += a;\n        result = max(result, current);\n        if (current < 0) {\n            current = 0;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 87,
            "GT": -28,
            "Query": "3 - 5 + 6 * 9 - 4 * 4 * 5 =   ",
            "Injected CoT": "6 * 9 = 54\n4 * 4 = 16\n16 * 5 = 80\n3 - 5 = -2\n-2 + 54 = 53\n53 - 80 =",
            "Response": " -27",
            "Extract-Response": " -27.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24"
        },
        {
            "Index": 88,
            "GT": 4,
            "Query": "9 * 4 + 6 - 8 * 4 * 1 - 6 =   ",
            "Injected CoT": "9 * 4 = 36\n8 * 4 = 32\n32 * 1 = 32\n36 + 6 = 42\n42 - 32 = 9\n9 - 6 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int currMax = 0;\n    int currMin = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        currMax = max(currMax, curr);\n        currMin = min(currMin, curr);\n    }\n\n    result = currMax - currMin + 1;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 89,
            "GT": 57,
            "Query": "2 + 2 + 9 + 5 * 8 - 3 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n2 + 2 = 4\n4 + 9 = 13\n13 + 40 = 53\n53 - 3 = 50\n50 + 8 =",
            "Response": " 58",
            "Extract-Response": " 58.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, len, result = 0, num = 0;\n    char sign = '+';\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-')\n        {\n            if(sign == '+')\n            {\n                result = result + num;\n            }\n            else if(sign == '-')\n            {\n                result = result - num;\n            }\n\n            num = 0;\n\n            sign = input[i];\n        }\n        else if(input[i] == '*')\n        {\n            num = num * (input[i + 1] - '0');\n\n            i++;\n        }\n        else if(input[i] == '/')\n        {\n            num = num / (input[i + 1] - '0');\n\n            i++;\n        }\n        else\n        {\n            num = (num * 10) + (input[i] - '0');\n        }\n    }\n\n    if(sign == '+')\n    {\n        result = result + num;\n    }\n    else if(sign == '-')\n    {\n        result = result - num;\n    }\n\n    printf(\"Result = %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 92,
            "GT": 70,
            "Query": "2 + 2 + 9 + 3 + 6 * 3 * 3 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 3 = 55\n2 + 2 = 4\n4 + 9 = 13\n13 + 3 = 16\n16 + 55 =",
            "Response": " 71\n\n71 is not divisible by 10, so the number is not valid.\n\nA number with an even number of digits divided by 2 will yield a remainder of 0. \nIf the sum of all digits is divisible by 3, the entire number is divisible by 3. \nAdding the digits yields a sum of 27. \n27 % 3 = 0 and 27 / 2 = 13, 13 % 2 = 1\n\nTherefore, 71 is not a valid credit card number.\n*/\n\n// You can assume the user's input will be a number in string format with an even number of digits\n\n// Do not alter the function name\nfunction validate(n) {\n    // Code here\n    let sum = 0;\n    let num = n.split('');\n    for (let i = 0; i < num.length; i++) {\n        if (i % 2 === 0) {\n            num[i] = num[i] * 2;\n            if (num[i] > 9) {\n                num[i] = num[i] - 9;\n            }\n        }\n        sum += parseInt(num[i]);\n    }\n    if (sum % 10 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nmodule.exports = validate;",
            "Extract-Response": "\n\nfunction validate(n) {\n    let sum = 0;\n    let num = n.split('');\n    for (let i = 0; i < num.length; i++) {\n        if (i % 2 === 0) {\n            num[i] = num[i] * 2;\n            if (num[i] > 9) {\n                num[i] = num[i] - 9;\n            }\n        }\n        sum += parseInt(num[i]);\n    }\n    if (sum % 10 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        },
        {
            "Index": 93,
            "GT": 10,
            "Query": "6 + 8 + 1 - 7 * 2 + 9 * 1 =   ",
            "Injected CoT": "7 * 2 = 14\n6 + 8 + 2 - 14 + 9 * 2 = \n9 * 2 = 9\n6 + 8 + 2 - 14 + 9 = \n6 + 8 = 14\n14 + 2 = 15\n15 - 14 = 2\n2 + 9 =",
            "Response": " 11\n11 - 14 = -3",
            "Extract-Response": " -3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 94,
            "GT": 228,
            "Query": "8 * 7 * 1 * 6 - 6 * 2 * 9 =   ",
            "Injected CoT": "8 * 7 = 56\n56 * 1 = 56\n56 * 6 = 337\n6 * 2 = 12\n12 * 9 = 108\n337 - 108 =",
            "Response": " 229",
            "Extract-Response": " 229\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char num[MAX_SIZE];\n    int len, i, j, product, max_product = 0;\n\n    printf(\"Enter a number: \");\n    gets(num);\n\n    len = strlen(num);\n\n    for(i=0; i<len-12; i++)\n    {\n        product = 1;\n\n        for(j=i; j<i+13; j++)\n        {\n            product *= (num[j] - '0');\n        }\n\n        if(product > max_product)\n            max_product = product;\n    }\n\n    printf(\"The answer is %d\\n\", max_product);\n\n    return 0;\n}"
        },
        {
            "Index": 95,
            "GT": 124,
            "Query": "6 * 3 * 6 + 2 + 3 + 2 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 6 = 108\n108 + 2 = 110\n110 + 3 = 113\n113 + 2 = 114\n114 + 9 =",
            "Response": " 123\n\n*/",
            "Extract-Response": "\n\n123"
        },
        {
            "Index": 97,
            "GT": 123,
            "Query": "2 - 7 + 1 * 2 * 8 * 2 * 4 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 129\n2 - 7 = -5\n-5 + 129 =",
            "Response": " 124\n\n3 - 7 + 1 * 2 * 8 * 2 * 4 =\n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 129\n3 - 7 = -4\n-4 + 129 = 125\n\n4 - 7 + 1 * 2 * 8 * 2 * 4 =\n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 129\n4 - 7 = -3\n-3 + 129 = 126\n\n5 - 7 + 1 * 2 * 8 * 2 * 4 =\n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 129\n5 - 7 = -2\n-2 + 129 = 127\n\n6 - 7 + 1 * 2 * 8 * 2 * 4 =\n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 129\n6 - 7 = -1\n-1 + 129 = 128\n\n7 - 7 + 1 * 2 * 8 * 2 * 4 =\n1 * 2 = 2\n2 * 8 = 16\n16 * 2 = 32\n32 * 4 = 129\n7 - 7 = 0\n0 + 129 = 129",
            "Extract-Response": "\n\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129."
        },
        {
            "Index": 98,
            "GT": 40,
            "Query": "6 + 4 * 6 * 1 - 1 + 3 + 8 =   ",
            "Injected CoT": "4 * 6 = 24\n6 * 24 = 144\n144 * 1 = 144\n6 + 144 = 150\n150 - 1 = 149\n149 + 3 = 152\n152 + 9 =",
            "Response": " 161\n\n161 is the answer.",
            "Extract-Response": " 161.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum;\n    while(gets(s))\n    {\n        sum=0;\n        len=strlen(s);\n        for(i=0;i<len;i++)\n        {\n            if(s[i]>='A' && s[i]<='Z')\n            {\n                sum=sum+s[i]-64;\n            }\n            else if(s[i]>='a' && s[i]<='z')\n            {\n                sum=sum+s[i]-96;\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 99,
            "GT": -3,
            "Query": "6 - 4 - 8 + 8 - 9 + 9 - 5 =   ",
            "Injected CoT": "6 - 4 = 2\n2 - 8 = -6\n-6 + 8 = 2\n2 - 9 = -7\n-7 + 9 = 2\n2 - 4 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 100,
            "GT": 33,
            "Query": "2 - 6 + 9 + 9 + 9 + 2 + 8 =   ",
            "Injected CoT": "2 - 6 = -4\n-4 + 9 = 5\n5 + 9 = 14\n14 + 9 = 23\n23 + 2 = 24\n24 + 8 =",
            "Response": " 32",
            "Extract-Response": "\n<code>32\n</code>\n"
        },
        {
            "Index": 102,
            "GT": 56,
            "Query": "1 + 8 * 6 - 8 + 3 * 6 - 3 =   ",
            "Injected CoT": "8 * 6 = 48\n1 + 48 = 49\n3 * 6 = 18\n49 - 8 = 41\n41 + 18 = 60\n60 - 3 =",
            "Response": " 57",
            "Extract-Response": " 57\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, sum = 0;\n\n    scanf(\"%d\", &n);\n\n    for(i = 1; i <= n; i++)\n    {\n        for(j = 1; j <= i; j++)\n        {\n            sum = sum + j;\n        }\n    }\n\n    printf(\"%d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 105,
            "GT": -356,
            "Query": "3 * 9 + 9 - 8 * 7 * 7 * 1 =   ",
            "Injected CoT": "3 * 9 = 27\n8 * 7 = 56\n56 * 7 = 391\n391 * 1 = 391\n27 + 9 = 36\n36 - 391 =",
            "Response": " -355",
            "Extract-Response": " -355.\n\nNote:\n\nThe input is always valid.\nFollow up:\nCould you do it in O(1) space?\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> st;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0') {\n                    num = num * 10 + s[i++] - '0';\n                }\n                res += sign * num;\n                --i;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 106,
            "GT": 22,
            "Query": "5 - 3 - 5 + 9 + 7 + 3 * 3 =   ",
            "Injected CoT": "5 - 3 = 2\n2 - 5 = -3\n-3 + 9 = 6\n6 + 7 = 14\n3 * 3 = 9\n14 + 9 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 109,
            "GT": 53,
            "Query": "9 * 6 - 4 + 5 - 4 + 1 * 2 =   ",
            "Injected CoT": "9 * 6 = 54\n54 - 4 = 50\n50 + 5 = 55\n55 - 4 = 50\n1 * 2 = 2\n50 + 2 =",
            "Response": " 52",
            "Extract-Response": "\n\n52."
        },
        {
            "Index": 110,
            "GT": 50,
            "Query": "1 + 4 + 4 + 6 * 7 - 6 + 5 =   ",
            "Injected CoT": "6 * 7 = 42\n1 + 4 = 5\n5 + 4 = 9\n9 + 42 = 51\n51 - 6 = 46\n46 + 5 =",
            "Response": " 51",
            "Extract-Response": "\n\n51"
        },
        {
            "Index": 111,
            "GT": 38,
            "Query": "7 * 4 + 8 + 9 + 1 * 2 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n1 * 2 = 2\n28 + 8 = 36\n36 + 8 = 45\n45 + 2 = 47\n47 - 8 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 112,
            "GT": 56,
            "Query": "2 * 2 + 9 + 8 + 5 + 6 * 5 =   ",
            "Injected CoT": "2 * 2 = 4\n6 * 5 = 30\n4 + 9 = 13\n13 + 8 = 21\n21 + 5 = 25\n25 + 30 =",
            "Response": " 55",
            "Extract-Response": " 55.\n\nNote:\n\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contain only digits 0-9.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){\n            int x = i < 0 ? 0 : num1.charAt(i) - '0';\n            int y = j < 0 ? 0 : num2.charAt(j) - '0';\n            sb.append((x + y + carry) % 10);\n            carry = (x + y + carry) / 10;\n        }\n        return sb.reverse().toString();\n    }\n}"
        },
        {
            "Index": 113,
            "GT": -36,
            "Query": "5 - 8 * 1 - 3 * 8 - 1 * 9 =   ",
            "Injected CoT": "8 * 1 = 8\n-8 - 24 = -32\n-1 * 9 = -9\n5 - 33 - 9 =",
            "Response": " -37\n\n-37\n\n*/",
            "Extract-Response": " -37"
        },
        {
            "Index": 114,
            "GT": 20,
            "Query": "3 + 6 + 2 - 1 - 2 + 3 * 4 =   ",
            "Injected CoT": "3 + 6 = 9\n9 + 2 = 11\n11 - 1 = 10\n10 - 2 = 8\n3 * 4 = 13\n8 + 13 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 118,
            "GT": 9,
            "Query": "6 * 1 + 5 - 3 * 3 + 4 + 3 =   ",
            "Injected CoT": "6 * 1 = 6\n2 * 2 = 9\n6 + 5 = 11\n11 - 9 = 2\n2 + 4 = 6\n6 + 2 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 120,
            "GT": 4,
            "Query": "2 - 8 + 4 - 9 - 5 + 5 * 4 =   ",
            "Injected CoT": "5 * 4 = 20\n2 - 8 = -6\n-6 + 4 = -2\n-2 - 9 = -11\n-11 - 5 = -17\n-17 + 20 =",
            "Response": " 3",
            "Extract-Response": "\n\n3"
        },
        {
            "Index": 121,
            "GT": 72576,
            "Query": "6 * 8 * 6 * 7 * 6 * 2 * 3 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 6 = 288\n288 * 7 = 2016\n2016 * 6 = 12096\n12096 * 2 = 24192\n24192 * 2 =",
            "Response": " 48384\n48384 * 3 = 145152\n\nThe answer is 145152.",
            "Extract-Response": "\n\n145152"
        },
        {
            "Index": 122,
            "GT": 296,
            "Query": "5 + 3 + 8 * 1 * 2 * 3 * 6 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 2 = 16\n16 * 3 = 48\n5 + 3 = 8\n8 + 48 = 57\n57 + 8 =",
            "Response": " 65\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, sum = 0;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        for(j = 1; j <= n; j++)\n        {\n            for(k = 1; k <= n; k++)\n            {\n                for(l = 1; l <= n; l++)\n                {\n                    for(m = 1; m <= n; m++)\n                    {\n                        if(i != j && i != k && i != l && i != m && j != k && j != l && j != m && k != l && k != m && l != m)\n                        {\n                            sum = sum + (i * j + j * k + k * l + l * m + m * i);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}",
            "Extract-Response": " 65."
        },
        {
            "Index": 123,
            "GT": 223,
            "Query": "1 * 6 + 4 + 3 + 7 * 5 * 6 =   ",
            "Injected CoT": "1 * 6 = 6\n7 * 5 = 35\n35 * 6 = 209\n6 + 4 = 10\n10 + 3 = 13\n13 + 209 =",
            "Response": " 222",
            "Extract-Response": " 222\n</code>\n"
        },
        {
            "Index": 125,
            "GT": 51,
            "Query": "9 * 7 * 1 - 1 - 7 + 1 - 5 =   ",
            "Injected CoT": "9 * 7 = 63\n63 * 1 = 63\n63 - 1 = 62\n62 - 7 = 55\n55 + 1 = 56\n56 - 4 =",
            "Response": " 52\n52 + 1 = 53\n53 - 5 = 48\n48 + 1 = 49\n49 - 3 = 46\n46 + 1 = 47\n47 - 2 = 45\n45 + 1 = 46\n46 - 6 = 40\n40 + 1 = 41\n41 - 8 = 33\n33 + 1 = 34\n34 - 0 = 34",
            "Extract-Response": " 34\n\n*/"
        },
        {
            "Index": 126,
            "GT": 70,
            "Query": "8 * 7 + 3 + 4 + 3 + 7 - 3 =   ",
            "Injected CoT": "8 * 7 = 56\n56 + 2 = 59\n59 + 4 = 63\n63 + 2 = 66\n66 + 7 = 73\n73 - 2 =",
            "Response": " 71",
            "Extract-Response": " 71.\n\nNote:\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n*/\n\nclass Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n        for (string str : strs) {\n            int zeros = 0, ones = 0;\n            for (char c : str) {\n                if (c == '0') zeros++;\n                else ones++;\n            }\n            for (int i = m; i >= zeros; i--) {\n                for (int j = n; j >= ones; j--) {\n                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};"
        },
        {
            "Index": 127,
            "GT": -60,
            "Query": "6 * 3 - 1 * 6 * 1 - 9 * 8 =   ",
            "Injected CoT": "5 * 3 = 18\n1 * 5 = 5\n5 * 1 = 5\n18 - 5 - 9 * 8 =",
            "Response": " \n18 - 5 - 72 = -59\n\n-59\n\n*/",
            "Extract-Response": "\n\n-59"
        },
        {
            "Index": 128,
            "GT": 32,
            "Query": "5 * 8 - 9 + 4 - 4 - 6 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n40 - 9 = 31\n31 + 4 = 35\n35 - 4 = 31\n31 - 6 = 25\n25 + 6 =",
            "Response": " 31",
            "Extract-Response": " 31\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += current;\n            current = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += current;\n            current = 0;\n            sign = -1;\n        } else if (c == '=') {\n            result += current;\n            current = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            current = current * 10 + (c - '0') * sign;\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 129,
            "GT": 16,
            "Query": "2 + 5 * 2 - 5 + 3 + 2 + 4 =   ",
            "Injected CoT": "5 * 2 = 10\n2 + 10 = 12\n12 - 5 = 7\n7 + 3 = 10\n10 + 2 = 12\n12 + 3 =",
            "Response": " 15\n15 + 4 = 19",
            "Extract-Response": " 19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                ++result;\n                b[j] = -1;\n                break;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 130,
            "GT": 279,
            "Query": "1 + 8 * 7 * 1 * 5 + 5 - 7 =   ",
            "Injected CoT": "8 * 7 = 56\n1 * 56 = 56\n56 * 1 = 56\n56 * 5 = 280\n1 + 280 = 281\n281 + 5 = 287\n287 - 7 =",
            "Response": " 280",
            "Extract-Response": "\n\n280."
        },
        {
            "Index": 131,
            "GT": -28,
            "Query": "5 * 1 - 5 * 2 - 8 * 2 - 7 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 2 = 10\n8 * 2 = 16\n6 - 10 - 16 - 7 =",
            "Response": " -17\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 * 1 = 5\n5 * 2 = 10\n8 * 2 = 16\n5 - 10 - 16 - 7 = -18\n\n5 * 1 - 5 * 2 - 8 * 2 - 7 =    \n5 *",
            "Extract-Response": " -18"
        },
        {
            "Index": 132,
            "GT": 3,
            "Query": "4 + 8 - 4 - 8 - 6 * 1 + 9 =   ",
            "Injected CoT": "4 + 8 = 12\n12 - 4 = 8\n8 - 8 = 0\n6 * 1 = 6\n0 - 6 = -6\n-6 + 8 =",
            "Response": " 2\n2 + 9 = 11",
            "Extract-Response": "\n11\n\n*/"
        },
        {
            "Index": 133,
            "GT": 153,
            "Query": "6 + 6 * 7 + 7 + 2 * 7 * 7 =   ",
            "Injected CoT": "6 + 6 = 12\n7 * 7 = 49\n2 * 7 = 14\n14 * 7 = 98\n12 * 49 = 588\n588 + 7 = 594\n594 + 98 =",
            "Response": " 692\n692 + 14 = 706\n706 + 12 = 718\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int digit = 0;\n    int digitSum = 0;\n    int digitSquare = 0;\n    int digitSquareSum = 0;\n    int digitSquareSumSquare = 0;\n    int digitSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n    int digitSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare",
            "Extract-Response": "\n\n}"
        },
        {
            "Index": 135,
            "GT": 59,
            "Query": "8 * 1 * 7 * 1 + 6 - 2 - 1 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 7 = 56\n56 * 1 = 56\n56 + 6 = 62\n62 - 2 = 59\n59 - 1 =",
            "Response": " 58\n\n58 is the answer.",
            "Extract-Response": " 58.\n\n*/"
        },
        {
            "Index": 136,
            "GT": 20,
            "Query": "4 * 1 * 5 + 1 - 4 - 3 + 6 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 5 = 20\n20 + 1 = 21\n21 - 4 = 17\n17 - 3 = 14\n14 + 5 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    bool isNumber = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            continue;\n        }\n\n        if (s[i] == '+') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        if (s[i] == '-') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = -1;\n            continue;\n        }\n\n        currentNumber = currentNumber * 10 + s[i] - '0';\n        isNumber = true;\n    }\n\n    if (isNumber) {\n        result += sign * currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 138,
            "GT": 435,
            "Query": "1 + 1 + 9 * 3 * 4 * 4 + 1 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 4 = 108\n108 * 4 = 432\n1 + 1 = 2\n432 + 2 = 433\n433 + 1 =",
            "Response": " 434\n\n*/\n\npublic class Solution {\n    public int AddDigits(int num) {\n        if (num == 0) return 0;\n        if (num % 9 == 0) return 9;\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int AddDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\npublic class Solution {\n    public int AddDigits(int num) {\n        return num == 0 ? 0 : (num % 9 == 0 ? 9 : num % 9);\n    }\n}"
        },
        {
            "Index": 139,
            "GT": 61,
            "Query": "6 * 3 * 3 - 7 + 4 + 4 + 6 =   ",
            "Injected CoT": "5 * 3 = 18\n18 * 3 = 54\n54 - 7 = 47\n47 + 4 = 51\n51 + 4 = 55\n55 + 5 =",
            "Response": " 60\n60 / 6 = 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n#include <cstring>\n#include <cstdio>\n#include <stdio.h>\n\nusing namespace std;\n\nint main()\n{\n\tint n,i,j,k,l,m,a,b,c,d,e,f,g,h,x,y,z,t,p,q,r,s,u,v,w,ans;\n\tchar ch;\n\tstring str;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tcin>>n;\n\t\tans=0;\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\ta=i;\n\t\t\tb=a*a;\n\t\t\tc=b*a;\n\t\t\tans=ans+a+b+c;\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"
        },
        {
            "Index": 140,
            "GT": 26,
            "Query": "6 + 9 * 3 - 7 * 3 + 9 + 5 =   ",
            "Injected CoT": "9 * 3 = 27\n7 * 3 = 20\n6 + 27 = 33\n33 - 20 = 12\n12 + 9 = 20\n20 + 5 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 141,
            "GT": -3,
            "Query": "1 + 3 + 4 + 7 - 2 * 9 * 1 =   ",
            "Injected CoT": "2 * 9 = 18\n1 + 2 + 4 + 7 - 18 * 1 =",
            "Response": " \n1 + 2 + 4 + 7 - 18 = \n-8",
            "Extract-Response": "\n-8\n\n*/"
        },
        {
            "Index": 143,
            "GT": 152,
            "Query": "7 * 5 * 5 - 3 * 4 * 2 + 1 =   ",
            "Injected CoT": "7 * 5 = 35\n35 * 5 = 175\n3 * 4 = 12\n12 * 2 = 24\n175 - 24 = 152\n152 + 1 =",
            "Response": " 153\n\n153 is an Armstrong number.\n\nWrite some code to determine whether a number is an Armstrong number.\n\nThe program should ask for a number. E.g. if we type 371, the program should print out:\n\nThe 371 is an Armstrong number.\n\nOr if we type 1634, the program should print out:\n\nThe 1634 is an Armstrong number.\n\n*/\n\n#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int num, originalNum, remainder, n = 0, result = 0;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n\n    originalNum = num;\n\n    while (originalNum != 0)\n    {\n        originalNum /= 10;\n        ++n;\n    }\n\n    originalNum = num;\n\n    while (originalNum != 0)\n    {\n        remainder = originalNum%10;\n        result += pow(remainder, n);\n        originalNum /= 10;\n    }\n\n    if(result == num)\n        printf(\"%d is an Armstrong number.\", num);\n    else\n        printf(\"%d is not an Armstrong number.\", num);\n\n    return 0;\n}",
            "Extract-Response": "\n\nThe 371 is an Armstrong number."
        },
        {
            "Index": 147,
            "GT": 5,
            "Query": "1 + 1 - 3 * 2 - 6 + 3 * 5 =   ",
            "Injected CoT": "1 = 1\n1 + 1 = 2\n3 * 2 = 6\n2 - 6 = -4\n-4 - 6 = -10\n3 * 5 = 16\n-10 + 16 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 148,
            "GT": 15,
            "Query": "5 + 1 * 2 * 2 - 5 + 4 + 7 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 2 = 4\n4 + 4 = 9\n9 + 7 = 16\n16 - 4 = 11\n11 + 4 =",
            "Response": " 15\n15 - 5 = 10\n10 + 1 = 11\n11 + 5 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n16 - 2 = 14\n14 + 2 = 16\n",
            "Extract-Response": " 14"
        },
        {
            "Index": 150,
            "GT": -31,
            "Query": "4 - 6 * 8 + 8 * 5 - 3 * 9 =   ",
            "Injected CoT": "6 * 8 = 48\n8 * 5 = 40\n3 * 9 = 27\n4 - 48 = -44\n-44 + 40 = -3\n-3 - 27 =",
            "Response": " -30",
            "Extract-Response": " -30.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 151,
            "GT": 6,
            "Query": "3 * 3 - 2 * 3 - 2 - 2 + 7 =   ",
            "Injected CoT": "3 * 3 = 9\n2 * 3 = 6\n9 - 6 = 3\n3 - 2 = 1\n1 - 2 = -1\n-1 + 8 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of given array won't exceed 1000.\nThere are only positive integers in the array.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 152,
            "GT": -5,
            "Query": "9 - 4 * 1 - 4 + 5 - 6 - 5 =   ",
            "Injected CoT": "4 * 1 = 4\n9 - 4 = 5\n5 - 4 = 1\n1 + 5 = 6\n6 - 6 = -1\n-1 - 5 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 153,
            "GT": 54,
            "Query": "5 * 8 - 1 + 3 * 5 + 5 - 5 =   ",
            "Injected CoT": "5 * 8 = 40\n40 - 1 = 39\n3 * 5 = 15\n39 + 15 = 54\n54 + 5 = 58\n58 - 5 =",
            "Response": " 53",
            "Extract-Response": " 53\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result + curr << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 156,
            "GT": 65,
            "Query": "4 * 6 - 8 + 3 * 4 * 4 + 1 =   ",
            "Injected CoT": "4 * 6 = 24\n3 * 4 = 12\n12 * 4 = 48\n24 - 8 = 16\n48 + 16 = 65\n65 + 1 =",
            "Response": " 66",
            "Extract-Response": " 66.\n\nNote:\n\n1 <= N <= 10000\n-10000 <= x_i <= 10000\nN is even\n\n*/\n\nclass Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        int sum = 0;\n        sort(nums.begin(), nums.end());\n        for(int i = 0; i < nums.size(); i += 2) {\n            sum += nums[i];\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 157,
            "GT": -165,
            "Query": "1 - 1 - 8 * 3 * 7 - 2 + 5 =   ",
            "Injected CoT": "-8 * 3 = -24\n-24 * 7 = -168\n1 - 1 = 0\n0 - 168 = -168\n-168 - 2 = -170\n-170 + 6 =",
            "Response": " -164",
            "Extract-Response": " -164\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, len, sum = 0, sign = 1;\n    gets(s);\n    len = strlen(s);\n    for(i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            sign = -1;\n            continue;\n        }\n        if(s[i] == '=')\n        {\n            break;\n        }\n        n = s[i] - '0';\n        sum = sum + n * pow(10, len - i - 1) * sign;\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/"
        },
        {
            "Index": 158,
            "GT": -533,
            "Query": "4 + 1 + 2 - 9 * 3 * 5 * 4 =   ",
            "Injected CoT": "-9 * 3 = -27\n-27 * 5 = -135\n-135 * 4 = -540\n4 + 1 = 5\n5 + 2 = 8\n8 - 540 =",
            "Response": " -532",
            "Extract-Response": " -532.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        max_product = nums[0]\n        min_product = nums[0]\n        res = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_product, min_product = min_product, max_product\n            max_product = max(max_product * nums[i], nums[i])\n            min_product = min(min_product * nums[i], nums[i])\n            res = max(res, max_product)\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [2, 3, -2, 4]\n    print(Solution().maxProduct(nums))"
        },
        {
            "Index": 161,
            "GT": -6,
            "Query": "5 * 7 + 7 - 3 - 6 * 8 + 3 =   ",
            "Injected CoT": "5 * 7 = 35\n35 + 7 = 42\n42 - 3 = 39\n6 * 8 = 48\n39 - 48 = -10\n-10 + 3 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n        }\n        return (int)ans;\n    }\n};"
        },
        {
            "Index": 162,
            "GT": 21,
            "Query": "3 * 5 - 1 * 3 + 1 + 2 + 6 =   ",
            "Injected CoT": "3 * 5 = 16\n1 * 3 = 3\n16 - 3 = 12\n12 + 1 = 13\n13 + 2 = 16\n16 + 6 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < n; ++i)\n    {\n        if (s[i] == ' ')\n        {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        }\n        else if (s[i] == '+')\n        {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            num = 0;\n            sign = -1;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n    result += sign * num;\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 163,
            "GT": -160,
            "Query": "7 - 3 * 8 * 5 - 7 * 6 - 5 =   ",
            "Injected CoT": "3 * 8 = 23\n7 - 23 * 5 - 7 * 6 - 5 =",
            "Response": " \n7 - 115 - 42 - 5 = \n-144 - 5 = \n-149",
            "Extract-Response": " -149.\n"
        },
        {
            "Index": 164,
            "GT": 1,
            "Query": "2 * 8 - 8 + 3 + 1 - 4 - 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 8 = 8\n8 + 3 = 11\n11 + 1 = 12\n12 - 4 = 8\n8 - 8 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8 + 3 + 1 - 4 - 7 =     0\nThe answer is  0\n\n2 * 8 - 8"
        },
        {
            "Index": 166,
            "GT": 11,
            "Query": "2 * 6 + 3 * 1 - 4 + 9 - 9 =   ",
            "Injected CoT": "2 * 6 = 12\n3 * 1 = 3\n12 + 3 = 15\n15 - 4 = 11\n11 + 8 = 20\n20 - 8 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 167,
            "GT": 228,
            "Query": "4 * 9 * 7 - 3 - 7 * 3 * 1 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 7 = 252\n7 * 3 = 21\n252 - 3 = 248\n21 * 1 = 21\n248 - 21 =",
            "Response": " 227",
            "Extract-Response": " 227\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s,t,u,v,w,x,y,z,max;\n    char str[100];\n    while(scanf(\"%d\",&n)==1)\n    {\n        if(n==0)\n            break;\n        max=0;\n        for(i=0;i<n;i++)\n        {\n            scanf(\"%s\",str);\n            s=0;\n            for(j=0;j<strlen(str);j++)\n            {\n                if(str[j]>='A' && str[j]<='Z')\n                    s=s+str[j]-64;\n                else if(str[j]>='a' && str[j]<='z')\n                    s=s+str[j]-96;\n            }\n            if(s>max)\n                max=s;\n        }\n        printf(\"%d\\n\",max);\n    }\n    return 0;\n}"
        },
        {
            "Index": 168,
            "GT": 36,
            "Query": "7 + 8 + 8 - 3 - 9 + 5 * 5 =   ",
            "Injected CoT": "5 * 5 = 25\n7 + 8 = 15\n15 + 8 = 23\n23 - 3 = 20\n20 - 9 = 12\n12 + 25 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    char *p;\n    int num1, num2, result;\n    char operator;\n\n    printf(\"Enter an expression: \");\n    fgets(input, MAX_SIZE, stdin);\n\n    p = strtok(input, \" \");\n    num1 = atoi(p);\n\n    p = strtok(NULL, \" \");\n    operator = *p;\n\n    p = strtok(NULL, \" \");\n    num2 = atoi(p);\n\n    switch(operator)\n    {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            result = num1 / num2;\n            break;\n        default:\n            printf(\"Invalid operator!\\n\");\n            return 1;\n    }\n\n    printf(\"%d %c %d = %d\\n\", num1, operator, num2, result);\n\n    return 0;\n}"
        },
        {
            "Index": 169,
            "GT": 40,
            "Query": "8 * 5 - 2 * 8 + 4 + 6 * 2 =   ",
            "Injected CoT": "8 * 5 = 40\n2 * 8 = 16\n6 * 2 = 11\n40 - 16 = 24\n24 + 4 = 28\n28 + 11 =",
            "Response": " 39",
            "Extract-Response": "\n\n39."
        },
        {
            "Index": 170,
            "GT": -12,
            "Query": "4 + 9 + 7 - 4 - 4 * 8 + 4 =   ",
            "Injected CoT": "4 + 9 = 13\n13 + 7 = 20\n20 - 4 = 16\n4 * 8 = 32\n16 - 32 = -17\n-17 + 4 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    char sign = '+';\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-')\n        {\n            sign = input[i];\n            continue;\n        }\n\n        num = 0;\n\n        while(i < len && isdigit(input[i]))\n        {\n            num = num * 10 + input[i] - '0';\n            i++;\n        }\n\n        if(sign == '+')\n        {\n            sum = sum + num;\n        }\n        else\n        {\n            sum = sum - num;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 171,
            "GT": 30,
            "Query": "4 + 7 + 6 * 4 + 3 - 4 - 4 =   ",
            "Injected CoT": "6 * 3 = 24\n3 + 7 = 11\n11 + 24 = 35\n35 + 3 = 38\n38 - 3 = 34\n34 - 3 =",
            "Response": " 31\n31 - 4 = 27\n27 - 4 = 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 173,
            "GT": 36,
            "Query": "7 + 6 + 5 + 5 - 3 + 4 * 4 =   ",
            "Injected CoT": "4 * 4 = 16\n7 + 6 = 13\n13 + 5 = 18\n18 + 5 = 23\n23 - 3 = 21\n21 + 16 =",
            "Response": " 37",
            "Extract-Response": " 37.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n\n    printf(\"Enter a string: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+' || input[i] == '-')\n        {\n            continue;\n        }\n\n        num = 0;\n\n        for(j=i; j<len; j++)\n        {\n            if(input[j] == '+' || input[j] == '-')\n            {\n                break;\n            }\n\n            if(isdigit(input[j]))\n            {\n                num = num * 10 + input[j] - '0';\n            }\n        }\n\n        if(input[i-1] == '-')\n        {\n            num = -num;\n        }\n\n        sum = sum + num;\n\n        i = j - 1;\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 174,
            "GT": 8,
            "Query": "1 + 7 + 4 + 7 - 9 * 2 + 7 =   ",
            "Injected CoT": "9 * 2 = 18\n0 + 7 = 8\n8 + 4 = 12\n12 + 7 = 19\n19 - 18 = 0\n0 + 7 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1, 1000].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 175,
            "GT": -2,
            "Query": "7 - 2 - 1 + 6 * 2 - 9 - 9 =   ",
            "Injected CoT": "6 * 2 = 12\n8 - 2 = 5\n5 - 1 = 4\n4 + 12 = 16\n16 - 9 = 8\n8 - 9 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])"
        },
        {
            "Index": 176,
            "GT": 34,
            "Query": "9 * 1 - 1 + 9 + 5 + 4 * 3 =   ",
            "Injected CoT": "9 * 1 = 9\n4 * 3 = 11\n9 - 1 = 8\n8 + 9 = 17\n17 + 5 = 22\n22 + 11 =",
            "Response": " 33",
            "Extract-Response": " 33.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 177,
            "GT": 14,
            "Query": "2 + 8 + 3 - 1 + 3 + 3 - 4 =   ",
            "Injected CoT": "2 + 8 = 10\n10 + 3 = 13\n13 - 1 = 12\n12 + 3 = 15\n15 + 3 = 19\n19 - 4 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 178,
            "GT": 4,
            "Query": "2 + 3 + 9 - 6 - 3 - 6 + 5 =   ",
            "Injected CoT": "2 + 3 = 5\n5 + 9 = 14\n14 - 6 = 8\n8 - 3 = 5\n5 - 6 = -2\n-2 + 5 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int curr = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        curr += a;\n        result = max(result, curr);\n        if (curr < 0) {\n            curr = 0;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 179,
            "GT": 18,
            "Query": "3 + 1 * 9 + 5 + 3 - 9 + 7 =   ",
            "Injected CoT": "1 * 9 = 9\n3 + 9 = 12\n12 + 5 = 17\n17 + 3 = 20\n20 - 9 = 12\n12 + 7 =",
            "Response": " 19",
            "Extract-Response": " 19\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        l = strlen(s);\n        sum = 0;\n        for(j = 0; j < l; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum + s[j] - '0';\n            }\n        }\n        for(k = j + 1; k < l; k++)\n        {\n            if(s[k] == ' ')\n                continue;\n            else if(s[k] == '+')\n                continue;\n            else if(s[k] == '=')\n                break;\n            else\n            {\n                sum = sum + s[k] - '0';\n            }\n        }\n        for(m = k + 1; m < l; m++)\n        {\n            if(s[m] == ' ')\n                continue;\n            else if(s[m] == '+')\n                continue;\n            else if(s[m] == '=')\n                break;\n            else\n            {\n                sum = sum + s[m] - '0';\n            }\n        }\n        for(n = m + 1; n < l; n++)\n        {\n            if(s[n] == ' ')\n                continue;\n            else if(s[n] == '+')\n                continue;\n            else if(s[n] == '=')\n                break;\n            else\n            {\n                sum = sum + s[n] - '0';\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 180,
            "GT": 294,
            "Query": "5 * 2 + 1 + 8 * 6 * 6 - 5 =   ",
            "Injected CoT": "6 * 2 = 10\n8 * 6 = 48\n48 * 6 = 288\n10 + 1 = 11\n288 + 11 = 299\n299 - 6 =",
            "Response": " 293",
            "Extract-Response": " 293\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 184,
            "GT": 17,
            "Query": "2 + 5 * 1 * 8 - 2 * 9 - 7 =   ",
            "Injected CoT": "5 * 1 = 5\n5 * 8 = 40\n2 * 9 = 18\n40 - 18 = 22\n22 - 7 = 14\n2 + 14 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                sign = 1;\n                curNum = 0;\n            } else if (c == '-') {\n                res += sign * curNum;\n                sign = -1;\n                curNum = 0;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};"
        },
        {
            "Index": 185,
            "GT": 3,
            "Query": "7 + 2 * 6 + 1 + 4 - 7 * 3 =   ",
            "Injected CoT": "2 * 6 = 12\n7 + 12 = 19\n19 + 1 = 20\n20 + 4 = 24\n7 * 3 = 22\n24 - 22 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 186,
            "GT": -3,
            "Query": "8 - 1 + 6 - 5 - 7 + 2 - 6 =   ",
            "Injected CoT": "8 - 1 = 7\n7 + 7 = 13\n13 - 5 = 8\n8 - 7 = 1\n1 + 2 = 3\n3 - 7 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleArraySum(a):\n    return sum(a)"
        },
        {
            "Index": 188,
            "GT": 29,
            "Query": "5 - 7 - 3 + 4 - 5 + 7 * 5 =   ",
            "Injected CoT": "-7 - 3 = -10\n-10 + 4 = -6\n-6 - 5 = -11\n7 * 5 = 34\n-11 + 34 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 190,
            "GT": 6,
            "Query": "7 - 3 + 3 + 1 - 7 + 4 + 1 =   ",
            "Injected CoT": "7 - 3 = 4\n4 + 3 = 7\n7 + 1 = 8\n8 - 7 = 1\n1 + 4 = 4\n4 + 1 =",
            "Response": " 5\n\n5",
            "Extract-Response": "\n\n5"
        },
        {
            "Index": 191,
            "GT": -25,
            "Query": "2 - 5 * 3 - 6 + 1 * 2 - 8 =   ",
            "Injected CoT": "5 * 3 = 15\n2 - 15 = -13\n1 * 2 = 2\n-13 + 2 = -11\n-11 - 6 = -17\n-17 - 7 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 192,
            "GT": -47,
            "Query": "1 + 8 + 4 - 3 - 8 * 7 - 1 =   ",
            "Injected CoT": "8 * 7 = 56\n0 + 8 = 9\n9 + 4 = 13\n13 - 3 = 10\n10 - 56 = -46\n-46 - 0 =",
            "Response": " -46",
            "Extract-Response": " -46.\n\nNote:\n\nThe length of the input array is [1, 10].\n-1000 <= A[i] <= 1000\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n        }\n        return (int)ans;\n    }\n};"
        },
        {
            "Index": 193,
            "GT": 47,
            "Query": "1 + 8 + 5 + 6 * 4 + 4 + 5 =   ",
            "Injected CoT": "6 * 4 = 24\n1 + 9 + 5 + 24 + 4 + 5 =",
            "Response": " \n48",
            "Extract-Response": "\n48"
        },
        {
            "Index": 194,
            "GT": 80,
            "Query": "6 * 6 * 1 * 2 + 8 + 2 - 2 =   ",
            "Injected CoT": "6 * 6 = 36\n36 * 1 = 36\n36 * 3 = 72\n72 + 8 = 80\n80 + 3 = 82\n82 - 3 =",
            "Response": " 79\n\n*/",
            "Extract-Response": " 79.\n\nNote:\nThe input numbers in the form of string will only contain digits 0-9 and the characters '+', '-', '*', '/', '(', ')'.\nThe length of the input string is between 2 and 200.\nYou may assume that the integers in the string are between -9999 and 9999.\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if (n == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for (int i = 0; i < n; ++i) {\n            if (isdigit(s[i])) {\n                num = num * 10 + s[i] - '0';\n            }\n            if ((!isdigit(s[i]) && s[i] != ' ') || i == n - 1) {\n                if (sign == '+') st.push(num);\n                if (sign == '-') st.push(-num);\n                if (sign == '*') {\n                    int tmp = st.top(); st.pop();\n                    st.push(tmp * num);\n                }\n                if (sign == '/') {\n                    int tmp = st.top(); st.pop();\n                    st.push(tmp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while (!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 195,
            "GT": 3121,
            "Query": "7 * 7 * 9 * 7 - 1 + 5 * 7 =   ",
            "Injected CoT": "7 * 7 = 49\n49 * 9 = 441\n441 * 7 = 3087\n3087 - 1 = 3086\n5 * 7 = 36\n3086 + 36 =",
            "Response": " 3122",
            "Extract-Response": "\n<blockquote class=\"spoiler\">\n<p> <strong>3122</strong></p>\n</blockquote>\n"
        },
        {
            "Index": 196,
            "GT": 335,
            "Query": "1 * 5 * 7 * 9 + 3 * 5 + 5 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 7 = 35\n35 * 9 = 315\n3 * 4 = 15\n315 + 15 = 330\n330 + 4 =",
            "Response": " 334\n\n*/\n\npublic class DigitProductSum {\n\tpublic static void main(String[] args) {\n\t\tint sum = 0;\n\t\tfor (int i = 10; i < 1000000; i++) {\n\t\t\tint prod = 1;\n\t\t\tint sumDigits = 0;\n\t\t\tint num = i;\n\t\t\twhile (num > 0) {\n\t\t\t\tint digit = num % 10;\n\t\t\t\tprod *= digit;\n\t\t\t\tsumDigits += digit;\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\t\tif (prod == sumDigits) {\n\t\t\t\tsum += i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}",
            "Extract-Response": "\n\n45228"
        },
        {
            "Index": 197,
            "GT": 212,
            "Query": "1 + 5 * 6 * 7 + 9 - 1 * 8 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 7 = 210\n1 + 210 = 211\n211 - 1 = 210\n1 * 7 = 7\n210 - 7 =",
            "Response": " 203\n1 * 8 = 8\n203 - 8 = 195",
            "Extract-Response": " 195\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int n = s.size();\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 199,
            "GT": 48,
            "Query": "1 * 7 * 5 - 7 - 4 + 4 * 6 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 5 = 35\n4 * 6 = 23\n35 - 7 = 28\n28 - 4 = 23\n23 + 23 =",
            "Response": " 46",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 200,
            "GT": 78,
            "Query": "7 * 2 * 5 + 4 + 9 - 4 - 1 =   ",
            "Injected CoT": "7 * 2 = 14\n14 * 5 = 70\n70 + 4 = 74\n74 + 9 = 83\n83 - 4 = 79\n79 - 0 =",
            "Response": " 79",
            "Extract-Response": " 79\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += current;\n            current = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += current;\n            current = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result *= current;\n            current = 0;\n            sign = 1;\n        } else if (c == '/') {\n            result /= current;\n            current = 0;\n            sign = 1;\n        } else {\n            current = current * 10 + (c - '0');\n        }\n    }\n\n    result += current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 201,
            "GT": -7,
            "Query": "6 - 2 * 2 + 2 - 1 - 1 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n6 - 4 = 2\n2 + 2 = 4\n4 - 1 = 3\n3 - 1 = 2\n2 - 8 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 204,
            "GT": -3,
            "Query": "2 * 8 - 2 + 7 - 9 - 7 - 8 =   ",
            "Injected CoT": "2 * 9 = 16\n16 - 2 = 14\n14 + 7 = 21\n21 - 9 = 12\n12 - 7 = 5\n5 - 9 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 205,
            "GT": -120,
            "Query": "1 + 9 + 7 - 6 * 6 * 4 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n-6 * 24 = -144\n1 + 9 + 8 = 17\n17 - 144 = -127\n-127 + 8 =",
            "Response": " -119",
            "Extract-Response": " -119.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 206,
            "GT": -13,
            "Query": "6 * 1 - 8 + 9 - 3 * 8 + 4 =   ",
            "Injected CoT": "6 * 1 = 6\n6 - 8 = -2\n-2 + 9 = 7\n3 * 8 = 24\n7 - 24 = -18\n-18 + 4 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 207,
            "GT": -24,
            "Query": "5 - 6 * 2 - 8 + 7 - 2 * 8 =   ",
            "Injected CoT": "6 * 2 = 12\n5 - 12 = -7\n-7 - 8 = -15\n-15 + 7 = -9\n2 * 8 = 16\n-9 - 16 =",
            "Response": " -25",
            "Extract-Response": " -25\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 208,
            "GT": 68,
            "Query": "6 + 8 + 1 * 7 + 6 * 9 - 7 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 9 = 54\n6 + 8 = 14\n14 + 6 = 21\n21 + 54 = 75\n75 - 6 =",
            "Response": " 69\n69 - 7 = 62",
            "Extract-Response": " 62\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634"
        },
        {
            "Index": 209,
            "GT": 59,
            "Query": "2 * 2 - 2 + 8 - 7 + 7 * 8 =   ",
            "Injected CoT": "2 * 2 = 4\n4 - 2 = 2\n7 * 8 = 57\n8 - 7 = 1\n2 + 8 = 10\n10 + 1 = 11\n11 + 57 =",
            "Response": " 68",
            "Extract-Response": " 68.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0;\n\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        if(str[i] == '+' || str[i] == '-')\n        {\n            continue;\n        }\n\n        if(str[i] == '*')\n        {\n            continue;\n        }\n\n        if(str[i] == '/')\n        {\n            continue;\n        }\n\n        if(str[i] == '%')\n        {\n            continue;\n        }\n\n        if(str[i] == '^')\n        {\n            continue;\n        }\n\n        if(str[i] == '=')\n        {\n            break;\n        }\n\n        result = result * 10 + (str[i] - '0');\n    }\n\n    printf(\"The answer is %d.\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 211,
            "GT": -11,
            "Query": "2 * 8 - 8 - 3 - 6 * 4 + 8 =   ",
            "Injected CoT": "2 * 9 = 16\n16 - 9 = 9\n9 - 3 = 5\n6 * 4 = 24\n5 - 24 = -19\n-19 + 9 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 216,
            "GT": 16,
            "Query": "9 + 8 - 2 * 2 - 6 + 8 + 1 =   ",
            "Injected CoT": "2 * 2 = 4\n9 + 8 = 17\n17 - 4 = 13\n13 - 6 = 7\n7 + 8 = 15\n15 + 2 =",
            "Response": " 17\n17 + 1 = 18\n\n18\n\n*/",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 222,
            "GT": 17,
            "Query": "8 + 4 + 1 * 7 - 5 + 9 - 6 =   ",
            "Injected CoT": "1 * 7 = 7\n8 + 4 = 12\n12 + 7 = 19\n19 - 5 = 14\n14 + 9 = 22\n22 - 6 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char str[100];\n    int i, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+')\n        {\n            continue;\n        }\n        else if(str[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + (str[i] - '0');\n        }\n    }\n\n    printf(\"%d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 223,
            "GT": -10,
            "Query": "9 - 2 + 2 - 9 + 7 - 8 - 9 =   ",
            "Injected CoT": "10 - 2 = 7\n7 + 2 = 10\n10 - 10 = 0\n0 + 7 = 7\n7 - 8 = -1\n-1 - 10 =",
            "Response": " -11\n-11 + 9 = -2",
            "Extract-Response": " -2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        curr += a;\n        result = max(result, curr);\n        if (curr < 0) {\n            curr = 0;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 224,
            "GT": 118,
            "Query": "1 + 4 * 4 * 7 - 5 + 4 + 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 7 = 113\n1 + 113 = 113\n113 - 5 = 108\n108 + 4 = 113\n113 + 6 =",
            "Response": " 119",
            "Extract-Response": "\n\n119"
        },
        {
            "Index": 226,
            "GT": 22,
            "Query": "1 + 5 + 8 - 2 + 9 + 2 - 1 =   ",
            "Injected CoT": "0 + 5 = 6\n6 + 8 = 14\n14 - 2 = 12\n12 + 9 = 21\n21 + 2 = 23\n23 - 0 =",
            "Response": " 23",
            "Extract-Response": " 23\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum = %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 227,
            "GT": -106,
            "Query": "2 + 3 + 3 - 9 - 5 * 3 * 7 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 7 = 105\n2 + 3 = 5\n5 + 3 = 8\n8 - 9 = 0\n0 - 105 =",
            "Response": " -105",
            "Extract-Response": " -105.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        stack<int> st;\n        int num = 0;\n        char sign = '+';\n        for(int i = 0; i < n; i++) {\n            if(s[i] >= '0') {\n                num = num * 10 + s[i] - '0';\n            }\n            if((!isdigit(s[i]) && s[i] != ' ') || i == n - 1) {\n                if(sign == '-') {\n                    st.push(-num);\n                }\n                else if(sign == '+') {\n                    st.push(num);\n                }\n                else if(sign == '*') {\n                    int temp = st.top();\n                    st.pop();\n                    st.push(temp * num);\n                }\n                else if(sign == '/') {\n                    int temp = st.top();\n                    st.pop();\n                    st.push(temp / num);\n                }\n                sign = s[i];\n                num = 0;\n            }\n        }\n        int res = 0;\n        while(!st.empty()) {\n            res += st.top();\n            st.pop();\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 228,
            "GT": 24,
            "Query": "6 - 8 + 1 - 9 - 2 + 6 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n-8 + 1 = -7\n-7 - 9 = -16\n-16 - 2 = -19\n-19 + 36 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 229,
            "GT": 63,
            "Query": "7 + 5 * 3 * 5 - 2 * 9 - 1 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 5 = 75\n7 + 75 = 82\n2 * 9 = 18\n82 - 18 = 64\n64 - 0 =",
            "Response": " 64",
            "Extract-Response": "\n\n64"
        },
        {
            "Index": 230,
            "GT": 102,
            "Query": "6 * 8 + 8 * 7 - 6 - 5 + 9 =   ",
            "Injected CoT": "6 * 8 = 48\n8 * 7 = 56\n48 + 56 = 104\n104 - 6 = 98\n98 - 5 = 93\n93 + 8 =",
            "Response": " 101",
            "Extract-Response": " 101\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634"
        },
        {
            "Index": 232,
            "GT": 17,
            "Query": "2 - 5 * 1 + 3 + 5 + 3 * 4 =   ",
            "Injected CoT": "5 * 1 = 5\n2 - 5 = -3\n3 * 4 = 13\n-3 + 3 = 0\n0 + 5 = 5\n5 + 13 =",
            "Response": " 18",
            "Extract-Response": "\n\n18."
        },
        {
            "Index": 233,
            "GT": 6,
            "Query": "2 + 9 * 3 - 6 - 3 * 3 - 8 =   ",
            "Injected CoT": "9 * 3 = 27\n2 + 27 = 29\n3 * 3 = 9\n27 - 9 = 18\n6 - 8 = -1\n18 - (-2) =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 235,
            "GT": 200,
            "Query": "9 * 4 * 6 - 3 - 8 - 3 - 2 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 6 = 216\n216 - 3 = 213\n213 - 8 = 205\n205 - 3 = 203\n203 - 2 =",
            "Response": " 201",
            "Extract-Response": "\n<code>201\n</code>\n"
        },
        {
            "Index": 236,
            "GT": -64,
            "Query": "5 - 2 - 5 + 2 - 8 * 8 * 1 =   ",
            "Injected CoT": "8 * 2 = 8\n-8 * 8 = -64\n2 - 5 = -3\n-3 + 2 = -1\n5 - 2 =",
            "Response": " 3\n3 - 1 = 2\n2 + 8 = 10",
            "Extract-Response": " 10\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 238,
            "GT": 73,
            "Query": "8 * 3 * 3 + 1 - 6 + 5 + 1 =   ",
            "Injected CoT": "8 * 3 = 24\n24 * 3 = 73\n73 + 1 = 73\n73 - 6 = 67\n67 + 5 = 73\n73 + 1 =",
            "Response": " 74\n\n74\n\n*/",
            "Extract-Response": "\n\n74"
        },
        {
            "Index": 239,
            "GT": -7,
            "Query": "1 + 5 + 8 * 2 - 8 * 3 - 5 =   ",
            "Injected CoT": "8 * 2 = 16\n8 * 3 = 24\n1 + 6 = 6\n6 + 16 = 22\n22 - 24 = -2\n-2 - 6 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 242,
            "GT": 26,
            "Query": "6 + 6 + 2 + 4 + 1 * 2 * 4 =   ",
            "Injected CoT": "1 * 2 = 2\n2 * 4 = 8\n6 + 6 = 12\n12 + 2 = 14\n14 + 8 = 22\n22 + 4 = 27\n27 + 1 =",
            "Response": " 28\n\n28 is the checksum, which is the sum of the final results of all of the multiplication operations.\n\n*/\n\n// function checksum(input) {\n//   let sum = 0;\n//   let arr = input.split('');\n//   for (let i = 0; i < arr.length; i++) {\n//     let j = i + 1;\n//     if (j === arr.length) {\n//       j = 0;\n//     }\n//     if (arr[i] === arr[j]) {\n//       sum += Number(arr[i]);\n//     }\n//   }\n//   return sum;\n// }\n\n// console.log(checksum('1122')); // 3\n// console.log(checksum('1111')); // 4\n// console.log(checksum('1234')); // 0\n// console.log(checksum('91212129')); // 9\n\n/*\n\n--- Part Two ---\n\nYou notice a progress bar that jumps to 50% completion. Apparently, the door isn't yet satisfied, but it did emit a star as encouragement. The instructions change:\n\nNow, instead of considering the next digit, it wants you to consider the digit halfway around the circular list. That is, if your list contains 10 items, only include a digit in your sum if the digit 10/2 = 5 steps forward matches it. Fortunately, your list has an even number of elements.\n\nFor example:\n\n1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead.\n1221 produces 0, because every comparison is between a 1 and a 2.\n123425 produces 4, because both 2s match each other, but no other digit has a match.\n123123 produces 12.\n12131415 produces 4.\nWhat is the solution to your new captcha?\n\n*/\n\nfunction checksum(input) {\n  let sum = 0;\n  let arr = input.split('');\n  let half = arr.length / 2;\n  for (let i = 0; i < arr.length; i++) {\n    let j = i + half;\n    if (j >= arr.length) {\n      j -= arr.length;\n    }\n    if (arr[i] === arr[j]) {\n      sum += Number(arr[i]);\n    }\n  }\n  return sum;\n}\n\nconsole.log(checksum('1212')); // 6\nconsole.log(checksum('1221')); // 0\nconsole.log(checksum('123425')); // 4\nconsole.log(checksum('123123')); // 12\nconsole.log(checksum('12131415')); // 4",
            "Extract-Response": "\n\n*/"
        },
        {
            "Index": 243,
            "GT": -7,
            "Query": "4 - 4 - 9 + 6 - 2 - 4 + 2 =   ",
            "Injected CoT": "4 - 4 = 0\n0 - 9 = -9\n-9 + 6 = -3\n-3 - 1 = -5\n-5 - 4 = -9\n-9 + 1 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 244,
            "GT": 66,
            "Query": "4 - 8 - 8 + 8 * 5 * 2 - 2 =   ",
            "Injected CoT": "8 * 5 = 40\n40 * 2 = 80\n4 - 8 = -4\n-4 - 8 = -12\n-12 + 80 = 69\n69 - 2 =",
            "Response": " 67",
            "Extract-Response": " 67\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter a string: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '%')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '=')\n        {\n            sign = 1;\n        }\n        else if(input[i] == ' ')\n        {\n            sign = 1;\n        }\n        else\n        {\n            num = 0;\n\n            for(j=i; isdigit(input[j]) && j<len; j++)\n            {\n                num = num * 10 + input[j] - '0';\n            }\n\n            sum = sum + num * sign;\n\n            i = j - 1;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 245,
            "GT": 11,
            "Query": "7 + 7 - 4 + 7 + 5 - 6 - 5 =   ",
            "Injected CoT": "7 + 7 = 14\n14 - 4 = 10\n10 + 7 = 17\n17 + 6 = 22\n22 - 6 = 16\n16 - 6 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 246,
            "GT": 124,
            "Query": "2 + 4 * 5 * 6 + 2 + 2 - 2 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 6 = 120\n1 + 120 = 122\n122 + 1 = 124\n124 - 1 =",
            "Response": " 123\n123 + 2 = 125\n125 + 2 = 127\n127 - 2 = 125\n\n*/",
            "Extract-Response": "\n\n125"
        },
        {
            "Index": 247,
            "GT": -118,
            "Query": "8 - 2 + 2 - 8 * 3 * 5 - 6 =   ",
            "Injected CoT": "3 * 5 = 15\n-8 * 15 = -120\n7 - 2 + 2 - 120 - 6 =",
            "Response": "\n7 - 2 + 2 - 114 =\n7 - 114 = -107",
            "Extract-Response": " -107.\n"
        },
        {
            "Index": 250,
            "GT": 62,
            "Query": "6 - 3 + 2 + 9 + 2 * 4 * 6 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 6 = 48\n6 - 3 = 3\n3 + 2 = 5\n5 + 9 = 13\n13 + 48 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe sum of the digits of the factorial of n.\n\"\"\"\n\ndef extraLongFactorials(n):\n    if n == 1:\n        return 1\n    else:\n        return n * extraLongFactorials(n-1)\n\nprint(extraLongFactorials(25))"
        },
        {
            "Index": 252,
            "GT": 106,
            "Query": "5 * 8 + 6 * 8 + 4 + 2 * 7 =   ",
            "Injected CoT": "5 * 8 = 40\n6 * 8 = 48\n2 * 7 = 13\n40 + 48 = 88\n88 + 4 = 92\n92 + 13 =",
            "Response": " 105\n\n5 * 8 + 6 * 8 + 4 + 2 * 7 = 105",
            "Extract-Response": "\n\n105."
        },
        {
            "Index": 254,
            "GT": -21,
            "Query": "5 - 1 * 7 - 5 * 5 - 2 + 8 =   ",
            "Injected CoT": "1 * 7 = 7\n5 * 5 = 25\n5 - 7 = -2\n-2 - 25 = -27\n-27 - 2 = -29\n-29 + 9 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe number of operations won't exceed 1000.\nThe integers in the form (a, b, c) fit in a 32 bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        int res = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; ++i) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 255,
            "GT": -1,
            "Query": "7 - 3 - 8 + 3 + 8 - 2 * 4 =   ",
            "Injected CoT": "7 - 3 = 4\n4 - 8 = -4\n-4 + 3 = 0\n0 + 8 = 7\n2 * 4 = 8\n7 - 8 = 0\n0 + 8 =",
            "Response": " 8",
            "Extract-Response": " 8.\n\nNote:\nThe division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12.\nEvery operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.\nYou cannot concatenate numbers together. For example, if the input is [1, 2, 3, 4], we cannot write this as 1234.\n\n*/\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> s;\n        for(int i=0;i<tokens.size();i++)\n        {\n            if(tokens[i]==\"+\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(a+b);\n            }\n            else if(tokens[i]==\"-\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(b-a);\n            }\n            else if(tokens[i]==\"*\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(a*b);\n            }\n            else if(tokens[i]==\"/\")\n            {\n                int a=s.top();\n                s.pop();\n                int b=s.top();\n                s.pop();\n                s.push(b/a);\n            }\n            else\n            {\n                s.push(stoi(tokens[i]));\n            }\n        }\n        return s.top();\n    }\n};"
        },
        {
            "Index": 257,
            "GT": -115,
            "Query": "4 - 5 * 3 - 8 - 2 * 8 * 6 =   ",
            "Injected CoT": "5 * 3 = 15\n4 - 15 = -11\n2 * 8 = 16\n16 * 6 = 97\n-11 - 8 = -19\n-19 - 97 =",
            "Response": " -116",
            "Extract-Response": " -116.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 259,
            "GT": 238,
            "Query": "3 * 7 * 2 * 6 * 1 - 7 - 7 =   ",
            "Injected CoT": "3 * 7 = 21\n21 * 2 = 42\n42 * 6 = 252\n252 * 1 = 252\n252 - 7 = 246\n246 - 7 =",
            "Response": " 239",
            "Extract-Response": " 239\n</code>\n"
        },
        {
            "Index": 260,
            "GT": 96,
            "Query": "3 * 3 * 8 + 7 * 4 - 1 * 4 =   ",
            "Injected CoT": "3 * 3 = 9\n9 * 8 = 72\n7 * 4 = 28\n1 * 4 = 4\n72 + 28 = 101\n101 - 4 =",
            "Response": " 97",
            "Extract-Response": " 97\n</code>\n"
        },
        {
            "Index": 262,
            "GT": 19,
            "Query": "1 * 2 * 7 * 1 + 9 - 5 + 1 =   ",
            "Injected CoT": "0 * 2 = 2\n2 * 7 = 14\n14 * 0 = 14\n14 + 9 = 23\n23 - 5 = 18\n18 + 0 =",
            "Response": " 18\n\n18\n\n*/",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 263,
            "GT": 4,
            "Query": "8 * 2 - 5 * 3 - 7 + 9 + 1 =   ",
            "Injected CoT": "8 * 2 = 16\n5 * 2 = 15\n16 - 15 = 1\n1 - 7 = -6\n-6 + 9 = 2\n2 + 1 =",
            "Response": " 3",
            "Extract-Response": " 3.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 264,
            "GT": -1,
            "Query": "6 - 2 * 5 - 3 + 3 + 8 - 5 =   ",
            "Injected CoT": "2 * 5 = 10\n6 - 10 = -4\n-4 - 3 = -7\n-7 + 3 = -4\n-4 + 8 = 3\n3 - 5 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 265,
            "GT": 12,
            "Query": "1 + 1 * 4 * 8 - 7 - 8 - 6 =   ",
            "Injected CoT": "1 * 4 = 4\n4 * 8 = 32\n1 + 32 = 33\n33 - 7 = 26\n26 - 8 = 18\n18 - 5 =",
            "Response": " 13\n\n13 is the answer.",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 266,
            "GT": 12,
            "Query": "2 * 7 + 4 - 9 - 7 + 2 + 8 =   ",
            "Injected CoT": "2 * 7 = 14\n14 + 5 = 18\n18 - 9 = 9\n9 - 7 = 2\n2 + 2 = 5\n5 + 8 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 267,
            "GT": 145,
            "Query": "6 + 3 * 7 * 7 * 1 - 1 - 7 =   ",
            "Injected CoT": "3 * 8 = 21\n21 * 8 = 147\n147 * 1 = 147\n6 + 147 = 153\n153 - 1 = 152\n152 - 8 =",
            "Response": " 144\n144 - 7 = 137\n137 - 7 = 130\n130 - 3 = 127\n127 - 1 = 126\n126 - 7 = 119\n119 - 7 = 112\n112 - 3 = 109\n109 - 1 = 108\n108 - 8 = 100\n100 - 7 = 93\n93 - 7 = 86\n86 - 3 = 83\n83 - 1 = 82\n82 - 8 = 74\n74 - 7 = 67\n67 - 7 = 60\n60 - 3 = 57\n57 - 1 = 56\n56 - 8 = 48\n48 - 7 = 41\n41 - 7 = 34\n34 - 3 = 31\n31 - 1 = 30\n30 - 8 = 22\n22 - 7 = 15\n15 - 7 = 8\n8 - 3 = 5\n5 - 1 = 4\n4 - 8 = -4\n-4 - 7 = -11\n-11 - 7 = -18\n-18 - 3 = -21\n-21 - 1 = -22\n-22 - 8 = -30\n-30 - 7 = -37\n-37 - 7 = -44\n-44 - 3 = -47\n-47 - 1 = -48\n-48 - 8 = -56\n-56 - 7 = -63\n-63 - 7 = -70\n-70 - 3 = -73\n-73 - 1 = -74\n-74 - 8 = -82\n-82 - 7 = -89\n-89 - 7 = -96\n-96 - 3 = -99\n-99 - 1 = -100\n-100 - 8 = -108\n-108 - 7 = -115\n-115 - 7 = -122\n-122 - 3 = -125\n-125 - 1 = -126\n-126 - 8 = -134\n-134 - 7 = -141\n-141 - 7 = -148\n-148 - 3 = -151\n-151 - 1 = -152\n-152 - 8 = -160\n-160 - 7 = -167\n-167 - 7 = -174\n-174 - 3 = -177\n-177 - 1 = -178\n-178 - 8 = -186\n-186 - 7 = -193\n-193 - 7 = -200\n-200 - 3 = -203\n-203 - 1 = -204\n-204 - 8 = -212\n-212 - 7 = -219\n-219 - 7 = -226\n-226 - 3 = -229\n-229 - 1 = -230\n-230 - 8 = -238\n-238 - 7 = -245\n-245 - 7 = -252\n-252 - 3 = -255\n-255 - 1 = -256\n-256 - 8 = -264\n-264 - 7 = -271\n-271 - 7 = -278\n-278 - 3 = -281\n-281 - 1 = -282\n-282 - 8 = -290\n-290 - 7 = -297\n-297 - 7 = -304\n-304 - 3 = -307\n-307 - 1 = -308\n-308 - 8 = -316\n-316 - 7 = -323\n-323 - 7 = -330\n-330 - 3 = -333\n-333 - 1 = -334\n-334 - 8 = -342\n-342 - 7 = -349\n-349 - 7 = -356\n-356 - 3 = -359\n-359 - 1 = -360\n-360 - 8 = -368\n-368 - 7 = -375\n-375 - 7 = -382\n-382 - 3 = -385\n-385 - 1 = -386\n-386 - 8 = -394\n-394 - 7 = -401\n-401 - 7 = -408\n-408 - 3 = -411\n-411 - 1 = -412\n-412 - 8 = -420\n-420 - 7 = -427\n-427 - 7 = -434\n-434 - 3 = -437\n-437 - 1 = -438\n-438 - 8 = -446\n-446 - 7 = -453\n-453 - 7 = -460\n-460 - 3 = -463\n-463 - 1 = -464\n-464 - 8 = -472\n-472 - 7 = -479\n-479 - 7 = -486\n-486 - 3 = -489\n-489 - 1 = -490\n-490 - 8 = -498\n-498 - 7 = -505\n-505 - 7 = -512\n-512 - 3 = -515\n-515 - 1 = -516\n-516 - 8 = -524\n-524 - 7 = -531\n-531 - 7 = -538\n-538 - 3 = -541\n-541 - 1 = -542\n-542 - 8 = -550\n-550 - 7 = -557\n-557 - 7 = -564\n-564 - 3 = -567\n-567 - 1 = -568\n-568 - 8 = -576\n-576 - 7 = -583\n-583 - 7 = -590\n-590 - 3 = -593\n-593 - 1 = -594\n-594 - 8 = -602\n-602 - 7 = -609\n-609 - 7 = -616\n-616 - 3 = -619\n-619 - 1 = -620\n-620 - 8 = -628\n-628 - 7 = -635\n-635 - 7 = -642\n-642 - 3 = -645\n-645 - 1 = -646\n-646 - 8 = -654\n-654 - 7 = -661\n-661 - 7 = -668\n-668 - 3 = -671\n-671 - 1 = -672\n-672 - 8 = -680\n-680 - 7 = -687\n-687 - 7 = -694\n-694 - 3 = -697\n-697 - 1 = -698\n-698 - 8 = -706\n-706 - 7 = -713\n-713 - 7 = -720\n-720 - 3 = -723\n-723 - 1 = -724\n-724 - 8 = -732\n-732 - 7 = -739\n-739 - 7 = -746\n-746 - 3 = -749\n-749 - 1 = -750\n-750 - 8 = -758\n-758 - 7 = -765\n-765 - 7 = -772\n-772 - 3 = -775\n-775 - 1 = -776\n-776 - 8 = -784\n-784 - 7 = -791\n-791 - 7 = -798\n-798 - 3 = -801\n-801 - 1 = -802\n-802 - 8 = -810\n-810 - 7 = -817\n-817 - 7 = -824\n-824 - 3 = -827\n-827 - 1 = -828\n-828 - 8 = -836\n-836 - 7 = -843\n-843 - 7 = -850\n-850 - 3 = -853\n-853 - 1 = -854\n-854 - 8 = -862\n-862 - 7 = -869\n-869 - 7 = -876\n-876 - 3 = -879\n-879 - 1 = -880\n-880 - 8 = -888\n-888 - 7 = -895\n-895 - 7 = -902\n-902 - 3 = -905\n-905 - 1 = -906\n-906 - 8 = -914\n-914 - 7 = -921\n-921 - 7 = -928\n-928 - 3 = -931\n-931 - 1 = -932\n-932 - 8 = -940\n-940 - 7 = -947\n-947 - 7 = -954\n-954 - 3 = -957\n-957 - 1 = -958\n-958 - 8 = -966\n-966 - 7 = -973\n-973 - 7 = -980\n-980 - 3 = -983\n-983 - 1 = -984\n-984 - 8 = -992\n-992 - 7 = -999\n-999 - 7 = -1006\n-1006 - 3 = -1009\n-1009 - 1 = -1010\n-1010 - 8 = -1018\n-1018 - 7 = -1025\n-1025 - 7 = -1032\n-1032 - 3 = -1035\n-1035 - 1 = -1036\n-1036 - 8 = -1044\n-1044 - 7 = -1051\n-1051 - 7 = -1058\n-1058 - 3 = -1061\n-1061 - 1 = -1062\n-1062 - 8 = -1070\n-1070 - 7 = -1077\n-1077 - 7 = -1084\n-1084 - 3 = -1087\n-1087 - 1 = -1088\n-1088 - 8 = -1096\n-1096 - 7 = -1103\n-1103 - 7 = -1110\n-1110 - 3 =",
            "Extract-Response": " -1113"
        },
        {
            "Index": 268,
            "GT": 41,
            "Query": "9 - 9 + 1 * 8 * 4 + 5 + 4 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 4 = 32\n9 - 9 = 0\n0 + 32 = 32\n32 + 5 = 38\n38 + 4 =",
            "Response": " 42\n\n42\n\n*/",
            "Extract-Response": "\n\n42"
        },
        {
            "Index": 270,
            "GT": 53,
            "Query": "8 + 3 * 9 + 4 * 1 + 2 * 7 =   ",
            "Injected CoT": "3 * 9 = 27\n4 * 1 = 4\n2 * 7 = 14\n8 + 27 = 35\n35 + 4 = 38\n38 + 14 =",
            "Response": " 52\n\n52 is the checksum, which indicates that the card was correctly entered.\n*/\n\n#include <stdio.h>\n#include <cs50.h>\n\nint main(void)\n{\n    long long cc_number;\n    int digit_count = 0;\n    int digit_sum = 0;\n    int digit_sum_2 = 0;\n    int digit_sum_3 = 0;\n    int digit_sum_4 = 0;\n    int digit_sum_5 = 0;\n    int digit_sum_6 = 0;\n    int digit_sum_7 = 0;\n    int digit_sum_8 = 0;\n    int digit_sum_9 = 0;\n    int digit_sum_10 = 0;\n    int digit_sum_11 = 0;\n    int digit_sum_12 = 0;\n    int digit_sum_13 = 0;\n    int digit_sum_14 = 0;\n    int digit_sum_15 = 0;\n    int digit_sum_16 = 0;\n    int digit_sum_17 = 0;\n    int digit_sum_18 = 0;\n    int digit_sum_19 = 0;\n    int digit_sum_20 = 0;\n    int digit_sum_21 = 0;\n    int digit_sum_22 = 0;\n    int digit_sum_23 = 0;\n    int digit_sum_24 = 0;\n    int digit_sum_25 = 0;\n    int digit_sum_26 = 0;\n    int digit_sum_27 = 0;\n    int digit_sum_28 = 0;\n    int digit_sum_29 = 0;\n    int digit_sum_30 = 0;\n    int digit_sum_31 = 0;\n    int digit_sum_32 = 0;\n    int digit_sum_33 = 0;\n    int digit_sum_34 = 0;\n    int digit_sum_35 = 0;\n    int digit_sum_36 = 0;\n    int digit_sum_37 = 0;\n    int digit_sum_38 = 0;\n    int digit_sum_39 = 0;\n    int digit_sum_40 = 0;\n    int digit_sum_41 = 0;\n    int digit_sum_42 = 0;\n    int digit_sum_43 = 0;\n    int digit_sum_44 = 0;\n    int digit_sum_45 = 0;\n    int digit_sum_46 = 0;\n    int digit_sum_47 = 0;\n    int digit_sum_48 = 0;\n    int digit_sum_49 = 0;\n    int digit_sum_50 = 0;\n    int digit_sum_51 = 0;\n    int digit_sum_52 = 0;\n    int digit_sum_53 = 0;\n    int digit_sum_54 = 0;\n    int digit_sum_55 = 0;\n    int digit_sum_56 = 0;\n    int digit_sum_57 = 0;\n    int digit_sum_58 = 0;\n    int digit_sum_59 = 0;\n    int digit_sum_60 = 0;\n    int digit_sum_61 = 0;\n    int digit_sum_62 = 0;\n    int digit_sum_63 = 0;\n    int digit_sum_64 = 0;\n    int digit_sum_65 = 0;\n    int digit_sum_66 = 0;\n    int digit_sum_67 = 0;\n    int digit_sum_68 = 0;\n    int digit_sum_69 = 0;\n    int digit_sum_70 = 0;\n    int digit_sum_71 = 0;\n    int digit_sum_72 = 0;\n    int digit_sum_73 = 0;\n    int digit_sum_74 = 0;\n    int digit_sum_75 = 0;\n    int digit_sum_76 = 0;\n    int digit_sum_77 = 0;\n    int digit_sum_78 = 0;\n    int digit_sum_79 = 0;\n    int digit_sum_80 = 0;\n    int digit_sum_81 = 0;\n    int digit_sum_82 = 0;\n    int digit_sum_83 = 0;\n    int digit_sum_84 = 0;\n    int digit_sum_85 = 0;\n    int digit_sum_86 = 0;\n    int digit_sum_87 = 0;\n    int digit_sum_88 = 0;\n    int digit_sum_89 = 0;\n    int digit_sum_90 = 0;\n    int digit_sum_91 = 0;\n    int digit_sum_92 = 0;\n    int digit_sum_93 = 0;\n    int digit_sum_94 = 0;\n    int digit_sum_95 = 0;\n    int digit_sum_96 = 0;\n    int digit_sum_97 = 0;\n    int digit_sum_98 = 0;\n    int digit_sum_99 = 0;\n    int digit_sum_100 = 0;\n    int digit_sum_101 = 0;\n    int digit_sum_102 = 0;\n    int digit_sum_103 = 0;\n    int digit_sum_104 = 0;\n    int digit_sum_105 = 0;\n    int digit_sum_106 = 0;\n    int digit_sum_107 = 0;\n    int digit_sum_108 = 0;\n    int digit_sum_109 = 0;\n    int digit_sum_110 = 0;\n    int digit_sum_111 = 0;\n    int digit_sum_112 = 0;\n    int digit_sum_113 = 0;\n    int digit_sum_114 = 0;\n    int digit_sum_115 = 0;\n    int digit_sum_116 = 0;\n    int digit_sum_117 = 0;\n    int digit_sum_118 = 0;\n    int digit_sum_119 = 0;\n    int digit_sum_120 = 0;\n    int digit_sum_121 = 0;\n    int digit_sum_122 = 0;\n    int digit_sum_123 = 0;\n    int digit_sum_124 = 0;\n    int digit_sum_125 = 0;\n    int digit_sum_126 = 0;\n    int digit_sum_127 = 0;\n    int digit_sum_128 = 0;\n    int digit_sum_129 = 0;\n    int digit_sum_130 = 0;\n    int digit_sum_131 = 0;\n    int digit_sum_132 = 0;\n    int digit_sum_133 = 0;\n    int digit_sum_134 = 0;\n    int digit_sum_135 = 0;\n    int digit_sum_136 = 0;\n    int digit_sum_137 = 0;\n    int digit_sum_138 = 0;\n    int digit_sum_139 = 0;\n    int digit_sum_140 = 0;\n    int digit_sum_141 = 0;\n    int digit_sum_142 = 0;\n    int digit_sum_143 = 0;\n    int digit_sum_144 = 0;\n    int digit_sum_145 = 0;\n    int digit_sum_146 = 0;\n    int digit_sum_147 = 0;\n    int digit_sum_148 = 0;\n    int digit_sum_149 = 0;\n    int digit_sum_150 = 0;\n    int digit_sum_151 = 0;\n    int digit_sum_152 = 0;\n    int digit_sum_153 = 0;\n    int digit_sum_154 = 0;\n    int digit_sum_155 = 0;\n    int digit_sum_156 = 0;\n    int digit_sum_157 = 0;\n    int digit_sum_158 = 0;\n    int digit_sum_159 = 0;\n    int digit_sum_160 = 0;\n    int digit_sum_161 = 0;\n    int digit_sum_162 = 0;\n    int digit_sum_163 = 0;\n    int digit_sum_164 = 0;\n    int digit_sum_165 = 0;\n    int digit_sum_166 = 0;\n    int digit_sum_167 = 0;\n    int digit_sum_168 = 0;\n    int digit_sum_169 = 0;\n    int digit_sum_170 = 0;\n    int digit_sum_171 = 0;\n    int digit_sum_172 = 0;\n    int digit_sum_173 = 0;\n    int digit_sum_174 = 0;\n    int digit_sum_175 = 0;\n    int digit_sum_176 = 0;\n",
            "Extract-Response": "\n\ndo\n{\n    printf(\"Number: \");\n    cc_number = get_long_long();\n}\nwhile (cc_number < 0);\n\nwhile (cc_number > 0)\n{\n    digit_sum = digit_sum + (cc_number % 10);\n    cc_number = cc_number / 10;\n    digit_count++;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_2 = digit_sum_2 + ((cc_number % 100) / 10);\n    cc_number = cc_number / 100;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_3 = digit_sum_3 + ((cc_number % 1000) / 100);\n    cc_number = cc_number / 1000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_4 = digit_sum_4 + ((cc_number % 10000) / 1000);\n    cc_number = cc_number / 10000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_5 = digit_sum_5 + ((cc_number % 100000) / 10000);\n    cc_number = cc_number / 100000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_6 = digit_sum_6 + ((cc_number % 1000000) / 100000);\n    cc_number = cc_number / 1000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_7 = digit_sum_7 + ((cc_number % 10000000) / 1000000);\n    cc_number = cc_number / 10000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_8 = digit_sum_8 + ((cc_number % 100000000) / 10000000);\n    cc_number = cc_number / 100000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_9 = digit_sum_9 + ((cc_number % 1000000000) / 100000000);\n    cc_number = cc_number / 1000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_10 = digit_sum_10 + ((cc_number % 10000000000) / 1000000000);\n    cc_number = cc_number / 10000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_11 = digit_sum_11 + ((cc_number % 100000000000) / 10000000000);\n    cc_number = cc_number / 100000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_12 = digit_sum_12 + ((cc_number % 1000000000000) / 100000000000);\n    cc_number = cc_number / 1000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_13 = digit_sum_13 + ((cc_number % 10000000000000) / 1000000000000);\n    cc_number = cc_number / 10000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_14 = digit_sum_14 + ((cc_number % 100000000000000) / 10000000000000);\n    cc_number = cc_number / 100000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_15 = digit_sum_15 + ((cc_number % 1000000000000000) / 100000000000000);\n    cc_number = cc_number / 1000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_16 = digit_sum_16 + ((cc_number % 10000000000000000) / 1000000000000000);\n    cc_number = cc_number / 10000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_17 = digit_sum_17 + ((cc_number % 100000000000000000) / 10000000000000000);\n    cc_number = cc_number / 100000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_18 = digit_sum_18 + ((cc_number % 1000000000000000000) / 100000000000000000);\n    cc_number = cc_number / 1000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_19 = digit_sum_19 + ((cc_number % 10000000000000000000) / 1000000000000000000);\n    cc_number = cc_number / 10000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_20 = digit_sum_20 + ((cc_number % 100000000000000000000) / 10000000000000000000);\n    cc_number = cc_number / 100000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_21 = digit_sum_21 + ((cc_number % 1000000000000000000000) / 100000000000000000000);\n    cc_number = cc_number / 1000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_22 = digit_sum_22 + ((cc_number % 10000000000000000000000) / 1000000000000000000000);\n    cc_number = cc_number / 10000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_23 = digit_sum_23 + ((cc_number % 100000000000000000000000) / 10000000000000000000000);\n    cc_number = cc_number / 100000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_24 = digit_sum_24 + ((cc_number % 1000000000000000000000000) / 100000000000000000000000);\n    cc_number = cc_number / 1000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_25 = digit_sum_25 + ((cc_number % 10000000000000000000000000) / 1000000000000000000000000);\n    cc_number = cc_number / 10000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_26 = digit_sum_26 + ((cc_number % 100000000000000000000000000) / 10000000000000000000000000);\n    cc_number = cc_number / 100000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_27 = digit_sum_27 + ((cc_number % 1000000000000000000000000000) / 100000000000000000000000000);\n    cc_number = cc_number / 1000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_28 = digit_sum_28 + ((cc_number % 10000000000000000000000000000) / 1000000000000000000000000000);\n    cc_number = cc_number / 10000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_29 = digit_sum_29 + ((cc_number % 100000000000000000000000000000) / 10000000000000000000000000000);\n    cc_number = cc_number / 100000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_30 = digit_sum_30 + ((cc_number % 1000000000000000000000000000000) / 100000000000000000000000000000);\n    cc_number = cc_number / 1000000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_31 = digit_sum_31 + ((cc_number % 10000000000000000000000000000000) / 1000000000000000000000000000000);\n    cc_number = cc_number / 10000000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_32 = digit_sum_32 + ((cc_number % 100000000000000000000000000000000) / 10000000000000000000000000000000);\n    cc_number = cc_number / 100000000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_33 = digit_sum_33 + ((cc_number % 1000000000000000000000000000000000) / 100000000000000000000000000000000);\n    cc_number = cc_number / 1000000000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_34 = digit_sum_34 + ((cc_number % 10000000000000000000000000000000000) / 1000000000000000000000000000000000);\n    cc_number = cc_number / 10000000000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_35 = digit_sum_35 + ((cc_number % 100000000000000000000000000000000000) / 10000000000000000000000000000000000);\n    cc_number = cc_number / 100000000000000000000000000000000000;\n}\n\nwhile (cc_number > 0)\n{\n    digit_sum_36 = digit_sum_"
        },
        {
            "Index": 271,
            "GT": 29,
            "Query": "9 * 4 + 1 - 9 - 8 + 1 * 9 =   ",
            "Injected CoT": "9 * 4 = 36\n36 + 1 = 37\n37 - 9 = 28\n28 - 8 = 19\n1 * 9 = 9\n19 + 9 =",
            "Response": " 28",
            "Extract-Response": "\n\n28."
        },
        {
            "Index": 272,
            "GT": -58,
            "Query": "8 - 6 - 2 * 6 - 8 - 5 * 8 =   ",
            "Injected CoT": "2 * 6 = 12\n7 - 6 - 12 - 7 - 5 * 7 =",
            "Response": " \n7 - 6 - 12 - 7 - 35 = \n-35",
            "Extract-Response": "\n-35"
        },
        {
            "Index": 274,
            "GT": 17,
            "Query": "3 + 4 * 8 - 3 * 2 - 5 - 7 =   ",
            "Injected CoT": "4 * 8 = 32\n3 + 32 = 35\n3 * 2 = 6\n35 - 6 = 29\n29 - 5 = 23\n23 - 7 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 275,
            "GT": -43,
            "Query": "3 * 2 - 6 - 4 - 7 - 4 * 8 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 6 = 0\n0 - 4 = -4\n-4 - 7 = -12\n4 * 8 = 32\n-12 - 32 =",
            "Response": " -44",
            "Extract-Response": " -44.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer arr\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 arr.length \u2264 10,\n-100 \u2264 arr[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperations(arr):\n    # your code here\n    return sum(arr) - min(arr) - max(arr)"
        },
        {
            "Index": 276,
            "GT": 24,
            "Query": "3 + 2 - 4 * 1 - 1 + 4 * 6 =   ",
            "Injected CoT": "3 + 2 = 5\n4 * 1 = 4\n5 - 4 = 1\n1 - 1 = -1\n4 * 6 = 24\n-1 + 24 =",
            "Response": " 23",
            "Extract-Response": "\n<code>1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 = 276\n</code>\n"
        },
        {
            "Index": 277,
            "GT": -16,
            "Query": "6 - 2 * 6 - 6 - 4 * 2 + 4 =   ",
            "Injected CoT": "2 * 6 = 12\n6 - 12 = -6\n-6 - 6 = -12\n5 * 2 = 8\n-12 + 8 = -4\n-4 + 5 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <functional>\n#include <bitset>\n#include <climits>\n#include <stack>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int cur = 0;\n    int ans = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * cur;\n            cur = 0;\n            sign = -1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    ans += sign * cur;\n    cout << ans << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 278,
            "GT": -11,
            "Query": "2 + 1 * 8 * 1 + 7 - 7 * 4 =   ",
            "Injected CoT": "1 * 8 = 8\n2 + 8 = 10\n7 * 4 = 29\n10 + 7 = 17\n17 - 29 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nNote:\n\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            ans = max(ans, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 279,
            "GT": -36,
            "Query": "3 - 9 - 7 - 7 + 5 - 7 * 3 =   ",
            "Injected CoT": "-7 * 3 = -21\n3 - 9 = -6\n-6 - 7 = -13\n-13 - 7 = -20\n-20 + 5 = -15\n-15 - 20 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char operator;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            operator = input[i];\n            break;\n        }\n    }\n\n    num1 = atoi(input);\n    num2 = atoi(&input[i+1]);\n\n    switch(operator)\n    {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            result = num1 / num2;\n            break;\n        default:\n            printf(\"Invalid operator\");\n            break;\n    }\n\n    printf(\"%d %c %d = %d\", num1, operator, num2, result);\n\n    return 0;\n}"
        },
        {
            "Index": 281,
            "GT": 250,
            "Query": "3 * 6 - 5 + 5 * 8 * 6 - 3 =   ",
            "Injected CoT": "3 * 6 = 18\n5 * 8 = 40\n40 * 6 = 240\n18 - 5 = 13\n240 + 13 = 252\n252 - 3 =",
            "Response": " 249",
            "Extract-Response": " 249\n</code>\n"
        },
        {
            "Index": 283,
            "GT": 81,
            "Query": "3 + 4 + 9 * 7 + 1 + 2 + 8 =   ",
            "Injected CoT": "3 + 4 = 7\n9 * 7 = 63\n7 + 1 = 8\n8 + 2 = 10\n63 + 10 = 74\n74 + 7 =",
            "Response": " 81",
            "Extract-Response": "\n<code>81 % 10 = 1\n</code>\n"
        },
        {
            "Index": 284,
            "GT": -17,
            "Query": "1 - 4 * 2 - 9 - 1 - 9 + 9 =   ",
            "Injected CoT": "4 * 2 = 8\n1 - 8 = -7\n-7 - 9 = -16\n-16 - 1 = -17\n-17 - 9 = -27\n-27 + 9 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 285,
            "GT": -115,
            "Query": "4 * 3 + 1 - 2 - 7 * 9 * 2 =   ",
            "Injected CoT": "4 * 3 = 12\n12 + 1 = 13\n13 - 2 = 10\n7 * 9 = 63\n63 * 2 = 126\n10 - 126 =",
            "Response": " -116",
            "Extract-Response": " -116.\n\nNote:\n\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 286,
            "GT": 28,
            "Query": "5 + 9 + 3 - 3 + 7 + 8 - 1 =   ",
            "Injected CoT": "5 + 9 = 14\n14 + 3 = 17\n17 - 3 = 14\n14 + 7 = 21\n21 + 8 = 29\n29 - 2 =",
            "Response": " 27",
            "Extract-Response": " 27\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 288,
            "GT": 93,
            "Query": "8 * 9 * 1 + 3 * 7 - 9 + 9 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 1 = 72\n3 * 7 = 21\n72 + 21 = 93\n93 - 9 = 85\n85 + 9 =",
            "Response": " 94",
            "Extract-Response": " 94\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, sum = 0;\n    int num[MAX_SIZE];\n\n    printf(\"Enter a string: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0, j = 0; i < len; i++)\n    {\n        if(isdigit(input[i]))\n        {\n            num[j] = input[i] - '0';\n            j++;\n        }\n        else if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            if(input[i] == '+')\n            {\n                sum = sum + num[j - 1];\n            }\n            else if(input[i] == '-')\n            {\n                sum = sum - num[j - 1];\n            }\n            else if(input[i] == '*')\n            {\n                sum = sum * num[j - 1];\n            }\n            else if(input[i] == '/')\n            {\n                sum = sum / num[j - 1];\n            }\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 290,
            "GT": -4,
            "Query": "3 - 7 - 6 - 2 + 8 - 8 + 8 =   ",
            "Injected CoT": "-8 - 6 = -13\n-13 - 2 = -15\n-15 + 8 = -8\n-8 - 8 = -15\n-15 + 8 = -8\n-8 + 8 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 291,
            "GT": 68,
            "Query": "2 + 8 + 3 + 7 * 9 - 1 - 7 =   ",
            "Injected CoT": "7 * 9 = 63\n2 + 8 = 10\n10 + 3 = 12\n63 - 1 = 62\n62 - 7 = 55\n12 + 55 =",
            "Response": " 67",
            "Extract-Response": " 67\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 292,
            "GT": 2,
            "Query": "6 * 1 * 2 - 5 + 5 - 2 - 8 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 2 = 12\n12 - 5 = 7\n7 + 5 = 12\n12 - 2 = 9\n9 - 8 =",
            "Response": " 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 293,
            "GT": -1,
            "Query": "4 * 9 + 3 - 6 * 9 + 7 * 2 =   ",
            "Injected CoT": "4 * 9 = 36\n6 * 9 = 54\n36 + 3 = 39\n54 + 7 = 61\n61 * 2 = 122\n39 - 54 = -14\n-14 + 122 =",
            "Response": " 108",
            "Extract-Response": " 108\n</code>\n"
        },
        {
            "Index": 294,
            "GT": 10,
            "Query": "9 - 6 + 1 * 1 - 4 + 1 + 9 =   ",
            "Injected CoT": "2 * 2 = 2\n9 - 6 = 3\n3 + 2 = 4\n4 - 4 = 0\n0 + 2 = 2\n2 + 9 =",
            "Response": " 11\n11 + 1 = 12\n12 - 1 = 11\n11 + 1 = 12\n12 * 1 = 12\n12 - 4 = 8\n8 + 1 = 9\n9 + 9 = 18\n\n18\n\n*/",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 295,
            "GT": -71,
            "Query": "2 * 6 - 2 + 6 - 9 * 9 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n12 - 2 = 10\n10 + 6 = 16\n9 * 9 = 81\n16 - 81 = -66\n-66 - 6 =",
            "Response": " -72",
            "Extract-Response": " -72.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 298,
            "GT": 14,
            "Query": "7 * 7 + 1 + 3 - 5 * 8 + 1 =   ",
            "Injected CoT": "7 * 7 = 49\n49 + 1 = 50\n50 + 3 = 53\n5 * 8 = 40\n53 - 40 = 12\n12 + 1 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 299,
            "GT": 33600,
            "Query": "4 * 2 * 4 * 7 * 6 * 5 * 5 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 4 = 32\n32 * 7 = 224\n224 * 6 = 1344\n1344 * 6 = 6720\n6720 * 6 =",
            "Response": " 40320\n40320 * 5 = 201600\n201600 * 5 = 1008000\n1008000 * 5 = 5040000\n\n5040000",
            "Extract-Response": " 5040000"
        },
        {
            "Index": 300,
            "GT": 23,
            "Query": "7 + 8 * 4 - 9 - 9 + 6 - 4 =   ",
            "Injected CoT": "8 * 4 = 32\n7 + 32 = 39\n39 - 9 = 30\n30 - 9 = 21\n21 + 6 = 28\n28 - 4 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 301,
            "GT": 44,
            "Query": "5 + 5 * 7 - 3 - 3 + 7 + 3 =   ",
            "Injected CoT": "5 * 7 = 35\n5 + 35 = 40\n40 - 2 = 37\n37 - 2 = 34\n34 + 7 = 41\n41 + 2 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 302,
            "GT": 45,
            "Query": "2 + 7 * 6 + 6 - 2 + 6 - 9 =   ",
            "Injected CoT": "7 * 6 = 42\n2 + 42 = 44\n44 + 6 = 50\n50 - 2 = 48\n48 + 6 = 53\n53 - 9 =",
            "Response": " 44",
            "Extract-Response": " 44\n</code>\n"
        },
        {
            "Index": 303,
            "GT": 17,
            "Query": "5 - 5 + 9 + 4 - 2 + 7 - 1 =   ",
            "Injected CoT": "5 - 5 = 0\n0 + 9 = 9\n9 + 4 = 13\n13 - 2 = 11\n11 + 7 = 17\n17 - 1 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 304,
            "GT": 953,
            "Query": "3 * 5 * 9 * 7 * 1 + 9 - 1 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 9 = 135\n135 * 7 = 945\n945 * 1 = 945\n945 + 9 = 953\n953 - 1 =",
            "Response": " 952\n\n3 * 5 * 9 * 7 * 1 + 9 - 1 = 952",
            "Extract-Response": " 952\n\n3 * 5 * 9 * 7 * 1 + 9 - 1 = 952\nThe answer is 952"
        },
        {
            "Index": 305,
            "GT": -212,
            "Query": "9 * 5 * 8 - 7 * 9 * 9 - 5 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 8 = 360\n7 * 9 = 63\n63 * 9 = 567\n360 - 567 = -208\n-208 - 5 =",
            "Response": " -213",
            "Extract-Response": " -213.\n\nNote:\n\nThe length of given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 306,
            "GT": 42,
            "Query": "7 + 8 - 5 + 2 + 5 * 3 * 2 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 2 = 30\n7 + 8 = 15\n15 - 5 = 10\n10 + 2 = 13\n13 + 30 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int num = 0;\n    int sign = 1;\n\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i]=='+')\n        {\n            result = result + num;\n            num = 0;\n            sign = 1;\n        }\n        else if(str[i]=='-')\n        {\n            result = result + num;\n            num = 0;\n            sign = -1;\n        }\n        else if(isdigit(str[i]))\n        {\n            num = (num * 10) + (str[i] - '0');\n        }\n        else if(str[i]=='*')\n        {\n            result = result + num;\n            num = 0;\n            sign = 1;\n        }\n        else if(str[i]=='/')\n        {\n            result = result + num;\n            num = 0;\n            sign = -1;\n        }\n    }\n\n    result = result + num;\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 307,
            "GT": 4,
            "Query": "2 * 7 * 2 - 5 - 9 - 9 - 1 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 2 = 28\n28 - 4 = 23\n23 - 9 = 14\n14 - 9 = 4\n4 - 1 =",
            "Response": " 3",
            "Extract-Response": "\n\n3"
        },
        {
            "Index": 309,
            "GT": 9,
            "Query": "5 + 5 - 3 + 1 + 5 - 9 + 5 =   ",
            "Injected CoT": "5 + 5 = 10\n10 - 3 = 7\n7 + 1 = 8\n8 + 5 = 13\n13 - 9 = 3\n3 + 5 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    int result = 0;\n    int sign = 1;\n    int i = 0;\n    while (i < s.size())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '+')\n        {\n            sign = 1;\n            i++;\n            continue;\n        }\n        if (s[i] == '-')\n        {\n            sign = -1;\n            i++;\n            continue;\n        }\n        int num = 0;\n        while (i < s.size() && s[i] >= '0' && s[i] <= '9')\n        {\n            num = num * 10 + s[i] - '0';\n            i++;\n        }\n        result += sign * num;\n    }\n    cout << result << endl;\n    return 0;\n}"
        },
        {
            "Index": 310,
            "GT": -22,
            "Query": "5 - 7 * 4 + 1 - 8 - 1 + 9 =   ",
            "Injected CoT": "-7 * 4 = -28\n5 - (-28) = 33\n33 + 1 = 34\n34 - 8 = 26\n26 - 1 = 26\n26 + 9 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int sign = 1;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += sign * a;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 312,
            "GT": 21,
            "Query": "1 + 9 - 6 + 8 + 5 + 9 - 5 =   ",
            "Injected CoT": "1 + 9 = 10\n10 - 6 = 4\n4 + 8 = 12\n12 + 5 = 17\n17 + 9 = 27\n27 - 5 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum of all integers = %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 315,
            "GT": -286,
            "Query": "2 - 9 * 4 * 8 - 3 - 4 + 7 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 8 = 288\n2 - 288 = -286\n-286 - 3 = -289\n-289 - 4 = -293\n-293 + 6 =",
            "Response": " -287",
            "Extract-Response": " -287.\n\nNote:\nDo not use the eval built-in library function.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 316,
            "GT": -2,
            "Query": "6 + 8 * 3 - 4 - 7 * 5 + 7 =   ",
            "Injected CoT": "8 * 3 = 23\n6 + 23 = 30\n7 * 5 = 35\n4 - 35 = -31\n-31 + 7 = -24\n30 - 23 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between [1, 10000].\nEach element of the array will be an integer between [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 320,
            "GT": 8,
            "Query": "3 + 1 + 9 - 6 - 1 - 7 + 9 =   ",
            "Injected CoT": "3 + 1 = 4\n4 + 9 = 13\n13 - 6 = 7\n7 - 1 = 6\n6 - 7 = -2\n-2 + 9 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 321,
            "GT": -40,
            "Query": "3 + 2 - 5 - 3 * 5 - 5 * 5 =   ",
            "Injected CoT": "3 + 2 = 5\n5 - 5 = 0\n3 * 5 = 15\n5 * 5 = 25\n15 + 25 = 41\n0 - 41 =",
            "Response": " -41",
            "Extract-Response": " -41.\n\nNote:\n\nThe input numbers are in the range [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 322,
            "GT": 6,
            "Query": "5 - 9 - 1 + 3 * 4 - 2 + 1 =   ",
            "Injected CoT": "3 * 4 = 12\n-9 + 12 = 3\n4 - 1 = 4\n4 + 3 = 7\n7 - 2 = 4\n4 + 1 =",
            "Response": " 5\n5 + 4 = 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int cur = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * cur;\n            cur = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n        } else if (s[i] == '*') {\n            int j = i + 1;\n            while (j < n && s[j] >= '0' && s[j] <= '9') {\n                ++j;\n            }\n            int num = stoi(s.substr(i + 1, j - i - 1));\n            cur *= num;\n            i = j - 1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    result += sign * cur;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 323,
            "GT": 382,
            "Query": "9 - 9 + 4 + 3 * 9 * 2 * 7 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 2 = 54\n54 * 7 = 378\n9 - 9 = 0\n0 + 5 = 5\n5 + 378 =",
            "Response": " 383",
            "Extract-Response": " 383\n</code>\n"
        },
        {
            "Index": 325,
            "GT": 24,
            "Query": "5 + 5 * 3 + 9 * 1 - 8 + 3 =   ",
            "Injected CoT": "5 * 4 = 15\n9 * 1 = 9\n5 + 15 = 20\n20 + 9 = 29\n29 - 8 = 21\n21 + 4 =",
            "Response": " 25\n25 + 3 = 28",
            "Extract-Response": " 28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int multiplier = 1;\n\n    for (size_t i = s.size() - 1; i < s.size(); --i) {\n        if (s[i] == '+') {\n            multiplier = 1;\n        } else if (s[i] == '-') {\n            multiplier = -1;\n        } else {\n            result += multiplier * (s[i] - '0');\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 326,
            "GT": 53,
            "Query": "4 + 8 - 6 - 9 + 7 * 8 * 1 =   ",
            "Injected CoT": "7 * 8 = 56\n4 + 8 = 12\n12 - 6 = 6\n6 - 9 = -3\n-3 + 56 = 53\n53 * 0 =",
            "Response": " 0",
            "Extract-Response": " 0\n</code>\n"
        },
        {
            "Index": 327,
            "GT": 25,
            "Query": "2 * 5 + 1 * 1 + 4 + 8 + 2 =   ",
            "Injected CoT": "3 * 5 = 10\n1 * 1 = 1\n10 + 1 = 11\n11 + 4 = 15\n15 + 8 = 23\n23 + 3 =",
            "Response": " 26\n26 + 2 = 28\n\n28 is the checksum for the number 123456789.\n\nWhat is the checksum for the number 6792875?\n*/\n\npublic class Problem16 {\n\tpublic static void main(String[] args) {\n\t\tString num = \"6792875\";\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < num.length(); i++) {\n\t\t\tsum += Math.pow(Integer.parseInt(num.substring(i, i + 1)), 5);\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}",
            "Extract-Response": "\n405071317"
        },
        {
            "Index": 329,
            "GT": 6,
            "Query": "1 + 7 - 7 + 3 - 2 + 8 - 4 =   ",
            "Injected CoT": "1 + 7 = 8\n8 - 7 = 1\n1 + 3 = 3\n3 - 2 = 2\n2 + 8 = 10\n10 - 3 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\n\n*/\n\nclass Solution {\npublic:\n    int balancedString(string s) {\n        int n = s.size();\n        int cnt[4] = {0};\n        for (char c : s) {\n            cnt[c - 'Q']++;\n        }\n        int ans = n;\n        int l = 0, r = 0;\n        while (r < n) {\n            cnt[s[r++] - 'Q']--;\n            while (l < n && cnt[0] <= n / 4 && cnt[1] <= n / 4 && cnt[2] <= n / 4 && cnt[3] <= n / 4) {\n                ans = min(ans, r - l);\n                cnt[s[l++] - 'Q']++;\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 331,
            "GT": 12,
            "Query": "2 - 7 - 3 * 3 + 9 * 2 + 8 =   ",
            "Injected CoT": "-3 * 3 = -9\n9 * 2 = 18\n-7 - 9 = -16\n-16 + 18 = 2\n2 + 7 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 332,
            "GT": 40,
            "Query": "8 + 6 * 1 * 5 - 7 + 3 + 6 =   ",
            "Injected CoT": "6 * 1 = 6\n8 + 6 = 14\n14 * 5 = 70\n70 - 7 = 63\n63 + 3 = 67\n67 + 6 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 333,
            "GT": -38,
            "Query": "8 - 3 - 7 * 4 - 6 - 2 - 7 =   ",
            "Injected CoT": "6 * 4 = 28\n8 - 3 = 5\n5 - 28 = -23\n-23 - 6 = -29\n-29 - 2 = -31\n-31 - 6 =",
            "Response": " -37\n-37 - 7 = -44",
            "Extract-Response": " -44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int digitSum = 0;\n        int number = a + i;\n        while (number > 0) {\n            digitSum += number % 10;\n            number /= 10;\n        }\n        if (digitSum >= a && digitSum <= b) {\n            result += a + i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 334,
            "GT": 18,
            "Query": "9 + 3 + 3 - 2 - 1 + 8 - 2 =   ",
            "Injected CoT": "9 + 3 = 12\n12 + 3 = 15\n15 - 1 = 13\n13 - 1 = 12\n12 + 8 = 20\n20 - 1 =",
            "Response": " 19\n19 - 1 = 18",
            "Extract-Response": " 18\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        if (d < a) {\n            d = a;\n        } else if (d > b) {\n            d = b;\n        }\n        if (s == \"East\") {\n            result += d;\n        } else {\n            result -= d;\n        }\n    }\n\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 335,
            "GT": 16,
            "Query": "4 * 4 + 6 - 3 - 1 - 8 + 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 6 = 22\n22 - 3 = 19\n19 - 1 = 18\n18 - 8 = 9\n9 + 6 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 336,
            "GT": -39,
            "Query": "4 + 4 + 4 - 3 * 1 - 8 * 6 =   ",
            "Injected CoT": "4 + 4 = 8\n8 + 4 = 12\n12 - 3 = 9\n1 * 8 = 8\n6 * 8 = 49\n9 - 8 = 1\n1 - 49 =",
            "Response": " -48",
            "Extract-Response": " -48.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 337,
            "GT": -200,
            "Query": "4 + 2 - 3 * 7 * 5 * 2 + 4 =   ",
            "Injected CoT": "3 * 7 = 21\n21 * 5 = 105\n105 * 2 = 210\n4 + 2 = 6\n6 - 210 = -205\n-205 + 4 =",
            "Response": " -201",
            "Extract-Response": " -201.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 338,
            "GT": 3549,
            "Query": "7 * 7 * 9 * 8 - 3 + 4 * 6 =   ",
            "Injected CoT": "7 * 7 = 49\n49 * 9 = 441\n441 * 8 = 3528\n4 * 6 = 25\n3528 - 3 = 3525\n3525 + 25 =",
            "Response": " 3550",
            "Extract-Response": " 3550\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num"
        },
        {
            "Index": 340,
            "GT": -5,
            "Query": "2 - 5 + 4 - 8 + 9 + 2 - 9 =   ",
            "Injected CoT": "2 - 5 = -3\n-3 + 5 = 1\n1 - 8 = -7\n-7 + 9 = 2\n2 + 2 = 5\n5 - 9 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe sum of the elements of a.\n\"\"\"\n\ndef simpleArraySum(arr):\n    return sum(arr)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = simpleArraySum(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()"
        },
        {
            "Index": 341,
            "GT": 6,
            "Query": "9 + 2 * 1 - 4 - 1 + 3 - 3 =   ",
            "Injected CoT": "2 * 1 = 2\n9 + 2 = 11\n11 - 4 = 7\n7 - 1 = 6\n6 + 2 = 9\n9 - 2 =",
            "Response": " 7\n7 + 3 = 10\n10 - 3 = 7",
            "Extract-Response": " 7\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int x;\n        cin >> x;\n        result += min(a * x, b);\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 343,
            "GT": 35,
            "Query": "8 + 8 + 7 + 7 + 7 + 7 - 9 =   ",
            "Injected CoT": "8 + 8 = 16\n16 + 7 = 23\n23 + 7 = 30\n30 + 7 = 38\n38 - 9 =",
            "Response": " 29\n\n29\n*/",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 344,
            "GT": -1,
            "Query": "9 - 4 * 2 * 2 + 2 + 7 - 3 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 2 = 16\n9 - 16 = -7\n-7 + 2 = -5\n-5 + 7 = 2\n2 - 4 =",
            "Response": " -2\n-2 + 3 = 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        if (curr < 0) {\n            ++result;\n            curr = 0;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 345,
            "GT": 117,
            "Query": "2 * 9 * 7 - 6 * 2 - 5 + 8 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 7 = 126\n6 * 2 = 12\n126 - 12 = 114\n114 - 5 = 110\n110 + 8 =",
            "Response": " 118",
            "Extract-Response": "\n\n118."
        },
        {
            "Index": 347,
            "GT": 15,
            "Query": "1 * 2 - 2 + 3 + 1 * 3 * 4 =   ",
            "Injected CoT": "1 * 2 = 2\n2 - 2 = 0\n1 * 4 = 4\n4 * 4 = 12\n0 + 4 = 4\n4 + 12 =",
            "Response": " 16",
            "Extract-Response": "\n\n16"
        },
        {
            "Index": 348,
            "GT": -78,
            "Query": "5 * 1 - 5 * 3 * 6 - 1 + 8 =   ",
            "Injected CoT": "5 * 1 = 5\n5 * 3 = 15\n15 * 6 = 90\n5 - 90 = -85\n-85 - 1 = -86\n-86 + 9 =",
            "Response": " -77",
            "Extract-Response": " -77.\n\nNote:\nThe input numbers in any order.\nYou may assume that the evaluation process is always valid, which means the parentheses is always closed and balanced.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, curNum = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                curNum = curNum * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * curNum;\n                sign = 1;\n                curNum = 0;\n            } else if (c == '-') {\n                res += sign * curNum;\n                sign = -1;\n                curNum = 0;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * curNum;\n                curNum = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (curNum != 0) res += sign * curNum;\n        return res;\n    }\n};"
        },
        {
            "Index": 349,
            "GT": 67,
            "Query": "3 + 9 * 9 - 4 - 8 - 6 + 1 =   ",
            "Injected CoT": "9 * 9 = 81\n3 + 81 = 84\n84 - 4 = 80\n80 - 8 = 72\n72 - 6 = 66\n66 + 0 =",
            "Response": " 66\n66 + 1 = 67",
            "Extract-Response": " 67\n\n*/\n\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        sum += pow(i, 2);\n    }\n    cout << sum << endl;\n    return 0;\n}"
        },
        {
            "Index": 350,
            "GT": 5,
            "Query": "5 - 9 + 8 - 4 + 2 * 2 + 1 =   ",
            "Injected CoT": "2 * 2 = 4\n-9 + 4 = -5\n-5 + 8 = 3\n3 - 4 = -1\n-1 + 4 = 3\n3 + 1 = 4\n6 - 4 =",
            "Response": " 2",
            "Extract-Response": " 2\n\n*/\n\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    int count = 0;\n    while (n != 1)\n    {\n        if (n % 2 == 0)\n        {\n            n = n / 2;\n        }\n        else\n        {\n            n = (3 * n + 1) / 2;\n        }\n        count++;\n    }\n    cout << count;\n    return 0;\n}"
        },
        {
            "Index": 352,
            "GT": -35,
            "Query": "8 * 4 - 8 * 7 - 1 - 1 - 9 =   ",
            "Injected CoT": "8 * 4 = 32\n8 * 7 = 56\n32 - 56 = -24\n-24 - 1 = -25\n-25 - 1 = -27\n-27 - 9 =",
            "Response": " -36\n\n8 * 4 - 8 * 7 - 1 - 1 - 9 = -36",
            "Extract-Response": " -36.\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n\n    a = 8 * 4;\n    b = 8 * 7;\n    c = 1;\n    d = 1;\n    e = 9;\n\n    result = a - b - c - d - e;\n\n    printf(\"%d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 353,
            "GT": -4,
            "Query": "2 + 4 + 6 - 3 - 8 + 2 - 7 =   ",
            "Injected CoT": "2 + 4 = 6\n6 + 6 = 12\n12 - 2 = 9\n9 - 8 = 1\n1 + 2 = 2\n2 - 7 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe sum of the elements of a.\n\"\"\"\n\ndef simpleArraySum(arr):\n    return sum(arr)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = simpleArraySum(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()"
        },
        {
            "Index": 354,
            "GT": -30,
            "Query": "2 * 7 - 6 - 8 - 9 - 7 * 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 - 6 = 8\n8 - 8 = 0\n0 - 9 = -8\n7 * 3 = 21\n-8 - 21 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 355,
            "GT": -21,
            "Query": "7 + 3 - 6 * 1 + 7 - 8 * 4 =   ",
            "Injected CoT": "6 * 1 = 6\n7 + 3 = 10\n10 - 6 = 4\n4 + 7 = 12\n8 * 4 = 32\n12 - 32 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\nThere will be only one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            ans = max(ans, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 356,
            "GT": -70,
            "Query": "8 + 5 + 1 - 3 * 1 * 4 * 7 =   ",
            "Injected CoT": "3 * 1 = 3\n4 * 7 = 28\n3 * 28 = 84\n8 + 5 = 13\n13 + 1 = 13\n13 - 84 =",
            "Response": " -71",
            "Extract-Response": " -71.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = nums[0]\n        cur_max = cur_min = res\n        for i in range(1, len(nums)):\n            cur_max, cur_min = max(cur_max * nums[i], cur_min * nums[i], nums[i]), min(cur_max * nums[i], cur_min * nums[i], nums[i])\n            res = max(res, cur_max)\n        return res"
        },
        {
            "Index": 358,
            "GT": -34,
            "Query": "2 * 6 - 2 * 8 * 3 + 4 - 2 =   ",
            "Injected CoT": "3 * 6 = 12\n3 * 8 = 16\n16 * 3 = 48\n12 - 48 = -36\n-36 + 4 = -32\n-32 - 3 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\nThere will be only a single integer in the input array.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int res = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for (int i = 0; i < n; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        }
    ]
}