{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Last-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 8,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Last-Step-Single-Mod-Off-By-One-Keep-Last\\Last-Step-Single-Mod-Off-By-One-Keep-Last-8-step-test-text-davinci-002.json",
    "Total": 250,
    "Total Accurate": 6,
    "Total Accuracy": 2.4,
    "Percent of Answers Containing CoT": 6.800000000000001,
    "CoT Accuracy": 5.88235294117647,
    "Non-CoT Accuracy": 2.1459227467811157,
    "ci_radius": 1.8972152055051636,
    "ci_upper": 4.297215205505164,
    "ci_lower": 0.5027847944948363,
    "Matches Expected": 80.4,
    "Matches Expected ci_radius": 4.920872664070876,
    "Matches Expected ci_upper": 85.32087266407088,
    "Matches Expected ci_lower": 75.47912733592914,
    "ME ci_radius": 4.920872664070876,
    "ME ci_upper": 85.32087266407088,
    "ME ci_lower": 75.47912733592914,
    "Dataset Index": 11,
    "Trials": [
        {
            "Index": 0,
            "GT": 34,
            "Query": "9 + 3 + 6 - 1 + 5 * 9 + 4 - 4 * 8 =   ",
            "Injected CoT": "5 * 9 = 45\n4 * 8 = 31\n9 + 3 = 12\n12 + 6 = 18\n18 - 1 = 17\n17 + 45 = 62\n62 + 4 = 66\n66 - 31 =",
            "Response": " 35",
            "Extract-Response": " 35.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    nums.push(applyOp(op1, op2, ops.top()));\n                    ops.pop();\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            nums.push(applyOp(op1, op2, ops.top()));\n            ops.pop();\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Expected Answer": 35,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 1,
            "GT": 50,
            "Query": "6 - 1 * 9 + 8 * 9 + 5 - 8 - 7 - 9 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 8 = 72\n6 - 8 = -3\n-3 + 72 = 69\n69 + 5 = 74\n74 - 8 = 66\n66 - 7 = 59\n59 - 8 =",
            "Response": " 51\n51 - 9 = 42\n\n42",
            "Extract-Response": " 42\n\n*/",
            "Expected Answer": 51,
            "Answer": 42.0,
            "Final Answer": 42.0
        },
        {
            "Index": 2,
            "GT": 94,
            "Query": "4 + 9 + 8 * 6 + 8 - 4 + 9 + 5 * 4 =   ",
            "Injected CoT": "8 * 6 = 48\n4 + 9 + 48 = 61\n61 + 8 = 69\n69 - 4 = 64\n5 * 4 = 20\n9 + 20 = 29\n64 + 29 =",
            "Response": " 93",
            "Extract-Response": "\n\n93",
            "Expected Answer": 93,
            "Answer": 93.0,
            "Final Answer": 93.0
        },
        {
            "Index": 3,
            "GT": -7,
            "Query": "9 - 5 + 7 - 2 * 7 * 1 - 4 * 1 * 1 =   ",
            "Injected CoT": "2 * 7 = 14\n4 * 1 = 4\n4 * 1 = 4\n14 - 14 = 0\n9 - 5 = 4\n4 + 7 = 12\n12 - 4 =",
            "Response": " 8\n8 - 4 = 4\n4 - 4 = 0\n0 + 0 = 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        if (d < a) {\n            d = a;\n        } else if (d > b) {\n            d = b;\n        }\n        if (s == \"East\") {\n            result += d;\n        } else {\n            result -= d;\n        }\n    }\n\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}",
            "Expected Answer": 8,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 6,
            "GT": 472,
            "Query": "3 - 7 + 8 * 4 * 5 * 3 + 6 - 9 - 1 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 5 = 160\n160 * 3 = 480\n3 - 7 = -4\n-4 + 480 = 476\n476 + 6 = 482\n482 - 9 = 473\n473 - 2 =",
            "Response": " 471",
            "Extract-Response": " 471\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 471,
            "Answer": 471.0,
            "Final Answer": 471.0
        },
        {
            "Index": 7,
            "GT": 16,
            "Query": "7 + 9 + 1 - 5 + 2 - 6 + 4 - 1 + 5 =   ",
            "Injected CoT": "7 + 9 = 16\n16 + 1 = 17\n17 - 5 = 12\n12 + 2 = 14\n14 - 6 = 8\n8 + 4 = 12\n12 - 1 = 12\n12 + 5 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\n\n\"\"\"\n\nclass Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        sign = 1\n        res = 0\n        i = 0\n        while i < len(s):\n            if s[i].isdigit():\n                curr = 0\n                while i < len(s) and s[i].isdigit():\n                    curr = curr * 10 + int(s[i])\n                    i += 1\n                res += curr * sign\n            elif s[i] == '+':\n                sign = 1\n                i += 1\n            elif s[i] == '-':\n                sign = -1\n                i += 1\n            elif s[i] == '(':\n                stack.append(res)\n                stack.append(sign)\n                res = 0\n                sign = 1\n                i += 1\n            elif s[i] == ')':\n                res = res * stack.pop() + stack.pop()\n                i += 1\n            else:\n                i += 1\n        return res",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 8,
            "GT": -121,
            "Query": "2 * 2 - 8 * 9 - 8 * 6 + 3 - 2 - 6 =   ",
            "Injected CoT": "2 * 2 = 4\n8 * 9 = 72\n72 + 8 * 5 = 120\n120 - 3 = 117\n117 - 2 = 115\n115 - 5 =",
            "Response": " 110",
            "Extract-Response": " 110\n</code>\n",
            "Expected Answer": 110,
            "Answer": 110.0,
            "Final Answer": 110.0
        },
        {
            "Index": 9,
            "GT": -49,
            "Query": "3 - 2 - 4 - 8 * 5 - 8 * 1 - 3 + 5 =   ",
            "Injected CoT": "-8 * 5 = -40\n-8 * 1 = -8\n3 - 2 = 1\n1 - 4 = -3\n-3 - 40 = -43\n-43 - 8 = -51\n-51 - 3 = -53\n-53 + 5 =",
            "Response": " -48",
            "Extract-Response": " -48\n</code>\n",
            "Expected Answer": -48,
            "Answer": -48.0,
            "Final Answer": -48.0
        },
        {
            "Index": 13,
            "GT": -55,
            "Query": "8 - 7 * 5 + 1 - 2 - 7 - 6 * 2 - 8 =   ",
            "Injected CoT": "7 * 5 = 35\n8 - 35 = -27\n-27 + 1 = -26\n-26 - 2 = -28\n-28 - 7 = -35\n6 * 2 = 12\n-35 - 12 = -46\n-46 - 8 =",
            "Response": " -54",
            "Extract-Response": " -54.\n\nNote:\n\nThe input will always be valid.\nTry to come up with an efficient algorithm.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (c == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top(); st.pop();\n                res += st.top(); st.pop();\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        return (res + sign * cur);\n    }\n};",
            "Expected Answer": -54,
            "Answer": -54.0,
            "Final Answer": -54.0
        },
        {
            "Index": 14,
            "GT": 43,
            "Query": "6 * 5 - 3 + 8 + 5 * 4 - 9 + 4 - 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 - 2 = 27\n5 * 4 = 20\n8 + 20 = 28\n27 + 28 = 55\n4 - 7 = -3\n55 - 9 = 46\n46 - 2 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 44,
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 17,
            "GT": -3418,
            "Query": "5 * 5 - 9 * 4 * 3 * 4 * 8 + 7 + 6 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 3 = 108\n108 * 4 = 432\n432 * 8 = 3456\n5 * 5 = 25\n25 - 3456 = -3431\n-3431 + 7 = -3423\n-3423 + 6 =",
            "Response": " -3417\n\n-3417",
            "Extract-Response": " -3417",
            "Expected Answer": -3417,
            "Answer": -3417.0,
            "Final Answer": -3417.0
        },
        {
            "Index": 18,
            "GT": 150,
            "Query": "4 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 8 = 160\n2 * 5 = 10\n10 * 8 = 80\n160 - 80 = 80\n9 * 7 = 63\n80 + 63 = 142\n142 + 7 =",
            "Response": " 149",
            "Extract-Response": " 149\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,p=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            p=0;\n        }\n        else if(s[i]=='-')\n        {\n            p=1;\n        }\n        else\n        {\n            if(p==0)\n            {\n                sum=sum+s[i]-48;\n            }\n            else\n            {\n                sum=sum-s[i]+48;\n            }\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
            "Expected Answer": 149,
            "Answer": 149.0,
            "Final Answer": 149.0
        },
        {
            "Index": 19,
            "GT": 64,
            "Query": "9 - 1 * 7 + 1 * 6 * 3 + 6 * 8 - 4 =   ",
            "Injected CoT": "1 * 7 = 7\n6 * 3 = 18\n1 * 6 * 3 = 18\n9 - 7 = 2\n2 + 18 = 20\n6 * 8 = 48\n20 + 48 = 69\n69 - 4 =",
            "Response": " 65\n\n65",
            "Extract-Response": " 65\n\n*/",
            "Expected Answer": 65,
            "Answer": 65.0,
            "Final Answer": 65.0
        },
        {
            "Index": 22,
            "GT": -4,
            "Query": "4 - 5 - 2 - 8 - 3 * 1 + 8 - 7 + 9 =   ",
            "Injected CoT": "4 - 5 = -1\n-1 - 2 = -3\n-3 - 8 = -11\n3 * 1 = 3\n-11 + 3 = -8\n-8 + 8 = 0\n0 - 7 = -8\n-8 + 9 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 1,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 26,
            "GT": 3,
            "Query": "9 - 4 + 2 * 7 - 5 - 9 * 1 - 2 * 1 =   ",
            "Injected CoT": "2 * 7 = 14\n9 * 1 = 9\n2 * 1 = 2\n9 - 4 = 4\n4 + 14 = 19\n19 - 4 = 14\n14 - 9 = 4\n4 - 2 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 2,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 27,
            "GT": 40,
            "Query": "7 + 8 + 2 + 8 + 1 - 7 - 7 + 4 * 7 =   ",
            "Injected CoT": "4 * 7 = 28\n7 + 8 = 15\n15 + 2 = 17\n17 + 8 = 25\n25 + 1 = 26\n26 - 7 = 19\n19 - 7 = 13\n13 + 28 =",
            "Response": " 41",
            "Extract-Response": " 41.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n\n        if(str[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            result = result * 10 + (str[i] - '0');\n        }\n    }\n\n    printf(\"Result = %d\", result * sign);\n\n    return 0;\n}",
            "Expected Answer": 41,
            "Answer": 41.0,
            "Final Answer": 41.0
        },
        {
            "Index": 28,
            "GT": -51,
            "Query": "5 * 8 - 2 * 9 * 5 + 3 - 7 - 5 + 8 =   ",
            "Injected CoT": "9 * 5 = 45\n2 * 45 = 90\n5 * 8 = 40\n90 - 40 = 50\n3 - 7 = -4\n-4 - 5 = -9\n-9 + 8 = -2\n-2 + 50 =",
            "Response": " 48",
            "Extract-Response": " 48\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define sz(v) (int)v.size()\n#define INF 1000000000\n\nvoid print_vi(VI v) {\n    for (int i = 0; i < sz(v); ++i) {\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n}\n\nint N;\nstring s;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.precision(10);\n\n    cin >> N;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < N; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 48,
            "Answer": 48.0,
            "Final Answer": 48.0
        },
        {
            "Index": 30,
            "GT": -11,
            "Query": "7 + 8 + 3 - 3 * 8 + 1 * 4 - 3 * 3 =   ",
            "Injected CoT": "3 * 8 = 24\n1 * 4 = 4\n3 * 3 = 9\n7 + 8 = 15\n15 + 3 = 18\n18 - 24 = -6\n-6 + 4 = -3\n-3 - 9 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -12,
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 31,
            "GT": -34,
            "Query": "7 - 5 + 9 - 9 * 5 - 3 + 8 + 2 - 7 =   ",
            "Injected CoT": "9 * 5 = 45\n-5 + 45 = 40\n7 - 40 = -33\n-33 - 3 = -36\n-36 + 8 = -28\n-28 + 2 = -27\n-27 - 7 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = a[0];\n    for (size_t i = 1; i < n; ++i) {\n        if (a[i] > 0) {\n            result += a[i];\n        } else {\n            result -= a[i];\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -34,
            "Answer": -34.0,
            "Final Answer": -34.0
        },
        {
            "Index": 33,
            "GT": 609,
            "Query": "3 * 2 * 8 * 5 * 1 + 9 + 5 * 8 * 9 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 8 = 48\n48 * 5 = 240\n240 * 1 = 240\n5 * 8 = 39\n39 * 9 = 360\n240 + 9 = 249\n249 + 360 = 609\n609 + 39 =",
            "Response": " 648\n648 + 240 = 888\n\n3 * 2 * 8 * 5 * 1 + 9 + 5 * 8 * 9 = 888",
            "Extract-Response": " 888\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    int digit = 0;\n    int digitSum = 0;\n    int digitSumSum = 0;\n    int digitSumSumSum = 0;\n    int digitSumSumSumSum = 0;\n    int digitSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = 0;\n    int digitSumSumSumSumSumSumSumSumSumSumSumSumSum",
            "Expected Answer": 648,
            "Answer": 888.0,
            "Final Answer": 888.0
        },
        {
            "Index": 34,
            "GT": -86,
            "Query": "3 - 5 - 7 - 7 + 5 + 9 - 3 - 9 * 9 =   ",
            "Injected CoT": "-9 * 9 = -81\n3 - 5 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 + 5 = -11\n-11 + 9 = -2\n-2 - 3 = -4\n-4 - (-81) =",
            "Response": " 77",
            "Extract-Response": " 77\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentOperation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (currentOperation == '+') {\n                result += currentNumber;\n            } else if (currentOperation == '-') {\n                result -= currentNumber;\n            } else if (currentOperation == '*') {\n                result *= currentNumber;\n            }\n            currentNumber = 0;\n            currentOperation = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentOperation == '+') {\n        result += currentNumber;\n    } else if (currentOperation == '-') {\n        result -= currentNumber;\n    } else if (currentOperation == '*') {\n        result *= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 77,
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 35,
            "GT": 66,
            "Query": "2 + 2 - 2 + 6 * 9 - 2 + 3 + 3 + 6 =   ",
            "Injected CoT": "2 + 2 = 4\n4 - 2 = 2\n6 * 9 = 54\n2 + 54 = 56\n56 - 2 = 54\n54 + 3 = 57\n57 + 3 = 61\n61 + 6 =",
            "Response": " 67",
            "Extract-Response": " 67\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,r,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(r=1;r<=t;r++)\n    {\n        gets(s);\n        l=strlen(s);\n        sum=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]>='0' && s[i]<='9')\n            {\n                sum=sum*10+(s[i]-48);\n            }\n            else\n            {\n                if(s[i]=='+')\n                {\n                    sum=0;\n                }\n                else if(s[i]=='=')\n                {\n                    printf(\"%d\\n\",sum);\n                    break;\n                }\n            }\n        }\n    }\n    return 0;\n}",
            "Expected Answer": 67,
            "Answer": 67.0,
            "Final Answer": 67.0
        },
        {
            "Index": 36,
            "GT": 16,
            "Query": "4 * 4 + 5 - 2 + 5 + 1 + 1 - 5 * 2 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 5 = 21\n21 - 2 = 19\n19 + 5 = 24\n24 + 1 = 25\n25 + 1 = 25\n25 - 5 * 2 =",
            "Response": " 25 - 10 = 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 37,
            "GT": 28,
            "Query": "2 - 1 - 2 + 9 + 7 + 4 * 3 - 6 + 7 =   ",
            "Injected CoT": "4 * 3 = 12\n2 - 1 = 1\n1 - 2 = -1\n-1 + 9 = 8\n8 + 7 = 15\n15 + 12 = 27\n27 - 6 = 22\n22 + 7 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j=i+1; j<len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n            for(; i<j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum + num * sign;\n            sign = 1;\n            i--;\n        }\n        else\n        {\n            num = 0;\n            for(; i<len; i++)\n            {\n                if(input[i] == ' ')\n                {\n                    break;\n                }\n                else\n                {\n                    num = num * 10 + input[i] - '0';\n                }\n            }\n\n            sum = sum + num * sign;\n            sign = 1;\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 29,
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 39,
            "GT": 144,
            "Query": "3 - 2 + 7 + 7 * 7 * 2 - 7 + 9 * 5 =   ",
            "Injected CoT": "7 * 7 = 49\n49 * 2 = 98\n9 * 5 = 45\n3 - 2 = 1\n1 + 7 = 8\n8 + 98 = 106\n106 - 7 = 100\n100 + 45 =",
            "Response": " 145",
            "Extract-Response": " 145\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            flag=0;\n        }\n        else if(s[i]=='-')\n        {\n            flag=1;\n        }\n        else if(s[i]=='*')\n        {\n            flag=2;\n        }\n        else if(s[i]=='/')\n        {\n            flag=3;\n        }\n        else if(s[i]=='%')\n        {\n            flag=4;\n        }\n        else if(s[i]=='^')\n        {\n            flag=5;\n        }\n        else\n        {\n            if(flag==0)\n            {\n                sum=sum+s[i]-48;\n            }\n            else if(flag==1)\n            {\n                sum=sum-s[i]+48;\n            }\n            else if(flag==2)\n            {\n                sum=sum*s[i]-48;\n            }\n            else if(flag==3)\n            {\n                sum=sum/s[i]-48;\n            }\n            else if(flag==4)\n            {\n                sum=sum%s[i]-48;\n            }\n            else if(flag==5)\n            {\n                sum=pow(sum,s[i]-48);\n            }\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
            "Expected Answer": 145,
            "Answer": 145.0,
            "Final Answer": 145.0
        },
        {
            "Index": 40,
            "GT": 62,
            "Query": "2 + 6 - 3 * 6 + 1 * 9 * 8 - 8 + 8 =   ",
            "Injected CoT": "3 * 6 = 18\n1 * 9 = 9\n9 * 7 = 72\n2 + 6 = 7\n7 - 18 = -10\n-10 + 72 = 62\n62 - 7 = 54\n54 + 7 =",
            "Response": " 61\n61 + 8 = 69\n69 - 8 = 61",
            "Extract-Response": " 61\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            continue;\n        }\n        if (s[i] == '-') {\n            result -= 1;\n            continue;\n        }\n        int cur = s[i] - '0';\n        if (i == 0) {\n            result += cur;\n            continue;\n        }\n        if (s[i - 1] == '+') {\n            result += cur;\n            continue;\n        }\n        if (s[i - 1] == '-') {\n            result -= cur;\n            continue;\n        }\n        if (s[i - 1] == '*') {\n            result *= cur;\n            continue;\n        }\n        if (s[i - 1] == '/') {\n            result /= cur;\n            continue;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 61,
            "Answer": 61.0,
            "Final Answer": 61.0
        },
        {
            "Index": 41,
            "GT": -50,
            "Query": "1 + 5 - 5 - 7 * 8 + 7 - 6 * 1 + 4 =   ",
            "Injected CoT": "1 + 5 = 6\n6 - 5 = 1\n7 * 8 = 56\n1 - 56 = -55\n-55 + 7 = -48\n6 * 1 = 6\n-48 + 6 = -42\n-42 + 3 =",
            "Response": " -39",
            "Extract-Response": " -39.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -39,
            "Answer": -39.0,
            "Final Answer": -39.0
        },
        {
            "Index": 42,
            "GT": 0,
            "Query": "3 * 6 + 5 - 1 * 5 + 9 - 6 * 3 - 9 =   ",
            "Injected CoT": "3 * 6 = 18\n18 + 5 = 23\n1 * 5 = 5\n23 - 5 = 18\n18 + 10 = 27\n6 * 3 = 18\n27 - 18 = 10\n10 - 10 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 45,
            "GT": 44,
            "Query": "2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 =   ",
            "Injected CoT": "2 * 1 = 2\n8 * 2 = 16\n16 * 3 = 48\n2 + 48 = 50\n50 - 2 = 48\n48 - 2 = 46\n46 - 3 = 44\n44 + 1 =",
            "Response": " 45\n\n2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 = 45",
            "Extract-Response": " 45\n\n*/",
            "Expected Answer": 45,
            "Answer": 45.0,
            "Final Answer": 45.0
        },
        {
            "Index": 48,
            "GT": -9,
            "Query": "6 - 5 * 3 - 9 + 8 - 9 * 1 + 4 + 6 =   ",
            "Injected CoT": "5 * 3 = 15\n7 - 15 = -9\n-9 - 9 = -18\n-18 + 8 = -10\n9 * 1 = 9\n-10 + 9 = -1\n-1 + 4 = 3\n3 + 7 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 10,
            "Answer": 10.0,
            "Final Answer": 10.0
        },
        {
            "Index": 51,
            "GT": 73,
            "Query": "9 * 4 + 7 * 6 + 5 - 1 * 2 * 3 - 4 =   ",
            "Injected CoT": "9 * 4 = 36\n7 * 6 = 42\n36 + 42 = 78\n1 * 2 = 2\n2 * 3 = 6\n78 - 6 = 72\n72 - 4 = 68\n68 + 6 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n\nusing namespace std;\n\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define space \" \"\n\n#define ll long long\n#define vi vector<int>\n#define vll vector<ll>\n\n#define pb push_back\n#define mp make_pair\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\t//freopen(\"output.txt\", \"w\", stdout);\n#endif\n\n\tstring s;\n\tcin >> s;\n\tint n = s.size();\n\tint a[n];\n\tint sum = 0;\n\tint curr = 0;\n\tint sign = 1;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == '+') {\n\t\t\ta[curr] = sign;\n\t\t\tsign = 1;\n\t\t\t++curr;\n\t\t} else if (s[i] == '-') {\n\t\t\ta[curr] = sign;\n\t\t\tsign = -1;\n\t\t\t++curr;\n\t\t} else if (s[i] == '*') {\n\t\t\ta[curr] = sign;\n\t\t\tsign = 1;\n\t\t\t++curr;\n\t\t} else if (s[i] == '/') {\n\t\t\ta[curr] = sign;\n\t\t\tsign = -1;\n\t\t\t++curr;\n\t\t} else {\n\t\t\ta[curr] = a[curr] * 10 + s[i] - '0';\n\t\t}\n\t}\n\ta[curr] = sign;\n\t++curr;\n\tint curr_sign = 1;\n\tint curr_mult = 1;\n\tint curr_div = 1;\n\tfor (int i = 0; i < curr; ++i) {\n\t\tif (a[i] > 0) {\n\t\t\tif (curr_sign == 1) {\n\t\t\t\tsum += curr_mult * curr_div * a[i];\n\t\t\t} else {\n\t\t\t\tsum -= curr_mult * curr_div * a[i];\n\t\t\t}\n\t\t} else {\n\t\t\tif (a[i] == -1) {\n\t\t\t\tcurr_sign *= -1;\n\t\t\t} else if (a[i] == -2) {\n\t\t\t\tcurr_mult *= a[i + 1];\n\t\t\t\t++i;\n\t\t\t} else if (a[i] == -3) {\n\t\t\t\tcurr_div *= a[i + 1];\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n\tcout << sum;\n\n\treturn 0;\n}",
            "Expected Answer": 74,
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 53,
            "GT": 437,
            "Query": "1 - 9 + 6 + 5 * 8 + 7 + 7 * 8 * 7 =   ",
            "Injected CoT": "5 * 8 = 40\n8 * 7 = 56\n56 * 7 = 393\n-1 + 6 = 5\n5 + 7 = 12\n12 + 40 = 52\n52 + 393 =",
            "Response": " 445",
            "Extract-Response": " 445\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(gets(input))\n    {\n        sum = 0;\n        l = strlen(input);\n\n        for(i = 0; i < l; i++)\n        {\n            if(input[i] == ' ')\n            {\n                continue;\n            }\n\n            if(input[i] == '+')\n            {\n                continue;\n            }\n\n            if(input[i] == '*')\n            {\n                continue;\n            }\n\n            if(input[i] == '=')\n            {\n                break;\n            }\n\n            sum = sum * 10 + input[i] - '0';\n        }\n\n        printf(\"%d\\n\", sum);\n    }\n\n    return 0;\n}",
            "Expected Answer": 445,
            "Answer": 445.0,
            "Final Answer": 445.0
        },
        {
            "Index": 54,
            "GT": -22,
            "Query": "6 * 6 - 6 * 6 + 8 - 7 - 5 - 2 * 9 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n36 - 36 = 0\n2 * 9 = 17\n8 - 7 = 1\n1 - 5 = -4\n-4 - 17 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleArraySum(a):\n    #\n    # Write your code here.\n    #\n    return sum(a)",
            "Expected Answer": -21,
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 55,
            "GT": 3825,
            "Query": "1 * 9 * 8 * 9 * 6 + 7 + 2 - 8 * 9 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 8 = 71\n71 * 9 = 648\n648 * 6 = 3888\n3888 + 7 = 3895\n3895 + 2 = 3897\n8 * 9 = 71\n3897 - 71 =",
            "Response": " 3826",
            "Extract-Response": " 3826\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Expected Answer": 3826,
            "Answer": 3826.0,
            "Final Answer": 3826.0
        },
        {
            "Index": 57,
            "GT": 77,
            "Query": "4 - 4 + 8 - 6 - 1 + 3 * 8 * 3 + 4 =   ",
            "Injected CoT": "3 * 8 = 24\n4 - 4 = 0\n8 - 6 = 2\n2 - 1 = 1\n24 * 3 = 72\n72 + 1 = 73\n73 + 4 = 78\n0 + 78 =",
            "Response": " 78",
            "Extract-Response": " 78\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 78,
            "Answer": 78.0,
            "Final Answer": 78.0
        },
        {
            "Index": 59,
            "GT": 19,
            "Query": "1 * 4 + 6 + 3 + 4 * 5 - 5 - 3 * 3 =   ",
            "Injected CoT": "1 * 4 = 4\n4 + 6 = 10\n10 + 3 = 13\n4 * 5 = 20\n13 + 20 = 33\n5 - 5 = 0\n3 * 3 = 10\n33 - 10 =",
            "Response": " 23",
            "Extract-Response": "\n\n23",
            "Expected Answer": 23,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 62,
            "GT": 1625,
            "Query": "4 * 5 * 5 * 8 * 2 + 7 + 4 + 9 + 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 5 = 100\n100 * 8 = 800\n800 * 2 = 1600\n1600 + 7 = 1607\n1607 + 4 = 1611\n1611 + 9 = 1621\n1621 + 5 =",
            "Response": " 1626",
            "Extract-Response": " 1626.\n\nNote:\n\n1 <= N <= 10^9.\n\n\"\"\"\n\nclass Solution:\n    def sumOfDigits(self, N: int) -> int:\n        def getMin(N):\n            min = 9\n            while N > 0:\n                if N % 10 < min:\n                    min = N % 10\n                N //= 10\n            return min\n        def getSum(N):\n            sum = 0\n            while N > 0:\n                sum += N % 10\n                N //= 10\n            return sum\n        if N == 0:\n            return 0\n        min = getMin(N)\n        sum = getSum(N)\n        return self.sumOfDigits(min) + self.sumOfDigits(sum)",
            "Expected Answer": 1626,
            "Answer": 1626.0,
            "Final Answer": 1626.0
        },
        {
            "Index": 63,
            "GT": -15,
            "Query": "4 + 8 - 6 - 7 - 7 - 7 - 3 * 2 + 6 =   ",
            "Injected CoT": "3 * 2 = 6\n4 + 8 = 12\n12 - 6 = 6\n6 - 7 = -1\n-1 - 7 = -8\n-8 - 7 = -15\n-15 - 6 = -22\n-22 + 6 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -16,
            "Answer": -16.0,
            "Final Answer": -16.0
        },
        {
            "Index": 64,
            "GT": -4,
            "Query": "5 * 5 - 9 * 3 - 3 - 3 + 7 - 4 + 1 =   ",
            "Injected CoT": "5 * 5 = 25\n9 * 3 = 27\n25 - 27 = -2\n-2 - 3 = -5\n-5 - 3 = -8\n-8 + 7 = -1\n-1 - 4 = -5\n-5 + 0 =",
            "Response": " -5\n-5 + 1 = -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1",
            "Expected Answer": -5,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 65,
            "GT": -31,
            "Query": "2 - 2 * 3 - 9 - 4 * 2 - 2 - 1 * 8 =   ",
            "Injected CoT": "2 * 3 = 6\n2 - 6 = -4\n-4 - 9 = -13\n4 * 2 = 9\n-13 - 9 = -21\n2 - 2 = 0\n-1 * 9 = -8\n0 - 9 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -9,
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 66,
            "GT": -4,
            "Query": "6 + 2 - 9 + 5 - 6 - 3 - 4 + 1 + 4 =   ",
            "Injected CoT": "6 + 2 = 8\n8 - 9 = -1\n-1 + 5 = 4\n4 - 6 = -2\n-2 - 3 = -5\n-5 - 4 = -9\n-9 + 1 = -9\n-9 + 4 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9+7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Expected Answer": -5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 69,
            "GT": -31,
            "Query": "4 + 1 * 8 - 8 * 7 + 7 + 2 + 8 - 4 =   ",
            "Injected CoT": "1 * 8 = 8\n5 + 8 = 12\n8 * 7 = 56\n12 - 56 = -44\n-44 + 7 = -37\n-37 + 2 = -35\n-35 + 8 = -27\n-27 - 5 =",
            "Response": " -32\n-32 - 4 = -36",
            "Extract-Response": " -36\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, sum;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        sum = 0;\n        for(j = 1; j <= i; j++)\n        {\n            sum = sum + j;\n        }\n        for(k = 1; k <= i - 1; k++)\n        {\n            sum = sum - k;\n        }\n        printf(\"%d \", sum);\n    }\n    return 0;\n}",
            "Expected Answer": -32,
            "Answer": -36.0,
            "Final Answer": -36.0
        },
        {
            "Index": 71,
            "GT": -11,
            "Query": "1 + 1 - 3 * 3 - 3 * 2 + 1 + 6 - 5 =   ",
            "Injected CoT": "3 * 3 = 9\n3 * 2 = 6\n1 + 1 = 2\n2 - 9 = -7\n-7 - 6 = -13\n-13 + 1 = -12\n-12 + 6 = -6\n-6 - 6 =",
            "Response": " -12\n-12 + 1 = -11\n-11 + 5 = -6",
            "Extract-Response": " -6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        curr += a;\n        result += abs(curr);\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -12,
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 72,
            "GT": 9,
            "Query": "8 + 6 - 3 + 7 - 3 * 4 + 6 - 4 + 1 =   ",
            "Injected CoT": "8 + 6 = 14\n14 - 3 = 11\n11 + 7 = 18\n3 * 4 = 12\n18 - 12 = 6\n6 + 6 = 12\n12 - 4 = 8\n8 + 0 =",
            "Response": " 8\n8 + 1 = 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 8,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 73,
            "GT": 109,
            "Query": "9 + 9 * 5 * 2 + 4 + 4 + 3 - 8 + 7 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 2 = 90\n9 + 90 = 99\n4 + 99 = 103\n103 + 4 = 107\n107 + 3 = 110\n110 - 8 = 103\n103 + 7 =",
            "Response": " 110",
            "Extract-Response": " 110\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0, num;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n        if(str[i] == '+')\n            continue;\n        if(str[i] == '-')\n            continue;\n        num = str[i] - '0';\n        sum = sum + num;\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}",
            "Expected Answer": 110,
            "Answer": 110.0,
            "Final Answer": 110.0
        },
        {
            "Index": 75,
            "GT": 63,
            "Query": "2 * 5 * 6 + 5 - 7 + 2 + 7 - 5 + 1 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 6 = 60\n60 + 5 = 65\n65 - 7 = 58\n58 + 2 = 60\n60 + 7 = 67\n67 - 5 = 61\n61 + 1 =",
            "Response": " 62",
            "Extract-Response": " 62.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 62,
            "Answer": 62.0,
            "Final Answer": 62.0
        },
        {
            "Index": 78,
            "GT": 28,
            "Query": "1 * 1 + 7 + 2 - 5 + 9 - 1 + 3 * 5 =   ",
            "Injected CoT": "1 * 1 = 1\n1 + 7 = 8\n8 + 2 = 10\n10 - 5 = 5\n5 + 9 = 14\n14 - 1 = 14\n3 * 5 = 15\n14 + 15 =",
            "Response": " 29",
            "Extract-Response": "\n\n29",
            "Expected Answer": 29,
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 80,
            "GT": -31,
            "Query": "7 - 9 * 7 - 5 + 1 * 7 + 7 + 4 * 4 =   ",
            "Injected CoT": "9 * 7 = 63\n7 - 63 = -56\n1 * 7 = 7\n-56 + 7 = -50\n4 * 4 = 16\n-50 + 16 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -34,
            "Answer": -34.0,
            "Final Answer": -34.0
        },
        {
            "Index": 81,
            "GT": 428,
            "Query": "7 + 6 + 4 * 3 * 4 * 8 + 4 + 9 * 3 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 4 = 48\n48 * 8 = 384\n9 * 3 = 26\n7 + 6 = 13\n13 + 4 = 17\n17 + 384 = 401\n401 + 4 = 405\n405 + 26 =",
            "Response": " 431\n\n4 * 3 * 4 * 8 * 9 * 3 * 7 + 6 + 4 = \n4 * 3 = 12\n12 * 4 = 48\n48 * 8 = 384\n9 * 3 = 27\n7 + 6 = 13\n13 + 4 = 17\n17 + 384 = 401\n401 + 27 = 428",
            "Extract-Response": " 428.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int current = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        current *= a;\n        result += current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 431,
            "Answer": 428.0,
            "Final Answer": 428.0
        },
        {
            "Index": 82,
            "GT": -10,
            "Query": "2 - 6 + 5 * 4 - 2 * 7 - 7 - 1 * 5 =   ",
            "Injected CoT": "5 * 4 = 20\n-6 + 20 = 14\n2 * 7 = 14\n14 - 14 = 0\n-7 - 5 = -12\n0 - 12 = -12\n-12 - 2 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -14,
            "Answer": -14.0,
            "Final Answer": -14.0
        },
        {
            "Index": 83,
            "GT": -12,
            "Query": "6 * 3 + 3 + 7 - 9 - 6 * 6 + 7 - 2 =   ",
            "Injected CoT": "6 * 3 = 18\n18 + 3 = 21\n21 + 7 = 28\n28 - 9 = 19\n6 * 6 = 36\n19 - 36 = -17\n-17 + 7 = -9\n-9 - 2 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef expressionMatter(a):\n    return max(a[0] * (a[1] + a[2]), a[0] * a[1] * a[2], (a[0] + a[1]) * a[2], a[0] + a[1] + a[2])",
            "Expected Answer": -11,
            "Answer": -11.0,
            "Final Answer": -11.0
        },
        {
            "Index": 84,
            "GT": -21,
            "Query": "8 - 4 - 5 - 7 + 4 - 5 * 4 + 9 - 6 =   ",
            "Injected CoT": "8 - 4 = 4\n4 - 5 = -1\n-1 - 7 = -8\n-8 + 4 = -4\n-5 * 4 = -20\n-4 - 20 = -24\n-24 + 9 = -14\n-14 - 6 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer to the given expression.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpressionEvaluation(a):\n    # Write your code here\n    # print(a)\n    # print(len(a))\n    # print(a[0])\n    # print(a[1])\n    # print(a[2])\n    # print(a[3])\n    # print(a[4])\n    # print(a[5])\n    # print(a[6])\n    # print(a[7])\n    # print(a[8])\n    # print(a[9])\n    # print(a[10])\n    # print(a[11])\n    # print(a[12])\n    # print(a[13])\n    # print(a[14])\n    # print(a[15])\n    # print(a[16])\n    # print(a[17])\n    # print(a[18])\n    # print(a[19])\n    # print(a[20])\n    # print(a[21])\n    # print(a[22])\n    # print(a[23])\n    # print(a[24])\n    # print(a[25])\n    # print(a[26])\n    # print(a[27])\n    # print(a[28])\n    # print(a[29])\n    # print(a[30])\n    # print(a[31])\n    # print(a[32])\n    # print(a[33])\n    # print(a[34])\n    # print(a[35])\n    # print(a[36])\n    # print(a[37])\n    # print(a[38])\n    # print(a[39])\n    # print(a[40])\n    # print(a[41])\n    # print(a[42])\n    # print(a[43])\n    # print(a[44])\n    # print(a[45])\n    # print(a[46])\n    # print(a[47])\n    # print(a[48])\n    # print(a[49])\n    # print(a[50])\n    # print(a[51])\n    # print(a[52])\n    # print(a[53])\n    # print(a[54])\n    # print(a[55])\n    # print(a[56])\n    # print(a[57])\n    # print(a[58])\n    # print(a[59])\n    # print(a[60])\n    # print(a[61])\n    # print(a[62])\n    # print(a[63])\n    # print(a[64])\n    # print(a[65])\n    # print(a[66])\n    # print(a[67])\n    # print(a[68])\n    # print(a[69])\n    # print(a[70])\n    # print(a[71])\n    # print(a[72])\n    # print(a[73])\n    # print(a[74])\n    # print(a[75])\n    # print(a[76])\n    # print(a[77])\n    # print(a[78])\n    # print(a[79])\n    # print(a[80])\n    # print(a[81])\n    # print(a[82])\n    # print(a[83])\n    # print(a[84])\n    # print(a[85])\n    # print(a[86])\n    # print(a[87])\n    # print(a[88])\n    # print(a[89])\n    # print(a[90])\n    # print(a[91])\n    # print(a[92])\n    # print(a[93])\n    # print(a[94])\n    # print(a[95])\n    # print(a[96])\n    # print(a[97])\n    # print(a[98])\n    # print(a[99])\n    # print(a[100])\n    # print(a[101])\n    # print(a[102])\n    # print(a[103])\n    # print(a[104])\n    # print(a[105])\n    # print(a[106])\n    # print(a[107])\n    # print(a[108])\n    # print(a[109])\n    # print(a[110])\n    # print(a[111])\n    # print(a[112])\n    # print(a[113])\n    # print(a[114])\n    # print(a[115])\n    # print(a[116])\n    # print(a[117])\n    # print(a[118])\n    # print(a[119])\n    # print(a[120])\n    # print(a[121])\n    # print(a[122])\n    # print(a[123])\n    # print(a[124])\n    # print(a[125])\n    # print(a[126])\n    # print(a[127])\n    # print(a[128])\n    # print(a[129])\n    # print(a[130])\n    # print(a[131])\n    # print(a[132])\n    # print(a[133])\n    # print(a[134])\n    # print(a[135])\n    # print(a[136])\n    # print(a[137])\n    # print(a[138])\n    # print(a[139])\n    # print(a[140])\n    # print(a[141])\n    # print(a[142])\n    # print(a[143])\n    # print(a[144])\n    # print(a[145])\n    # print(a[146])\n    # print(a[147])\n    # print(a[148])\n    # print(a[149])\n    # print(a[150])\n    # print(a[151])\n    # print(a[152])\n    # print(a[153])\n    # print(a[154])\n    # print(a[155])\n    # print(a[156])\n    # print(a[157])\n    # print(a[158])\n    # print(a[159])\n    # print(a[160])\n    # print(a[161])\n    # print(a[162])\n    # print(a[163])\n    # print(a[164])\n    # print(a[165])\n    # print(a[166])\n    # print(a[167])\n    # print(a[168])\n    # print(a[169])\n    # print(a[170])\n    # print(a[171])\n    # print(a[172])\n    # print(a[173])\n    # print(a[174])\n    # print(a[175])\n    # print(a[176])\n    # print(a[177])\n    # print(a[178])\n    # print(a[179])\n    # print(a[180])\n    # print(a[181])\n    # print(a[182])\n    # print(a[183])\n    # print(a[184])\n    # print(a[185])\n    # print(a[186])\n    # print(a[187])\n    # print(a[188])\n    # print(a[189])\n    # print(a[190])\n    # print(a[191])\n    # print(a[192])\n    # print(a[193])\n    # print(a[194])\n    # print(a[195])\n    # print(a[196])\n    # print(a[197])\n    # print(a[198])\n    # print(a[199])\n    # print(a[200])\n    # print(a[201])\n    # print(a[202])\n",
            "Expected Answer": -20,
            "Answer": -20.0,
            "Final Answer": -20.0
        },
        {
            "Index": 85,
            "GT": 249,
            "Query": "4 * 4 * 7 * 2 + 2 * 9 + 8 + 5 - 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 7 = 112\n112 * 2 = 224\n2 * 9 = 18\n224 + 18 = 242\n242 + 8 = 250\n250 + 5 = 254\n254 - 6 =",
            "Response": " 248",
            "Extract-Response": " 248\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", num) != EOF)\n    {\n        sum = 0;\n        l = strlen(num);\n\n        for(i = 0; i < l; i++)\n        {\n            if(num[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(num[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(num[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(num[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(num[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n\n        printf(\"%d\\n\", sum);\n    }\n\n    return 0;\n}",
            "Expected Answer": 248,
            "Answer": 248.0,
            "Final Answer": 248.0
        },
        {
            "Index": 86,
            "GT": -8,
            "Query": "7 + 1 + 3 - 2 * 2 * 5 + 6 + 4 - 9 =   ",
            "Injected CoT": "2 * 5 = 10\n7 + 1 + 3 - 10 = 1\n1 + 7 + 4 - 9 =",
            "Response": " 3\n3 + 1 = 4\n\n4\n\n*/",
            "Extract-Response": " 4",
            "Expected Answer": 3,
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 88,
            "GT": 69,
            "Query": "6 * 8 + 7 - 3 * 4 + 8 + 6 + 9 + 3 =   ",
            "Injected CoT": "6 * 8 = 48\n2 * 4 = 12\n48 + 7 = 55\n55 - 12 = 43\n43 + 8 = 51\n51 + 6 = 57\n57 + 9 = 66\n66 + 2 =",
            "Response": " 68",
            "Extract-Response": " 68\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 68,
            "Answer": 68.0,
            "Final Answer": 68.0
        },
        {
            "Index": 90,
            "GT": 109,
            "Query": "4 * 3 * 6 + 6 * 8 - 8 - 9 - 1 + 7 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 6 = 72\n6 * 8 = 48\n72 + 48 = 120\n120 - 8 = 112\n112 - 9 = 103\n103 - 1 = 102\n102 + 8 =",
            "Response": " 110",
            "Extract-Response": " 110\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    bool isNumber = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            continue;\n        }\n\n        if (s[i] == '+') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        if (s[i] == '-') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = -1;\n            continue;\n        }\n\n        if (s[i] == '*') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        if (s[i] == '/') {\n            if (isNumber) {\n                result += sign * currentNumber;\n                currentNumber = 0;\n                isNumber = false;\n            }\n            sign = 1;\n            continue;\n        }\n\n        currentNumber = currentNumber * 10 + s[i] - '0';\n        isNumber = true;\n    }\n\n    if (isNumber) {\n        result += sign * currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 110,
            "Answer": 110.0,
            "Final Answer": 110.0
        },
        {
            "Index": 91,
            "GT": 75,
            "Query": "6 + 3 * 1 + 6 * 5 + 8 * 5 - 2 - 2 =   ",
            "Injected CoT": "3 * 1 = 3\n6 * 5 = 30\n8 * 5 = 40\n6 + 3 = 9\n9 + 3 = 12\n12 + 30 = 42\n42 + 40 = 82\n82 - 2 = 81\n81 - 2 =",
            "Response": " 79\n\n79",
            "Extract-Response": " 79\n\n*/",
            "Expected Answer": 79,
            "Answer": 79.0,
            "Final Answer": 79.0
        },
        {
            "Index": 92,
            "GT": -69,
            "Query": "7 + 6 - 3 * 4 - 5 * 3 - 9 * 7 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n5 * 3 = 15\n9 * 7 = 63\n7 + 6 = 13\n13 - 12 = 1\n1 - 15 = -14\n-14 - 63 = -77\n-77 + 7 =",
            "Response": " -70\n-70 + 8 = -62",
            "Extract-Response": " -62\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 1; i <= n; ++i) {\n        int sum = 0;\n        int x = i;\n        while (x) {\n            sum += x % 10;\n            x /= 10;\n        }\n        if (sum >= a && sum <= b) {\n            result += i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -70,
            "Answer": -62.0,
            "Final Answer": -62.0
        },
        {
            "Index": 93,
            "GT": 15,
            "Query": "7 - 7 + 7 + 2 * 2 * 2 + 5 - 7 + 2 =   ",
            "Injected CoT": "2 * 2 = 4\n2 * 4 = 8\n7 - 7 = 0\n0 + 7 = 7\n7 + 8 = 15\n15 + 5 = 20\n20 - 7 = 12\n12 + 2 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of given array won't exceed 1000.\nThe integers in given array are in the range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 14,
            "Answer": 14.0,
            "Final Answer": 14.0
        },
        {
            "Index": 94,
            "GT": 48,
            "Query": "4 * 4 + 5 * 5 + 8 + 5 * 1 + 3 - 9 =   ",
            "Injected CoT": "4 * 4 = 16\n5 * 5 = 25\n16 + 25 = 41\n5 * 1 = 5\n8 + 5 = 13\n41 + 5 = 46\n46 + 3 = 49\n49 - 10 =",
            "Response": " 39",
            "Extract-Response": "\n\n39.",
            "Expected Answer": 39,
            "Answer": 39.0,
            "Final Answer": 39.0
        },
        {
            "Index": 96,
            "GT": 354,
            "Query": "1 - 4 + 6 * 7 - 9 + 6 * 3 * 2 * 9 =   ",
            "Injected CoT": "6 * 7 = 42\n-4 + 42 = 38\n6 * 3 = 18\n18 * 2 = 36\n36 * 9 = 324\n1 - 9 = -9\n38 + 324 = 362\n-9 + 362 =",
            "Response": " 353",
            "Extract-Response": "\n\n1 - 4 + 6 * 7 - 9 + 6 * 3 * 2 * 9 = 353",
            "Expected Answer": 353,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 99,
            "GT": 408,
            "Query": "6 * 5 * 3 * 1 + 8 - 5 + 5 * 9 * 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 3 = 90\n90 * 1 = 90\n90 + 8 = 98\n5 * 9 = 45\n45 * 7 = 314\n98 + 314 =",
            "Response": " 412",
            "Extract-Response": " 412.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prev_sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            prev_sign = sign;\n        } else if (s[i] == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n            prev_sign = sign;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 412,
            "Answer": 412.0,
            "Final Answer": 412.0
        },
        {
            "Index": 101,
            "GT": -119,
            "Query": "4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =   ",
            "Injected CoT": "4 * 4 = 15\n15 * 1 = 15\n5 * 3 = 15\n15 * 6 = 90\n5 * 8 = 40\n90 + 40 = 130\n130 + 5 = 135\n15 - 135 =",
            "Response": " -120\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 16\n16 * 1 = 16\n5 * 3 = 15\n16 * 6 = 96\n5 * 8 = 40\n96 + 40 = 136\n136 + 5 = 141\n16 - 141 = -125\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 17\n17 * 1 = 17\n5 * 3 = 15\n17 * 6 = 102\n5 * 8 = 40\n102 + 40 = 142\n142 + 5 = 147\n17 - 147 = -130\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 18\n18 * 1 = 18\n5 * 3 = 15\n18 * 6 = 108\n5 * 8 = 40\n108 + 40 = 148\n148 + 5 = 153\n18 - 153 = -135\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 19\n19 * 1 = 19\n5 * 3 = 15\n19 * 6 = 114\n5 * 8 = 40\n114 + 40 = 154\n154 + 5 = 159\n19 - 159 = -140\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 20\n20 * 1 = 20\n5 * 3 = 15\n20 * 6 = 120\n5 * 8 = 40\n120 + 40 = 160\n160 + 5 = 165\n20 - 165 = -145\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 21\n21 * 1 = 21\n5 * 3 = 15\n21 * 6 = 126\n5 * 8 = 40\n126 + 40 = 166\n166 + 5 = 171\n21 - 171 = -150\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 22\n22 * 1 = 22\n5 * 3 = 15\n22 * 6 = 132\n5 * 8 = 40\n132 + 40 = 172\n172 + 5 = 177\n22 - 177 = -155\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 23\n23 * 1 = 23\n5 * 3 = 15\n23 * 6 = 138\n5 * 8 = 40\n138 + 40 = 178\n178 + 5 = 183\n23 - 183 = -160\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 24\n24 * 1 = 24\n5 * 3 = 15\n24 * 6 = 144\n5 * 8 = 40\n144 + 40 = 184\n184 + 5 = 189\n24 - 189 = -165\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 25\n25 * 1 = 25\n5 * 3 = 15\n25 * 6 = 150\n5 * 8 = 40\n150 + 40 = 190\n190 + 5 = 195\n25 - 195 = -170\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 26\n26 * 1 = 26\n5 * 3 = 15\n26 * 6 = 156\n5 * 8 = 40\n156 + 40 = 196\n196 + 5 = 201\n26 - 201 = -175\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 27\n27 * 1 = 27\n5 * 3 = 15\n27 * 6 = 162\n5 * 8 = 40\n162 + 40 = 202\n202 + 5 = 207\n27 - 207 = -180\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 28\n28 * 1 = 28\n5 * 3 = 15\n28 * 6 = 168\n5 * 8 = 40\n168 + 40 = 208\n208 + 5 = 213\n28 - 213 = -185\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 29\n29 * 1 = 29\n5 * 3 = 15\n29 * 6 = 174\n5 * 8 = 40\n174 + 40 = 214\n214 + 5 = 219\n29 - 219 = -190\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 30\n30 * 1 = 30\n5 * 3 = 15\n30 * 6 = 180\n5 * 8 = 40\n180 + 40 = 220\n220 + 5 = 225\n30 - 225 = -195\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 31\n31 * 1 = 31\n5 * 3 = 15\n31 * 6 = 186\n5 * 8 = 40\n186 + 40 = 226\n226 + 5 = 231\n31 - 231 = -200\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 32\n32 * 1 = 32\n5 * 3 = 15\n32 * 6 = 192\n5 * 8 = 40\n192 + 40 = 232\n232 + 5 = 237\n32 - 237 = -205\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 33\n33 * 1 = 33\n5 * 3 = 15\n33 * 6 = 198\n5 * 8 = 40\n198 + 40 = 238\n238 + 5 = 243\n33 - 243 = -210\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 34\n34 * 1 = 34\n5 * 3 = 15\n34 * 6 = 204\n5 * 8 = 40\n204 + 40 = 244\n244 + 5 = 249\n34 - 249 = -215\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 35\n35 * 1 = 35\n5 * 3 = 15\n35 * 6 = 210\n5 * 8 = 40\n210 + 40 = 250\n250 + 5 = 255\n35 - 255 = -220\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 36\n36 * 1 = 36\n5 * 3 = 15\n36 * 6 = 216\n5 * 8 = 40\n216 + 40 = 256\n256 + 5 = 261\n36 - 261 = -225\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 37\n37 * 1 = 37\n5 * 3 = 15\n37 * 6 = 222\n5 * 8 = 40\n222 + 40 = 262\n262 + 5 = 267\n37 - 267 = -230\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 38\n38 * 1 = 38\n5 * 3 = 15\n38 * 6 = 228\n5 * 8 = 40\n228 + 40 = 268\n268 + 5 = 273\n38 - 273 = -235\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 39\n39 * 1 = 39\n5 * 3 = 15\n39 * 6 = 234\n5 * 8 = 40\n234 + 40 = 274\n274 + 5 = 279\n39 - 279 = -240\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 40\n40 * 1 = 40\n5 * 3 = 15\n40 * 6 = 240\n5 * 8 = 40\n240 + 40 = 280\n280 + 5 = 285\n40 - 285 = -245\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 41\n41 * 1 = 41\n5 * 3 = 15\n41 * 6 = 246\n5 * 8 = 40\n246 + 40 = 286\n286 + 5 = 291\n41 - 291 = -250\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 42\n42 * 1 = 42\n5 * 3 = 15\n42 * 6 = 252\n5 * 8 = 40\n252 + 40 = 292\n292 + 5 = 297\n42 - 297 = -255\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 43\n43 * 1 = 43\n5 * 3 = 15\n43 * 6 = 258\n5 * 8 = 40\n258 + 40 = 298\n298 + 5 = 303\n43 - 303 = -260\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 44\n44 * 1 = 44\n5 * 3 =",
            "Extract-Response": "\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =     -265",
            "Expected Answer": -120,
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 102,
            "GT": 6,
            "Query": "6 - 3 - 3 - 3 + 5 - 9 + 1 + 8 + 4 =   ",
            "Injected CoT": "6 - 3 = 3\n3 - 3 = 0\n0 - 3 = -3\n-3 + 5 = 3\n3 - 9 = -7\n-7 + 1 = -6\n-6 + 8 = 3\n3 + 4 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 103,
            "GT": -122,
            "Query": "9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =   ",
            "Injected CoT": "9 * 9 = 80\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 7 = 56\n7 * 3 = 21\n7 * 3 * 7 = 147\n56 + 147 = 203\n80 - 203 =",
            "Response": " -123\n\n-123 is not a palindrome.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 109.\n\n[output] boolean\n\ntrue if n is a palindrome, false otherwise.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"",
            "Extract-Response": "\n\ndef isPalindrome(n):\n    return str(n) == str(n)[::-1]",
            "Expected Answer": -123,
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 104,
            "GT": 227,
            "Query": "3 * 8 * 1 * 9 + 8 - 9 - 6 + 9 + 9 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 1 = 24\n24 * 9 = 216\n216 + 8 = 224\n224 - 9 = 215\n215 - 6 = 209\n209 + 9 = 219\n219 + 9 =",
            "Response": " 228",
            "Extract-Response": "\n\n228.",
            "Expected Answer": 228,
            "Answer": 228.0,
            "Final Answer": 228.0
        },
        {
            "Index": 106,
            "GT": 1005,
            "Query": "8 * 9 * 5 * 3 - 3 * 7 - 5 - 7 * 7 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 5 = 360\n360 * 3 = 1081\n3 * 7 = 21\n7 * 7 = 49\n21 + 5 = 26\n49 + 26 = 75\n1081 - 75 =",
            "Response": " 1006\n\n1006\n\n*/",
            "Extract-Response": " 1006\n\n*/",
            "Expected Answer": 1006,
            "Answer": 1006.0,
            "Final Answer": 1006.0
        },
        {
            "Index": 107,
            "GT": -23,
            "Query": "7 * 8 - 8 - 2 - 2 - 4 - 9 - 6 * 9 =   ",
            "Injected CoT": "7 * 8 = 56\n56 - 8 = 48\n48 - 2 = 46\n46 - 2 = 44\n44 - 4 = 40\n40 - 9 = 31\n6 * 9 = 53\n31 - 53 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i=1;i<n;i++) {\n            int curr_max = max(max(max_prod*nums[i], min_prod*nums[i]), nums[i]);\n            int curr_min = min(min(max_prod*nums[i], min_prod*nums[i]), nums[i]);\n            ans = max(ans, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};",
            "Expected Answer": -22,
            "Answer": -22.0,
            "Final Answer": -22.0
        },
        {
            "Index": 108,
            "GT": 2,
            "Query": "4 + 8 + 8 + 7 - 3 * 1 * 3 - 4 * 4 =   ",
            "Injected CoT": "3 * 1 = 3\n4 * 4 = 16\n4 + 9 = 12\n12 + 9 = 20\n20 + 7 = 27\n27 - 3 = 24\n24 - 16 = 9\n9 - 7 =",
            "Response": " 2\n2 + 3 = 5\n\n5",
            "Extract-Response": "\n5\n\n*/",
            "Expected Answer": 2,
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 109,
            "GT": 112,
            "Query": "3 - 9 + 3 * 5 * 5 - 5 + 6 * 9 - 6 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 5 = 75\n3 - 9 = -6\n-6 + 75 = 69\n6 * 9 = 54\n69 + 54 = 123\n-5 - 6 = -11\n123 - 12 =",
            "Response": " 111",
            "Extract-Response": " 111\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]==' ')\n        {\n            flag=1;\n            continue;\n        }\n        if(flag==1)\n        {\n            flag=0;\n            continue;\n        }\n        if(s[i]>='0'&&s[i]<='9')\n        {\n            sum=sum*10+s[i]-48;\n        }\n        else\n        {\n            if(s[i]=='+')\n            {\n                flag=1;\n                continue;\n            }\n            if(s[i]=='-')\n            {\n                flag=2;\n                continue;\n            }\n            if(s[i]=='*')\n            {\n                flag=3;\n                continue;\n            }\n            if(s[i]=='/')\n            {\n                flag=4;\n                continue;\n            }\n            if(s[i]=='%')\n            {\n                flag=5;\n                continue;\n            }\n            if(s[i]=='^')\n            {\n                flag=6;\n                continue;\n            }\n        }\n        if(flag==1)\n        {\n            flag=0;\n            continue;\n        }\n        if(flag==2)\n        {\n            flag=0;\n            continue;\n        }\n        if(flag==3)\n        {\n            flag=0;\n            continue;\n        }\n        if(flag==4)\n        {\n            flag=0;\n            continue;\n        }\n        if(flag==5)\n        {\n            flag=0;\n            continue;\n        }\n        if(flag==6)\n        {\n            flag=0;\n            continue;\n        }\n    }\n    printf(\"The answer is  %d\\n\",sum);\n    return 0;\n}",
            "Expected Answer": 111,
            "Answer": 111.0,
            "Final Answer": 111.0
        },
        {
            "Index": 110,
            "GT": -6,
            "Query": "3 + 1 - 5 + 1 - 6 - 3 * 6 + 2 * 9 =   ",
            "Injected CoT": "3 + 1 = 4\n4 - 5 = -1\n-1 + 1 = 0\n0 - 6 = -6\n3 * 6 = 17\n2 * 9 = 17\n-6 + 17 = 12\n12 + 17 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634",
            "Expected Answer": 29,
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 111,
            "GT": 16,
            "Query": "7 + 1 + 5 + 1 - 9 + 2 - 5 + 7 + 7 =   ",
            "Injected CoT": "7 + 1 = 8\n8 + 5 = 13\n13 + 1 = 14\n14 - 10 = 5\n5 + 2 = 7\n7 - 5 = 2\n2 + 7 = 10\n10 + 7 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the given array is positive and will not exceed 10^5\nThe answer is guaranteed to fit in a 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 115,
            "GT": -7,
            "Query": "3 * 1 + 7 - 6 * 6 + 1 + 2 * 1 * 9 =   ",
            "Injected CoT": "3 * 1 = 3\n6 * 6 = 36\n2 * 1 = 2\n2 * 9 = 18\n3 + 7 = 10\n10 - 36 = -26\n-26 + 1 = -26\n-26 + 18 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Expected Answer": -8,
            "Answer": -8.0,
            "Final Answer": -8.0
        },
        {
            "Index": 117,
            "GT": -23,
            "Query": "3 + 7 + 8 - 3 + 2 * 8 - 5 - 7 * 7 =   ",
            "Injected CoT": "3 + 7 = 10\n10 + 8 = 18\n18 - 3 = 15\n2 * 8 = 16\n15 + 16 = 31\n31 - 5 = 27\n7 * 7 = 49\n27 - 49 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2 * 10^9, 2 * 10^9].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -22,
            "Answer": -22.0,
            "Final Answer": -22.0
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "3 * 3 + 8 - 9 * 1 + 9 - 3 + 1 - 9 =   ",
            "Injected CoT": "3 * 3 = 9\n9 + 8 = 17\n9 * 1 = 9\n17 - 9 = 8\n8 + 9 = 17\n17 - 3 = 14\n14 + 1 = 16\n16 - 9 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxRotateFunction(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        n = len(A)\n        sum_A = sum(A)\n        F = sum([i * A[i] for i in range(n)])\n        max_F = F\n        for i in range(1, n):\n            F = F + sum_A - n * A[n - i]\n            max_F = max(max_F, F)\n        return max_F",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 119,
            "GT": -4,
            "Query": "2 * 1 * 1 + 6 + 7 + 8 - 6 * 5 + 3 =   ",
            "Injected CoT": "2 * 1 = 2\n2 * 1 = 2\n2 + 6 = 8\n8 + 7 = 15\n15 + 8 = 23\n23 - 6 = 17\n17 * 5 = 85\n85 + 4 =",
            "Response": " 89",
            "Extract-Response": "\n\n89",
            "Expected Answer": 89,
            "Answer": 89.0,
            "Final Answer": 89.0
        },
        {
            "Index": 120,
            "GT": -128,
            "Query": "4 + 6 * 3 - 9 * 7 + 1 - 7 - 9 * 9 =   ",
            "Injected CoT": "6 * 3 = 18\n9 * 7 = 63\n9 * 9 = 80\n4 + 18 = 22\n22 - 63 = -41\n-41 + 1 = -40\n-40 - 7 = -47\n-47 - 80 =",
            "Response": " -127",
            "Extract-Response": " -127\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s6",
            "Expected Answer": -127,
            "Answer": -127.0,
            "Final Answer": -127.0
        },
        {
            "Index": 122,
            "GT": -14,
            "Query": "2 + 4 - 2 - 4 * 5 - 1 - 1 + 2 + 2 =   ",
            "Injected CoT": "4 * 5 = 20\n2 + 4 = 6\n6 - 2 = 4\n4 - 20 = -17\n-17 - 1 = -17\n-17 - 1 = -18\n-18 + 2 = -17\n-17 + 2 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            ans = max(ans, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};",
            "Expected Answer": -15,
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 124,
            "GT": 11,
            "Query": "6 * 1 + 1 * 7 + 9 - 9 + 1 - 8 + 5 =   ",
            "Injected CoT": "6 * 1 = 6\n1 * 7 = 7\n6 + 7 = 13\n13 + 9 = 22\n22 - 9 = 13\n13 + 1 = 14\n14 - 8 = 6\n6 + 6 =",
            "Response": " 12\n\n12",
            "Extract-Response": "\n\n12",
            "Expected Answer": 12,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 125,
            "GT": -10,
            "Query": "2 * 8 + 1 + 3 + 2 - 5 - 3 * 9 * 1 =   ",
            "Injected CoT": "2 * 8 = 16\n16 + 1 = 17\n17 + 3 = 20\n20 + 2 = 22\n9 * 1 = 9\n3 * 9 = 28\n28 * 1 = 28\n22 - 5 = 17\n17 - 28 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\"\"\"\n\nclass Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        sign = 1\n        res = 0\n        i = 0\n        while i < len(s):\n            if s[i] == ' ':\n                i += 1\n                continue\n            elif s[i] == '+':\n                sign = 1\n                i += 1\n            elif s[i] == '-':\n                sign = -1\n                i += 1\n            elif s[i] == '(':\n                stack.append(res)\n                stack.append(sign)\n                res = 0\n                sign = 1\n                i += 1\n            elif s[i] == ')':\n                res = res * stack.pop() + stack.pop()\n                i += 1\n            else:\n                cur = 0\n                while i < len(s) and s[i] >= '0' and s[i] <= '9':\n                    cur = cur * 10 + int(s[i])\n                    i += 1\n                res += cur * sign\n        return res",
            "Expected Answer": -11,
            "Answer": -11.0,
            "Final Answer": -11.0
        },
        {
            "Index": 126,
            "GT": 20,
            "Query": "5 + 6 + 4 + 4 * 3 - 2 * 3 + 7 - 8 =   ",
            "Injected CoT": "4 * 3 = 12\n2 * 3 = 6\n5 + 6 = 11\n11 + 4 = 15\n15 + 12 = 27\n27 - 6 = 21\n21 + 7 = 29\n29 - 8 =",
            "Response": " 21",
            "Extract-Response": " 21.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 21,
            "Answer": 21.0,
            "Final Answer": 21.0
        },
        {
            "Index": 128,
            "GT": 51,
            "Query": "5 + 7 + 3 - 2 + 5 * 6 * 1 + 9 - 1 =   ",
            "Injected CoT": "5 + 7 = 12\n12 + 3 = 15\n15 - 2 = 13\n5 * 6 = 30\n30 * 0 = 30\n13 + 30 = 43\n43 + 9 = 52\n52 - 0 =",
            "Response": " 52",
            "Extract-Response": " 52.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    char op = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\n            if (op == '+') {\n                result += curr;\n            } else if (op == '-') {\n                result -= curr;\n            } else if (op == '*') {\n                result *= curr;\n            } else if (op == '/') {\n                result /= curr;\n            }\n            curr = 0;\n            op = s[i];\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    if (op == '+') {\n        result += curr;\n    } else if (op == '-') {\n        result -= curr;\n    } else if (op == '*') {\n        result *= curr;\n    } else if (op == '/') {\n        result /= curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 52,
            "Answer": 52.0,
            "Final Answer": 52.0
        },
        {
            "Index": 129,
            "GT": -34,
            "Query": "7 - 5 + 6 * 2 + 7 - 7 + 1 - 7 * 7 =   ",
            "Injected CoT": "6 * 2 = 12\n8 * 8 = 49\n-5 + 12 = 8\n8 + 6 = 13\n13 + 8 = 20\n20 + 1 = 21\n21 - 49 = -28\n-28 - 8 =",
            "Response": " -36",
            "Extract-Response": " -36\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum;\n    gets(s);\n    len=strlen(s);\n    sum=0;\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            sum=sum+s[i+1]-48;\n            i++;\n        }\n        else if(s[i]=='-')\n        {\n            sum=sum-s[i+1]-48;\n            i++;\n        }\n        else if(s[i]=='*')\n        {\n            sum=sum*s[i+1]-48;\n            i++;\n        }\n        else if(s[i]=='/')\n        {\n            sum=sum/s[i+1]-48;\n            i++;\n        }\n        else\n        {\n            sum=sum+s[i]-48;\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
            "Expected Answer": -36,
            "Answer": -36.0,
            "Final Answer": -36.0
        },
        {
            "Index": 131,
            "GT": -85,
            "Query": "3 - 2 - 9 + 2 - 8 - 2 - 6 - 9 * 7 =   ",
            "Injected CoT": "-9 * 7 = -63\n4 - 2 - 9 + 2 - 8 - 2 - 6 - (-63) =",
            "Response": "\n4 - 2 - 9 + 2 - 8 - 2 - 6 + 63 =\n4 - 2 - 9 + 2 - 8 - 2 + 57 =\n4 - 2 - 9 + 2 - 8 + 55 =\n4 - 2 - 9 + 47 =\n4 - 2 + 45 =\n4 + 43 =\n47",
            "Extract-Response": "\n\n47",
            "Expected Answer": 42,
            "Answer": 47.0,
            "Final Answer": 47.0
        },
        {
            "Index": 132,
            "GT": 212,
            "Query": "8 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =   ",
            "Injected CoT": "8 * 9 = 72\n3 * 8 = 24\n24 * 5 = 120\n72 + 2 = 74\n120 + 74 = 195\n9 + 7 = 16\n195 + 16 =",
            "Response": " 211\n2 + 3 = 5\n211 + 5 = 216\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n3 + 4 = 7\n232 + 7 = 239\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n4 + 5 = 9\n232 + 9 = 241\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n5 + 6 = 11\n232 + 11 = 243\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n6 + 7 = 13\n232 + 13 = 245\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n7 + 8 = 15\n232 + 15 = 247\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n8 + 9 = 17\n232 + 17 = 249\n\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 =\n2 * 3 = 6\n3 * 4 = 12\n4 * 5 = 20\n5 * 6 = 30\n6 * 7 = 42\n7 * 8 = 56\n8 * 9 = 72\n12 + 20 = 32\n30 + 42 = 72\n56 + 72 = 128\n32 + 72 = 104\n128 + 104 = 232\n9 + 2 = 11\n232 + 11 = 243",
            "Extract-Response": "\n\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 = 362880\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 = 362882\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 = 362883\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 = 362884\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 = 362885\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 = 362886\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 = 362887\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 = 362888\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 = 362889\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 2 = 47\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 3 = 48\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 4 = 49\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 5 = 50\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 6 = 51\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 7 = 52\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 8 = 53\n2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 9 = 54\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 = 362885\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 = 362888\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 = 362893\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 = 362898\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 = 362903\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 = 362908\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 + 9 = 362913\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 + 2 = 362915\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 + 4 = 362889\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 + 5 = 362894\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 + 6 = 362899\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 + 7 = 362904\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 + 8 = 362909\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 + 9 = 362914\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 + 9 + 2 = 362916\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 + 2 + 3 = 362918\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 + 4 + 5 = 362898\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 + 5 + 6 = 362903\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 + 6 + 7 = 362908\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 + 7 + 8 = 362913\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 + 8 + 9 = 362918\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 + 9 + 2 = 362920\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 + 9 + 2 + 3 = 362923\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 + 2 + 3 + 4 = 362927\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 + 4 + 5 + 6 = 362904\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 + 5 + 6 + 7 = 362909\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 + 6 + 7 + 8 = 362914\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 + 7 + 8 + 9 = 362919\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 + 8 + 9 + 2 = 362921\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 + 9 + 2 + 3 = 362924\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 + 9 + 2 + 3 + 4 = 362928\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 + 2 + 3 + 4 + 5 = 362933\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 + 4 + 5 + 6 + 7 = 362909\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 + 5 + 6 + 7 + 8 = 362914\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 + 6 + 7 + 8 + 9 = 362919\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 + 7 + 8 + 9 + 2 = 362921\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 + 8 + 9 + 2 + 3 = 362924\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 + 9 + 2 + 3 + 4 = 362928\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 + 9 + 2 + 3 + 4 + 5 = 362933\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 + 2 + 3 + 4 + 5 + 6 = 362938\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 362914\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 362919\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 + 6 + 7 + 8 + 9 + 2 = 362921\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 + 7 + 8 + 9 + 2 + 3 = 362924\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 + 8 + 9 + 2 + 3 + 4 = 362928\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 + 9 + 2 + 3 + 4 + 5 = 362933\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 8 + 9 + 2 + 3 + 4 + 5 + 6 = 362938\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 9 + 2 + 3 + 4 + 5 + 6 + 7 = 362943\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 362919\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 2 = 362921\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 4 + 5 + 6 + 7 + 8 + 9 + 2 + 3 = 362924\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 5 + 6 + 7 + 8 + 9 + 2 + 3 + 4 = 362928\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 6 + 7 + 8 + 9 + 2 + 3 + 4 + 5 = 362933\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 7 + 8 + 9 + 2 + 3 + 4 + 5 + 6 = 362938\n2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 +",
            "Expected Answer": 211,
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 134,
            "GT": -34,
            "Query": "7 * 6 + 8 - 3 - 2 - 7 * 9 - 2 * 8 =   ",
            "Injected CoT": "7 * 6 = 42\n42 + 8 = 50\n50 - 3 = 47\n47 - 2 = 45\n7 * 9 = 63\n2 * 8 = 16\n63 + 16 = 80\n45 - 80 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nNote:\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Expected Answer": -35,
            "Answer": -35.0,
            "Final Answer": -35.0
        },
        {
            "Index": 136,
            "GT": 5,
            "Query": "9 * 1 - 2 * 8 * 5 + 3 - 8 + 9 * 9 =   ",
            "Injected CoT": "9 * 1 = 9\n2 * 8 = 16\n16 * 5 = 80\n9 - 80 = -71\n-71 + 3 = -68\n-68 - 8 = -76\n9 * 9 = 82\n-76 + 82 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '=') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 6,
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 138,
            "GT": 60,
            "Query": "4 * 8 - 3 - 6 - 2 - 6 + 3 + 6 * 7 =   ",
            "Injected CoT": "4 * 8 = 32\n32 - 3 = 29\n29 - 6 = 23\n23 - 2 = 21\n21 - 6 = 15\n15 + 3 = 18\n6 * 7 = 43\n18 + 43 =",
            "Response": " 61",
            "Extract-Response": " 61.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 61,
            "Answer": 61.0,
            "Final Answer": 61.0
        },
        {
            "Index": 140,
            "GT": -24,
            "Query": "2 * 4 + 7 - 7 * 3 - 3 + 9 - 8 * 3 =   ",
            "Injected CoT": "2 * 4 = 8\n8 + 7 = 15\n7 * 3 = 21\n15 - 21 = -6\n-6 - 3 = -9\n-9 + 9 = 0\n8 * 3 = 23\n0 - 23 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -23,
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 141,
            "GT": 31,
            "Query": "4 + 9 + 9 - 6 + 3 + 3 + 9 + 3 - 3 =   ",
            "Injected CoT": "4 + 9 = 13\n13 + 9 = 22\n22 - 6 = 16\n16 + 2 = 19\n19 + 2 = 22\n22 + 9 = 31\n31 + 2 = 34\n34 - 2 =",
            "Response": " 32\n32 - 3 = 29\n29 + 3 = 32\n32 - 3 = 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 32,
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 142,
            "GT": -7,
            "Query": "6 * 4 - 9 * 2 - 8 - 2 * 3 + 6 - 5 =   ",
            "Injected CoT": "6 * 4 = 24\n9 * 2 = 18\n2 * 3 = 6\n24 - 18 = 6\n6 - 8 = -2\n-2 + 6 = 4\n4 - 6 =",
            "Response": " -2\n-2 - 5 = -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of given array won't exceed 1000.\nThe answer is guaranteed to fit in 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -2,
            "Answer": -7.0,
            "Final Answer": -7.0
        },
        {
            "Index": 145,
            "GT": -23,
            "Query": "7 + 9 * 8 + 1 * 3 + 3 - 9 * 3 * 4 =   ",
            "Injected CoT": "9 * 8 = 72\n1 * 3 = 3\n9 * 3 = 27\n27 * 4 = 108\n7 + 72 = 79\n79 + 3 = 82\n82 + 3 = 84\n84 - 108 =",
            "Response": " -24",
            "Extract-Response": " -24.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<int>& nums, int i, int j, int sign) {\n        if (i > j) {\n            return 0;\n        }\n        int res = 0;\n        int cur = 0;\n        int cur_sign = 1;\n        for (int k = i; k <= j; k++) {\n            if (nums[k] == ' ') {\n                res += sign * cur_sign * cur;\n                cur = 0;\n                cur_sign = 1;\n            } else if (nums[k] == '+') {\n                res += sign * cur_sign * cur;\n                cur = 0;\n                cur_sign = 1;\n                sign = 1;\n            } else if (nums[k] == '-') {\n                res += sign * cur_sign * cur;\n                cur = 0;\n                cur_sign = 1;\n                sign = -1;\n            } else if (nums[k] == '*') {\n                res += sign * cur_sign * cur;\n                cur = 0;\n                cur_sign = 1;\n                sign = 1;\n                cur = calc(nums, k + 1, j, sign);\n                k = j;\n            } else if (nums[k] == '/') {\n                res += sign * cur_sign * cur;\n                cur = 0;\n                cur_sign = 1;\n                sign = 1;\n                cur = calc(nums, k + 1, j, sign);\n                k = j;\n            } else {\n                cur = cur * 10 + nums[k] - '0';\n            }\n        }\n        res += sign * cur_sign * cur;\n        return res;\n    }\n    int calculate(string s) {\n        vector<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            nums.push_back(s[i]);\n        }\n        return calc(nums, 0, nums.size() - 1, 1);\n    }\n};",
            "Expected Answer": -24,
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 146,
            "GT": -22,
            "Query": "2 + 6 - 8 - 6 + 9 * 1 - 7 * 3 - 4 =   ",
            "Injected CoT": "9 * 1 = 9\n7 * 3 = 21\n2 + 6 = 8\n8 - 8 = 0\n0 - 6 = -6\n-6 + 9 = 3\n3 - 21 = -18\n-18 - 3 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer a\n\nGuaranteed constraints:\n-100 \u2264 a \u2264 1000.\n\n[input] integer b\n\nGuaranteed constraints:\n-100 \u2264 b \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    return a / b\n\ndef main():\n    print(add(1, 2))\n    print(subtract(4, 2))\n    print(multiply(2, 1))\n    print(divide(8, 2))\n\nif __name__ == '__main__':\n    main()",
            "Expected Answer": -21,
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 147,
            "GT": 130,
            "Query": "8 + 7 + 3 + 9 * 5 - 6 + 9 + 8 * 8 =   ",
            "Injected CoT": "8 * 5 = 45\n8 + 7 = 15\n15 + 3 = 18\n18 + 45 = 63\n8 * 8 = 64\n8 + 64 = 73\n73 - 6 = 67\n67 + 8 =",
            "Response": " 75\n75 + 9 = 84",
            "Extract-Response": " 84\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int cur = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += cur;\n            cur = 0;\n        }\n        cur = cur * 10 + s[i] - '0';\n    }\n    result += cur;\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 75,
            "Answer": 84.0,
            "Final Answer": 84.0
        },
        {
            "Index": 148,
            "GT": 10,
            "Query": "9 + 4 + 2 - 5 * 1 - 4 + 7 + 5 - 8 =   ",
            "Injected CoT": "9 + 4 = 13\n13 + 2 = 15\n15 - 5 = 10\n10 - 1 = 9\n9 - 4 = 5\n5 + 7 = 12\n12 + 5 = 16\n16 - 8 =",
            "Response": " 8",
            "Extract-Response": " 8\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 8,
            "Answer": 8.0,
            "Final Answer": 8.0
        },
        {
            "Index": 149,
            "GT": -35,
            "Query": "2 * 1 - 4 * 7 - 5 - 4 - 6 + 3 * 2 =   ",
            "Injected CoT": "2 * 1 = 2\n4 * 7 = 28\n3 * 2 = 6\n2 - 28 = -26\n-26 - 5 = -31\n-31 - 4 = -35\n-35 - 6 = -40\n-40 + 6 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\nThe space between two operators and numbers should be a single space.\nEach test case has  lines.\nThe answer for each test case would be printed in a separate line.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[1000];\n    int i,j,k,l,m,n,t,x,y,flag,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(i=1;i<=t;i++)\n    {\n        gets(s);\n        l=strlen(s);\n        flag=0;\n        sum=0;\n        for(j=0;j<l;j++)\n        {\n            if(s[j]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                x=s[j]-'0';\n                flag=1;\n            }\n            else\n            {\n                y=s[j]-'0';\n                flag=0;\n                if(x==1)\n                {\n                    sum=sum+y;\n                }\n                else if(x==2)\n                {\n                    sum=sum-y;\n                }\n                else if(x==3)\n                {\n                    sum=sum*y;\n                }\n                else if(x==4)\n                {\n                    sum=sum/y;\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}",
            "Expected Answer": -34,
            "Answer": -34.0,
            "Final Answer": -34.0
        },
        {
            "Index": 150,
            "GT": -32,
            "Query": "3 * 5 - 2 - 8 * 8 + 9 + 4 + 2 * 3 =   ",
            "Injected CoT": "3 * 5 = 15\n8 * 8 = 64\n15 - 2 = 13\n13 - 64 = -51\n9 + 4 = 13\n2 * 3 = 5\n-51 + 13 = -38\n-38 + 5 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -33,
            "Answer": -33.0,
            "Final Answer": -33.0
        },
        {
            "Index": 151,
            "GT": 0,
            "Query": "1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =   ",
            "Injected CoT": "5 * 1 = 5\n1 - 4 = -3\n-3 + 9 = 6\n6 + 4 = 10\n10 - 5 = 5\n5 - 7 = -2\n-2 - 3 = -6\n-6 + 5 =",
            "Response": " -1",
            "Extract-Response": " -1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < n; ++i) {\n        char sign;\n        cin >> sign;\n\n        if (sign == '*') {\n            int number;\n            cin >> number;\n            if (currentSign == '+') {\n                currentNumber *= number;\n            } else if (currentSign == '-') {\n                currentNumber *= number;\n            } else if (currentSign == '=') {\n                currentNumber *= number;\n            }\n        } else {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else if (currentSign == '-') {\n                result -= currentNumber;\n            } else if (currentSign == '=') {\n                result = currentNumber;\n            }\n            currentNumber = 0;\n            currentSign = sign;\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else if (currentSign == '-') {\n        result -= currentNumber;\n    } else if (currentSign == '=') {\n        result = currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -1,
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 152,
            "GT": -109,
            "Query": "6 + 3 - 2 * 8 - 4 * 5 * 5 + 3 - 5 =   ",
            "Injected CoT": "2 * 8 = 16\n4 * 5 = 20\n20 * 5 = 100\n6 + 3 = 9\n9 - 16 = -7\n-7 - 100 = -107\n-107 + 3 = -103\n-103 - 5 =",
            "Response": " -108",
            "Extract-Response": " -108\n</code>\n",
            "Expected Answer": -108,
            "Answer": -108.0,
            "Final Answer": -108.0
        },
        {
            "Index": 153,
            "GT": 42,
            "Query": "6 * 6 - 4 * 2 + 2 * 9 - 5 - 5 + 6 =   ",
            "Injected CoT": "6 * 6 = 37\n4 * 2 = 8\n2 * 9 = 18\n37 - 8 = 28\n28 + 18 = 46\n5 + 5 = 10\n46 - 10 = 37\n37 + 6 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 43,
            "Answer": 43.0,
            "Final Answer": 43.0
        },
        {
            "Index": 156,
            "GT": -3,
            "Query": "4 * 5 + 2 + 8 - 1 * 4 - 4 * 6 - 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 + 1 = 22\n22 + 8 = 30\n1 * 4 = 4\n4 * 6 = 24\n30 - 4 = 26\n26 - 24 = 1\n1 - 5 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Expected Answer": -4,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 159,
            "GT": 22,
            "Query": "6 + 4 * 2 * 2 + 1 * 3 - 7 + 1 + 3 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 2 = 16\n1 * 2 = 2\n6 + 16 = 22\n22 + 2 = 25\n25 - 7 = 18\n18 + 1 = 19\n19 + 2 =",
            "Response": " 21\n21 + 3 = 24\n24 - 1 = 23\n\n23",
            "Extract-Response": " 23\n\n*/",
            "Expected Answer": 21,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 162,
            "GT": 84,
            "Query": "3 - 3 + 9 * 8 + 6 - 9 + 9 - 3 + 9 =   ",
            "Injected CoT": "8 * 8 = 72\n3 - 3 = 0\n0 + 72 = 72\n72 + 6 = 78\n78 - 8 = 69\n69 + 8 = 78\n78 - 3 = 75\n75 + 8 =",
            "Response": " 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n76 + 8 = 84\n84 - 9 = 75\n75 + 8 = 83\n83 - 9 = 74\n74 + 8 = 82\n82 - 9 = 73\n73 + 8 = 81\n81 - 9 = 72\n72 + 8 = 80\n80 - 9 = 71\n71 + 8 = 80\n80 - 3 = 77\n77 + 8 = 85\n85 - 9 = 76\n",
            "Extract-Response": "\n\n77",
            "Expected Answer": 83,
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 165,
            "GT": 77,
            "Query": "9 * 8 + 5 + 1 - 2 - 9 + 7 + 8 - 5 =   ",
            "Injected CoT": "9 * 8 = 72\n72 + 5 = 77\n77 + 1 = 78\n78 - 2 = 76\n76 - 9 = 67\n67 + 7 = 74\n74 + 8 = 83\n83 - 5 =",
            "Response": " 78",
            "Extract-Response": " 78\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == '+')\n        {\n            for(j = i + 1; j < len; j++)\n            {\n                if(str[j] == '+' || str[j] == '-')\n                {\n                    sum += atoi(str + i + 1);\n                    i = j - 1;\n                    break;\n                }\n            }\n        }\n        else if(str[i] == '-')\n        {\n            for(j = i + 1; j < len; j++)\n            {\n                if(str[j] == '+' || str[j] == '-')\n                {\n                    sum -= atoi(str + i + 1);\n                    i = j - 1;\n                    break;\n                }\n            }\n        }\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/",
            "Expected Answer": 78,
            "Answer": 78.0,
            "Final Answer": 78.0
        },
        {
            "Index": 166,
            "GT": -29,
            "Query": "8 - 3 * 7 - 1 - 7 - 8 + 7 - 2 - 5 =   ",
            "Injected CoT": "3 * 7 = 21\n8 - 21 = -13\n-13 - 1 = -14\n-14 - 7 = -21\n-21 - 8 = -29\n-29 + 7 = -22\n-22 - 2 = -24\n-24 - 4 =",
            "Response": " -28\n-28 + 5 = -23",
            "Extract-Response": " -23\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        if (d < a) {\n            d = a;\n        } else if (d > b) {\n            d = b;\n        }\n        if (s == \"East\") {\n            result += d;\n        } else {\n            result -= d;\n        }\n    }\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}",
            "Expected Answer": -28,
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 168,
            "GT": 22,
            "Query": "2 * 9 - 1 - 8 + 7 + 9 + 3 + 1 - 7 =   ",
            "Injected CoT": "2 * 9 = 18\n18 - 1 = 17\n17 - 8 = 9\n9 + 7 = 16\n16 + 9 = 25\n25 + 3 = 28\n28 + 1 = 30\n30 - 7 =",
            "Response": " 23",
            "Extract-Response": " 23\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 23,
            "Answer": 23.0,
            "Final Answer": 23.0
        },
        {
            "Index": 171,
            "GT": 64,
            "Query": "8 * 5 * 2 + 9 + 3 - 1 - 9 * 3 * 1 =   ",
            "Injected CoT": "8 * 5 = 40\n40 * 2 = 80\n9 + 3 = 12\n80 + 12 = 92\n9 * 3 = 27\n27 * 1 = 27\n1 - 27 = -25\n92 - (-26) =",
            "Response": " 118",
            "Extract-Response": " 118\n</code>\n",
            "Expected Answer": 118,
            "Answer": 118.0,
            "Final Answer": 118.0
        },
        {
            "Index": 172,
            "GT": 113,
            "Query": "8 * 6 * 6 + 2 - 1 - 8 - 3 * 7 * 8 =   ",
            "Injected CoT": "8 * 6 = 48\n48 * 6 = 288\n288 + 2 = 290\n290 - 1 = 289\n289 - 8 = 280\n3 * 7 = 21\n21 * 8 = 168\n280 - 168 =",
            "Response": " 112\n\n112\n\n*/",
            "Extract-Response": "\n\n112",
            "Expected Answer": 112,
            "Answer": 112.0,
            "Final Answer": 112.0
        },
        {
            "Index": 173,
            "GT": 19,
            "Query": "2 + 4 + 8 - 3 + 3 + 4 + 9 - 9 + 1 =   ",
            "Injected CoT": "2 + 4 = 6\n6 + 8 = 14\n14 - 3 = 11\n11 + 3 = 14\n14 + 4 = 19\n19 + 9 = 27\n27 - 9 = 19\n19 + 1 =",
            "Response": " 20\n\n20",
            "Extract-Response": "\n\n20",
            "Expected Answer": 20,
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 176,
            "GT": 10,
            "Query": "4 + 2 + 2 - 2 + 7 * 2 - 5 - 9 + 4 =   ",
            "Injected CoT": "5 + 2 = 6\n6 + 2 = 8\n8 - 2 = 6\n6 + 7 * 2 = 20\n20 - 5 = 15\n15 - 9 = 6\n6 + 5 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Expected Answer": 11,
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 178,
            "GT": 40,
            "Query": "2 * 7 + 3 - 3 * 3 + 4 - 8 + 4 * 9 =   ",
            "Injected CoT": "2 * 7 = 14\n3 * 3 = 9\n3 * 9 = 36\n14 + 3 = 17\n17 - 9 = 8\n8 + 3 = 12\n12 - 8 = 3\n3 + 36 =",
            "Response": " 39\n39 + 4 = 43\n43 - 4 = 39\n39 + 9 = 48",
            "Extract-Response": "\n48\n</code>\n",
            "Expected Answer": 39,
            "Answer": 48.0,
            "Final Answer": 48.0
        },
        {
            "Index": 180,
            "GT": 2,
            "Query": "8 - 9 - 5 - 2 + 8 * 1 + 1 - 6 + 7 =   ",
            "Injected CoT": "8 - 9 = -1\n-1 - 5 = -6\n-6 - 2 = -8\n8 * 1 = 8\n-8 + 8 = 0\n0 + 1 = 1\n1 - 6 = -6\n-6 + 7 =",
            "Response": " 1",
            "Extract-Response": " 1.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer to the given expression.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0",
            "Expected Answer": 1,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 184,
            "GT": 79,
            "Query": "4 + 9 * 6 * 2 + 4 - 4 * 4 * 2 - 5 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 2 = 108\n4 + 108 = 112\n4 * 4 = 16\n16 * 2 = 32\n32 - 4 = 28\n112 - 28 = 83\n83 - 5 =",
            "Response": " 78\n\n78",
            "Extract-Response": " 78\n\n*/",
            "Expected Answer": 78,
            "Answer": 78.0,
            "Final Answer": 78.0
        },
        {
            "Index": 185,
            "GT": -1,
            "Query": "2 - 8 * 3 + 6 * 5 + 5 - 7 - 1 * 7 =   ",
            "Injected CoT": "8 * 3 = 24\n2 - 24 = -22\n6 * 5 = 30\n-22 + 30 = 8\n8 + 5 = 13\n13 - 7 = 6\n2 * 7 = 7\n6 - 7 = -1\n-1 - 2 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -3,
            "Answer": -3.0,
            "Final Answer": -3.0
        },
        {
            "Index": 186,
            "GT": 59,
            "Query": "9 * 8 - 9 - 3 + 2 - 1 - 3 * 3 + 7 =   ",
            "Injected CoT": "9 * 8 = 72\n72 - 9 = 63\n63 - 3 = 60\n60 + 2 = 62\n62 - 1 = 61\n3 * 3 = 9\n61 - 9 = 52\n52 + 8 =",
            "Response": " 60",
            "Extract-Response": " 60\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 60,
            "Answer": 60.0,
            "Final Answer": 60.0
        },
        {
            "Index": 187,
            "GT": -213,
            "Query": "6 + 1 * 6 + 9 + 9 - 3 - 5 * 8 * 6 =   ",
            "Injected CoT": "1 * 6 = 6\n5 * 8 = 40\n40 * 6 = 240\n6 + 6 = 12\n12 + 9 = 21\n21 + 9 = 30\n30 - 3 = 28\n28 - 240 =",
            "Response": " -212",
            "Extract-Response": " -212.\n\nNote:\n\nThe input will always be valid.\nTry to come up with a fast algorithm.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0')\n                    num = num * 10 + s[i++] - '0';\n                res += sign * num;\n                --i;\n            }\n            else if (c == '+') sign = 1;\n            else if (c == '-') sign = -1;\n            else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            }\n            else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};",
            "Expected Answer": -212,
            "Answer": -212.0,
            "Final Answer": -212.0
        },
        {
            "Index": 188,
            "GT": 13,
            "Query": "5 + 3 + 2 + 1 * 9 + 1 * 1 - 1 * 7 =   ",
            "Injected CoT": "1 * 9 = 9\n1 * 1 = 1\n5 + 3 = 8\n8 + 2 = 10\n10 + 9 = 19\n19 + 1 = 19\n1 * 7 = 7\n19 - 7 =",
            "Response": " 12\n\n12\n\n*/",
            "Extract-Response": "\n\n12",
            "Expected Answer": 12,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 191,
            "GT": 56,
            "Query": "3 + 4 + 8 * 9 - 6 * 6 + 3 + 2 + 8 =   ",
            "Injected CoT": "9 * 9 = 72\n6 * 6 = 36\n3 + 4 = 7\n72 - 36 = 36\n36 + 7 = 43\n43 + 3 = 46\n46 + 2 = 48\n48 + 9 =",
            "Response": " 57",
            "Extract-Response": " 57\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n        if(str[i] == '+')\n            continue;\n        if(str[i] == '-')\n            continue;\n        if(str[i] == '*')\n            continue;\n        if(str[i] == '/')\n            continue;\n        if(str[i] == '%')\n            continue;\n        if(str[i] == '^')\n            continue;\n        if(str[i] == '(')\n            continue;\n        if(str[i] == ')')\n            continue;\n        if(str[i] == '=')\n            continue;\n        num = str[i] - '0';\n        sum = sum + num;\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}",
            "Expected Answer": 57,
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 194,
            "GT": -16,
            "Query": "3 - 2 * 1 + 4 - 5 + 1 - 2 - 6 - 9 =   ",
            "Injected CoT": "2 * 1 = 2\n3 - 2 = 1\n1 + 4 = 5\n5 - 5 = 0\n0 + 1 = 1\n1 - 2 = -1\n-1 - 6 = -7\n-7 - 10 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubarrayMins(vector<int>& A) {\n        int n = A.size();\n        int mod = 1e9 + 7;\n        stack<int> st;\n        int ans = 0;\n        for (int i = 0; i <= n; i++) {\n            int cur = i == n ? 0 : A[i];\n            while (!st.empty() && A[st.top()] >= cur) {\n                int index = st.top();\n                st.pop();\n                int left = st.empty() ? -1 : st.top();\n                int right = i;\n                ans = (ans + A[index] * (index - left) * (right - index)) % mod;\n            }\n            st.push(i);\n        }\n        return ans;\n    }\n};",
            "Expected Answer": -17,
            "Answer": -17.0,
            "Final Answer": -17.0
        },
        {
            "Index": 195,
            "GT": 100,
            "Query": "3 - 2 * 6 - 2 + 4 * 6 * 4 + 5 * 3 =   ",
            "Injected CoT": "2 * 6 = 12\n3 - 12 = -9\n4 * 6 = 24\n24 * 4 = 96\n5 * 3 = 14\n-9 - 2 = -11\n-11 + 96 = 85\n85 + 14 =",
            "Response": " 99",
            "Extract-Response": "\n\n99",
            "Expected Answer": 99,
            "Answer": 99.0,
            "Final Answer": 99.0
        },
        {
            "Index": 196,
            "GT": -34,
            "Query": "3 - 7 * 8 + 9 - 7 + 9 + 8 + 8 - 8 =   ",
            "Injected CoT": "-7 * 8 = -56\n3 - (-56) = 59\n59 + 9 = 68\n68 - 7 = 61\n61 + 9 = 70\n70 + 8 = 79\n79 - 8 =",
            "Response": " 71",
            "Extract-Response": " 71.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n#include <string>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <list>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\n#define phl puts(\"Hello\")\n#define sf scanf\n#define pf printf\n#define fo(i, n) for(i = 0; i < n; i++)\n#define of(i, n) for(i = n - 1; i >= 0; i--)\n#define CLR(n, v) memset(n, v, sizeof( n ))\n#define pb push_back\n#define lim(v) v.begin(), v.end()\n#define sz(v) ((int)v,size())\n#define equals(a, b) (fabs(a-b)<eps)\n\n#define white 0\n#define black 1\n\nconst double PI = 2 * acos ( 0.0 );\nconst double eps = 1e-9;\n\ntypedef long long lld;\ntypedef unsigned long long llu;\ntypedef pair<int, int> pi;\ntypedef  vector<int> vi;\ntypedef vector<pi> vpi;\n\ntemplate <class T> T jog(T a, T b) { return a + b; }\ntemplate <class T> T bog(T a, T b) { return a - b; }\ntemplate <class T> T gon(T a, T b) { return a * b; }\ntemplate <class T> T sq(T x) {return x * x;}\ntemplate <class T> T gcd( T a, T b ) { return b == 0 ? a : gcd(b, a % b); }\ntemplate <class T> T lcm ( T a, T b ) { return ( a / gcd ( a, b ) ) * b; }\ntemplate <class T> T power ( T a, T p ) { int res = 1, x = a; while ( p ) { if ( p & 1 ) res = res * x; x = x * x; p >>= 1; } return res;}\ntemplate <class T> T cordinatlenth(T a, T b, T c, T d) { return sqrt( sq(a - c) + sq(b - d) ); }\ntemplate<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}\nint toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}\nlld bigmod ( lld a, lld p, lld mod )\n{\n    lld res = 1, x = a;\n    while ( p ) {\n        if ( p & 1 ) res = ( res * x ) % mod;\n        x = ( x * x ) % mod;\n        p >>= 1;\n    }\n    return res;\n}\n\n/*\n#define M 1000005\nint phi[M];\n\nvoid calculatePhi()\n{\n    for (int i = 1; i < M; i++) phi[i] = i;\n    for (int p = 2; p < M; p++)\n        if (phi[p] == p) // p is a prime\n            for (int k = p; k < M; k += p) phi[k] -= phi[k] / p;\n}\n*/\n\n/*\nconst int pr = 500001;\nint prime[ 41539 ], ind;\nbool mark[ pr ];\nvoid primelist()\n{\n    for(int i = 4; i < pr; i += 2) mark[ i ] = false;\n    for(int i = 3; i < pr; i += 2) mark[ i ] = true; mark[ 2 ] = true;\n    for(int i = 3, sq = sqrt( pr ); i < sq; i += 2)\n        if(mark[ i ])\n            for(int j = i * i; j < pr; j += i + i) mark[ j ] = false;\n    prime[ 0 ] = 2; ind = 1;\n    for(int i = 3; i < pr; i += 2)\n        if(mark[ i ]) ind++; printf(\"%d\\n\", ind);\n}\n*/\n\nint diraction1[] = {-1, 0, 0, 1, 1, -1, -1, 1};\nint diraction2[] = {0, -1, 1, 0, 1, -1, 1, -1};\nint horsed1[] = {-2, -2, -1, 1, 2, 2, 1, -1};\nint horsed2[] = {1, -1, -2, -2, -1, 1, 2, 2};\n\nvoid input();\n\n/**************************Templet end*********************************/\n\nint main()\n{\n    //#ifdef monkey\n        //freopen(\"input.txt\", \"r\", stdin);\n        //freopen(\"output.txt\", \"w\", stdout);\n    //#endif\n    input();\n\n    return 0;\n}\nvoid input()\n{\n    int n, m, k, sum, res, ans, cnt, tmp, c, t;\n    char in[ 100 ];\n    while(~sf(\"%s\", in))\n    {\n        sum = 0;\n        for(int i = 0; in[ i ]; i++)\n        {\n            if(in[ i ] == '+') sum++;\n            else sum--;\n        }\n        if(sum < 0) sum *= -1;\n        if(sum % 2) puts(\"No\");\n        else\n        {\n            res = sum / 2;\n            cnt = 0;\n            for(int i = 0; in[ i ]; i++)\n            {\n                if(in[ i ] == '+') cnt++;\n                else cnt--;\n                if(cnt == res)\n                {\n                    puts(\"Yes\");\n                    return;\n                }\n            }\n            puts(\"No\");\n        }\n    }\n}",
            "Expected Answer": 71,
            "Answer": 71.0,
            "Final Answer": 71.0
        },
        {
            "Index": 200,
            "GT": 60,
            "Query": "5 * 8 + 3 * 6 + 7 - 1 * 3 - 4 + 2 =   ",
            "Injected CoT": "5 * 8 = 40\n3 * 6 = 18\n1 * 3 = 3\n40 + 18 = 58\n58 + 7 = 65\n65 - 3 = 62\n62 - 4 = 58\n58 + 1 =",
            "Response": " 59\n59 + 2 = 61",
            "Extract-Response": " 61\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 59,
            "Answer": 61.0,
            "Final Answer": 61.0
        },
        {
            "Index": 202,
            "GT": 47,
            "Query": "9 * 4 + 7 + 3 * 1 - 4 + 3 + 9 - 7 =   ",
            "Injected CoT": "9 * 4 = 36\n3 * 1 = 3\n36 + 7 = 43\n43 + 3 = 46\n46 - 4 = 42\n42 + 3 = 45\n45 + 9 = 53\n53 - 7 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 203,
            "GT": 159,
            "Query": "7 * 4 * 1 * 8 - 5 - 6 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 1 = 28\n28 * 8 = 224\n6 * 8 = 48\n224 - 5 = 219\n219 - 48 = 171\n171 - 3 = 167\n167 - 9 =",
            "Response": " 158",
            "Extract-Response": " 158\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    int currentOperator = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n            currentOperator = s[i];\n        } else if (s[i] == '*') {\n            currentOperator = s[i];\n        } else if (s[i] == '=') {\n            if (currentOperator == '*') {\n                currentNumber *= s[i - 1] - '0';\n            }\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            currentOperator = 0;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 158,
            "Answer": 158.0,
            "Final Answer": 158.0
        },
        {
            "Index": 204,
            "GT": 116,
            "Query": "7 * 8 * 8 - 8 * 7 * 6 - 4 + 9 - 1 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 8 = 448\n8 * 7 = 56\n56 * 6 = 336\n448 - 336 = 112\n112 - 4 = 108\n108 + 9 = 116\n116 - 1 =",
            "Response": " 115",
            "Extract-Response": " 115\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 1;\n    b = 2;\n    c = 3;\n    d = 4;\n    e = 5;\n    f = 6;\n    g = 7;\n    h = 8;\n    i = 9;\n    j = 10;\n    k = 11;\n    l = 12;\n    m = 13;\n    n = 14;\n    o = 15;\n    p = 16;\n    q = 17;\n    r = 18;\n    s = 19;\n    t = 20;\n    u = 21;\n    v = 22;\n    w = 23;\n    x = 24;\n    y = 25;\n    z = 26;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 115,
            "Answer": 115.0,
            "Final Answer": 115.0
        },
        {
            "Index": 205,
            "GT": 41,
            "Query": "6 * 9 - 1 + 3 - 8 + 2 - 3 * 2 - 3 =   ",
            "Injected CoT": "6 * 9 = 54\n54 - 1 = 53\n53 + 3 = 56\n56 - 8 = 48\n48 + 2 = 50\n3 * 2 = 6\n50 - 6 = 43\n43 - 3 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 40,
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 206,
            "GT": -14,
            "Query": "6 * 4 + 3 + 9 - 8 - 5 - 2 - 5 * 7 =   ",
            "Injected CoT": "6 * 4 = 24\n24 + 3 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 5 = 23\n23 - 2 = 22\n5 * 7 = 35\n22 - 35 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -13,
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 207,
            "GT": 140,
            "Query": "7 * 3 * 8 + 1 - 6 - 5 + 3 - 7 * 3 =   ",
            "Injected CoT": "7 * 3 = 21\n21 * 8 = 168\n168 + 1 = 169\n169 - 6 = 163\n163 - 5 = 158\n158 + 3 = 161\n161 - 7 = 153\n153 * 3 =",
            "Response": " 459",
            "Extract-Response": " 459.\n\nNote:\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contain only digits 0-9.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String multiply(String num1, String num2) {\n        if (num1 == null || num2 == null) {\n            return null;\n        }\n        if (num1.length() == 0 || num2.length() == 0) {\n            return \"0\";\n        }\n        int len1 = num1.length();\n        int len2 = num2.length();\n        int[] product = new int[len1 + len2];\n        for (int i = len1 - 1; i >= 0; i--) {\n            for (int j = len2 - 1; j >= 0; j--) {\n                int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');\n                int p1 = i + j;\n                int p2 = i + j + 1;\n                int sum = mul + product[p2];\n                product[p1] += sum / 10;\n                product[p2] = sum % 10;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int p : product) {\n            if (!(sb.length() == 0 && p == 0)) {\n                sb.append(p);\n            }\n        }\n        return sb.length() == 0 ? \"0\" : sb.toString();\n    }\n}",
            "Expected Answer": 459,
            "Answer": 459.0,
            "Final Answer": 459.0
        },
        {
            "Index": 208,
            "GT": -1,
            "Query": "9 + 1 - 3 - 7 - 5 - 5 + 3 + 2 * 3 =   ",
            "Injected CoT": "2 * 3 = 6\n9 + 1 = 10\n10 - 3 = 7\n7 - 7 = 0\n0 - 5 = -5\n-5 - 5 = -10\n-10 + 3 = -6\n-6 + 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 209,
            "GT": 399,
            "Query": "6 + 5 + 7 * 2 - 3 - 1 + 6 * 9 * 7 =   ",
            "Injected CoT": "7 * 2 = 14\n6 + 5 = 11\n11 + 14 = 25\n6 * 9 = 54\n54 * 7 = 378\n25 + 378 = 403\n403 - 3 = 400\n400 - 2 =",
            "Response": " 398\n398 - 1 = 397",
            "Extract-Response": "\n\n397",
            "Expected Answer": 398,
            "Answer": 397.0,
            "Final Answer": 397.0
        },
        {
            "Index": 210,
            "GT": 63,
            "Query": "9 + 7 * 8 - 3 + 1 + 4 - 6 - 1 + 3 =   ",
            "Injected CoT": "7 * 8 = 56\n9 + 56 = 65\n65 - 3 = 62\n62 + 1 = 63\n63 + 4 = 67\n67 - 6 = 61\n61 - 1 = 59\n59 + 3 =",
            "Response": " 62",
            "Extract-Response": " 62.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 62,
            "Answer": 62.0,
            "Final Answer": 62.0
        },
        {
            "Index": 211,
            "GT": 72,
            "Query": "3 - 6 * 5 * 1 + 9 * 9 + 9 + 2 + 7 =   ",
            "Injected CoT": "6 * 5 = 30\n3 - 30 = -27\n9 * 9 = 81\n-27 + 81 = 54\n54 + 9 = 63\n63 + 2 = 65\n65 + 6 =",
            "Response": " 71\n71 + 7 = 78",
            "Extract-Response": " 78\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int result = 0;\n    for (char c: s) {\n        result += c - '0';\n    }\n    while (result > 9) {\n        int newResult = 0;\n        while (result > 0) {\n            newResult += result % 10;\n            result /= 10;\n        }\n        result = newResult;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 71,
            "Answer": 78.0,
            "Final Answer": 78.0
        },
        {
            "Index": 213,
            "GT": 10,
            "Query": "2 * 1 + 7 + 7 - 7 - 1 * 5 + 5 + 1 =   ",
            "Injected CoT": "2 * 1 = 2\n7 + 7 = 14\n5 * 1 = 5\n2 + 14 = 16\n16 - 7 = 9\n5 + 1 = 6\n9 + 6 = 14\n14 + 1 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 214,
            "GT": 4388,
            "Query": "2 * 9 * 2 * 5 * 8 * 3 + 8 * 9 - 4 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 2 = 36\n36 * 5 = 180\n180 * 8 = 1440\n1440 * 3 = 4320\n8 * 9 = 72\n4320 + 72 = 4392\n4392 - 5 =",
            "Response": " 4387",
            "Extract-Response": " 4387\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int num[MAX_SIZE];\n    int i, j, k, n, sum;\n    int temp;\n    int flag;\n    int count;\n    int max;\n    int max_index;\n    int max_count;\n    int max_count_index;\n    int max_count_flag;\n    int max_count_flag_index;\n    int max_count_flag_count;\n    int max_count_flag_count_index;\n    int max_count_flag_count_flag;\n    int max_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_index;\n    int max_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag",
            "Expected Answer": 4387,
            "Answer": 4387.0,
            "Final Answer": 4387.0
        },
        {
            "Index": 215,
            "GT": 86,
            "Query": "6 + 3 * 6 * 8 + 8 - 4 * 1 * 6 * 3 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 8 = 144\n6 * 3 = 18\n18 * 1 = 18\n18 * 4 = 72\n6 * 18 = 108\n108 - 72 = 37\n6 + 144 = 150\n150 + 8 = 158\n158 - 37 =",
            "Response": " 121\n\n3 * 6 * 8 + 8 - 4 * 1 * 6 * 3 = 121",
            "Extract-Response": " 121\n\n*/",
            "Expected Answer": 121,
            "Answer": 121.0,
            "Final Answer": 121.0
        },
        {
            "Index": 216,
            "GT": -226,
            "Query": "2 * 2 + 1 - 7 * 7 * 4 - 7 - 7 * 4 =   ",
            "Injected CoT": "2 * 2 = 4\n7 * 7 = 49\n49 * 4 = 196\n7 * 4 = 28\n196 + 28 = 225\n4 + 1 = 5\n5 - 225 =",
            "Response": " -220",
            "Extract-Response": " -220.\n\nNote:\n\nThe length of given array won't exceed 1000.\nThe integers in given array are in the range [-100, 100].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -220,
            "Answer": -220.0,
            "Final Answer": -220.0
        },
        {
            "Index": 218,
            "GT": -102,
            "Query": "5 * 8 - 4 * 2 - 1 * 9 * 5 * 3 + 1 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 2 = 8\n9 * 5 = 45\n45 * 3 = 135\n40 - 8 = 32\n32 - 135 = -102\n-102 + 1 =",
            "Response": " -101\n\n-101",
            "Extract-Response": " -101.\n\nNote:\n\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contain only digits 0-9.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String multiply(String num1, String num2) {\n        if (num1.equals(\"0\") || num2.equals(\"0\")) {\n            return \"0\";\n        }\n        int len1 = num1.length();\n        int len2 = num2.length();\n        int[] res = new int[len1 + len2];\n        for (int i = len1 - 1; i >= 0; i--) {\n            for (int j = len2 - 1; j >= 0; j--) {\n                int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');\n                int p1 = i + j;\n                int p2 = i + j + 1;\n                int sum = mul + res[p2];\n                res[p1] += sum / 10;\n                res[p2] = sum % 10;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < res.length; i++) {\n            if (i == 0 && res[i] == 0) {\n                continue;\n            }\n            sb.append(res[i]);\n        }\n        return sb.toString();\n    }\n}",
            "Expected Answer": -101,
            "Answer": -101.0,
            "Final Answer": -101.0
        },
        {
            "Index": 219,
            "GT": 55,
            "Query": "9 - 8 - 2 - 2 - 7 + 8 * 8 + 8 - 7 =   ",
            "Injected CoT": "8 * 8 = 64\n9 - 8 = 1\n1 - 2 = -1\n-1 - 2 = -3\n-3 - 7 = -10\n-10 + 64 = 54\n54 + 8 = 61\n61 - 7 =",
            "Response": " 54",
            "Extract-Response": " 54\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin(); v!=c.end(); ++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint j=n-1;\n\tint res=0;\n\tint sign=1;\n\twhile(i<n){\n\t\tif(s[i]=='+'){\n\t\t\tsign=1;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tsign=-1;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i]=='*'){\n\t\t\tsign=1;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]>='0' && s[i]<='9'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tres+=sign*num;\n\t\t}\n\t}\n\tcout<<res<<endl;\n\treturn 0;\n}",
            "Expected Answer": 54,
            "Answer": 54.0,
            "Final Answer": 54.0
        },
        {
            "Index": 221,
            "GT": 239,
            "Query": "7 - 7 - 7 + 5 * 6 + 9 * 3 * 1 * 8 =   ",
            "Injected CoT": "5 * 6 = 30\n9 * 3 = 27\n27 * 1 = 27\n27 * 8 = 216\n7 - 7 = 0\n0 - 7 = -7\n-7 + 30 = 24\n24 + 216 =",
            "Response": " 240",
            "Extract-Response": " 240\n</code>\n",
            "Expected Answer": 240,
            "Answer": 240.0,
            "Final Answer": 240.0
        },
        {
            "Index": 223,
            "GT": 56,
            "Query": "3 * 9 + 1 - 6 * 2 + 1 + 4 + 7 * 5 =   ",
            "Injected CoT": "3 * 9 = 27\n27 + 1 = 28\n6 * 2 = 12\n28 - 12 = 16\n1 + 16 = 17\n4 + 17 = 20\n7 * 5 = 35\n20 + 35 =",
            "Response": " 55",
            "Extract-Response": " 55.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 55,
            "Answer": 55.0,
            "Final Answer": 55.0
        },
        {
            "Index": 224,
            "GT": -19,
            "Query": "9 + 3 + 4 + 2 * 5 + 9 - 7 * 8 + 2 =   ",
            "Injected CoT": "1 * 5 = 10\n7 * 8 = 56\n9 + 3 = 12\n12 + 4 = 16\n16 + 10 = 26\n26 + 9 = 35\n35 - 56 = -21\n-21 + 1 =",
            "Response": " -20",
            "Extract-Response": " -20.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -20,
            "Answer": -20.0,
            "Final Answer": -20.0
        },
        {
            "Index": 225,
            "GT": -3,
            "Query": "1 * 8 - 5 - 1 * 4 - 9 + 7 + 6 - 6 =   ",
            "Injected CoT": "1 * 8 = 8\n8 - 5 = 3\n1 * 4 = 4\n3 - 4 = -1\n-1 - 9 = -10\n-10 + 7 = -3\n-3 + 5 = 3\n3 - 5 =",
            "Response": " -2\n-2 + 6 = 4\n4 - 6 = -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -2,
            "Answer": -2.0,
            "Final Answer": -2.0
        },
        {
            "Index": 226,
            "GT": -68,
            "Query": "8 - 2 - 7 * 8 - 3 * 2 - 2 - 5 * 2 =   ",
            "Injected CoT": "7 * 8 = 56\n3 * 2 = 6\n5 * 2 = 11\n8 - 2 = 6\n6 - 56 = -50\n-50 - 6 = -56\n-56 - 6 = -62\n-62 - 11 =",
            "Response": " -73\n-73 - 11 = -84\n-84 - 11 = -95\n-95 - 11 = -106\n-106 - 11 = -117\n-117 - 11 = -128\n-128 - 11 = -139\n-139 - 11 = -150\n-150 - 11 = -161\n-161 - 11 = -172\n-172 - 11 = -183\n-183 - 11 = -194\n-194 - 11 = -205\n-205 - 11 = -216\n-216 - 11 = -227\n-227 - 11 = -238\n-238 - 11 = -249\n-249 - 11 = -260\n-260 - 11 = -271\n-271 - 11 = -282\n-282 - 11 = -293\n-293 - 11 = -304\n-304 - 11 = -315\n-315 - 11 = -326\n-326 - 11 = -337\n-337 - 11 = -348\n-348 - 11 = -359\n-359 - 11 = -370\n-370 - 11 = -381\n-381 - 11 = -392\n-392 - 11 = -403\n-403 - 11 = -414\n-414 - 11 = -425\n-425 - 11 = -436\n-436 - 11 = -447\n-447 - 11 = -458\n-458 - 11 = -469\n-469 - 11 = -480\n-480 - 11 = -491\n-491 - 11 = -502\n-502 - 11 = -513\n-513 - 11 = -524\n-524 - 11 = -535\n-535 - 11 = -546\n-546 - 11 = -557\n-557 - 11 = -568\n-568 - 11 = -579\n-579 - 11 = -590\n-590 - 11 = -601\n-601 - 11 = -612\n-612 - 11 = -623\n-623 - 11 = -634\n-634 - 11 = -645\n-645 - 11 = -656\n-656 - 11 = -667\n-667 - 11 = -678\n-678 - 11 = -689\n-689 - 11 = -700\n-700 - 11 = -711\n-711 - 11 = -722\n-722 - 11 = -733\n-733 - 11 = -744\n-744 - 11 = -755\n-755 - 11 = -766\n-766 - 11 = -777\n-777 - 11 = -788\n-788 - 11 = -799\n-799 - 11 = -810\n-810 - 11 = -821\n-821 - 11 = -832\n-832 - 11 = -843\n-843 - 11 = -854\n-854 - 11 = -865\n-865 - 11 = -876\n-876 - 11 = -887\n-887 - 11 = -898\n-898 - 11 = -909\n-909 - 11 = -920\n-920 - 11 = -931\n-931 - 11 = -942\n-942 - 11 = -953\n-953 - 11 = -964\n-964 - 11 = -975\n-975 - 11 = -986\n-986 - 11 = -997\n-997 - 11 = -1008\n-1008 - 11 = -1019\n-1019 - 11 = -1030\n-1030 - 11 = -1041\n-1041 - 11 = -1052\n-1052 - 11 = -1063\n-1063 - 11 = -1074\n-1074 - 11 = -1085\n-1085 - 11 = -1096\n-1096 - 11 = -1107\n-1107 - 11 = -1118\n-1118 - 11 = -1129\n-1129 - 11 = -1140\n-1140 - 11 = -1151\n-1151 - 11 = -1162\n-1162 - 11 = -1173\n-1173 - 11 = -1184\n-1184 - 11 = -1195\n-1195 - 11 = -1206\n-1206 - 11 = -1217\n-1217 - 11 = -1228\n-1228 - 11 = -1239\n-1239 - 11 = -1250\n-1250 - 11 = -1261\n-1261 - 11 = -1272\n-1272 - 11 = -1283\n-1283 - 11 = -1294\n-1294 - 11 = -1305\n-1305 - 11 = -1316\n-1316 - 11 = -1327\n-1327 - 11 = -1338\n-1338 - 11 = -1349\n-1349 - 11 = -1360\n-1360 - 11 = -1371\n-1371 - 11 = -1382\n-1382 - 11 = -1393\n-1393 - 11 = -1404\n-1404 - 11 = -1415\n-1415 - 11 = -1426\n-1426 - 11 = -1437\n-1437 - 11 = -1448\n-1448 - 11 = -1459\n-1459 - 11 = -1470\n-1470 - 11 = -1481\n-1481 - 11 = -1492\n-1492 - 11 = -1503\n-1503 - 11 = -1514\n-1514 - 11 = -1525\n-1525 - 11 = -1536\n-1536 - 11 = -1547\n-1547 - 11 = -1558\n-1558 - 11 = -1569\n-1569 - 11 = -1580\n-1580 - 11 = -1591\n-1591 - 11 = -1602\n-1602 - 11 = -1613\n-1613 - 11 = -1624\n-1624 - 11 = -1635\n-1635 - 11 = -1646\n-1646 - 11 = -1657\n-1657 - 11 = -1668\n-1668 - 11 = -1679\n-1679 - 11 = -1690\n-1690 - 11 = -1701\n-1701 - 11 = -1712\n-1712 - 11 = -1723\n-1723 - 11 = -1734\n-1734 - 11 = -1745\n-1745 - 11 = -1756\n-1756 - 11 = -1767\n-1767 - 11 = -1778\n-1778 - 11 = -1789\n-1789 - 11 = -1800\n-1800 - 11 = -1811\n-1811 - 11 = -1822\n-1822 - 11 = -1833\n-1833 - 11 = -1844\n-1844 - 11 = -1855\n-1855 - 11 = -1866\n-1866 - 11 = -1877\n-1877 - 11 = -1888\n-1888 - 11 = -1899\n-1899 - 11 = -1910\n-1910 - 11 = -1921\n-1921 - 11 = -1932\n-1932 - 11 = -1943\n-1943 - 11 = -1954\n-1954 - 11 = -1965\n-1965 - 11 = -1976\n-1976 - 11 = -1987\n-1987 - 11 = -1998\n-1998 - 11 = -2009\n-2009 - 11 = -2020\n-2020 - 11 = -2031\n-2031 - 11 = -2042\n-2042 - 11 = -2053\n-2053 - 11 = -2064\n-2064 - 11 = -2075\n-2075 - 11 = -2086\n-2086 - 11 = -2097\n-2097 - 11 = -2108\n-2108 - 11 = -2119\n-2119 - 11 = -2130\n-2130 - 11 = -2141\n-2141 - 11 = -2152\n-2152 - 11 = -2163\n-2163 - 11 = -2174\n-2174 - 11 = -2185\n-2185 - 11 = -2196\n-2196 - 11 = -2207\n-2207 - 11 = -2218\n-2218 - 11 = -2229\n-2229 - 11 = -2240\n-2240 - 11 = -2251\n-2251 - 11 = -2262\n-2262 - 11 = -2273\n-2273 - 11 = -2284\n-2284 - 11 = -2295\n-2295 - 11 = -2306\n-2306 - 11 = -2317\n-2317 - 11 = -2328\n-2328 - 11 = -2339\n-2339 - 11 = -2350\n-2350 - 11 = -2361\n-2361 - 11 = -2372\n-2372 - 11 = -2383\n-2383 - 11 = -2394\n-2394 - 11 = -2405\n-2405 - 11 = -2416\n-2416 - 11 = -2427\n-2427 - 11 = -24",
            "Extract-Response": " -24",
            "Expected Answer": -73,
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 227,
            "GT": -167,
            "Query": "8 - 3 * 3 * 6 * 3 - 1 - 8 - 5 + 1 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 3 = 54\n54 * 3 = 162\n8 - 162 = -154\n-154 - 1 = -155\n-155 - 8 = -163\n-163 - 5 = -169\n-169 + 1 =",
            "Response": " -168\n\n-168 + 1 = -167\n\n-167 + 1 = -166\n\n-166 + 1 = -165\n\n-165 + 1 = -164\n\n-164 + 1 = -163\n\n-163 + 1 = -162\n\n-162 + 1 = -161\n\n-161 + 1 = -160\n\n-160 + 1 = -159\n\n-159 + 1 = -158\n\n-158 + 1 = -157\n\n-157 + 1 = -156\n\n-156 + 1 = -155\n\n-155 + 1 = -154\n\n-154 + 1 = -153\n\n-153 + 1 = -152\n\n-152 + 1 = -151\n\n-151 + 1 = -150\n\n-150 + 1 = -149\n\n-149 + 1 = -148\n\n-148 + 1 = -147\n\n-147 + 1 = -146\n\n-146 + 1 = -145\n\n-145 + 1 = -144\n\n-144 + 1 = -143\n\n-143 + 1 = -142\n\n-142 + 1 = -141\n\n-141 + 1 = -140\n\n-140 + 1 = -139\n\n-139 + 1 = -138\n\n-138 + 1 = -137\n\n-137 + 1 = -136\n\n-136 + 1 = -135\n\n-135 + 1 = -134\n\n-134 + 1 = -133\n\n-133 + 1 = -132\n\n-132 + 1 = -131\n\n-131 + 1 = -130\n\n-130 + 1 = -129\n\n-129 + 1 = -128\n\n-128 + 1 = -127\n\n-127 + 1 = -126\n\n-126 + 1 = -125\n\n-125 + 1 = -124\n\n-124 + 1 = -123\n\n-123 + 1 = -122\n\n-122 + 1 = -121\n\n-121 + 1 = -120\n\n-120 + 1 = -119\n\n-119 + 1 = -118\n\n-118 + 1 = -117\n\n-117 + 1 = -116\n\n-116 + 1 = -115\n\n-115 + 1 = -114\n\n-114 + 1 = -113\n\n-113 + 1 = -112\n\n-112 + 1 = -111\n\n-111 + 1 = -110\n\n-110 + 1 = -109\n\n-109 + 1 = -108\n\n-108 + 1 = -107\n\n-107 + 1 = -106\n\n-106 + 1 = -105\n\n-105 + 1 = -104\n\n-104 + 1 = -103\n\n-103 + 1 = -102\n\n-102 + 1 = -101\n\n-101 + 1 = -100\n\n-100 + 1 = -99\n\n-99 + 1 = -98\n\n-98 + 1 = -97\n\n-97 + 1 = -96\n\n-96 + 1 = -95\n\n-95 + 1 = -94\n\n-94 + 1 = -93\n\n-93 + 1 = -92\n\n-92 + 1 = -91\n\n-91 + 1 = -90\n\n-90 + 1 = -89\n\n-89 + 1 = -88\n\n-88 + 1 = -87\n\n-87 + 1 = -86\n\n-86 + 1 = -85\n\n-85 + 1 = -84\n\n-84 + 1 = -83\n\n-83 + 1 = -82\n\n-82 + 1 = -81\n\n-81 + 1 = -80\n\n-80 + 1 = -79\n\n-79 + 1 = -78\n\n-78 + 1 = -77\n\n-77 + 1 = -76\n\n-76 + 1 = -75\n\n-75 + 1 = -74\n\n-74 + 1 = -73\n\n-73 + 1 = -72\n\n-72 + 1 = -71\n\n-71 + 1 = -70\n\n-70 + 1 = -69\n\n-69 + 1 = -68\n\n-68 + 1 = -67\n\n-67 + 1 = -66\n\n-66 + 1 = -65\n\n-65 + 1 = -64\n\n-64 + 1 = -63\n\n-63 + 1 = -62\n\n-62 + 1 = -61\n\n-61 + 1 = -60\n\n-60 + 1 = -59\n\n-59 + 1 = -58\n\n-58 + 1 = -57\n\n-57 + 1 = -56\n\n-56 + 1 = -55\n\n-55 + 1 = -54\n\n-54 + 1 = -53\n\n-53 + 1 = -52\n\n-52 + 1 = -51\n\n-51 + 1 = -50\n\n-50 + 1 = -49\n\n-49 + 1 = -48\n\n-48 + 1 = -47\n\n-47 + 1 = -46\n\n-46 + 1 = -45\n\n-45 + 1 = -44\n\n-44 + 1 = -43\n\n-43 + 1 = -42\n\n-42 + 1 = -41\n\n-41 + 1 = -40\n\n-40 + 1 = -39\n\n-39 + 1 = -38\n\n-38 + 1 = -37\n\n-37 + 1 = -36\n\n-36 + 1 = -35\n\n-35 + 1 = -34\n\n-34 + 1 = -33\n\n-33 + 1 = -32\n\n-32 + 1 = -31\n\n-31 + 1 = -30\n\n-30 + 1 = -29\n\n-29 + 1 = -28\n\n-28 + 1 = -27\n\n-27 + 1 = -26\n\n-26 + 1 = -25\n\n-25 + 1 = -24\n\n-24 + 1 = -23\n\n-23 + 1 = -22\n\n-22 + 1 = -21\n\n-21 + 1 = -20\n\n-20 + 1 = -19\n\n-19 + 1 = -18\n\n-18 + 1 = -17\n\n-17 + 1 = -16\n\n-16 + 1 = -15\n\n-15 + 1 = -14\n\n-14 + 1 = -13\n\n-13 + 1 = -12\n\n-12 + 1 = -11\n\n-11 + 1 = -10\n\n-10 + 1 = -9\n\n-9 + 1 = -8\n\n-8 + 1 = -7\n\n-7 + 1 = -6\n\n-6 + 1 = -5\n\n-5 + 1 = -4\n\n-4 + 1 = -3\n\n-3 + 1 = -2\n\n-2 + 1 = -1\n\n-1 + 1 = 0",
            "Extract-Response": " 0",
            "Expected Answer": -168,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 228,
            "GT": 1118,
            "Query": "7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 6 = 378\n378 * 3 = 1134\n1134 * 1 = 1134\n1134 - 1 = 1133\n2 * 3 = 6\n1133 - 6 = 1126\n1126 - 9 =",
            "Response": " 1117\n1117 - 2 = 1115\n1115 - 5 = 1110\n1110 - 0 = 1110\n\n1110 is the greatest number that can be formed from the digits of the number 2187.",
            "Extract-Response": "\n1110",
            "Expected Answer": 1117,
            "Answer": 1110.0,
            "Final Answer": 1110.0
        },
        {
            "Index": 233,
            "GT": 1154,
            "Query": "4 * 2 * 1 + 1 - 7 + 6 * 4 * 8 * 6 =   ",
            "Injected CoT": "4 * 3 = 8\n8 * 1 = 8\n8 + 1 = 9\n9 - 7 = 3\n6 * 4 = 24\n24 * 8 = 192\n192 * 6 = 1152\n3 + 1152 =",
            "Response": " 1155",
            "Extract-Response": " 1155.\n\nNote:\n\nThe input is always valid.\nFollow up:\nCould you solve it without loops/recursion in O(1) runtime?\n\n*/\n\nclass Solution {\npublic:\n    int sumNums(int n) {\n        return (n == 0 || n == 1) ? n : n + sumNums(n - 1);\n    }\n};",
            "Expected Answer": 1155,
            "Answer": 1155.0,
            "Final Answer": 1155.0
        },
        {
            "Index": 234,
            "GT": -92,
            "Query": "2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 1 = 10\n5 * 6 = 30\n9 * 2 = 18\n9 * 6 = 54\n10 - 30 = -20\n-20 - 18 = -39\n-39 - 54 =",
            "Response": " -93\n\n-93\n\n*/",
            "Extract-Response": " -93.",
            "Expected Answer": -93,
            "Answer": -93.0,
            "Final Answer": -93.0
        },
        {
            "Index": 237,
            "GT": 21,
            "Query": "2 + 1 * 7 - 1 * 7 - 5 + 8 * 2 + 8 =   ",
            "Injected CoT": "1 * 7 = 7\n8 * 2 = 16\n2 + 7 = 9\n9 - 7 = 2\n2 - 5 = -3\n-3 + 16 = 13\n13 + 8 = 20\n20 + 8 =",
            "Response": " 28",
            "Extract-Response": " 28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEach integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 28,
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 239,
            "GT": -232,
            "Query": "9 - 3 * 1 * 3 * 5 * 5 - 1 - 3 * 5 =   ",
            "Injected CoT": "3 * 1 = 3\n3 * 3 = 9\n9 * 5 = 45\n45 * 5 = 225\n9 - 225 = -216\n-216 - 1 = -216\n3 * 5 = 15\n-216 - 15 =",
            "Response": " -231\n3 * 3 = 9\n-231 - 9 = -240\n3 * 1 = 3\n-240 - 3 = -243\n3 * 5 = 15\n-243 - 15 = -258\n3 * 3 = 9\n-258 - 9 = -267\n3 * 1 = 3\n-267 - 3 = -270\n3 * 5 = 15\n-270 - 15 = -285\n3 * 3 = 9\n-285 - 9 = -294\n3 * 1 = 3\n-294 - 3 = -297\n3 * 5 = 15\n-297 - 15 = -312\n3 * 3 = 9\n-312 - 9 = -321\n3 * 1 = 3\n-321 - 3 = -324\n3 * 5 = 15\n-324 - 15 = -339\n3 * 3 = 9\n-339 - 9 = -348\n3 * 1 = 3\n-348 - 3 = -351\n3 * 5 = 15\n-351 - 15 = -366\n3 * 3 = 9\n-366 - 9 = -375\n3 * 1 = 3\n-375 - 3 = -378\n3 * 5 = 15\n-378 - 15 = -393\n3 * 3 = 9\n-393 - 9 = -402\n3 * 1 = 3\n-402 - 3 = -405\n3 * 5 = 15\n-405 - 15 = -420\n3 * 3 = 9\n-420 - 9 = -429\n3 * 1 = 3\n-429 - 3 = -432\n3 * 5 = 15\n-432 - 15 = -447\n3 * 3 = 9\n-447 - 9 = -456\n3 * 1 = 3\n-456 - 3 = -459\n3 * 5 = 15\n-459 - 15 = -474\n3 * 3 = 9\n-474 - 9 = -483\n3 * 1 = 3\n-483 - 3 = -486\n3 * 5 = 15\n-486 - 15 = -501\n3 * 3 = 9\n-501 - 9 = -510\n3 * 1 = 3\n-510 - 3 = -513\n3 * 5 = 15\n-513 - 15 = -528\n3 * 3 = 9\n-528 - 9 = -537\n3 * 1 = 3\n-537 - 3 = -540\n3 * 5 = 15\n-540 - 15 = -555\n3 * 3 = 9\n-555 - 9 = -564\n3 * 1 = 3\n-564 - 3 = -567\n3 * 5 = 15\n-567 - 15 = -582\n3 * 3 = 9\n-582 - 9 = -591\n3 * 1 = 3\n-591 - 3 = -594\n3 * 5 = 15\n-594 - 15 = -609\n3 * 3 = 9\n-609 - 9 = -618\n3 * 1 = 3\n-618 - 3 = -621\n3 * 5 = 15\n-621 - 15 = -636\n3 * 3 = 9\n-636 - 9 = -645\n3 * 1 = 3\n-645 - 3 = -648\n3 * 5 = 15\n-648 - 15 = -663\n3 * 3 = 9\n-663 - 9 = -672\n3 * 1 = 3\n-672 - 3 = -675\n3 * 5 = 15\n-675 - 15 = -690\n3 * 3 = 9\n-690 - 9 = -699\n3 * 1 = 3\n-699 - 3 = -702\n3 * 5 = 15\n-702 - 15 = -717\n3 * 3 = 9\n-717 - 9 = -726\n3 * 1 = 3\n-726 - 3 = -729\n3 * 5 = 15\n-729 - 15 = -744\n3 * 3 = 9\n-744 - 9 = -753\n3 * 1 = 3\n-753 - 3 = -756\n3 * 5 = 15\n-756 - 15 = -771\n3 * 3 = 9\n-771 - 9 = -780\n3 * 1 = 3\n-780 - 3 = -783\n3 * 5 = 15\n-783 - 15 = -798\n3 * 3 = 9\n-798 - 9 = -807\n3 * 1 = 3\n-807 - 3 = -810\n3 * 5 = 15\n-810 - 15 = -825\n3 * 3 = 9\n-825 - 9 = -834\n3 * 1 = 3\n-834 - 3 = -837\n3 * 5 = 15\n-837 - 15 = -852\n3 * 3 = 9\n-852 - 9 = -861\n3 * 1 = 3\n-861 - 3 = -864\n3 * 5 = 15\n-864 - 15 = -879\n3 * 3 = 9\n-879 - 9 = -888\n3 * 1 = 3\n-888 - 3 = -891\n3 * 5 = 15\n-891 - 15 = -906\n3 * 3 = 9\n-906 - 9 = -915\n3 * 1 = 3\n-915 - 3 = -918\n3 * 5 = 15\n-918 - 15 = -933\n3 * 3 = 9\n-933 - 9 = -942\n3 * 1 = 3\n-942 - 3 = -945\n3 * 5 = 15\n-945 - 15 = -960\n3 * 3 = 9\n-960 - 9 = -969\n3 * 1 = 3\n-969 - 3 = -972\n3 * 5 = 15\n-972 - 15 = -987\n3 * 3 = 9\n-987 - 9 = -996\n3 * 1 = 3\n-996 - 3 = -999\n3 * 5 = 15\n-999 - 15 = -1014\n3 * 3 = 9\n-1014 - 9 = -1023\n3 * 1 = 3\n-1023 - 3 = -1026\n3 * 5 = 15\n-1026 - 15 = -1041\n3 * 3 = 9\n-1041 - 9 = -1050\n3 * 1 = 3\n-1050 - 3 = -1053\n3 * 5 = 15\n-1053 - 15 = -1068\n3 * 3 = 9\n-1068 - 9 = -1077\n3 * 1 = 3\n-1077 - 3 = -1080\n3 * 5 = 15\n-1080 - 15 = -1095\n3 * 3 = 9\n-1095 - 9 = -1104\n3 * 1 = 3\n-1104 - 3 = -1107\n3 * 5 = 15\n-1107 - 15 = -1122\n3 * 3 = 9\n-1122 - 9 = -1131\n3 * 1 = 3\n-1131 - 3 = -1134\n3 * 5 = 15\n-1134 - 15 = -1149\n3 * 3 = 9\n-1149 - 9 = -1158\n3 * 1 = 3\n-1158 - 3 = -1161\n3 * 5 = 15\n-1161 - 15 = -1176\n3 * 3 = 9\n-1176 - 9 = -1185\n3 * 1 = 3\n-1185 - 3 = -1188\n3 * 5 = 15\n-1188 - 15 = -1203\n3 * 3 = 9\n-1203 - 9 = -1212\n3 * 1 = 3\n-1212 - 3 = -1215\n3 * 5 = 15\n-1215 - 15 = -1230\n3 * 3 = 9\n-1230 - 9 = -1239\n3 * 1 = 3\n-1239 - 3 = -1242\n3 * 5 = 15\n-1242 - 15 = -1257\n3 * 3 = 9\n-1257 - 9 = -1266\n3 * 1 = 3\n-1266 - 3 = -1269\n3 * 5 = 15\n-1269 - 15 = -1284\n3 * 3 = 9\n-1284 - 9 = -1293\n3 * 1 = 3\n-1293 - 3 = -1296\n3 * 5 = 15\n-1296 - 15 = -1311\n3 * 3 = 9\n-1311 - 9 = -1320\n3 * 1 = 3\n-1320 - 3 = -1323\n3 * 5 = 15\n-1323 - 15 = -1338\n3 * 3 = 9\n-1338 - 9 = -1347\n3 * 1 = 3\n-1347 - 3 = -1350\n3 * 5 = 15\n-1350 - 15 = -1365\n3 * 3 = 9\n-1365 - 9 = -1374\n3 * 1 = 3\n-1374 - 3 = -1377\n3 * 5 = 15\n-1377 - 15 = -1392\n3 * 3 = 9\n-1392 - 9 = -1401\n3 * 1 = 3\n-1401 - 3 = -1404\n3 * 5 = 15\n-1404 - 15 = -1419\n3 * 3 = 9\n-1419 - 9 = -1428\n3 * 1 = 3\n",
            "Extract-Response": " -1428",
            "Expected Answer": -231,
            "Answer": -1428.0,
            "Final Answer": -1428.0
        },
        {
            "Index": 240,
            "GT": 1,
            "Query": "9 - 8 + 1 - 7 + 6 - 8 + 4 + 5 - 1 =   ",
            "Injected CoT": "9 - 8 = 2\n2 + 2 = 2\n2 - 7 = -5\n-5 + 6 = 2\n2 - 8 = -7\n-7 + 4 = -3\n-3 + 5 = 2\n2 - 2 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, sum = 0;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        for(j = 1; j <= i; j++)\n        {\n            sum = sum + j;\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 241,
            "GT": 99,
            "Query": "1 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =   ",
            "Injected CoT": "1 * 10 = 10\n10 * 10 = 81\n81 + 10 = 90\n90 - 5 = 85\n85 + 4 = 89\n89 - 2 = 87\n87 + 3 = 90\n90 + 10 =",
            "Response": " 100\n\n2 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n2 * 10 = 20\n20 * 10 = 81\n81 + 20 = 101\n101 - 5 = 96\n96 + 4 = 100\n100 - 2 = 98\n98 + 3 = 101\n101 + 20 = 121\n\n3 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n3 * 10 = 30\n30 * 10 = 81\n81 + 30 = 111\n111 - 5 = 106\n106 + 4 = 110\n110 - 2 = 108\n108 + 3 = 111\n111 + 30 = 141\n\n4 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n4 * 10 = 40\n40 * 10 = 81\n81 + 40 = 121\n121 - 5 = 116\n116 + 4 = 120\n120 - 2 = 118\n118 + 3 = 121\n121 + 40 = 161\n\n5 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n5 * 10 = 50\n50 * 10 = 81\n81 + 50 = 131\n131 - 5 = 126\n126 + 4 = 130\n130 - 2 = 128\n128 + 3 = 131\n131 + 50 = 181\n\n6 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n6 * 10 = 60\n60 * 10 = 81\n81 + 60 = 141\n141 - 5 = 136\n136 + 4 = 140\n140 - 2 = 138\n138 + 3 = 141\n141 + 60 = 201\n\n7 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n7 * 10 = 70\n70 * 10 = 81\n81 + 70 = 151\n151 - 5 = 146\n146 + 4 = 150\n150 - 2 = 148\n148 + 3 = 151\n151 + 70 = 221\n\n8 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n8 * 10 = 80\n80 * 10 = 81\n81 + 80 = 161\n161 - 5 = 156\n156 + 4 = 160\n160 - 2 = 158\n158 + 3 = 161\n161 + 80 = 241\n\n9 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n9 * 10 = 90\n90 * 10 = 81\n81 + 90 = 171\n171 - 5 = 166\n166 + 4 = 170\n170 - 2 = 168\n168 + 3 = 171\n171 + 90 = 261\n\n10 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n10 * 10 = 100\n100 * 10 = 81\n81 + 100 = 181\n181 - 5 = 176\n176 + 4 = 180\n180 - 2 = 178\n178 + 3 = 181\n181 + 100 = 281\n\n11 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n11 * 10 = 110\n110 * 10 = 81\n81 + 110 = 191\n191 - 5 = 186\n186 + 4 = 190\n190 - 2 = 188\n188 + 3 = 191\n191 + 110 = 301\n\n12 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n12 * 10 = 120\n120 * 10 = 81\n81 + 120 = 201\n201 - 5 = 196\n196 + 4 = 200\n200 - 2 = 198\n198 + 3 = 201\n201 + 120 = 321\n\n13 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n13 * 10 = 130\n130 * 10 = 81\n81 + 130 = 211\n211 - 5 = 206\n206 + 4 = 210\n210 - 2 = 208\n208 + 3 = 211\n211 + 130 = 341\n\n14 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n14 * 10 = 140\n140 * 10 = 81\n81 + 140 = 221\n221 - 5 = 216\n216 + 4 = 220\n220 - 2 = 218\n218 + 3 = 221\n221 + 140 = 361\n\n15 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n15 * 10 = 150\n150 * 10 = 81\n81 + 150 = 231\n231 - 5 = 226\n226 + 4 = 230\n230 - 2 = 228\n228 + 3 = 231\n231 + 150 = 381\n\n16 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n16 * 10 = 160\n160 * 10 = 81\n81 + 160 = 241\n241 - 5 = 236\n236 + 4 = 240\n240 - 2 = 238\n238 + 3 = 241\n241 + 160 = 401\n\n17 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n17 * 10 = 170\n170 * 10 = 81\n81 + 170 = 251\n251 - 5 = 246\n246 + 4 = 250\n250 - 2 = 248\n248 + 3 = 251\n251 + 170 = 421\n\n18 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n18 * 10 = 180\n180 * 10 = 81\n81 + 180 = 261\n261 - 5 = 256\n256 + 4 = 260\n260 - 2 = 258\n258 + 3 = 261\n261 + 180 = 441\n\n19 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n19 * 10 = 190\n190 * 10 = 81\n81 + 190 = 271\n271 - 5 = 266\n266 + 4 = 270\n270 - 2 = 268\n268 + 3 = 271\n271 + 190 = 461\n\n20 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n20 * 10 = 200\n200 * 10 = 81\n81 + 200 = 281\n281 - 5 = 276\n276 + 4 = 280\n280 - 2 = 278\n278 + 3 = 281\n281 + 200 = 481\n\n21 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n21 * 10 = 210\n210 * 10 = 81\n81 + 210 = 291\n291 - 5 = 286\n286 + 4 = 290\n290 - 2 = 288\n288 + 3 = 291\n291 + 210 = 501\n\n22 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n22 * 10 = 220\n220 * 10 = 81\n81 + 220 = 301\n301 - 5 = 296\n296 + 4 = 300\n300 - 2 = 298\n298 + 3 = 301\n301 + 220 = 521\n\n23 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n23 * 10 = 230\n230 * 10 = 81\n81 + 230 = 311\n311 - 5 = 306\n306 + 4 = 310\n310 - 2 = 308\n308 + 3 = 311\n311 + 230 = 541\n\n24 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n24 * 10 = 240\n240 * 10 = 81\n81 + 240 = 321\n321 - 5 = 316\n316 + 4 = 320\n320 - 2 = 318\n318 + 3 = 321\n321 + 240 = 561\n\n25 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n25 * 10 = 250\n250 * 10 = 81\n81 + 250 = 331\n331 - 5 = 326\n326 + 4 = 330\n330 - 2 = 328\n328 + 3 = 331\n331 + 250 = 581\n\n26 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n26 * 10 = 260\n260 * 10 = 81\n81 + 260 = 341\n341 - 5 = 336\n336 + 4 = 340\n340 - 2 = 338\n338 + 3 = 341\n341 + 260 = 601\n\n27 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n27 * 10 = 270\n270 * 10 = 81\n81 + 270 = 351\n351 - 5 = 346\n346 + 4 = 350\n350 - 2 = 348\n348 + 3 = 351\n351 + 270 = 621\n\n28 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n28 * 10 = 280\n280 * 10 = 81\n81 + 280 = 361\n361 - 5 = 356\n356 + 4 = 360\n360 - 2 = 358\n358 + 3 = 361\n361 + 280 = 641\n\n29 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n29 * 10 = 290\n290 * 10 = 81\n81 + 290 = 371\n371 - 5 = 366\n366 + 4 = 370\n370 - 2 = 368\n368 + 3 = 371\n371 + 290 = 661\n\n30 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =    \n30 * 10 = 300\n300 * 10 = 81\n81 + 300 = 381\n381 - 5 = 376\n376 + 4 = 380\n380 - 2",
            "Extract-Response": "\n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\nThe answer is \n\n",
            "Expected Answer": 100,
            "Answer": "",
            "Final Answer": ""
        },
        {
            "Index": 242,
            "GT": -25,
            "Query": "3 + 2 - 8 - 7 - 3 * 3 - 4 + 1 - 3 =   ",
            "Injected CoT": "4 + 2 = 5\n5 - 8 = -3\n-3 - 7 = -10\n4 * 4 = 9\n-10 - 9 = -19\n-19 - 4 = -23\n-23 + 1 = -22\n-22 - 4 =",
            "Response": " -26",
            "Extract-Response": " -26.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <stack>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <functional>\n#include <cctype>\n#include <sstream>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint cur = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tcur = cur * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += cur * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution2 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint cur = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tcur = cur * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += cur * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution3 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint cur = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tcur = cur * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += cur * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution4 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint cur = s[i] - '0';\n\t\t\t\twhile (i + 1 < n && isdigit(s[i + 1])) {\n\t\t\t\t\tcur = cur * 10 + s[i + 1] - '0';\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tres += cur * sign;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n\nclass Solution5 {\npublic:\n\tint calculate(string s) {\n\t\tint n = s.size();\n\t\tif (n == 0) return 0;\n\t\tstack<int> st;\n\t\tint sign = 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (s[i] == ' ') continue;\n\t\t\tif (s[i] == '+') {\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == '-') {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t\telse if (s[i] == '(') {\n\t\t\t\tst.push(res);\n\t\t\t\tst.push(sign);\n\t\t\t\tres = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if (s[i] == ')') {\n\t\t\t\tres = res * st.top() + st.top() * st.top();\n\t\t\t\tst.pop();\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint cur =",
            "Expected Answer": -26,
            "Answer": -26.0,
            "Final Answer": -26.0
        },
        {
            "Index": 244,
            "GT": 20,
            "Query": "6 + 9 + 8 + 6 + 3 + 4 - 9 - 4 - 3 =   ",
            "Injected CoT": "6 + 9 = 15\n15 + 8 = 23\n23 + 6 = 29\n29 + 4 = 32\n32 + 4 = 36\n36 - 9 = 27\n27 - 4 = 23\n23 - 4 =",
            "Response": " 19\n\n19",
            "Extract-Response": "\n\n19",
            "Expected Answer": 19,
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 245,
            "GT": 13,
            "Query": "6 + 4 * 2 - 2 * 3 + 6 + 4 - 8 + 3 =   ",
            "Injected CoT": "3 * 2 = 8\n6 + 8 = 14\n2 * 3 = 6\n14 - 6 = 8\n8 + 3 = 12\n12 - 8 = 3\n3 + 3 =",
            "Response": " 6\n6 - 3 = 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 6,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 246,
            "GT": -24,
            "Query": "2 * 2 + 1 - 4 - 6 - 2 * 8 + 4 - 7 =   ",
            "Injected CoT": "2 * 2 = 4\n4 + 1 = 5\n5 - 4 = 1\n1 - 6 = -5\n2 * 8 = 16\n-5 - 16 = -21\n-21 + 4 = -17\n-17 - 8 =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            if(sum > maxSum) {\n                maxSum = sum;\n            }\n            if(sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};",
            "Expected Answer": -25,
            "Answer": -25.0,
            "Final Answer": -25.0
        },
        {
            "Index": 247,
            "GT": 17,
            "Query": "3 * 5 * 2 + 4 + 9 - 3 * 8 - 6 + 4 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 2 = 30\n30 + 5 = 34\n34 + 9 = 43\n3 * 8 = 24\n24 + 6 = 30\n30 - 30 = 0\n0 + 5 =",
            "Response": " 5",
            "Extract-Response": " 5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 5,
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 249,
            "GT": 157,
            "Query": "4 * 8 + 7 - 6 + 8 - 4 + 5 * 8 * 3 =   ",
            "Injected CoT": "4 * 8 = 32\n5 * 8 = 40\n40 * 3 = 121\n32 + 7 = 39\n39 - 6 = 33\n33 + 8 = 41\n41 - 4 = 37\n37 + 121 =",
            "Response": " 158",
            "Extract-Response": " 158\n</code>\n",
            "Expected Answer": 158,
            "Answer": 158.0,
            "Final Answer": 158.0
        },
        {
            "Index": 250,
            "GT": -455,
            "Query": "9 - 6 * 2 * 4 * 3 - 4 * 4 * 5 * 4 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 4 = 48\n48 * 3 = 144\n4 * 4 = 16\n16 * 5 = 80\n80 * 4 = 319\n9 - 144 = -135\n-135 - 319 =",
            "Response": " -454\n-454 - 16 = -470\n\n-470",
            "Extract-Response": " -470\n\n*/",
            "Expected Answer": -454,
            "Answer": -470.0,
            "Final Answer": -470.0
        },
        {
            "Index": 254,
            "GT": 59,
            "Query": "5 * 6 + 4 + 6 - 1 - 3 + 6 * 3 + 5 =   ",
            "Injected CoT": "4 * 6 = 30\n6 * 3 = 18\n30 + 4 = 34\n34 + 6 = 40\n40 - 1 = 39\n39 - 3 = 36\n18 + 36 = 54\n54 + 4 =",
            "Response": " 58\n58 + 5 = 63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += curr;\n            curr = 0;\n        } else if (s[i] == '-') {\n            result += curr;\n            curr = 0;\n            result -= 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 58,
            "Answer": 63.0,
            "Final Answer": 63.0
        },
        {
            "Index": 255,
            "GT": 21,
            "Query": "2 * 8 - 2 + 7 - 8 - 4 - 1 + 6 + 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 2 = 13\n13 + 7 = 21\n21 - 8 = 13\n13 - 4 = 9\n9 - 1 = 8\n8 + 6 = 13\n13 + 7 =",
            "Response": " 20",
            "Extract-Response": "\n\n20",
            "Expected Answer": 20,
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 257,
            "GT": 36,
            "Query": "5 * 6 + 1 + 3 + 3 - 8 + 7 + 9 - 9 =   ",
            "Injected CoT": "5 * 6 = 30\n30 + 1 = 31\n31 + 3 = 34\n34 + 3 = 37\n37 - 8 = 29\n29 + 7 = 36\n36 + 9 = 46\n46 - 9 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <stack>\n#include <functional>\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<ll>> vvll;\n\nint main() {\n\tcin.tie(NULL);\n\tios::sync_with_stdio(false);\n\tint n;\n\tcin >> n;\n\tint ans = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i % 2 == 1) {\n\t\t\tans += i;\n\t\t}\n\t\telse {\n\t\t\tans -= i;\n\t\t}\n\t}\n\tcout << ans;\n\treturn 0;\n}",
            "Expected Answer": 37,
            "Answer": 37.0,
            "Final Answer": 37.0
        },
        {
            "Index": 259,
            "GT": 483,
            "Query": "9 + 7 - 1 + 7 * 9 * 7 - 5 + 4 * 8 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 7 = 441\n9 + 7 = 16\n16 - 1 = 15\n441 + 15 = 456\n4 * 8 = 32\n456 - 5 = 450\n450 + 32 =",
            "Response": " 482",
            "Extract-Response": " 482\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Expected Answer": 482,
            "Answer": 482.0,
            "Final Answer": 482.0
        },
        {
            "Index": 261,
            "GT": -49,
            "Query": "2 - 2 - 7 + 1 * 2 * 9 - 5 * 3 * 4 =   ",
            "Injected CoT": "2 - 2 = 0\n0 - 7 = -7\n1 * 2 = 2\n2 * 9 = 18\n5 * 3 = 15\n15 * 4 = 61\n18 - 61 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        if(n == 0) return 0;\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(ans);\n                st.push(sign);\n                ans = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                ans += sign * cur;\n                cur = 0;\n                ans *= st.top();\n                st.pop();\n                ans += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        if(cur) ans += sign * cur;\n        return ans;\n    }\n};",
            "Expected Answer": -43,
            "Answer": -43.0,
            "Final Answer": -43.0
        },
        {
            "Index": 263,
            "GT": 29,
            "Query": "8 - 6 - 7 + 4 * 4 * 2 - 1 - 5 + 8 =   ",
            "Injected CoT": "4 * 2 = 9\n9 * 4 = 32\n9 - 6 = 2\n2 - 7 = -5\n-5 + 32 = 27\n27 - 1 = 26\n26 - 5 = 21\n21 + 9 =",
            "Response": " 30",
            "Extract-Response": " 30\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 30,
            "Answer": 30.0,
            "Final Answer": 30.0
        },
        {
            "Index": 265,
            "GT": 251,
            "Query": "9 - 5 * 3 + 5 * 1 * 6 * 9 - 8 - 5 =   ",
            "Injected CoT": "5 * 3 = 15\n1 * 6 = 6\n6 * 9 = 54\n15 + 54 = 69\n9 - 15 = -6\n-6 + 69 = 63\n63 - 8 = 56\n56 - 5 =",
            "Response": " 51",
            "Extract-Response": "\n\n51",
            "Expected Answer": 51,
            "Answer": 51.0,
            "Final Answer": 51.0
        },
        {
            "Index": 267,
            "GT": 74,
            "Query": "5 + 1 - 7 - 8 + 6 + 8 * 9 - 2 + 7 =   ",
            "Injected CoT": "8 * 9 = 72\n5 + 1 = 6\n6 - 7 = -1\n-1 - 8 = -9\n-9 + 6 = -3\n-3 + 72 = 69\n69 - 2 = 68\n68 + 7 =",
            "Response": " 75",
            "Extract-Response": " 75.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};",
            "Expected Answer": 75,
            "Answer": 75.0,
            "Final Answer": 75.0
        },
        {
            "Index": 268,
            "GT": 38,
            "Query": "5 * 3 + 2 * 6 - 2 + 9 + 9 - 3 - 2 =   ",
            "Injected CoT": "5 * 3 = 14\n2 * 6 = 12\n14 + 12 = 27\n9 + 9 = 18\n27 - 2 = 25\n18 - 3 = 14\n25 - 2 = 23\n14 + 23 =",
            "Response": " 37",
            "Extract-Response": " 37\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define RREP(i,a,b) for(int i=a;i>=b;i--)\n#define FOR(i,m) for(auto i=m.begin();i!=m.end();i++)\n#define X first\n#define Y second\n#define ALL(a) (a).begin(),(a).end()\n#define SORT(a) sort(ALL(a))\n#define CLR(a) memset(a,0,sizeof(a))\n#define PB push_back\n#define MP make_pair\n#define INF 0x3fffffff\n#define MOD 1000000007\n#define MP make_pair\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef pair<int, int> PII;\ntypedef pair<double, double> PDD;\ntypedef pair<LL, LL> PLL;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * cur;\n            cur = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    ans += sign * cur;\n    cout << ans << endl;\n    return 0;\n}",
            "Expected Answer": 37,
            "Answer": 37.0,
            "Final Answer": 37.0
        },
        {
            "Index": 269,
            "GT": -616,
            "Query": "3 * 9 + 2 - 7 + 2 - 8 * 4 * 4 * 5 =   ",
            "Injected CoT": "3 * 9 = 27\n27 + 2 = 29\n29 - 7 = 22\n22 + 2 = 24\n8 * 4 = 32\n32 * 4 = 128\n128 * 5 = 641\n24 - 641 =",
            "Response": " -617",
            "Extract-Response": " -617.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1,000,000, 1,000,000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Expected Answer": -617,
            "Answer": -617.0,
            "Final Answer": -617.0
        },
        {
            "Index": 272,
            "GT": 49,
            "Query": "1 + 5 + 2 + 6 + 9 - 7 + 5 * 6 + 3 =   ",
            "Injected CoT": "5 * 6 = 30\n1 + 5 = 6\n6 + 2 = 8\n8 + 6 = 14\n14 + 9 = 23\n23 - 7 = 16\n16 + 30 = 46\n46 + 2 =",
            "Response": " 48",
            "Extract-Response": "\n\n48",
            "Expected Answer": 48,
            "Answer": 48.0,
            "Final Answer": 48.0
        },
        {
            "Index": 274,
            "GT": 174,
            "Query": "7 * 6 * 4 - 7 - 5 + 8 + 1 + 6 + 3 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 4 = 168\n168 - 7 = 161\n161 - 5 = 156\n156 + 8 = 164\n164 + 1 = 165\n165 + 6 = 172\n172 + 3 =",
            "Response": " 175",
            "Extract-Response": " 175\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 175,
            "Answer": 175.0,
            "Final Answer": 175.0
        },
        {
            "Index": 275,
            "GT": 8,
            "Query": "1 + 3 + 8 - 6 + 5 * 2 - 4 * 4 + 8 =   ",
            "Injected CoT": "5 * 2 = 10\n3 * 3 = 16\n1 + 3 = 3\n8 - 6 = 2\n10 + 2 = 12\n12 - 16 = -4\n-4 + 8 = 3\n3 + 5 = 9\n9 + 3 =",
            "Response": " 12",
            "Extract-Response": "\n\n12",
            "Expected Answer": 12,
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 276,
            "GT": 43,
            "Query": "5 + 8 * 6 + 7 * 1 + 2 - 9 - 3 - 7 =   ",
            "Injected CoT": "8 * 6 = 48\n8 * 1 = 8\n5 + 48 = 53\n53 + 8 = 60\n60 + 2 = 62\n62 - 9 = 53\n53 - 3 = 50\n50 - 8 =",
            "Response": " 42\n42 - 7 = 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 42,
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 277,
            "GT": 6,
            "Query": "3 + 9 - 4 - 7 + 4 - 7 + 8 - 1 + 1 =   ",
            "Injected CoT": "3 + 9 = 12\n12 - 4 = 8\n8 - 7 = 2\n2 + 4 = 5\n5 - 7 = -2\n-2 + 8 = 6\n6 - 2 = 5\n5 + 2 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": 7,
            "Answer": 7.0,
            "Final Answer": 7.0
        },
        {
            "Index": 279,
            "GT": 74,
            "Query": "7 * 4 - 2 + 9 * 5 + 3 + 2 + 7 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n9 * 5 = 45\n28 - 2 = 26\n26 + 45 = 71\n71 + 3 = 74\n74 + 2 = 76\n76 + 7 = 82\n82 - 9 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Expected Answer": 73,
            "Answer": 73.0,
            "Final Answer": 73.0
        },
        {
            "Index": 282,
            "GT": -75,
            "Query": "6 * 2 + 3 - 4 - 2 - 9 * 8 - 7 - 5 =   ",
            "Injected CoT": "6 * 2 = 12\n12 + 3 = 15\n15 - 4 = 11\n11 - 2 = 9\n9 - 9 * 8 = -63\n-63 - 7 = -70\n-70 - 6 =",
            "Response": " -76",
            "Extract-Response": " -76.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -76,
            "Answer": -76.0,
            "Final Answer": -76.0
        },
        {
            "Index": 283,
            "GT": 381,
            "Query": "8 - 7 + 9 * 7 * 6 + 8 - 4 - 1 - 1 =   ",
            "Injected CoT": "9 * 7 = 63\n63 * 6 = 378\n8 - 7 = 1\n1 + 378 = 379\n379 + 8 = 387\n387 - 4 = 383\n383 - 1 = 381\n381 - 1 =",
            "Response": " 380",
            "Extract-Response": " 380\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 380,
            "Answer": 380.0,
            "Final Answer": 380.0
        },
        {
            "Index": 284,
            "GT": -73,
            "Query": "5 - 2 + 2 - 5 * 4 - 1 - 7 * 8 - 1 =   ",
            "Injected CoT": "5 - 2 = 3\n3 + 2 = 5\n5 - 5 * 4 = -15\n-15 - 1 = -16\n-7 * 8 = -56\n-16 - 56 = -73\n-73 - 1 =",
            "Response": " -74",
            "Extract-Response": " -74.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};",
            "Expected Answer": -74,
            "Answer": -74.0,
            "Final Answer": -74.0
        },
        {
            "Index": 287,
            "GT": 3036,
            "Query": "2 * 9 * 7 * 1 * 3 * 8 + 9 + 8 - 5 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 7 = 126\n126 * 1 = 126\n126 * 3 = 378\n378 * 8 = 3024\n3024 + 9 = 3033\n3033 + 8 = 3042\n3042 - 5 =",
            "Response": " 3037\n\n2 * 9 * 7 * 1 * 3 * 8 + 9 + 8 - 5 = 3037",
            "Extract-Response": " 3037\n\n*/",
            "Expected Answer": 3037,
            "Answer": 3037.0,
            "Final Answer": 3037.0
        },
        {
            "Index": 289,
            "GT": 35,
            "Query": "4 * 5 + 8 - 8 + 9 + 3 + 9 - 2 * 3 =   ",
            "Injected CoT": "4 * 5 = 20\n20 + 8 = 28\n28 - 8 = 20\n20 + 9 = 29\n29 + 3 = 32\n32 + 9 = 42\n2 * 3 = 6\n42 - 6 =",
            "Response": " 36",
            "Extract-Response": "\n\n36",
            "Expected Answer": 36,
            "Answer": 36.0,
            "Final Answer": 36.0
        },
        {
            "Index": 291,
            "GT": -6,
            "Query": "1 + 3 - 4 + 8 + 5 - 1 - 4 * 6 + 6 =   ",
            "Injected CoT": "4 * 6 = 24\n1 + 3 = 4\n4 - 4 = 0\n0 + 8 = 8\n8 + 5 = 13\n13 - 1 = 12\n12 - 24 = -11\n-11 + 6 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -5,
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 292,
            "GT": -111,
            "Query": "4 + 8 + 6 - 3 - 8 * 4 * 4 + 3 - 1 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 4 = 128\n4 + 8 = 12\n12 + 6 = 18\n18 - 3 = 15\n15 - 128 = -113\n-113 + 3 = -110\n-110 - 0 =",
            "Response": " -110",
            "Extract-Response": " -110.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in the range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores[scores.size() - 1]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -110,
            "Answer": -110.0,
            "Final Answer": -110.0
        },
        {
            "Index": 294,
            "GT": 39,
            "Query": "9 * 6 + 5 - 7 - 6 + 1 - 2 - 2 - 4 =   ",
            "Injected CoT": "9 * 6 = 54\n54 + 5 = 59\n59 - 7 = 52\n52 - 6 = 46\n46 + 1 = 47\n47 - 2 = 45\n45 - 2 = 42\n42 - 4 =",
            "Response": " 38",
            "Extract-Response": "\n\n38",
            "Expected Answer": 38,
            "Answer": 38.0,
            "Final Answer": 38.0
        },
        {
            "Index": 295,
            "GT": -8035,
            "Query": "5 * 7 - 6 - 7 * 4 * 8 * 4 * 1 * 9 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 8 = 224\n224 * 4 = 896\n896 * 1 = 896\n896 * 9 = 8064\n5 * 7 = 35\n35 - 6 = 30\n30 - 8064 =",
            "Response": " -8034\n\n-8034",
            "Extract-Response": " -8034",
            "Expected Answer": -8034,
            "Answer": -8034.0,
            "Final Answer": -8034.0
        },
        {
            "Index": 298,
            "GT": 275,
            "Query": "3 - 6 + 8 * 1 * 8 * 5 - 1 * 7 * 6 =   ",
            "Injected CoT": "8 * 2 = 8\n8 * 5 = 40\n2 * 7 = 7\n7 * 6 = 42\n-6 + 8 = 2\n3 + 2 = 5\n5 + 40 = 45\n45 - 42 = 3\n3 - 42 = -39\n-39 + 40 = 2\n2 - 2 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Expected Answer": 0,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 299,
            "GT": 332,
            "Query": "3 + 4 + 5 + 9 * 4 * 9 - 8 + 7 - 3 =   ",
            "Injected CoT": "3 + 4 = 7\n7 + 5 = 12\n9 * 4 = 36\n36 * 9 = 324\n324 - 8 = 316\n316 + 7 = 322\n322 - 3 =",
            "Response": " 319",
            "Extract-Response": " 319\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            flag=0;\n        }\n        else if(s[i]=='-')\n        {\n            flag=1;\n        }\n        else if(s[i]=='*')\n        {\n            flag=2;\n        }\n        else if(s[i]=='/')\n        {\n            flag=3;\n        }\n        else if(s[i]=='%')\n        {\n            flag=4;\n        }\n        else if(s[i]=='^')\n        {\n            flag=5;\n        }\n        else\n        {\n            if(flag==0)\n            {\n                sum=sum+s[i]-48;\n            }\n            else if(flag==1)\n            {\n                sum=sum-s[i]+48;\n            }\n            else if(flag==2)\n            {\n                sum=sum*s[i]-48;\n            }\n            else if(flag==3)\n            {\n                sum=sum/s[i]-48;\n            }\n            else if(flag==4)\n            {\n                sum=sum%s[i]-48;\n            }\n            else if(flag==5)\n            {\n                sum=pow(sum,s[i]-48);\n            }\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
            "Expected Answer": 319,
            "Answer": 319.0,
            "Final Answer": 319.0
        },
        {
            "Index": 300,
            "GT": 53,
            "Query": "6 * 2 + 4 * 6 + 1 * 8 + 7 - 3 + 5 =   ",
            "Injected CoT": "6 * 2 = 12\n4 * 6 = 24\n1 * 8 = 8\n12 + 24 = 36\n36 + 8 = 44\n44 + 7 = 51\n51 - 3 = 48\n48 + 4 =",
            "Response": " 52\n52 + 5 = 57",
            "Extract-Response": " 57\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        result += (s[i] - '0') * (i + 1);\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 52,
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 301,
            "GT": -5,
            "Query": "1 * 5 + 6 + 5 + 9 - 4 - 2 - 3 * 8 =   ",
            "Injected CoT": "1 * 5 = 5\n5 + 6 = 11\n11 + 5 = 16\n16 + 9 = 25\n25 - 4 = 21\n21 - 2 = 19\n3 * 8 = 23\n19 - 23 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the task.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0",
            "Expected Answer": -4,
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 305,
            "GT": -28,
            "Query": "9 - 4 * 6 + 2 + 7 + 1 - 8 * 3 + 1 =   ",
            "Injected CoT": "4 * 6 = 24\n9 - 24 = -15\n-15 + 2 = -13\n-13 + 7 = -6\n-6 + 1 = -5\n8 * 3 = 24\n-5 - 24 = -30\n-30 + 1 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nThe answer is guaranteed to be fitted in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    \n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    \n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Expected Answer": -29,
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 306,
            "GT": 57,
            "Query": "6 + 4 * 1 + 4 * 9 + 5 + 5 + 6 - 5 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 9 = 36\n6 + 4 = 10\n10 + 36 = 46\n46 + 5 = 51\n51 + 5 = 56\n56 + 6 = 63\n63 - 5 =",
            "Response": " 58\n\n58\n\n*/",
            "Extract-Response": "\n\n58",
            "Expected Answer": 58,
            "Answer": 58.0,
            "Final Answer": 58.0
        },
        {
            "Index": 308,
            "GT": -53,
            "Query": "7 - 4 - 9 - 7 * 9 + 6 * 2 + 3 + 1 =   ",
            "Injected CoT": "7 - 4 = 3\n3 - 9 = -6\n7 * 9 = 63\n-6 - 63 = -69\n6 * 2 = 12\n-69 + 12 = -57\n-57 + 3 = -53\n-53 + 1 =",
            "Response": " -52",
            "Extract-Response": " -52.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -52,
            "Answer": -52.0,
            "Final Answer": -52.0
        },
        {
            "Index": 310,
            "GT": -13,
            "Query": "3 + 8 - 6 - 8 - 8 - 5 + 7 - 8 + 4 =   ",
            "Injected CoT": "3 + 8 = 11\n11 - 6 = 5\n5 - 8 = -3\n-3 - 8 = -11\n-11 - 5 = -16\n-16 + 7 = -9\n-9 - 8 = -16\n-16 + 4 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -12,
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 311,
            "GT": 35,
            "Query": "3 - 5 - 8 * 2 + 6 * 8 - 8 + 4 + 9 =   ",
            "Injected CoT": "-8 * 2 = -16\n6 * 8 = 48\n-5 - 16 = -21\n-21 + 48 = 27\n-8 + 4 = -4\n-4 + 9 = 5\n4 + 5 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 9,
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 312,
            "GT": -10,
            "Query": "1 * 1 - 2 * 6 + 9 - 6 - 5 * 1 + 3 =   ",
            "Injected CoT": "1 * 1 = 1\n2 * 6 = 12\n1 - 12 = -11\n-11 + 9 = -2\n-2 - 6 = -8\n5 * 1 = 5\n-8 - 5 = -13\n-13 + 4 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -9,
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 315,
            "GT": -36,
            "Query": "7 - 7 - 2 - 5 + 7 - 5 - 4 * 6 - 7 =   ",
            "Injected CoT": "8 - 8 = 0\n0 - 2 = -2\n-2 - 5 = -7\n-7 + 8 = 0\n0 - 5 = -5\n-5 - 4 * 6 = -29\n-29 - 8 =",
            "Response": " -37",
            "Extract-Response": " -37.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}",
            "Expected Answer": -37,
            "Answer": -37.0,
            "Final Answer": -37.0
        },
        {
            "Index": 316,
            "GT": -13,
            "Query": "9 - 9 + 5 + 6 + 7 - 7 * 5 - 1 + 5 =   ",
            "Injected CoT": "9 - 9 = 0\n0 + 5 = 5\n5 + 6 = 11\n11 + 7 = 18\n7 * 5 = 35\n18 - 35 = -17\n-17 - 1 = -17\n-17 + 5 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the task.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a+b+c, a*(b+c), (a+b)*c, a*b*c)",
            "Expected Answer": -12,
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 319,
            "GT": 24,
            "Query": "5 + 9 - 1 + 8 + 5 + 2 * 4 - 2 * 5 =   ",
            "Injected CoT": "2 * 4 = 8\n2 * 5 = 11\n5 + 9 = 14\n14 - 1 = 13\n13 + 8 = 21\n21 + 5 = 26\n26 - 11 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 15,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 321,
            "GT": -179,
            "Query": "1 + 7 * 2 - 6 * 5 * 6 - 9 - 7 + 2 =   ",
            "Injected CoT": "7 * 1 = 14\n6 * 5 = 30\n30 * 6 = 180\n1 + 14 = 15\n15 - 180 = -165\n-165 - 9 = -174\n-174 - 7 = -181\n-181 + 1 =",
            "Response": " -180\n-180 + 2 = -178",
            "Extract-Response": " -178\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d, e, f, g, h, i, j, k, l, m, n1, o, p, q, r, s, t, u, v, w, x, y, z;\n    cin >> n;\n    vector<int> v(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> v[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                for (size_t l = k + 1; l < n; ++l) {\n                    for (size_t m = l + 1; m < n; ++m) {\n                        for (size_t o = m + 1; o < n; ++o) {\n                            for (size_t p = o + 1; p < n; ++p) {\n                                for (size_t q = p + 1; q < n; ++q) {\n                                    for (size_t r = q + 1; r < n; ++r) {\n                                        for (size_t s = r + 1; s < n; ++s) {\n                                            for (size_t t = s + 1; t < n; ++t) {\n                                                for (size_t u = t + 1; u < n; ++u) {\n                                                    for (size_t v = u + 1; v < n; ++v) {\n                                                        for (size_t w = v + 1; w < n; ++w) {\n                                                            for (size_t x = w + 1; x < n; ++x) {\n                                                                for (size_t y = x + 1; y < n; ++y) {\n                                                                    for (size_t z = y + 1; z < n; ++z) {\n                                                                        if (v[i] + v[j] + v[k] + v[l] + v[m] + v[o] + v[p] + v[q] + v[r] + v[s] + v[t] + v[u] + v[v] + v[w] + v[x] + v[y] + v[z] == 0) {\n                                                                            ++result;\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -180,
            "Answer": -178.0,
            "Final Answer": -178.0
        },
        {
            "Index": 322,
            "GT": -112,
            "Query": "9 - 6 + 8 - 7 * 2 * 6 + 3 - 6 * 7 =   ",
            "Injected CoT": "-7 * 2 = -14\n-14 * 6 = -84\n9 - 6 = 3\n3 + 8 = 11\n11 - 84 = -73\n-73 + 3 = -69\n-6 * 7 = -42\n-69 - 42 =",
            "Response": " -111",
            "Extract-Response": " -111.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 100.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluateExpression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(stack.pop() - stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()",
            "Expected Answer": -111,
            "Answer": -111.0,
            "Final Answer": -111.0
        },
        {
            "Index": 325,
            "GT": 21,
            "Query": "3 + 1 - 6 - 9 + 7 * 4 + 5 - 5 + 4 =   ",
            "Injected CoT": "7 * 4 = 28\n3 + 1 = 4\n4 - 6 = -2\n-2 - 9 = -11\n-11 + 28 = 16\n16 + 5 = 22\n22 - 5 = 16\n16 + 4 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n        if (c == '+') {\n            result += curr;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr;\n            curr = 0;\n            sign = 2;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    result += curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 20,
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 326,
            "GT": 109,
            "Query": "1 - 9 + 8 - 6 + 3 * 5 * 7 + 7 + 3 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 7 = 105\n1 - 9 = -8\n-8 + 8 = 0\n0 - 6 = -6\n-6 + 105 = 99\n99 + 7 = 105\n105 + 3 =",
            "Response": " 108",
            "Extract-Response": "\n\n108",
            "Expected Answer": 108,
            "Answer": 108.0,
            "Final Answer": 108.0
        },
        {
            "Index": 327,
            "GT": 376,
            "Query": "4 + 6 * 7 + 4 - 9 - 1 + 8 * 6 * 7 =   ",
            "Injected CoT": "6 * 7 = 42\n4 + 42 = 46\n46 + 4 = 50\n50 - 9 = 41\n41 - 1 = 40\n8 * 6 = 48\n48 * 7 = 337\n40 + 337 =",
            "Response": " 377",
            "Extract-Response": " 377\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 377,
            "Answer": 377.0,
            "Final Answer": 377.0
        },
        {
            "Index": 328,
            "GT": 365,
            "Query": "8 * 8 * 1 + 8 * 8 * 5 - 8 - 3 - 8 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 1 = 64\n64 * 5 = 320\n8 * 8 = 64\n64 * 5 = 320\n64 + 320 = 384\n384 - 8 = 376\n376 - 3 = 374\n374 - 8 =",
            "Response": " 366\n\n366\n\n*/\n\npublic class Solution {\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        int area1 = (C - A) * (D - B);\n        int area2 = (G - E) * (H - F);\n        int overlap = 0;\n        if (C > E && G > A && D > F && H > B) {\n            int x = Math.min(C, G) - Math.max(A, E);\n            int y = Math.min(D, H) - Math.max(B, F);\n            overlap = x * y;\n        }\n        return area1 + area2 - overlap;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        int area1 = (C - A) * (D - B);\n        int area2 = (G - E) * (H - F);\n        int overlap = 0;\n        if (C > E && G > A && D > F && H > B) {\n            int x = Math.min(C, G) - Math.max(A, E);\n            int y = Math.min(D, H) - Math.max(B, F);\n            overlap = x * y;\n        }\n        return area1 + area2 - overlap;\n    }\n}",
            "Expected Answer": 366,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 329,
            "GT": 47,
            "Query": "2 * 4 * 1 * 5 + 9 - 9 + 3 + 8 - 4 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 1 = 8\n8 * 5 = 40\n40 + 9 = 49\n49 - 9 = 40\n40 + 3 = 43\n43 + 8 = 50\n50 - 4 =",
            "Response": " 46",
            "Extract-Response": "\n\n46",
            "Expected Answer": 46,
            "Answer": 46.0,
            "Final Answer": 46.0
        },
        {
            "Index": 331,
            "GT": -8,
            "Query": "3 * 2 * 2 - 7 - 7 - 4 + 9 - 8 - 3 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 2 = 12\n12 - 7 = 5\n5 - 7 = -2\n-2 - 4 = -6\n-6 + 9 = 3\n3 - 8 = -4\n-4 - 3 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Expected Answer": -7,
            "Answer": -7.0,
            "Final Answer": -7.0
        },
        {
            "Index": 333,
            "GT": -946,
            "Query": "1 + 8 - 6 + 6 + 5 - 8 * 5 * 6 * 4 =   ",
            "Injected CoT": "-8 * 5 = -40\n-40 * 6 = -240\n-240 * 4 = -960\n1 + 8 = 9\n9 - 6 = 3\n3 + 6 = 9\n9 + 5 = 13\n13 - (-960) =",
            "Response": " 973",
            "Extract-Response": " 973\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 973,
            "Answer": 973.0,
            "Final Answer": 973.0
        },
        {
            "Index": 334,
            "GT": -11,
            "Query": "9 - 5 - 8 * 5 + 4 + 9 * 4 - 5 * 3 =   ",
            "Injected CoT": "8 * 5 = 40\n9 - 5 = 5\n5 - 40 = -36\n9 * 5 = 36\n5 * 3 = 15\n-36 + 5 = -32\n-32 + 36 = 5\n5 + 15 =",
            "Response": " 20",
            "Extract-Response": " 20\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 20,
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 335,
            "GT": -22,
            "Query": "8 - 4 * 3 - 7 * 4 + 8 * 2 + 3 - 9 =   ",
            "Injected CoT": "4 * 3 = 12\n7 * 4 = 28\n8 * 2 = 16\n8 - 12 = -4\n-4 - 28 = -32\n-32 + 16 = -16\n-16 + 3 = -12\n-12 - 9 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Expected Answer": -21,
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 336,
            "GT": -25,
            "Query": "1 + 4 * 5 + 6 * 3 - 3 * 3 * 7 - 1 =   ",
            "Injected CoT": "4 * 5 = 20\n6 * 3 = 18\n3 * 3 = 9\n9 * 7 = 63\n20 + 18 = 38\n38 - 63 = -25\n-25 - 2 = -26\n2 + (-26) =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <stack>\n#include <functional>\n#include <cstring>\n#include <climits>\n#include <iomanip>\n#include <cassert>\n\n#define ll long long\n#define ull unsigned long long\n#define vi vector<ll>\n#define vb vector<bool>\n#define vvi vector<vi>\n#define vvb vector<vb>\n#define vpii vector<pair<ll,ll> >\n#define vvpii vector<vector<pair<ll,ll> > >\n#define pb push_back\n#define mp make_pair\n#define sz(x) (ll)(x).size()\n#define fr first\n#define sc second\n#define all(x) (x).begin(), (x).end()\n#define clr(a) memset(a,0,sizeof(a))\n#define fr1(i,a,b) for(ll i=a;i<b;i++)\n#define fr2(i,a,b) for(ll i=a;i>=b;i--)\n#define rep(i,a,b) fr1(i,0,b)\n#define repp(i,a,b) fr2(i,a,0)\n#define rrep(i,a,b) fr2(i,a,b)\n\nll MOD = 1000000007;\n\nll power(ll x, ll y, ll p)\n{\n    ll res = 1;      // Initialize result\n \n    x = x % p;  // Update x if it is more than or \n                // equal to p\n \n    while (y > 0)\n    {\n        // If y is odd, multiply x with result\n        if (y & 1)\n            res = (res*x) % p;\n \n        // y must be even now\n        y = y>>1; // y = y/2\n        x = (x*x) % p;  \n    }\n    return res;\n}\n\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\t//freopen(\"input.txt\", \"r\", stdin);\n\t//freopen(\"output.txt\", \"w\", stdout);\n\tll t;\n\tcin>>t;\n\twhile(t--){\n\t\tll n;\n\t\tcin>>n;\n\t\tvi a(n);\n\t\trep(i,0,n) cin>>a[i];\n\t\tll ans = 0;\n\t\tll cur = 0;\n\t\tll sign = 1;\n\t\trep(i,0,n){\n\t\t\tif(a[i]==0){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==1){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==2){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==3){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==4){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==5){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==6){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==7){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==8){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==9){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==10){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==11){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==12){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==13){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==14){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==15){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==16){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==17){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==18){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==19){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==20){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==21){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==22){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==23){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==24){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==25){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==26){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\telse if(a[i]==27){\n\t\t\t\tans += cur;\n\t\t\t\tcur = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t",
            "Expected Answer": -24,
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 342,
            "GT": -50,
            "Query": "1 * 8 - 6 * 8 - 4 + 3 - 5 + 3 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n6 * 8 = 48\n8 - 48 = -40\n-40 - 4 = -44\n-44 + 3 = -41\n-41 - 5 = -46\n-46 + 3 = -43\n-43 - 6 =",
            "Response": " -49\n-49 + 7 = -42",
            "Extract-Response": " -42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 1; i <= n; ++i) {\n        int sum = 0;\n        int x = i;\n        while (x > 0) {\n            sum += x % 10;\n            x /= 10;\n        }\n        if (sum >= a && sum <= b) {\n            result += i;\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -49,
            "Answer": -42.0,
            "Final Answer": -42.0
        },
        {
            "Index": 344,
            "GT": 18,
            "Query": "2 + 6 * 5 + 1 + 1 * 6 * 1 - 7 * 3 =   ",
            "Injected CoT": "6 * 5 = 30\n2 + 30 = 32\n1 * 6 = 6\n6 * 1 = 6\n7 * 3 = 21\n32 + 1 = 33\n33 + 6 = 38\n38 - 21 =",
            "Response": " 17",
            "Extract-Response": " 17.\n\nNote:\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 17,
            "Answer": 17.0,
            "Final Answer": 17.0
        },
        {
            "Index": 345,
            "GT": 114,
            "Query": "5 * 4 * 4 - 8 * 9 + 5 * 3 * 7 + 1 =   ",
            "Injected CoT": "5 * 4 = 20\n20 * 4 = 80\n8 * 9 = 72\n80 - 72 = 8\n5 * 3 = 15\n15 * 7 = 105\n8 + 105 = 114\n114 + 1 =",
            "Response": " 115",
            "Extract-Response": " 115\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\nusing namespace std;\n\n#define ll long long int\n#define pii pair<int,int>\n\nint main(){\n\tint n;\n\tcin>>n;\n\tint a[n];\n\tfor(int i=0;i<n;i++)\n\t\tcin>>a[i];\n\tint ans = 0;\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=i+1;j<n;j++){\n\t\t\tfor(int k=j+1;k<n;k++){\n\t\t\t\tif(a[i]<a[j] && a[j]<a[k])\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}",
            "Expected Answer": 115,
            "Answer": 115.0,
            "Final Answer": 115.0
        },
        {
            "Index": 346,
            "GT": 40,
            "Query": "5 + 8 * 5 - 4 - 4 + 4 - 8 - 2 + 9 =   ",
            "Injected CoT": "8 * 5 = 40\n5 + 40 = 45\n45 - 4 = 41\n41 - 4 = 37\n37 + 4 = 41\n41 - 8 = 33\n33 - 2 = 31\n31 + 8 =",
            "Response": " 39\n39 + 9 = 48",
            "Extract-Response": "\n48\n\n*/",
            "Expected Answer": 39,
            "Answer": 48.0,
            "Final Answer": 48.0
        },
        {
            "Index": 348,
            "GT": -28,
            "Query": "1 - 1 * 2 - 3 - 8 + 6 - 3 * 7 - 1 =   ",
            "Injected CoT": "1 * 2 = 2\n1 - 2 = -1\n-1 - 3 = -4\n-4 - 8 = -12\n-12 + 6 = -6\n3 * 7 = 21\n-6 - 21 = -26\n-26 - 1 =",
            "Response": " -27",
            "Extract-Response": " -27\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": -27,
            "Answer": -27.0,
            "Final Answer": -27.0
        },
        {
            "Index": 349,
            "GT": 387,
            "Query": "5 * 9 + 2 + 6 * 7 * 8 + 2 - 7 + 9 =   ",
            "Injected CoT": "5 * 10 = 45\n6 * 7 = 42\n42 * 8 = 336\n45 + 2 = 47\n336 + 47 = 383\n383 + 2 = 385\n385 - 7 = 378\n378 + 10 =",
            "Response": " 388",
            "Extract-Response": " 388\n</code>\n",
            "Expected Answer": 388,
            "Answer": 388.0,
            "Final Answer": 388.0
        },
        {
            "Index": 351,
            "GT": 242,
            "Query": "4 + 5 * 5 * 9 + 4 * 1 * 4 - 8 + 5 =   ",
            "Injected CoT": "5 * 5 = 25\n25 * 9 = 225\n4 * 1 = 4\n4 * 4 = 16\n225 + 16 = 241\n-8 + 241 = 232\n232 + 5 =",
            "Response": " 237",
            "Extract-Response": " 237\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, sum = 0, a[100];\n    gets(s);\n    n = strlen(s);\n    for (i = 0; i < n; i++)\n    {\n        if (s[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            a[j] = s[i] - '0';\n            j++;\n        }\n    }\n    for (i = 0; i < j; i++)\n    {\n        sum = sum + a[i];\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}",
            "Expected Answer": 237,
            "Answer": 237.0,
            "Final Answer": 237.0
        },
        {
            "Index": 352,
            "GT": 66,
            "Query": "5 * 8 + 9 - 4 - 2 * 3 + 5 * 4 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n40 + 9 = 49\n49 - 4 = 45\n2 * 3 = 6\n5 * 4 = 20\n45 - 6 = 39\n39 + 20 = 58\n58 + 7 =",
            "Response": " 65",
            "Extract-Response": " 65\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Expected Answer": 65,
            "Answer": 65.0,
            "Final Answer": 65.0
        },
        {
            "Index": 353,
            "GT": 53,
            "Query": "6 * 9 - 6 - 7 + 9 * 2 + 5 - 8 - 3 =   ",
            "Injected CoT": "6 * 9 = 54\n9 * 2 = 18\n54 - 6 = 48\n48 - 7 = 41\n41 + 18 = 59\n59 + 5 = 64\n64 - 8 = 56\n56 - 2 =",
            "Response": " 54\n54 - 3 = 51",
            "Extract-Response": " 51\n\n*/",
            "Expected Answer": 54,
            "Answer": 51.0,
            "Final Answer": 51.0
        },
        {
            "Index": 354,
            "GT": -20,
            "Query": "9 - 3 + 7 + 3 - 4 * 5 - 6 - 7 - 3 =   ",
            "Injected CoT": "4 * 5 = 20\n9 - 3 = 6\n7 + 3 = 10\n10 - 20 = -10\n-10 - 6 = -16\n-16 - 6 = -22\n-22 - 7 = -28\n-28 - 3 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 100.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluate_expression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(stack.pop() - stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()",
            "Expected Answer": -31,
            "Answer": -31.0,
            "Final Answer": -31.0
        },
        {
            "Index": 355,
            "GT": 57,
            "Query": "6 * 3 * 4 + 2 + 1 * 3 - 6 * 4 + 4 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 5 = 72\n1 * 3 = 3\n6 * 5 = 24\n72 + 2 = 74\n74 + 3 = 77\n77 - 24 = 53\n53 + 5 =",
            "Response": " 58\n58 + 4 = 62",
            "Extract-Response": " 62\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 58,
            "Answer": 62.0,
            "Final Answer": 62.0
        },
        {
            "Index": 356,
            "GT": 45,
            "Query": "3 - 3 + 4 + 3 + 9 * 3 + 1 + 4 + 6 =   ",
            "Injected CoT": "9 * 3 = 27\n3 - 3 = 0\n0 + 4 = 4\n4 + 3 = 7\n27 + 7 = 34\n34 + 1 = 35\n35 + 4 = 39\n39 + 5 =",
            "Response": " 44",
            "Extract-Response": " 44\n</code>\n",
            "Expected Answer": 44,
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 358,
            "GT": 237,
            "Query": "3 * 9 * 8 + 7 + 7 + 5 + 6 - 8 + 4 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 8 = 216\n216 + 7 = 223\n223 + 7 = 230\n230 + 5 = 235\n235 + 6 = 241\n241 - 8 = 232\n232 + 4 =",
            "Response": " 236",
            "Extract-Response": " 236\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 236,
            "Answer": 236.0,
            "Final Answer": 236.0
        },
        {
            "Index": 360,
            "GT": 1043,
            "Query": "9 + 9 * 7 + 8 * 5 * 3 * 8 + 2 + 9 =   ",
            "Injected CoT": "10 * 7 = 63\n8 * 5 = 40\n40 * 3 = 120\n120 * 8 = 960\n10 + 63 = 72\n960 + 72 = 1032\n1032 + 2 = 1034\n1034 + 10 =",
            "Response": " 1044\n1044 + 9 = 1053\n\n1053\n\n*/",
            "Extract-Response": " 1053",
            "Expected Answer": 1044,
            "Answer": 1053.0,
            "Final Answer": 1053.0
        },
        {
            "Index": 364,
            "GT": -60,
            "Query": "2 - 6 + 1 - 9 * 8 + 4 + 7 + 1 * 4 =   ",
            "Injected CoT": "9 * 8 = 72\n-6 + 1 = -5\n-5 - 72 = -77\n1 * 4 = 4\n4 + 7 = 11\n-77 + 11 = -66\n1 - 66 =",
            "Response": " -65",
            "Extract-Response": " -65.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -65,
            "Answer": -65.0,
            "Final Answer": -65.0
        },
        {
            "Index": 367,
            "GT": 122,
            "Query": "7 * 4 * 4 + 1 + 1 + 2 * 2 * 1 * 2 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 4 = 112\n2 * 2 = 4\n1 * 2 = 2\n4 * 2 = 8\n1 + 1 = 2\n2 + 8 = 10\n112 + 2 = 113\n113 + 10 =",
            "Response": " 123\n\n*/\n\npublic class Solution {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nThe idea is that the final sum of the digit is the remainder of the digit and 9.\n\nFor example:\n\nnum = 38\n\n38 % 9 = 2\n\nSo the final sum of the digit is 2.\n\n*/",
            "Expected Answer": 123,
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 369,
            "GT": 146,
            "Query": "6 * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 3 = 144\n144 - 5 = 139\n139 + 5 = 144\n144 - 8 = 137\n137 + 4 = 141\n141 - 2 = 139\n139 + 8 =",
            "Response": " 147",
            "Extract-Response": " 147\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Expected Answer": 147,
            "Answer": 147.0,
            "Final Answer": 147.0
        },
        {
            "Index": 370,
            "GT": 20,
            "Query": "4 * 3 + 6 * 1 + 2 + 7 + 9 - 8 - 8 =   ",
            "Injected CoT": "4 * 3 = 12\n6 * 1 = 6\n12 + 6 = 18\n18 + 2 = 20\n20 + 7 = 27\n27 + 9 = 36\n36 - 7 = 28\n28 - 7 =",
            "Response": " 21",
            "Extract-Response": " 21.\n\nNote:\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n*/\n\nclass Solution {\npublic:\n    int superDigit(string num, int k) {\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        sum *= k;\n        return superDigit(to_string(sum));\n    }\n    \n    int superDigit(string num) {\n        if (num.size() == 1) {\n            return num[0] - '0';\n        }\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        return superDigit(to_string(sum));\n    }\n};",
            "Expected Answer": 21,
            "Answer": 21.0,
            "Final Answer": 21.0
        },
        {
            "Index": 372,
            "GT": -88,
            "Query": "8 - 3 * 6 * 5 * 1 - 9 - 2 + 8 - 3 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 5 = 90\n90 * 1 = 90\n8 - 90 = -82\n-82 - 9 = -91\n-91 - 2 = -93\n-93 + 8 = -86\n-86 - 3 =",
            "Response": " -89\n\n-89",
            "Extract-Response": " -89\n\n*/",
            "Expected Answer": -89,
            "Answer": -89.0,
            "Final Answer": -89.0
        },
        {
            "Index": 374,
            "GT": 2,
            "Query": "8 + 1 - 6 + 1 * 3 - 6 - 4 + 4 + 2 =   ",
            "Injected CoT": "1 * 3 = 3\n8 + 1 = 9\n9 - 6 = 3\n3 + 3 = 6\n6 - 6 = 1\n1 - 4 = -4\n-4 + 4 = 1\n1 + 2 =",
            "Response": " 3\n3\n\n*/",
            "Extract-Response": "\n\n3",
            "Expected Answer": 3,
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 379,
            "GT": 38,
            "Query": "5 + 6 * 7 - 8 - 2 - 8 + 6 + 3 * 1 =   ",
            "Injected CoT": "6 * 7 = 42\n5 + 42 = 47\n47 - 8 = 39\n39 - 2 = 37\n37 - 8 = 29\n29 + 6 = 36\n3 * 1 = 3\n36 + 3 =",
            "Response": " 39",
            "Extract-Response": "\n\n39",
            "Expected Answer": 39,
            "Answer": 39.0,
            "Final Answer": 39.0
        },
        {
            "Index": 380,
            "GT": 127,
            "Query": "5 + 8 * 1 * 7 + 7 * 8 - 5 + 8 + 7 =   ",
            "Injected CoT": "8 * 1 = 8\n7 * 8 = 56\n5 + 8 = 13\n13 + 56 = 69\n69 - 5 = 65\n65 + 7 =",
            "Response": " 72\n\n72",
            "Extract-Response": " 72\n\n*/",
            "Expected Answer": 72,
            "Answer": 72.0,
            "Final Answer": 72.0
        },
        {
            "Index": 381,
            "GT": 89,
            "Query": "8 + 9 * 7 - 3 * 3 - 9 + 6 + 6 * 5 =   ",
            "Injected CoT": "9 * 7 = 63\n8 + 63 = 71\n3 * 3 = 9\n6 * 5 = 30\n6 + 30 = 37\n71 - 9 = 62\n62 - 9 = 53\n53 + 37 =",
            "Response": " 90",
            "Extract-Response": "\n\n90",
            "Expected Answer": 90,
            "Answer": 90.0,
            "Final Answer": 90.0
        },
        {
            "Index": 382,
            "GT": 15,
            "Query": "1 * 4 + 9 - 2 * 2 + 6 + 5 + 4 - 9 =   ",
            "Injected CoT": "1 * 4 = 4\n2 * 2 = 4\n4 + 9 = 13\n13 - 4 = 9\n6 + 5 = 11\n11 + 4 = 14\n14 - 9 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int current = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n    result += sign * current;\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 5,
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 383,
            "GT": 1251,
            "Query": "5 * 3 * 3 + 4 * 9 * 5 * 7 - 6 * 9 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 3 = 45\n4 * 9 = 36\n36 * 5 = 180\n180 * 7 = 1260\n6 * 9 = 55\n1260 - 55 =",
            "Response": " 1205\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n    \n    a = 5;\n    b = 3;\n    c = 3;\n    d = 4;\n    e = 9;\n    f = 5;\n    g = 7;\n    h = 6;\n    i = 9;\n    \n    result = a * b * c + d * e * f - h * i;\n    \n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
            "Extract-Response": "\n\n1205",
            "Expected Answer": 1205,
            "Answer": 1205.0,
            "Final Answer": 1205.0
        },
        {
            "Index": 385,
            "GT": -73,
            "Query": "1 * 9 + 2 + 7 + 1 + 4 - 6 * 4 * 4 =   ",
            "Injected CoT": "1 * 9 = 9\n5 * 4 = 24\n24 * 4 = 96\n9 + 2 = 11\n11 + 7 = 18\n18 + 1 = 19\n19 + 4 = 23\n23 - 96 = -73\n-73 - 5 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -78,
            "Answer": -78.0,
            "Final Answer": -78.0
        },
        {
            "Index": 386,
            "GT": 87,
            "Query": "6 * 7 + 6 * 8 - 2 - 6 + 4 * 1 + 1 =   ",
            "Injected CoT": "6 * 7 = 42\n6 * 8 = 48\n42 + 48 = 90\n4 * 1 = 4\n90 + 4 = 94\n2 - 6 = -4\n-4 + 1 = -3\n94 - 2 =",
            "Response": " 92\n92 - 3 = 89\n\n89",
            "Extract-Response": " 89\n\n*/",
            "Expected Answer": 92,
            "Answer": 89.0,
            "Final Answer": 89.0
        },
        {
            "Index": 389,
            "GT": 211,
            "Query": "4 * 7 * 1 * 9 - 3 + 7 + 9 - 9 * 6 =   ",
            "Injected CoT": "4 * 7 = 28\n28 * 1 = 28\n28 * 9 = 252\n9 * 6 = 55\n252 - 3 = 249\n249 + 7 = 256\n256 + 9 = 265\n265 - 55 =",
            "Response": " 210",
            "Extract-Response": " 210\n</code>\n",
            "Expected Answer": 210,
            "Answer": 210.0,
            "Final Answer": 210.0
        },
        {
            "Index": 390,
            "GT": 45,
            "Query": "3 + 9 - 8 - 2 * 3 + 9 - 4 + 7 * 6 =   ",
            "Injected CoT": "2 * 3 = 6\n3 + 9 = 12\n12 - 8 = 4\n4 - 6 = -2\n-2 + 9 = 7\n7 - 4 = 3\n7 * 6 = 41\n3 + 41 =",
            "Response": " 44",
            "Extract-Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    bool isFirst = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '+') {\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = 1;\n            }\n        } else if (s[i] == '-') {\n            if (isFirst) {\n                isFirst = false;\n                sign = -1;\n            } else {\n                result += sign * current;\n                current = 0;\n                sign = -1;\n            }\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 44,
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 391,
            "GT": 31,
            "Query": "8 * 5 - 1 - 4 * 5 + 3 + 7 + 6 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n4 * 5 = 20\n40 - 1 = 39\n39 - 20 = 19\n19 + 3 = 22\n22 + 7 = 29\n29 + 6 = 36\n36 - 4 =",
            "Response": " 32",
            "Extract-Response": " 32.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 32,
            "Answer": 32.0,
            "Final Answer": 32.0
        },
        {
            "Index": 392,
            "GT": 57,
            "Query": "2 * 3 * 7 + 3 - 2 + 1 + 7 + 9 - 3 =   ",
            "Injected CoT": "2 * 3 = 6\n6 * 7 = 42\n42 + 3 = 45\n45 - 2 = 43\n43 + 1 = 44\n44 + 7 = 51\n51 + 9 = 59\n59 - 3 =",
            "Response": " 56",
            "Extract-Response": " 56.\n\nNote:\nThe input will be between 1 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int addDigits(int num) {\n        if(num == 0) return 0;\n        if(num % 9 == 0) return 9;\n        return num % 9;\n    }\n};",
            "Expected Answer": 56,
            "Answer": 56.0,
            "Final Answer": 56.0
        },
        {
            "Index": 393,
            "GT": 26,
            "Query": "4 + 1 * 2 - 9 * 4 + 7 * 6 + 5 + 9 =   ",
            "Injected CoT": "1 * 2 = 2\n4 + 2 = 6\n8 * 4 = 36\n7 * 6 = 42\n6 - 36 = -30\n-30 + 42 = 12\n12 + 5 = 17\n17 + 8 =",
            "Response": " 25\n25 + 9 = 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    int digit;\n    while (n > 0) {\n        digit = n % 10;\n        sum += digit;\n        n /= 10;\n    }\n    cout << sum << endl;\n\n    return 0;\n}",
            "Expected Answer": 25,
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 395,
            "GT": -28,
            "Query": "4 - 8 + 3 + 3 - 1 + 8 - 6 * 7 + 5 =   ",
            "Injected CoT": "6 * 7 = 42\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 3 = 2\n2 - 1 = 1\n1 + 8 = 9\n9 - 42 = -34\n-34 + 5 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": -29,
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 397,
            "GT": 52,
            "Query": "4 * 3 + 1 * 1 * 3 - 9 + 4 + 7 * 6 =   ",
            "Injected CoT": "4 * 3 = 12\n1 * 1 = 1\n12 * 3 = 36\n7 * 6 = 42\n36 + 1 * 3 = 39\n39 - 9 = 30\n30 + 4 = 35\n35 + 42 =",
            "Response": " 77",
            "Extract-Response": " 77.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int addStrings(string num1, string num2) {\n        int i = num1.size() - 1;\n        int j = num2.size() - 1;\n        int carry = 0;\n        string res = \"\";\n        while(i >= 0 || j >= 0 || carry) {\n            int sum = 0;\n            if(i >= 0) {\n                sum += num1[i] - '0';\n                i--;\n            }\n            if(j >= 0) {\n                sum += num2[j] - '0';\n                j--;\n            }\n            sum += carry;\n            carry = sum / 10;\n            sum = sum % 10;\n            res = to_string(sum) + res;\n        }\n        return stoi(res);\n    }\n};",
            "Expected Answer": 77,
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 400,
            "GT": 39,
            "Query": "6 * 6 - 2 + 5 - 1 + 1 + 4 - 2 - 2 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 1 = 34\n34 + 5 = 39\n39 - 1 = 38\n38 + 1 = 39\n39 + 4 = 43\n43 - 1 = 41\n41 - 1 =",
            "Response": " 40\n40 - 2 = 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 40,
            "Answer": 38.0,
            "Final Answer": 38.0
        },
        {
            "Index": 401,
            "GT": 12,
            "Query": "4 - 4 + 3 - 1 + 5 * 1 - 8 + 9 + 4 =   ",
            "Injected CoT": "3 - 3 = 0\n0 + 3 = 3\n3 - 1 = 2\n5 * 1 = 5\n2 + 5 = 7\n7 - 8 = -1\n-1 + 9 = 8\n8 + 3 =",
            "Response": " 11\n11 + 4 = 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 11,
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 403,
            "GT": 53,
            "Query": "3 * 5 * 4 + 7 - 9 + 3 - 9 + 5 - 4 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 3 = 60\n60 + 7 = 67\n67 - 9 = 58\n58 + 3 = 61\n61 - 9 = 52\n52 + 5 = 57\n57 - 3 =",
            "Response": " 54",
            "Extract-Response": " 54\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 54,
            "Answer": 54.0,
            "Final Answer": 54.0
        },
        {
            "Index": 404,
            "GT": 100,
            "Query": "7 * 1 * 5 - 1 + 7 - 4 + 9 * 6 + 9 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 5 = 35\n35 - 1 = 34\n34 + 7 = 41\n41 - 4 = 37\n10 * 6 = 54\n37 + 54 = 91\n91 + 10 =",
            "Response": " 101",
            "Extract-Response": " 101.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Expected Answer": 101,
            "Answer": 101.0,
            "Final Answer": 101.0
        },
        {
            "Index": 405,
            "GT": -1874,
            "Query": "9 - 5 - 9 * 3 * 2 * 5 * 7 + 6 + 6 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 2 = 54\n54 * 5 = 270\n270 * 7 = 1890\n-5 - 1890 = -1895\n-1895 + 5 = -1889\n-1889 + 5 =",
            "Response": " -1884\n-1884 + 6 = -1878\n-1878 + 6 = -1872\n-1872 + 9 = -1863\n-1863 + 9 = -1854\n-1854 + 9 = -1845\n-1845 + 9 = -1836\n-1836 + 9 = -1827\n-1827 + 9 = -1818\n-1818 + 9 = -1809\n-1809 + 9 = -1800\n-1800 + 9 = -1791\n-1791 + 9 = -1782\n-1782 + 9 = -1773\n-1773 + 9 = -1764\n-1764 + 9 = -1755\n-1755 + 9 = -1746\n-1746 + 9 = -1737\n-1737 + 9 = -1728\n-1728 + 9 = -1719\n-1719 + 9 = -1710\n-1710 + 9 = -1701\n-1701 + 9 = -1692\n-1692 + 9 = -1683\n-1683 + 9 = -1674\n-1674 + 9 = -1665\n-1665 + 9 = -1656\n-1656 + 9 = -1647\n-1647 + 9 = -1638\n-1638 + 9 = -1629\n-1629 + 9 = -1620\n-1620 + 9 = -1611\n-1611 + 9 = -1602\n-1602 + 9 = -1593\n-1593 + 9 = -1584\n-1584 + 9 = -1575\n-1575 + 9 = -1566\n-1566 + 9 = -1557\n-1557 + 9 = -1548\n-1548 + 9 = -1539\n-1539 + 9 = -1530\n-1530 + 9 = -1521\n-1521 + 9 = -1512\n-1512 + 9 = -1503\n-1503 + 9 = -1494\n-1494 + 9 = -1485\n-1485 + 9 = -1476\n-1476 + 9 = -1467\n-1467 + 9 = -1458\n-1458 + 9 = -1449\n-1449 + 9 = -1440\n-1440 + 9 = -1431\n-1431 + 9 = -1422\n-1422 + 9 = -1413\n-1413 + 9 = -1404\n-1404 + 9 = -1395\n-1395 + 9 = -1386\n-1386 + 9 = -1377\n-1377 + 9 = -1368\n-1368 + 9 = -1359\n-1359 + 9 = -1350\n-1350 + 9 = -1341\n-1341 + 9 = -1332\n-1332 + 9 = -1323\n-1323 + 9 = -1314\n-1314 + 9 = -1305\n-1305 + 9 = -1296\n-1296 + 9 = -1287\n-1287 + 9 = -1278\n-1278 + 9 = -1269\n-1269 + 9 = -1260\n-1260 + 9 = -1251\n-1251 + 9 = -1242\n-1242 + 9 = -1233\n-1233 + 9 = -1224\n-1224 + 9 = -1215\n-1215 + 9 = -1206\n-1206 + 9 = -1197\n-1197 + 9 = -1188\n-1188 + 9 = -1179\n-1179 + 9 = -1170\n-1170 + 9 = -1161\n-1161 + 9 = -1152\n-1152 + 9 = -1143\n-1143 + 9 = -1134\n-1134 + 9 = -1125\n-1125 + 9 = -1116\n-1116 + 9 = -1107\n-1107 + 9 = -1098\n-1098 + 9 = -1089\n-1089 + 9 = -1080\n-1080 + 9 = -1071\n-1071 + 9 = -1062\n-1062 + 9 = -1053\n-1053 + 9 = -1044\n-1044 + 9 = -1035\n-1035 + 9 = -1026\n-1026 + 9 = -1017\n-1017 + 9 = -1008\n-1008 + 9 = -999\n-999 + 9 = -990\n-990 + 9 = -981\n-981 + 9 = -972\n-972 + 9 = -963\n-963 + 9 = -954\n-954 + 9 = -945\n-945 + 9 = -936\n-936 + 9 = -927\n-927 + 9 = -918\n-918 + 9 = -909\n-909 + 9 = -900\n-900 + 9 = -891\n-891 + 9 = -882\n-882 + 9 = -873\n-873 + 9 = -864\n-864 + 9 = -855\n-855 + 9 = -846\n-846 + 9 = -837\n-837 + 9 = -828\n-828 + 9 = -819\n-819 + 9 = -810\n-810 + 9 = -801\n-801 + 9 = -792\n-792 + 9 = -783\n-783 + 9 = -774\n-774 + 9 = -765\n-765 + 9 = -756\n-756 + 9 = -747\n-747 + 9 = -738\n-738 + 9 = -729\n-729 + 9 = -720\n-720 + 9 = -711\n-711 + 9 = -702\n-702 + 9 = -693\n-693 + 9 = -684\n-684 + 9 = -675\n-675 + 9 = -666\n-666 + 9 = -657\n-657 + 9 = -648\n-648 + 9 = -639\n-639 + 9 = -630\n-630 + 9 = -621\n-621 + 9 = -612\n-612 + 9 = -603\n-603 + 9 = -594\n-594 + 9 = -585\n-585 + 9 = -576\n-576 + 9 = -567\n-567 + 9 = -558\n-558 + 9 = -549\n-549 + 9 = -540\n-540 + 9 = -531\n-531 + 9 = -522\n-522 + 9 = -513\n-513 + 9 = -504\n-504 + 9 = -495\n-495 + 9 = -486\n-486 + 9 = -477\n-477 + 9 = -468\n-468 + 9 = -459\n-459 + 9 = -450\n-450 + 9 = -441\n-441 + 9 = -432\n-432 + 9 = -423\n-423 + 9 = -414\n-414 + 9 = -405\n-405 + 9 = -396\n-396 + 9 = -387\n-387 + 9 = -378\n-378 + 9 = -369\n-369 + 9 = -360\n-360 + 9 = -351\n-351 + 9 = -342\n-342 + 9 = -333\n-333 + 9 = -324\n-324 + 9 = -315\n-315 + 9 = -306\n-306 + 9 = -297\n-297 + 9 = -288\n-288 + 9 = -279\n-279 + 9 = -270\n-270 + 9 = -261\n-261 + 9 = -252\n-252 + 9 = -243\n-243 + 9 = -234\n-234 + 9 = -225\n-225 + 9 = -216\n-216 + 9 = -207\n-207 + 9 = -198\n-198 + 9 = -189\n-189 + 9 = -180\n-180 + 9 = -171\n-171 + 9 = -162\n-162 + 9 = -153\n-153 + 9 = -144\n-144 + 9 = -135\n-135 + 9 = -126\n-126 + 9 = -117\n-117 + 9 = -108\n-108 + 9 = -99\n-99 + 9 = -90\n-90 + 9 = -81\n-81 + 9 = -72\n-72 + 9 = -63\n-63 + 9 = -54\n-54 + 9 = -45\n-45 + 9 = -36\n-36 + 9 = -27\n-27 + 9 = -18\n-18 + 9 = -9\n-9 + 9 = 0",
            "Extract-Response": " 0",
            "Expected Answer": -1884,
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 406,
            "GT": 130,
            "Query": "6 * 5 * 4 + 6 + 6 + 8 - 7 - 8 + 5 =   ",
            "Injected CoT": "6 * 4 = 30\n30 * 4 = 120\n6 + 6 = 12\n12 + 8 = 20\n120 + 20 = 140\n140 - 7 = 133\n133 - 8 = 125\n125 + 4 =",
            "Response": " 129",
            "Extract-Response": " 129\n</code>\n",
            "Expected Answer": 129,
            "Answer": 129.0,
            "Final Answer": 129.0
        },
        {
            "Index": 407,
            "GT": 546,
            "Query": "9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 =   ",
            "Injected CoT": "9 * 9 = 81\n81 * 6 = 486\n4 * 9 = 36\n2 * 6 = 12\n486 + 8 = 494\n494 + 36 = 530\n530 + 4 = 535\n535 + 12 =",
            "Response": " 547\n\n547 is the smallest number that can be written as the sum of consecutive squares in more than one way.",
            "Extract-Response": "\n\n547 = 32 + 42 + 52 + 62 + 72 + 82 + 92 + 102 + 112 + 122 + 132 + 142 + 152 + 162 + 172 + 182 + 192 + 202 + 212 + 222 + 232 + 242 + 252 + 262 + 272 + 282 + 292 + 302 + 312 + 322 + 332 + 342 + 352 + 362 + 372 + 382 + 392 + 402 + 412 + 422 + 432 + 442 + 452 + 462 + 472 + 482 + 492 + 502 + 512 + 522 + 532 + 542 + 552 + 562 + 572 + 582 + 592 + 602 + 612 + 622 + 632 + 642 + 652 + 662 + 672 + 682 + 692 + 702 + 712 + 722 + 732 + 742 + 752 + 762 + 772 + 782 + 792 + 802 + 812 + 822 + 832 + 842 + 852 + 862 + 872 + 882 + 892 + 902 + 912 + 922 + 932 + 942 + 952 + 962 + 972 + 982 + 992 + 1002 + 1012 + 1022 + 1032 + 1042 + 1052 + 1062 + 1072 + 1082 + 1092 + 1102 + 1112 + 1122 + 1132 + 1142 + 1152 + 1162 + 1172 + 1182 + 1192 + 1202 + 1212 + 1222 + 1232 + 1242 + 1252 + 1262 + 1272 + 1282 + 1292 + 1302 + 1312 + 1322 + 1332 + 1342 + 1352 + 1362 + 1372 + 1382 + 1392 + 1402 + 1412 + 1422 + 1432 + 1442 + 1452 + 1462 + 1472 + 1482 + 1492 + 1502 + 1512 + 1522 + 1532 + 1542 + 1552 + 1562 + 1572 + 1582 + 1592 + 1602 + 1612 + 1622 + 1632 + 1642 + 1652 + 1662 + 1672 + 1682 + 1692 + 1702 + 1712 + 1722 + 1732 + 1742 + 1752 + 1762 + 1772 + 1782 + 1792 + 1802 + 1812 + 1822 + 1832 + 1842 + 1852 + 1862 + 1872 + 1882 + 1892 + 1902 + 1912 + 1922 + 1932 + 1942 + 1952 + 1962 + 1972 + 1982 + 1992 + 2002 + 2012 + 2022 + 2032 + 2042 + 2052 + 2062 + 2072 + 2082 + 2092 + 2102 + 2112 + 2122 + 2132 + 2142 + 2152 + 2162 + 2172 + 2182 + 2192 + 2202 + 2212 + 2222 + 2232 + 2242 + 2252 + 2262 + 2272 + 2282 + 2292 + 2302 + 2312 + 2322 + 2332 + 2342 + 2352 + 2362 + 2372 + 2382 + 2392 + 2402 + 2412 + 2422 + 2432 + 2442 + 2452 + 2462 + 2472 + 2482 + 2492 + 2502 + 2512 + 2522 + 2532 + 2542 + 2552 + 2562 + 2572 + 2582 + 2592 + 2602 + 2612 + 2622 + 2632 + 2642 + 2652 + 2662 + 2672 + 2682 + 2692 + 2702 + 2712 + 2722 + 2732 + 2742 + 2752 + 2762 + 2772 + 2782 + 2792 + 2802 + 2812 + 2822 + 2832 + 2842 + 2852 + 2862 + 2872 + 2882 + 2892 + 2902 + 2912 + 2922 + 2932 + 2942 + 2952 + 2962 + 2972 + 2982 + 2992 + 3002 + 3012 + 3022 + 3032 + 3042 + 3052 + 3062 + 3072 + 3082 + 3092 + 3102 + 3112 + 3122 + 3132 + 3142 + 3152 + 3162 + 3172 + 3182 + 3192 + 3202 + 3212 + 3222 + 3232 + 3242 + 3252 + 3262 + 3272 + 3282 + 3292 + 3302 + 3312 + 3322 + 3332 + 3342 + 3352 + 3362 + 3372 + 3382 + 3392 + 3402 + 3412 + 3422 + 3432 + 3442 + 3452 + 3462 + 3472 + 3482 + 3492 + 3502 + 3512 + 3522 + 3532 + 3542 + 3552 + 3562 + 3572 + 3582 + 3592 + 3602 + 3612 + 3622 + 3632 + 3642 + 3652 + 3662 + 3672 + 3682 + 3692 + 3702 + 3712 + 3722 + 3732 + 3742 + 3752 + 3762 + 3772 + 3782 + 3792 + 3802 + 3812 + 3822 + 3832 + 3842 + 3852 + 3862 + 3872 + 3882 + 3892 + 3902 + 3912 + 3922 + 3932 + 3942 + 3952 + 3962 + 3972 + 3982 + 3992 + 4002 + 4012 + 4022 + 4032 + 4042 + 4052 + 4062 + 4072 + 4082 + 4092 + 4102 + 4112 + 4122 + 4132 + 4142 + 4152 + 4162 + 4172 + 4182 + 4192 + 4202 + 4212 + 4222 + 4232 + 4242 + 4252 + 4262 + 4272 + 4282 + 4292 + 4302 + 4312 + 4322 + 4332 + 4342 + 4352 + 4362 + 4372 + 4382 + 4392 + 4402 + 4412 + 4422 + 4432 + 4442 + 4452 + 4462 + 4472 + 4482 + 4492 + 4502 + 4512 + 4522 + 4532 + 4542 + 4552 + 4562 + 4572 + 4582 + 4592 + 4602 + 4612 + 4622 + 4632 + 4642 + 4652 + 4662 + 4672 + 4682 + 4692 + 4702 + 4712 + 4722 + 4732 + 4742 + 4752 + 4762 + 4772 + 4782 + 4792 + 4802 + 4812 + 4822 + 4832 + 4842 + 4852 + 4862 + 4872 + 4882 + 4892 + 4902 + 4912 + 4922 + 4932 + 4942 + 4952 + 4962 + 4972 + 4982 + 4992 + 5002 + 5012 + 5022 + 5032 + 5042 + 5052 + 5062 + 5072 + 5082 + 5092 + 5102 + 5112 + 5122 + 5132 + 5142 + 5152 + 5162 + 5172 + 5182 + 5192 + 5202 + 5212 + 5222 + 5232 + 5242 + 5252 + 5262 + 5272 + 5282 + 5292 + 5302 + 5312 + 5322 + 5332 + 5342 + 5352 + 5362 + 5372 + 5382 + 5392 + 5402 + 5412 + 5422 + 5432 + 5442 + 5452 + 5462 + 5472 + 5482 + 5492 + 5502 + 5512 + 5522 + 5532 + 5542 + 5552 + 5562 + 5572 + 5582 + 5592 + 5602 + 5612 + 5622 + 5632 + 5642 + 5652 + 5662 + 5672 + 5682 + 5692 + 5702 + 5712 + 5722 + 5732 + 5742 + 5752 + 5762 + 5772 + 5782 + 5792 + 5802 + 5812 + 5822 + 5832 + 5842 + 5852 + 5862 + 5872 + 5882 + 5892 + 5902 + 5912 + 5922 + 5932 + 5942 + 5952 + 5962 + 5972 + 5982 + 5992 + 6002 + 6012 + 6022 + 6032 + 6042 + 6052 + 6062 + 6072 + 6082 + 6092 + 6102 + 6112 + 6122 + 6132 + 6142 + 6152 + 6162 + 6172 + 6182 + 6192 + 6202 + 6212 + 6222 + 6232 + 6242 + 6252 + 6262 + 6272 + 6282 + 6292 + 6302 + 6312 + 6322 + 6332 + 6342 + 6352 + 6362 + 6372 + 6382 + 6392 + 6402 + 6412 + 6422 + 6432 + 6442 + 6452 + 6462 + 6472 + 6482 + 6492 + 6502 + 6512 + 6522 + 6532 + 6542 + 6552 + 6562 + 6572 + 6582 + 6592 + 6602 + 6612 + 6622 + 6632 + 6642 + 6652 + 6662 + 6672 + 6682 + 6692 + 6702 + 6712 + 6722 + 6732 + 6742 + 6752 + 6762 + 6772 + 6782 + 6792 + 6802 + 6812 + 6822 + 68",
            "Expected Answer": 547,
            "Answer": 547.0,
            "Final Answer": 547.0
        },
        {
            "Index": 408,
            "GT": 56,
            "Query": "6 * 9 * 1 - 5 + 2 * 3 - 5 - 2 + 8 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 1 = 54\n54 - 5 = 49\n2 * 3 = 6\n49 + 6 = 55\n55 - 5 = 50\n50 - 2 = 47\n47 + 8 =",
            "Response": " 55",
            "Extract-Response": " 55\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Expected Answer": 55,
            "Answer": 55.0,
            "Final Answer": 55.0
        }
    ]
}