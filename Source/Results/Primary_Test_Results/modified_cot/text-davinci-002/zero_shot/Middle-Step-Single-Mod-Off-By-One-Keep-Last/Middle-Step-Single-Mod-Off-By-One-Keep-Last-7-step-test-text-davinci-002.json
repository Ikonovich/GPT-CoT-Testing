{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Middle-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 7,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Middle-Step-Single-Mod-Off-By-One-Keep-Last\\Middle-Step-Single-Mod-Off-By-One-Keep-Last-7-step-test-text-davinci-002.json",
    "Trials": [
        {
            "Index": 0,
            "GT": -19,
            "Query": "2 - 1 * 6 * 4 + 1 * 4 + 4 - 5 =   ",
            "Injected CoT": "1 * 6 = 6\n6 * 5 = 24\n2 - 24 = -22\n1 * 5 = 5\n-22 + 5 = -18\n5 + 5 = 8\n-18 - 5 =",
            "Response": " -23\n8 - 5 = 3\n3 * 4 = 12\n-23 + 12 = -11\n1 * 4 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4\n-11 + 4 = -7\n4 + 4 = 8\n-7 - 4 = -11\n8 - 4 = 4\n4 * 1 = 4",
            "Extract-Response": " -7\n\n*/"
        },
        {
            "Index": 3,
            "GT": 9,
            "Query": "2 * 6 + 4 + 8 - 4 + 2 - 7 - 6 =   ",
            "Injected CoT": "2 * 6 = 12\n12 + 4 = 16\n16 + 8 = 25\n25 - 4 = 20\n20 + 2 = 22\n22 - 7 = 15\n15 - 6 =",
            "Response": " 9",
            "Extract-Response": " 9.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 4,
            "GT": 70,
            "Query": "4 * 6 * 3 + 2 - 2 + 1 - 6 + 3 =   ",
            "Injected CoT": "4 * 6 = 24\n24 * 3 = 72\n72 + 2 = 75\n75 - 2 = 72\n72 + 1 = 73\n73 - 6 = 67\n67 + 3 =",
            "Response": " 70",
            "Extract-Response": " 70\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n\nusing namespace std;\n#define FOR(i,a,b) for(int i=a;i<b;i++)\n#define REV(i,a,b) for(int i=a;i>=b;i--)\n#define mp make_pair\n#define pb push_back\n\nint main() {\n    int n;\n    cin >> n;\n    int a[n];\n    FOR(i,0,n) cin >> a[i];\n    int ans = 0;\n    FOR(i,0,n) {\n        FOR(j,i+1,n) {\n            FOR(k,j+1,n) {\n                ans += a[i] * a[j] * a[k];\n            }\n        }\n    }\n    cout << ans;\n    return 0;\n}"
        },
        {
            "Index": 5,
            "GT": 228,
            "Query": "2 + 3 * 8 + 9 + 6 * 4 * 8 + 1 =   ",
            "Injected CoT": "3 * 7 = 24\n2 + 24 = 26\n4 * 7 = 32\n32 * 6 = 192\n192 * 7 = 1536\n9 + 1 = 10\n26 + 10 = 36\n36 + 1536 =",
            "Response": " 1572\n\n1572\n\n*/",
            "Extract-Response": " 1572"
        },
        {
            "Index": 6,
            "GT": -81,
            "Query": "9 - 6 - 4 - 5 - 3 - 8 * 1 * 9 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 6 = 3\n3 - 4 = -2\n-2 - 5 = -6\n-6 - 3 = -9\n-9 - 8 = -17\n-17 * 9 =",
            "Response": " -153\n\n153\n\n*/",
            "Extract-Response": " 153"
        },
        {
            "Index": 7,
            "GT": 1,
            "Query": "4 - 9 + 2 * 3 + 4 - 5 - 8 + 9 =   ",
            "Injected CoT": "2 * 3 = 6\n5 - 9 = -5\n-5 + 6 = 1\n1 + 5 = 5\n5 - 5 = 0\n0 - 8 = -8\n-8 + 9 =",
            "Response": " 1\n1 + 4 = 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    bool isPositive = true;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += curr;\n            curr = 0;\n            isPositive = s[i] == '+';\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += curr;\n    cout << (isPositive ? result : -result) << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 8,
            "GT": -4,
            "Query": "8 * 1 + 6 - 3 - 2 + 1 - 9 - 5 =   ",
            "Injected CoT": "8 * 1 = 8\n8 + 6 = 14\n14 - 3 = 11\n11 - 1 = 9\n9 + 1 = 10\n10 - 9 = 1\n1 - 5 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};"
        },
        {
            "Index": 10,
            "GT": -63,
            "Query": "2 - 8 - 5 - 5 + 3 + 4 - 6 * 9 =   ",
            "Injected CoT": "-6 * 9 = -54\n2 - 8 = -6\n-6 - 4 = -11\n-11 - 4 = -16\n-16 + 3 = -13\n-13 + 4 = -9\n-9 + (-54) =",
            "Response": " -63",
            "Extract-Response": " -63.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 20.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a+b+c, a*(b+c), (a+b)*c, a*b*c)"
        },
        {
            "Index": 11,
            "GT": -11,
            "Query": "5 * 1 - 4 - 5 - 6 - 1 + 3 - 3 =   ",
            "Injected CoT": "5 * 1 = 5\n5 - 4 = 1\n1 - 5 = -4\n-4 - 5 = -10\n-10 - 1 = -11\n-11 + 3 = -8\n-8 - 3 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 12,
            "GT": -138,
            "Query": "9 * 2 - 7 - 1 + 2 - 5 * 6 * 5 =   ",
            "Injected CoT": "9 * 3 = 18\n18 - 7 = 11\n11 - 1 = 10\n10 + 3 = 12\n5 * 6 = 30\n30 * 5 = 150\n12 - 150 =",
            "Response": " -138",
            "Extract-Response": " -138.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 13,
            "GT": 176,
            "Query": "4 * 3 + 5 * 5 * 6 + 4 + 5 * 2 =   ",
            "Injected CoT": "4 * 3 = 12\n6 * 6 = 25\n25 * 6 = 150\n6 * 2 = 10\n12 + 150 = 162\n162 + 4 = 166\n166 + 10 =",
            "Response": " 176\n\n176\n\n*/",
            "Extract-Response": " 176"
        },
        {
            "Index": 14,
            "GT": -33,
            "Query": "2 - 1 + 5 - 8 - 9 - 6 * 4 + 2 =   ",
            "Injected CoT": "6 * 4 = 24\n-1 + 5 = 4\n2 - 4 = -2\n-2 - 10 = -11\n-11 - 24 = -35\n-35 + 2 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 16,
            "GT": 21,
            "Query": "7 * 2 + 8 - 5 + 2 + 8 - 6 * 1 =   ",
            "Injected CoT": "7 * 3 = 14\n14 + 8 = 22\n22 - 5 = 17\n17 + 3 = 19\n19 + 8 = 27\n6 * 1 = 6\n27 - 6 =",
            "Response": " 21\n\n21",
            "Extract-Response": "\n\n21"
        },
        {
            "Index": 17,
            "GT": 36,
            "Query": "5 * 7 + 4 - 2 + 3 + 2 - 5 - 1 =   ",
            "Injected CoT": "5 * 7 = 35\n35 + 4 = 39\n39 - 2 = 36\n36 + 3 = 40\n40 + 2 = 42\n42 - 5 = 36\n36 - 1 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, sum;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        sum = 0;\n        for(j = 1; j <= i; j++)\n        {\n            for(k = 1; k <= j; k++)\n            {\n                sum += k;\n            }\n        }\n        printf(\"%d \", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 21,
            "GT": 33,
            "Query": "9 - 4 + 7 - 6 + 2 * 9 * 1 + 9 =   ",
            "Injected CoT": "2 * 9 = 18\n9 - 4 = 4\n7 - 6 = 1\n4 + 1 = 6\n6 + 18 = 24\n24 + 1 = 25\n25 + 9 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define foreach(it,c) for(__typeof(c.begin()) it=c.begin(); it!=c.end(); ++it)\n\nclass InfixCalculator {\npublic:\n    int evaluate(string expression) {\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        int mul = 1;\n        for(int i=0; i<expression.size(); ++i) {\n            if(expression[i]==' ') continue;\n            if(expression[i]=='+') {\n                ans += sign*cur;\n                sign = 1;\n                cur = 0;\n            } else if(expression[i]=='-') {\n                ans += sign*cur;\n                sign = -1;\n                cur = 0;\n            } else if(expression[i]=='*') {\n                mul *= cur;\n                cur = 0;\n            } else {\n                cur *= 10;\n                cur += expression[i]-'0';\n            }\n        }\n        ans += sign*cur*mul;\n        return ans;\n    }\n};\n\nint main() {\n    InfixCalculator ic;\n    cout << ic.evaluate(\"3 + 4 * 2 - 1\") << endl;\n    cout << ic.evaluate(\"9 - 4 + 7 - 6 + 2 * 9 * 1 + 9\") << endl;\n    return 0;\n}"
        },
        {
            "Index": 22,
            "GT": 14,
            "Query": "2 + 5 + 2 + 6 - 1 + 6 - 8 + 2 =   ",
            "Injected CoT": "2 + 5 = 7\n7 + 2 = 9\n9 + 6 = 15\n15 - 2 = 14\n14 + 6 = 20\n20 - 8 = 12\n12 + 2 =",
            "Response": " 14",
            "Extract-Response": " 14.\n\nNote:\nThe length of the given array won't exceed 10000.\nAll the integers in the given array are in the range of [-1e7, 1e7].\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 23,
            "GT": 13,
            "Query": "4 * 3 - 3 * 3 + 6 - 4 + 2 * 4 =   ",
            "Injected CoT": "5 * 3 = 12\n3 * 3 = 9\n12 - 9 = 3\n2 * 5 = 8\n6 - 5 = 2\n3 + 8 = 11\n11 + 2 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 24,
            "GT": 14,
            "Query": "5 * 1 + 4 * 9 - 7 - 2 * 5 * 2 =   ",
            "Injected CoT": "5 * 1 = 5\n4 * 9 = 36\n1 * 5 = 10\n10 * 1 = 20\n5 + 36 = 41\n41 - 7 = 34\n34 - 20 =",
            "Response": " 14\n14 - 10 = 4",
            "Extract-Response": " 4\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ++result;\n        } else {\n            --result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 25,
            "GT": 30,
            "Query": "2 * 6 + 9 + 3 * 5 - 5 - 2 + 1 =   ",
            "Injected CoT": "2 * 6 = 12\n3 * 4 = 15\n12 + 9 = 21\n15 - 4 = 10\n10 - 2 = 8\n8 + 1 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 26,
            "GT": 58,
            "Query": "4 * 9 + 3 - 9 + 7 * 5 - 8 + 1 =   ",
            "Injected CoT": "4 * 9 = 36\n36 + 3 = 38\n7 * 5 = 35\n38 - 9 = 30\n30 + 35 = 65\n65 - 8 = 57\n57 + 1 =",
            "Response": " 58",
            "Extract-Response": " 58\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 27,
            "GT": 72,
            "Query": "5 + 5 * 2 * 9 - 1 - 5 * 4 - 2 =   ",
            "Injected CoT": "4 * 2 = 10\n10 * 9 = 90\n4 * 4 = 20\n4 + 90 = 95\n95 - 1 = 94\n94 - 20 = 74\n74 - 2 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n    int currentOperator = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n            currentOperator = s[i];\n        } else if (s[i] == '*') {\n            currentOperator = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n            if (currentOperator == '*') {\n                currentNumber *= sign;\n                currentOperator = 0;\n            }\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 28,
            "GT": -24,
            "Query": "9 - 7 - 5 * 6 - 6 + 8 - 6 + 8 =   ",
            "Injected CoT": "-5 * 6 = -30\n10 - 7 - 30 - 6 + 8 - 6 + 8 =",
            "Response": " \n10 - 7 - 30 - 6 + 8 - 6 + 8 = \n10 - 7 - 30 = \n3",
            "Extract-Response": "\n3\n\n*/"
        },
        {
            "Index": 30,
            "GT": -5,
            "Query": "7 - 1 * 5 - 4 - 4 - 6 * 1 + 7 =   ",
            "Injected CoT": "1 * 5 = 5\n6 * 1 = 6\n7 - 5 = 2\n2 - 3 = -2\n-2 - 3 = -6\n-6 + 7 =",
            "Response": " 1\n\n1 + 1 = 2",
            "Extract-Response": " 2\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 31,
            "GT": 124,
            "Query": "5 * 7 * 4 - 8 + 6 + 4 - 6 * 3 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 4 = 141\n6 * 3 = 18\n141 - 8 = 132\n132 + 4 = 136\n136 - 18 =",
            "Response": " 118",
            "Extract-Response": "\n\n118"
        },
        {
            "Index": 32,
            "GT": 73,
            "Query": "4 * 9 - 1 * 4 + 7 - 8 + 7 * 6 =   ",
            "Injected CoT": "3 * 9 = 36\n1 * 3 = 3\n7 * 6 = 42\n36 - 3 = 32\n32 + 7 = 39\n39 - 8 = 31\n31 + 42 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 33,
            "GT": 29,
            "Query": "4 * 6 + 9 - 4 - 1 - 5 + 2 + 4 =   ",
            "Injected CoT": "4 * 6 = 24\n24 + 9 = 33\n33 - 4 = 29\n29 - 2 = 28\n28 - 5 = 23\n23 + 2 = 25\n25 + 4 =",
            "Response": " 29",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 36,
            "GT": -2,
            "Query": "1 - 3 + 8 - 2 * 4 + 7 - 8 + 1 =   ",
            "Injected CoT": "-2 * 4 = -8\n1 - 4 + 8 - (-8) + 7 - 8 + 1 =",
            "Response": " \n1 - 4 + 8 + 8 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 - 8 + 1 = \n1 - 4 + 16 + 7 -",
            "Extract-Response": "\n1 - 4 + 16 + 7 - 8 + 1 ="
        },
        {
            "Index": 37,
            "GT": 65,
            "Query": "4 * 7 + 7 * 6 + 2 * 4 - 6 - 7 =   ",
            "Injected CoT": "4 * 7 = 28\n7 * 6 = 43\n2 * 4 = 8\n28 + 43 = 70\n70 + 8 = 78\n78 - 6 = 72\n72 - 7 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n        int sum = 0;\n        int f0 = 0;\n        for (int i = 0; i < A.size(); i++) {\n            sum += A[i];\n            f0 += i * A[i];\n        }\n        int max = f0;\n        for (int i = 1; i < A.size(); i++) {\n            f0 = f0 + sum - A.size() * A[A.size() - i];\n            if (f0 > max) {\n                max = f0;\n            }\n        }\n        return max;\n    }\n};"
        },
        {
            "Index": 38,
            "GT": 18,
            "Query": "2 + 6 + 4 * 6 + 3 - 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 6 = 24\n2 + 6 = 8\n8 + 24 = 32\n32 + 4 = 35\n35 - 1 = 34\n34 - 8 = 26\n26 - 8 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 39,
            "GT": 262,
            "Query": "7 * 6 * 6 + 5 * 3 + 8 - 7 - 6 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 6 = 251\n5 * 3 = 15\n251 + 15 = 267\n267 + 8 = 275\n275 - 7 = 268\n268 - 6 =",
            "Response": " 262",
            "Extract-Response": " 262\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int operation = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            operation = 1;\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '/') {\n            operation = 2;\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    if (operation == 1) {\n        result *= sign;\n    } else if (operation == 2) {\n        result /= sign;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 40,
            "GT": 12,
            "Query": "5 * 5 - 5 - 8 - 1 * 5 + 5 * 1 =   ",
            "Injected CoT": "6 * 6 = 25\n25 - 6 = 20\n20 - 8 = 12\n1 * 6 = 6\n6 + 12 = 17\n6 * 1 = 6\n17 + 6 =",
            "Response": " 23\n\n23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 42,
            "GT": 28,
            "Query": "8 - 2 * 2 + 3 * 9 + 2 * 3 - 9 =   ",
            "Injected CoT": "2 * 2 = 4\n3 * 9 = 27\n2 * 3 = 6\n7 - 4 = 4\n4 + 27 = 31\n31 + 6 = 37\n37 - 9 =",
            "Response": " 28",
            "Extract-Response": " 28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 44,
            "GT": 1030,
            "Query": "9 * 5 * 1 + 7 * 5 * 7 * 4 + 5 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 1 = 45\n8 * 5 = 35\n35 * 8 = 245\n245 * 4 = 980\n980 + 45 =",
            "Response": " 1025\n1025 + 35 = 1060\n1060 + 245 = 1305\n1305 + 45 = 1350\n1350 + 35 = 1385\n1385 + 245 = 1630\n1630 + 45 = 1675\n1675 + 35 = 1710\n1710 + 245 = 1955\n1955 + 45 = 2000\n2000 + 35 = 2035\n2035 + 245 = 2280\n2280 + 45 = 2325\n2325 + 35 = 2360\n2360 + 245 = 2605\n2605 + 45 = 2650\n2650 + 35 = 2685\n2685 + 245 = 2930\n2930 + 45 = 2975\n2975 + 35 = 3010\n3010 + 245 = 3255\n3255 + 45 = 3300\n3300 + 35 = 3335\n3335 + 245 = 3580\n3580 + 45 = 3625\n3625 + 35 = 3660\n3660 + 245 = 3905\n3905 + 45 = 3950\n3950 + 35 = 3985\n3985 + 245 = 4230\n4230 + 45 = 4275\n4275 + 35 = 4310\n4310 + 245 = 4555\n4555 + 45 = 4600\n4600 + 35 = 4635\n4635 + 245 = 4880\n4880 + 45 = 4925\n4925 + 35 = 4960\n4960 + 245 = 5205\n5205 + 45 = 5250\n5250 + 35 = 5285\n5285 + 245 = 5530\n5530 + 45 = 5575\n5575 + 35 = 5610\n5610 + 245 = 5855\n5855 + 45 = 5900\n5900 + 35 = 5935\n5935 + 245 = 6180\n6180 + 45 = 6225\n6225 + 35 = 6260\n6260 + 245 = 6505\n6505 + 45 = 6550\n6550 + 35 = 6585\n6585 + 245 = 6830\n6830 + 45 = 6875\n6875 + 35 = 6910\n6910 + 245 = 7155\n7155 + 45 = 7200\n7200 + 35 = 7235\n7235 + 245 = 7480\n7480 + 45 = 7525\n7525 + 35 = 7560\n7560 + 245 = 7805\n7805 + 45 = 7850\n7850 + 35 = 7885\n7885 + 245 = 8130\n8130 + 45 = 8175\n8175 + 35 = 8210\n8210 + 245 = 8455\n8455 + 45 = 8500\n8500 + 35 = 8535\n8535 + 245 = 8780\n8780 + 45 = 8825\n8825 + 35 = 8860\n8860 + 245 = 9105\n9105 + 45 = 9150\n9150 + 35 = 9185\n9185 + 245 = 9430\n9430 + 45 = 9475\n9475 + 35 = 9510\n9510 + 245 = 9755\n9755 + 45 = 9800\n9800 + 35 = 9835\n9835 + 245 = 10080\n10080 + 45 = 10125\n10125 + 35 = 10160\n10160 + 245 = 10405\n10405 + 45 = 10450\n10450 + 35 = 10485\n10485 + 245 = 10730\n10730 + 45 = 10775\n10775 + 35 = 10810\n10810 + 245 = 11055\n11055 + 45 = 11100\n11100 + 35 = 11135\n11135 + 245 = 11380\n11380 + 45 = 11425\n11425 + 35 = 11460\n11460 + 245 = 11705\n11705 + 45 = 11750\n11750 + 35 = 11785\n11785 + 245 = 12030\n12030 + 45 = 12075\n12075 + 35 = 12110\n12110 + 245 = 12355\n12355 + 45 = 12400\n12400 + 35 = 12435\n12435 + 245 = 12680\n12680 + 45 = 12725\n12725 + 35 = 12760\n12760 + 245 = 13005\n13005 + 45 = 13050\n13050 + 35 = 13085\n13085 + 245 = 13330\n13330 + 45 = 13375\n13375 + 35 = 13410\n13410 + 245 = 13655\n13655 + 45 = 13700\n13700 + 35 = 13735\n13735 + 245 = 13980\n13980 + 45 = 14025\n14025 + 35 = 14060\n14060 + 245 = 14305\n14305 + 45 = 14350\n14350 + 35 = 14385\n14385 + 245 = 14630\n14630 + 45 = 14675\n14675 + 35 = 14710\n14710 + 245 = 14955\n14955 + 45 = 15000\n15000 + 35 = 15035\n15035 + 245 = 15280\n15280 + 45 = 15325\n15325 + 35 = 15360\n15360 + 245 = 15605\n15605 + 45 = 15650\n15650 + 35 = 15685\n15685 + 245 = 15930\n15930 + 45 = 15975\n15975 + 35 = 16010\n16010 + 245 = 16255\n16255 + 45 = 16300\n16300 + 35 = 16335\n16335 + 245 = 16580\n16580 + 45 = 16625\n16625 + 35 = 16660\n16660 + 245 = 16905\n16905 + 45 = 16950\n16950 + 35 = 16985\n16985 + 245 = 17230\n17230 + 45 = 17275\n17275 + 35 = 17310\n17310 + 245 = 17555\n17555 + 45 = 17600\n17600 + 35 = 17635\n17635 + 245 = 17880\n17880 + 45 = 17925\n17925 + 35 = 17960\n17960 + 245 = 18205\n18205 + 45 = 18250\n18250 + 35 = 18285\n18285 + 245 = 18530\n18530 + 45 = 18575\n18575 + 35 = 18610\n18610 + 245 = 18855\n18855 + 45 = 18900\n18900 + 35 = 18935\n18935 + 245 = 19180\n19180 + 45 = 19225\n19225 + 35 = 19260\n19260 + 245 = 19505\n19505 + 45 = 19550\n19550 + 35 = 19585\n19585 + 245 = 19830\n19830 + 45 = 19875\n19875 + 35 = 19910\n19910 + 245 = 20155\n20155 + 45 = 20200\n20200 + 35 = 20235\n20235 + 245 = 20480\n20480 + 45 = 20525\n20525 + 35 = 20560\n20560 + 245 = 20805\n20805 + 45 = 20850\n20850 + 35 = 20885\n20885 + 245 = 21130\n21130 + 45 = 21175\n21175 + 35 = 21210\n21210 + 245 = 21455\n21455 + 45 = 21500\n21500 + 35 = 21535\n21535 + 245 = 21780\n21780 + 45 = 21825\n21825 + 35 = 21860\n21860 + 245 = 22105\n22105 + 45 = 22150\n22150 + 35 = 22185\n22185 + 245 = 22430\n22430 + 45 = 22475\n22475 + 35 = 22510\n22510 + 245 = 22755\n22755 + 45 = 22800\n22800 + 35 = 22835\n22835 + 245 = 23080\n23080 + 45 = 23125\n23125 + 35 = 23160\n23160 + 245 = 23405\n23405 + 45 = 23450\n23450 + 35 = 23485\n23485 + 245 = 23730\n23730 + 45 = 23775\n23775 + 35 = 23810\n23810 + 245 = 24055\n24055 + 45 = 24100\n24100 + 35 = 24135\n24135 + 245 = 24380\n24380 + 45 = 24425\n24425 + 35 = 24460\n24460 + 245 = 24705\n24705 + 45 = 24750\n24750 + 35 = 24785\n24785 + 245 = 25030\n25030 + 45 = 25075\n25075 + 35 = 25110\n25110 + 245 = 25355\n25355 + 45 = 25400\n25400 + 35 = 25435\n25435 + 245 = 25680\n25680 + 45 = 25725\n25725 + 35 = 25760\n25760 + 245 = 26005\n26005 + 45 = 26050\n26050 + 35 = 26085\n26085 + 245 = 26330\n26330 + 45 = 26375\n26375 + 35 = 26410\n26410 + 245 = 26655\n26655 + 45 = 26700\n26700 + 35 = 26735\n26735 + 245 = 26980\n26980 + 45 = 27025\n27025 + 35 = 27060\n27060 + 245 = 27305\n27305 + 45 = 27350\n27350 + 35 = 27385\n27385 + 245 = 27630\n27630 + 45 = 27675\n27675 + 35 = 27710\n27710 + 245 = 27955\n27955 + 45 = 28000\n28000 + 35 = 28035\n",
            "Extract-Response": "\n\n28035"
        },
        {
            "Index": 45,
            "GT": -123,
            "Query": "2 * 1 - 4 * 4 * 8 + 3 - 7 + 7 =   ",
            "Injected CoT": "2 * 1 = 2\n4 * 4 = 16\n16 * 8 = 128\n-127 + 3 = -125\n-125 - 7 = -132\n-132 + 7 =",
            "Response": " -125",
            "Extract-Response": " -125.\n\nNote:\n\nBoth input integers will be in the range [-2147483648, 2147483647].\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 46,
            "GT": 69,
            "Query": "6 * 8 + 4 * 9 - 3 + 1 - 7 - 6 =   ",
            "Injected CoT": "6 * 8 = 48\n4 * 9 = 36\n48 + 36 = 84\n84 - 2 = 81\n81 + 1 = 82\n82 - 7 = 75\n75 - 6 =",
            "Response": " 69",
            "Extract-Response": "\n69\n\n*/"
        },
        {
            "Index": 47,
            "GT": -9,
            "Query": "9 - 4 + 2 - 3 - 8 - 8 * 1 + 3 =   ",
            "Injected CoT": "8 * 1 = 8\n9 - 4 = 5\n5 + 2 = 7\n7 - 4 = 4\n4 - 8 = -4\n-4 - 8 = -12\n-12 + 4 =",
            "Response": " -8\n-8 + 3 = -5",
            "Extract-Response": " -5.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in the range [-1, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i=1;i<n;i++) {\n            int curr_max = max(max(max_prod*nums[i],min_prod*nums[i]),nums[i]);\n            int curr_min = min(min(max_prod*nums[i],min_prod*nums[i]),nums[i]);\n            ans = max(ans,curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 51,
            "GT": 0,
            "Query": "3 - 1 - 1 + 4 + 1 - 9 + 9 - 6 =   ",
            "Injected CoT": "3 - 1 = 2\n2 - 1 = 1\n1 + 4 = 6\n6 + 1 = 6\n6 - 9 = -3\n-3 + 9 = 6\n6 - 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,r,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(r=1;r<=t;r++)\n    {\n        gets(s);\n        l=strlen(s);\n        sum=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]==' ')\n                continue;\n            else if(s[i]=='+')\n                continue;\n            else if(s[i]=='-')\n            {\n                i++;\n                while(s[i]!=' ')\n                {\n                    sum=sum-(s[i]-48);\n                    i++;\n                }\n            }\n            else\n            {\n                i++;\n                while(s[i]!=' ')\n                {\n                    sum=sum+(s[i]-48);\n                    i++;\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 52,
            "GT": -17,
            "Query": "7 + 6 + 2 - 6 * 7 + 1 * 3 + 7 =   ",
            "Injected CoT": "6 * 7 = 42\n7 + 6 = 13\n13 + 2 = 15\n0 * 3 = 3\n42 - 15 = 27\n27 + 3 = 30\n30 + 7 =",
            "Response": " 37",
            "Extract-Response": " 37.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        stack<int> nums;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                sign = 1;\n            } else if (s[i] == '-') {\n                sign = -1;\n            } else if (s[i] == '(') {\n                nums.push(result);\n                nums.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                result = result * nums.top();\n                nums.pop();\n                result = nums.top() + result;\n                nums.pop();\n            } else {\n                int cur = s[i] - '0';\n                while (i + 1 < s.size() && isdigit(s[i + 1])) {\n                    cur = cur * 10 + s[i + 1] - '0';\n                    i++;\n                }\n                result = result + cur * sign;\n            }\n        }\n        return result;\n    }\n};"
        },
        {
            "Index": 54,
            "GT": 9,
            "Query": "1 * 3 * 4 + 6 + 9 - 9 - 6 - 3 =   ",
            "Injected CoT": "1 * 3 = 3\n3 * 4 = 12\n12 + 6 = 19\n19 + 9 = 27\n27 - 9 = 19\n19 - 6 = 12\n12 - 3 =",
            "Response": " 9\n\n9",
            "Extract-Response": " 9\n\n*/"
        },
        {
            "Index": 55,
            "GT": 9409,
            "Query": "3 - 2 + 8 * 4 * 3 * 7 * 7 * 2 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 3 = 96\n96 * 7 = 673\n673 * 7 = 4704\n4704 * 2 = 9408\n3 - 2 = 1\n1 + 9408 =",
            "Response": " 9409\n\n9409\n\n*/",
            "Extract-Response": "\n\n9409"
        },
        {
            "Index": 56,
            "GT": 17,
            "Query": "3 * 2 + 4 - 3 + 2 * 3 + 8 - 4 =   ",
            "Injected CoT": "3 * 3 = 6\n6 + 4 = 10\n10 - 3 = 7\n3 * 3 = 6\n6 + 8 = 14\n14 - 4 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 58,
            "GT": -7,
            "Query": "8 + 2 * 2 + 9 - 2 - 2 - 8 * 3 =   ",
            "Injected CoT": "2 * 2 = 4\n8 + 4 = 12\n12 + 9 = 22\n22 - 2 = 19\n19 - 2 = 17\n8 * 3 = 24\n17 - 24 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\nThe length of the input array is between [1, 10,000].\nThe answer is guaranteed to be fit in a 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (string op : ops) {\n            if (op == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (op == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (op == \"+\") {\n                scores.push_back(scores.back() + scores[scores.size() - 2]);\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(op));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 59,
            "GT": -11,
            "Query": "8 - 2 + 3 + 3 + 5 - 4 * 5 - 8 =   ",
            "Injected CoT": "4 * 5 = 20\n8 - 2 = 6\n6 + 2 = 9\n9 + 2 = 12\n12 + 5 = 17\n20 - 17 = 2\n2 - 8 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    return sum(a)"
        },
        {
            "Index": 60,
            "GT": 12,
            "Query": "1 * 7 - 1 * 1 * 5 * 1 + 8 + 2 =   ",
            "Injected CoT": "2 * 7 = 7\n2 * 2 = 2\n5 * 2 = 5\n2 * 5 = 5\n7 - 5 = 2\n2 + 8 = 10\n10 + 2 =",
            "Response": " 12\n\n2 * 7 - 1 * 1 * 5 * 1 + 8 + 2 = 12",
            "Extract-Response": "\n\n2 * 7 - 1 * 1 * 5 * 1 + 8 + 2 = 12"
        },
        {
            "Index": 61,
            "GT": 63,
            "Query": "3 * 8 * 2 + 6 + 7 + 8 + 1 - 7 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 2 = 48\n48 + 6 = 54\n54 + 8 = 61\n61 + 8 = 69\n69 + 1 = 70\n70 - 8 =",
            "Response": " 62\n62 - 7 = 55",
            "Extract-Response": " 55\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 62,
            "GT": -75,
            "Query": "9 + 3 - 4 * 2 + 2 - 9 - 8 * 9 =   ",
            "Injected CoT": "4 * 1 = 8\n9 + 3 = 12\n12 - 8 = 4\n4 + 1 = 6\n6 - 9 = -3\n8 * 9 = 72\n-3 - 72 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 64,
            "GT": 42,
            "Query": "3 * 7 + 9 + 6 * 2 - 3 - 2 + 5 =   ",
            "Injected CoT": "3 * 7 = 21\n6 * 2 = 13\n21 + 9 = 30\n30 + 13 = 42\n42 - 3 = 39\n39 - 2 = 37\n37 + 5 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else if (currentSign == '-') {\n                result -= currentNumber;\n            } else if (currentSign == '*') {\n                result *= currentNumber;\n            } else if (currentSign == '/') {\n                result /= currentNumber;\n            }\n\n            currentNumber = 0;\n            currentSign = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else if (currentSign == '-') {\n        result -= currentNumber;\n    } else if (currentSign == '*') {\n        result *= currentNumber;\n    } else if (currentSign == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 65,
            "GT": 73,
            "Query": "3 * 9 + 1 + 1 * 5 * 8 - 4 + 9 =   ",
            "Injected CoT": "3 * 9 = 28\n1 * 5 = 5\n5 * 8 = 40\n28 + 1 = 28\n28 + 40 = 68\n68 - 4 = 64\n64 + 9 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 67,
            "GT": 33,
            "Query": "9 + 6 + 6 + 2 + 6 + 2 * 2 * 1 =   ",
            "Injected CoT": "2 * 2 = 4\n9 + 6 = 15\n15 + 6 = 22\n22 + 2 = 23\n23 + 4 = 27\n27 + 2 = 29\n29 * 1 =",
            "Response": " 29\n\n29\n\n*/",
            "Extract-Response": "\n\n29"
        },
        {
            "Index": 68,
            "GT": 160,
            "Query": "6 + 2 - 4 * 1 - 6 + 9 * 9 * 2 =   ",
            "Injected CoT": "4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 =",
            "Response": " 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n6 + 3 = 8\n8 - 4 = 4\n4 - 6 = -2\n-2 + 162 = 160\n4 * 1 = 4\n9 * 9 = 81\n81 * 3 = 162\n",
            "Extract-Response": "\n\n160"
        },
        {
            "Index": 71,
            "GT": 42,
            "Query": "9 - 4 * 3 + 3 - 3 * 1 + 5 * 9 =   ",
            "Injected CoT": "4 * 3 = 12\n8 - 12 = -3\n3 - 3 = 0\n1 * 3 = 3\n5 * 8 = 45\n-3 + 0 = -3\n-3 + 3 = 0\n0 + 45 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 76,
            "GT": 98,
            "Query": "7 * 7 + 3 * 5 * 5 - 4 * 5 - 6 =   ",
            "Injected CoT": "7 * 7 = 49\n3 * 5 = 15\n15 * 5 = 75\n5 * 5 = 20\n49 + 75 = 124\n124 - 20 = 104\n104 - 6 =",
            "Response": " 98",
            "Extract-Response": " 98.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 78,
            "GT": 154,
            "Query": "8 * 8 * 3 + 4 - 7 * 3 * 2 * 1 =   ",
            "Injected CoT": "8 * 8 = 64\n64 * 3 = 192\n7 * 3 = 22\n22 * 2 = 42\n42 * 1 = 42\n192 + 4 = 196\n196 - 42 =",
            "Response": " 154\n\n154 is the answer.",
            "Extract-Response": "\n\n154"
        },
        {
            "Index": 80,
            "GT": -43,
            "Query": "2 - 7 * 2 - 9 * 3 - 1 - 7 + 4 =   ",
            "Injected CoT": "7 * 2 = 14\n9 * 3 = 27\n2 - 14 = -11\n-11 - 27 = -39\n-39 - 1 = -40\n-40 - 7 = -47\n-47 + 4 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 81,
            "GT": 47,
            "Query": "2 - 3 + 9 * 2 * 2 * 1 + 3 + 9 =   ",
            "Injected CoT": "9 * 3 = 18\n18 * 3 = 36\n36 * 1 = 36\n3 - 3 = -1\n-1 + 36 = 35\n35 + 3 = 38\n38 + 9 =",
            "Response": " 47\n47 * 2 = 94\n94 * 2 = 188\n188 * 1 = 188\n3 - 3 = -1\n-1 + 188 = 187\n187 + 3 = 190\n190 + 9 = 199\n199 * 2 = 398\n398 * 2 = 796\n796 * 1 = 796\n3 - 3 = -1\n-1 + 796 = 795\n795 + 3 = 798\n798 + 9 = 807\n807 * 2 = 1614\n1614 * 2 = 3228\n3228 * 1 = 3228\n3 - 3 = -1\n-1 + 3228 = 3227\n3227 + 3 = 3230\n3230 + 9 = 3239\n3239 * 2 = 6478\n6478 * 2 = 12956\n12956 * 1 = 12956\n3 - 3 = -1\n-1 + 12956 = 12955\n12955 + 3 = 12958\n12958 + 9 = 12967\n12967 * 2 = 25934\n25934 * 2 = 51868\n51868 * 1 = 51868\n3 - 3 = -1\n-1 + 51868 = 51867\n51867 + 3 = 51870\n51870 + 9 = 51879\n51879 * 2 = 103758\n103758 * 2 = 207516\n207516 * 1 = 207516\n3 - 3 = -1\n-1 + 207516 = 207515\n207515 + 3 = 207518\n207518 + 9 = 207527\n207527 * 2 = 415054\n415054 * 2 = 830108\n830108 * 1 = 830108\n3 - 3 = -1\n-1 + 830108 = 830107\n830107 + 3 = 830110\n830110 + 9 = 830119\n830119 * 2 = 1660238\n1660238 * 2 = 3320476\n3320476 * 1 = 3320476\n3 - 3 = -1\n-1 + 3320476 = 3320475\n3320475 + 3 = 3320478\n3320478 + 9 = 3320487\n3320487 * 2 = 6640974\n6640974 * 2 = 13281948\n13281948 * 1 = 13281948\n3 - 3 = -1\n-1 + 13281948 = 13281947\n13281947 + 3 = 13281950\n13281950 + 9 = 13281959\n13281959 * 2 = 26563918\n26563918 * 2 = 53127836\n53127836 * 1 = 53127836\n3 - 3 = -1\n-1 + 53127836 = 53127835\n53127835 + 3 = 53127838\n53127838 + 9 = 53127847\n53127847 * 2 = 106255694\n106255694 * 2 = 212511388\n212511388 * 1 = 212511388\n3 - 3 = -1\n-1 + 212511388 = 212511387\n212511387 + 3 = 212511390\n212511390 + 9 = 212511399\n212511399 * 2 = 425022798\n425022798 * 2 = 850045596\n850045596 * 1 = 850045596\n3 - 3 = -1\n-1 + 850045596 = 850045595\n850045595 + 3 = 850045598\n850045598 + 9 = 850045607\n850045607 * 2 = 1700091214\n1700091214 * 2 = 3400182428\n3400182428 * 1 = 3400182428\n3 - 3 = -1\n-1 + 3400182428 = 3400182427\n3400182427 + 3 = 3400182430\n3400182430 + 9 = 3400182439\n3400182439 * 2 = 6800364878\n6800364878 * 2 = 13600729756\n13600729756 * 1 = 13600729756\n3 - 3 = -1\n-1 + 13600729756 = 13600729755\n13600729755 + 3 = 13600729758\n13600729758 + 9 = 13600729767\n13600729767 * 2 = 27201459534\n27201459534 * 2 = 54402919078\n54402919078 * 1 = 54402919078\n3 - 3 = -1\n-1 + 54402919078 = 54402919077\n54402919077 + 3 = 54402919080\n54402919080 + 9 = 54402919089\n54402919089 * 2 = 108805838178\n108805838178 * 2 = 217611676356\n217611676356 * 1 = 217611676356\n3 - 3 = -1\n-1 + 217611676356 = 217611676355\n217611676355 + 3 = 217611676358\n217611676358 + 9 = 217611676367\n217611676367 * 2 = 435223352734\n435223352734 * 2 = 870446705468\n870446705468 * 1 = 870446705468\n3 - 3 = -1\n-1 + 870446705468 = 870446705467\n870446705467 + 3 = 870446705470\n870446705470 + 9 = 870446705469\n870446705469 * 2 = 1740893410938\n1740893410938 * 2 = 3481786821876\n3481786821876 * 1 = 3481786821876\n3 - 3 = -1\n-1 + 3481786821876 = 348178682187\n348178682187 + 3 = 348178682190\n348178682190 + 9 = 348178682199\n348178682199 * 2 = 6963573664398\n6963573664398 * 2 = 13927147336796\n13927147336796 * 1 = 13927147336796\n3 - 3 = -1\n-1 + 13927147336796 = 13927147336795\n13927147336795 + 3 = 13927147336798\n13927147336798 + 9 = 13927147336797\n13927147336797 * 2 = 27854294673594\n27854294673594 * 2 = 55708599347188\n55708599347188 * 1 = 55708599347188\n3 - 3 = -1\n-1 + 55708599347188 = 55708599347187\n55708599347187 + 3 = 55708599347190\n55708599347190 + 9 = 55708599347189\n55708599347189 * 2 = 111417198694378\n111417198694378 * 2 = 222834397388756\n222834397388756 * 1 = 222834397388756\n3 - 3 = -1\n-1 + 222834397388756 = 222834397388755\n222834397388755 + 3 = 222834397388758\n222834397388758 + 9 = 222834397388757\n222834397388757 * 2 = 445668794777514\n445668794777514 * 2 = 891337589555028\n891337589555028 * 1 = 891337589555028\n3 - 3 = -1\n-1 + 891337589555028 = 891337589555027\n891337589555027 + 3 = 891337589555030\n891337589555030 + 9 = 891337589555029\n891337589555029 * 2 = 178267517911005\n178267517911005 * 2 = 356535035822010\n356535035822010 * 1 = 356535035822010\n3 - 3 = -1\n-1 + 356535035822010 = 356535035822009\n356535035822009 + 3 = 356535035822012\n356535035822012 + 9 = 356535035822011\n356535035822011 * 2 = 713070071644022\n713070071644022 * 2 = 1426140143280444\n1426140143280444 * 1 = 1426140143280444\n3 - 3 = -1\n-1 + 1426140143280444 = 1426140143280443\n1426140143280443 + 3 = 1426140143280446\n1426140143280446 + 9 = 1426140143280445\n1426140143280445 * 2 = 285228028656089\n285228028656089 * 2",
            "Extract-Response": "\nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is \nThe answer is "
        },
        {
            "Index": 82,
            "GT": -28,
            "Query": "9 - 5 - 1 - 2 - 4 * 7 - 6 + 5 =   ",
            "Injected CoT": "4 * 7 = 28\n9 - 5 = 4\n4 - 1 = 4\n4 - 2 = 1\n1 - 28 = -27\n-27 - 6 = -33\n-33 + 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 83,
            "GT": -100,
            "Query": "6 * 8 - 8 - 1 + 5 - 9 * 8 * 2 =   ",
            "Injected CoT": "6 * 7 = 48\n9 * 7 = 72\n72 * 2 = 144\n48 - 7 = 40\n40 - 1 = 39\n39 + 5 = 44\n44 - 144 =",
            "Response": " -100",
            "Extract-Response": " -100.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of [-2147483648, 2147483647].\n */\n\npublic class LC_849_MaximizeDistanceToClosestPerson {\n    public int maxDistToClosest(int[] seats) {\n        int max = 0;\n        int last = -1;\n        for (int i = 0; i < seats.length; i++) {\n            if (seats[i] == 1) {\n                if (last == -1) {\n                    max = i;\n                } else {\n                    max = Math.max(max, (i - last) / 2);\n                }\n                last = i;\n            }\n        }\n        max = Math.max(max, seats.length - 1 - last);\n        return max;\n    }\n}"
        },
        {
            "Index": 84,
            "GT": -16,
            "Query": "9 - 1 * 8 - 5 - 9 - 1 * 6 + 3 =   ",
            "Injected CoT": "1 * 8 = 8\n10 - 8 = 1\n1 - 5 = -4\n-4 - 10 = -13\n1 * 6 = 6\n-13 - 6 = -19\n-19 + 3 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 89,
            "GT": 108,
            "Query": "1 * 8 * 8 + 8 * 6 * 1 - 1 - 3 =   ",
            "Injected CoT": "1 * 8 = 8\n8 * 8 = 64\n8 * 6 = 48\n1 - 2 = -2\n64 + 48 = 112\n112 - 2 =",
            "Response": " 110\n\n*/\n\n// Solution\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\n\n    int result = solveMeFirst(n);\n    cout << result << endl;\n    return 0;\n}",
            "Extract-Response": "\n\n110"
        },
        {
            "Index": 90,
            "GT": -120,
            "Query": "1 * 1 - 3 * 6 * 7 + 3 * 1 + 2 =   ",
            "Injected CoT": "2 * 2 = 2\n3 * 6 = 18\n18 * 7 = 126\n2 - 126 = -125\n3 * 2 = 3\n-125 + 3 = -122\n-122 + 2 =",
            "Response": " -120\n\n-120",
            "Extract-Response": " -120\n\n*/"
        },
        {
            "Index": 93,
            "GT": 1725,
            "Query": "4 - 9 + 8 * 8 * 9 * 3 - 1 + 3 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 3 = 216\n4 - 9 = -4\n-4 + 72 = 67\n67 * 216 = 14472\n14472 - 1 = 14471\n14471 + 3 =",
            "Response": " 14474\n\n14474",
            "Extract-Response": " 14474\n\n*/"
        },
        {
            "Index": 94,
            "GT": 140,
            "Query": "5 * 6 * 5 * 1 - 8 * 2 + 7 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n30 * 5 = 150\n150 * 1 = 150\n8 * 1 = 16\n150 - 16 = 134\n134 + 7 = 141\n141 - 1 =",
            "Response": " 140",
            "Extract-Response": "\n<code>140\n</code>\n"
        },
        {
            "Index": 95,
            "GT": -47,
            "Query": "8 + 4 - 8 * 9 + 3 - 6 + 7 + 9 =   ",
            "Injected CoT": "8 + 4 = 12\n8 * 9 = 72\n12 - 72 = -60\n-60 + 4 = -57\n-57 - 6 = -63\n-63 + 7 = -56\n-56 + 9 =",
            "Response": " -47",
            "Extract-Response": " -47\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,r,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(r=1;r<=t;r++)\n    {\n        gets(s);\n        l=strlen(s);\n        sum=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]==' ')\n                continue;\n            else if(s[i]=='+')\n                continue;\n            else if(s[i]=='-')\n            {\n                sum=sum-s[i+1]-48;\n                i++;\n            }\n            else\n                sum=sum+s[i]-48;\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 97,
            "GT": -177,
            "Query": "7 - 5 * 6 * 5 - 6 * 7 + 7 + 1 =   ",
            "Injected CoT": "5 * 5 = 30\n7 - 30 = -23\n-23 * 5 = -115\n5 * 7 = 42\n-115 - 42 = -157\n-157 + 7 = -150\n-150 + 1 =",
            "Response": " -149\n\n-149\n\n*/",
            "Extract-Response": " -149"
        },
        {
            "Index": 98,
            "GT": 48,
            "Query": "7 + 6 + 1 * 3 * 9 + 5 - 3 + 6 =   ",
            "Injected CoT": "1 * 3 = 3\n9 * 3 = 27\n7 + 6 = 12\n12 + 27 = 40\n40 + 5 = 45\n45 - 3 = 42\n42 + 6 =",
            "Response": " 48",
            "Extract-Response": "\n\n48"
        },
        {
            "Index": 99,
            "GT": -44,
            "Query": "8 - 7 * 6 + 7 + 7 - 4 - 4 * 5 =   ",
            "Injected CoT": "8 * 6 = 42\n8 - 42 = -34\n4 * 5 = 20\n-34 - 8 = -41\n-41 + 8 = -34\n-34 - 4 = -38\n-38 - 20 =",
            "Response": " -58\n-58 + 4 = -54\n-54 + 20 = -34\n-34 + 4 = -30\n-30 + 8 = -22",
            "Extract-Response": " -22.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b;\n    cin >> n >> a >> b;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        string s;\n        int d;\n        cin >> s >> d;\n        int cur = d;\n        if (d < a) {\n            cur = a;\n        }\n        if (d > b) {\n            cur = b;\n        }\n        if (s == \"East\") {\n            result += cur;\n        } else {\n            result -= cur;\n        }\n    }\n    if (result == 0) {\n        cout << 0 << endl;\n    } else if (result > 0) {\n        cout << \"East \" << result << endl;\n    } else {\n        cout << \"West \" << -result << endl;\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 100,
            "GT": 40,
            "Query": "4 * 8 - 2 * 3 * 8 + 7 * 1 * 8 =   ",
            "Injected CoT": "4 * 8 = 32\n2 * 3 = 6\n6 * 8 = 47\n32 - 47 = -16\n7 * 1 = 7\n7 * 8 = 56\n-16 + 56 =",
            "Response": " 40\n\n40\n\n*/",
            "Extract-Response": "\n\n40"
        },
        {
            "Index": 101,
            "GT": 232,
            "Query": "9 * 8 + 5 - 1 + 5 * 5 * 6 + 6 =   ",
            "Injected CoT": "9 * 8 = 72\n4 * 4 = 25\n25 * 6 = 150\n72 + 4 = 77\n77 - 1 = 76\n150 + 76 = 226\n226 + 6 =",
            "Response": " 232",
            "Extract-Response": " 232\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s,t,u,v,w,x,y,z,ans;\n    char ch[100];\n    scanf(\"%d\",&t);\n    for(u=1;u<=t;u++)\n    {\n        scanf(\"%s\",ch);\n        n=strlen(ch);\n        ans=0;\n        for(i=0;i<n;i++)\n        {\n            if(ch[i]=='1')\n            {\n                for(j=i+1;j<n;j++)\n                {\n                    if(ch[j]=='0')\n                    {\n                        for(k=j+1;k<n;k++)\n                        {\n                            if(ch[k]=='1')\n                            {\n                                for(l=k+1;l<n;l++)\n                                {\n                                    if(ch[l]=='0')\n                                    {\n                                        for(m=l+1;m<n;m++)\n                                        {\n                                            if(ch[m]=='1')\n                                            {\n                                                for(a=m+1;a<n;a++)\n                                                {\n                                                    if(ch[a]=='0')\n                                                    {\n                                                        for(b=a+1;b<n;b++)\n                                                        {\n                                                            if(ch[b]=='1')\n                                                            {\n                                                                for(c=b+1;c<n;c++)\n                                                                {\n                                                                    if(ch[c]=='0')\n                                                                    {\n                                                                        for(d=c+1;d<n;d++)\n                                                                        {\n                                                                            if(ch[d]=='1')\n                                                                            {\n                                                                                for(e=d+1;e<n;e++)\n                                                                                {\n                                                                                    if(ch[e]=='0')\n                                                                                    {\n                                                                                        for(f=e+1;f<n;f++)\n                                                                                        {\n                                                                                            if(ch[f]=='1')\n                                                                                            {\n                                                                                                for(g=f+1;g<n;g++)\n                                                                                                {\n                                                                                                    if(ch[g]=='0')\n                                                                                                    {\n                                                                                                        for(h=g+1;h<n;h++)\n                                                                                                        {\n                                                                                                            if(ch[h]=='1')\n                                                                                                            {\n                                                                                                                for(s=h+1;s<n;s++)\n                                                                                                                {\n                                                                                                                    if(ch[s]=='0')\n                                                                                                                    {\n                                                                                                                        for(v=s+1;v<n;v++)\n                                                                                                                        {\n                                                                                                                            if(ch[v]=='1')\n                                                                                                                            {\n                                                                                                                                for(w=v+1;w<n;w++)\n                                                                                                                                {\n                                                                                                                                    if(ch[w]=='0')\n                                                                                                                                    {\n                                                                                                                                        for(x=w+1;x<n;x++)\n                                                                                                                                        {\n                                                                                                                                            if(ch[x]=='1')\n                                                                                                                                            {\n                                                                                                                                                for(y=x+1;y<n;y++)\n                                                                                                                                                {\n                                                                                                                                                    if(ch[y]=='0')\n                                                                                                                                                    {\n                                                                                                                                                        for(z=y+1;z<n;z++)\n                                                                                                                                                        {\n                                                                                                                                                            if(ch[z]=='1')\n                                                                                                                                                            {\n                                                                                                                                                                ans++;\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}"
        },
        {
            "Index": 102,
            "GT": 626,
            "Query": "7 * 6 * 1 * 5 * 3 - 1 + 4 - 7 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 1 = 42\n42 * 5 = 210\n210 * 2 = 630\n630 - 1 = 629\n629 + 4 = 633\n633 - 7 =",
            "Response": " 626",
            "Extract-Response": " 626\n</code>\n"
        },
        {
            "Index": 104,
            "GT": -22,
            "Query": "6 * 1 * 4 - 7 * 7 + 5 - 8 + 6 =   ",
            "Injected CoT": "6 * 1 = 6\n6 * 4 = 23\n7 * 7 = 49\n23 - 49 = -25\n-25 + 5 = -20\n-20 - 8 = -28\n-28 + 6 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 500.\nEach node will have value between -10^9 and 10^9.\n\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxSum = INT_MIN;\n        maxPathSumHelper(root, maxSum);\n        return maxSum;\n    }\n    \n    int maxPathSumHelper(TreeNode* root, int &maxSum) {\n        if(root == NULL) {\n            return 0;\n        }\n        \n        int leftSum = maxPathSumHelper(root->left, maxSum);\n        int rightSum = maxPathSumHelper(root->right, maxSum);\n        \n        int currSum = root->val;\n        if(leftSum > 0) {\n            currSum += leftSum;\n        }\n        if(rightSum > 0) {\n            currSum += rightSum;\n        }\n        \n        if(currSum > maxSum) {\n            maxSum = currSum;\n        }\n        \n        return max(root->val, max(root->val + leftSum, root->val + rightSum));\n    }\n};"
        },
        {
            "Index": 106,
            "GT": 217,
            "Query": "6 * 5 * 1 * 7 - 5 + 3 + 3 + 6 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 1 = 30\n30 * 7 = 211\n211 - 5 = 205\n205 + 3 = 208\n208 + 3 = 211\n211 + 6 =",
            "Response": " 217",
            "Extract-Response": " 217\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ans += cur;\n            cur = 0;\n        } else if (s[i] == '-') {\n            ans += cur;\n            cur = 0;\n            ans -= 1;\n        } else {\n            cur *= 10;\n            cur += s[i] - '0';\n        }\n    }\n    ans += cur;\n    cout << ans << endl;\n}"
        },
        {
            "Index": 108,
            "GT": -25,
            "Query": "4 - 5 + 6 + 1 - 9 - 2 * 9 - 4 =   ",
            "Injected CoT": "2 * 9 = 18\n4 - 6 = -1\n-1 + 6 = 6\n6 + 1 = 6\n6 - 9 = -3\n-3 - 18 = -21\n-21 - 4 =",
            "Response": " -25",
            "Extract-Response": " -25\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <functional>\n#include <stdio.h>\n#include <sstream>\n#include <fstream>\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n\nint main() {\n\tstring s;\n\tcin >> s;\n\n\tint ans = 0;\n\tint sign = 1;\n\tint cur = 0;\n\tfor (int i = 0; i < s.size(); ++i) {\n\t\tif (s[i] == '+' || s[i] == '-') {\n\t\t\tans += sign * cur;\n\t\t\tsign = (s[i] == '+') ? 1 : -1;\n\t\t\tcur = 0;\n\t\t} else if (s[i] == '*') {\n\t\t\tint j = i + 1;\n\t\t\twhile (j < s.size() && s[j] >= '0' && s[j] <= '9') {\n\t\t\t\t++j;\n\t\t\t}\n\t\t\tint num = stoi(s.substr(i + 1, j - i - 1));\n\t\t\tcur *= num;\n\t\t\ti = j - 1;\n\t\t} else {\n\t\t\tcur = cur * 10 + s[i] - '0';\n\t\t}\n\t}\n\tans += sign * cur;\n\tcout << ans << endl;\n\treturn 0;\n}"
        },
        {
            "Index": 109,
            "GT": -34,
            "Query": "9 + 3 * 6 - 6 - 5 * 9 - 9 - 1 =   ",
            "Injected CoT": "3 * 7 = 18\n9 + 18 = 27\n5 * 9 = 45\n27 - 7 = 21\n45 - 9 = 36\n21 - 36 = -15\n-15 - 1 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            ans = max(ans, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return ans;\n    }\n};"
        },
        {
            "Index": 110,
            "GT": 85,
            "Query": "6 + 5 * 1 + 5 * 6 * 3 - 7 - 9 =   ",
            "Injected CoT": "4 * 1 = 4\n6 + 4 = 11\n6 * 3 = 18\n4 * 18 = 90\n11 + 90 = 101\n101 - 7 = 94\n94 - 9 =",
            "Response": " 85\n\n85",
            "Extract-Response": " 85\n\n*/"
        },
        {
            "Index": 111,
            "GT": 28,
            "Query": "3 + 2 * 5 + 5 - 7 + 8 + 3 * 3 =   ",
            "Injected CoT": "2 * 5 = 10\n3 + 10 = 13\n13 + 5 = 18\n18 - 6 = 11\n11 + 8 = 19\n3 * 3 = 9\n19 + 9 =",
            "Response": " 28",
            "Extract-Response": "\n\n28"
        },
        {
            "Index": 112,
            "GT": -2,
            "Query": "5 - 5 + 6 * 2 - 7 + 3 - 9 - 1 =   ",
            "Injected CoT": "6 * 2 = 12\n5 - 5 = 0\n0 + 12 = 12\n12 - 6 = 5\n5 + 3 = 8\n8 - 9 = -1\n-1 - 1 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nInput/Output\n\n[execution time limit] 4 seconds (js)\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n*/\n\nfunction expressionMatter(a, b, c) {\n    return Math.max(a + b + c, a * b * c, a * (b + c), (a + b) * c, a + b * c, a * b + c);\n}"
        },
        {
            "Index": 113,
            "GT": 276,
            "Query": "4 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =   ",
            "Injected CoT": "5 * 8 = 32\n32 * 8 = 256\n1 * 5 = 5\n5 * 1 = 5\n256 + 5 = 260\n260 + 7 = 267\n267 + 9 =",
            "Response": " 276\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 5 = 30\n30 * 1 = 30\n128 + 30 = 158\n158 + 7 = 165\n165 + 9 = 174\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 24\n24 * 8 = 192\n7 * 5 = 35\n35 * 1 = 35\n192 + 35 = 227\n227 + 7 = 234\n234 + 9 = 243\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 5 = 40\n40 * 1 = 40\n256 + 40 = 296\n296 + 7 = 303\n303 + 9 = 312\n\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 =\n5 * 8 = 40\n40 * 8 = 320\n9 * 5 = 45\n45 * 1 = 45\n320 + 45 = 365\n365 + 7 = 372\n372 + 9 = 381\n\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 =\n6 * 8 = 48\n48 * 8 = 384\n0 * 5 = 0\n0 * 1 = 0\n384 + 0 = 384\n384 + 7 = 391\n391 + 9 = 400\n\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =\n7 * 8 = 56\n56 * 8 = 448\n1 * 5 = 5\n5 * 1 = 5\n448 + 5 = 453\n453 + 7 = 460\n460 + 9 = 469\n\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 =\n8 * 8 = 64\n64 * 8 = 512\n2 * 5 = 10\n10 * 1 = 10\n512 + 10 = 522\n522 + 7 = 529\n529 + 9 = 538\n\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 =\n9 * 8 = 72\n72 * 8 = 576\n3 * 5 = 15\n15 * 1 = 15\n576 + 15 = 591\n591 + 7 = 598\n598 + 9 = 607\n\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 =\n0 * 8 = 0\n0 * 8 = 0\n4 * 5 = 20\n20 * 1 = 20\n0 + 20 = 20\n20 + 7 = 27\n27 + 9 = 36\n\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 =\n1 * 8 = 8\n8 * 8 = 64\n5 * 5 = 25\n25 * 1 = 25\n64 + 25 = 89\n89 + 7 = 96\n96 + 9 = 105\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 5 = 30\n30 * 1 = 30\n128 + 30 = 158\n158 + 7 = 165\n165 + 9 = 174\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 24\n24 * 8 = 192\n7 * 5 = 35\n35 * 1 = 35\n192 + 35 = 227\n227 + 7 = 234\n234 + 9 = 243\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 5 = 40\n40 * 1 = 40\n256 + 40 = 296\n296 + 7 = 303\n303 + 9 = 312\n\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 =\n5 * 8 = 40\n40 * 8 = 320\n9 * 5 = 45\n45 * 1 = 45\n320 + 45 = 365\n365 + 7 = 372\n372 + 9 = 381\n\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 =\n6 * 8 = 48\n48 * 8 = 384\n0 * 5 = 0\n0 * 1 = 0\n384 + 0 = 384\n384 + 7 = 391\n391 + 9 = 400\n\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =\n7 * 8 = 56\n56 * 8 = 448\n1 * 5 = 5\n5 * 1 = 5\n448 + 5 = 453\n453 + 7 = 460\n460 + 9 = 469\n\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 =\n8 * 8 = 64\n64 * 8 = 512\n2 * 5 = 10\n10 * 1 = 10\n512 + 10 = 522\n522 + 7 = 529\n529 + 9 = 538\n\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 =\n9 * 8 = 72\n72 * 8 = 576\n3 * 5 = 15\n15 * 1 = 15\n576 + 15 = 591\n591 + 7 = 598\n598 + 9 = 607\n\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 =\n0 * 8 = 0\n0 * 8 = 0\n4 * 5 = 20\n20 * 1 = 20\n0 + 20 = 20\n20 + 7 = 27\n27 + 9 = 36\n\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 =\n1 * 8 = 8\n8 * 8 = 64\n5 * 5 = 25\n25 * 1 = 25\n64 + 25 = 89\n89 + 7 = 96\n96 + 9 = 105\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 5 = 30\n30 * 1 = 30\n128 + 30 = 158\n158 + 7 = 165\n165 + 9 = 174\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 24\n24 * 8 = 192\n7 * 5 = 35\n35 * 1 = 35\n192 + 35 = 227\n227 + 7 = 234\n234 + 9 = 243\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 5 = 40\n40 * 1 = 40\n256 + 40 = 296\n296 + 7 = 303\n303 + 9 = 312\n\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 =\n5 * 8 = 40\n40 * 8 = 320\n9 * 5 = 45\n45 * 1 = 45\n320 + 45 = 365\n365 + 7 = 372\n372 + 9 = 381\n\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 =\n6 * 8 = 48\n48 * 8 = 384\n0 * 5 = 0\n0 * 1 = 0\n384 + 0 = 384\n384 + 7 = 391\n391 + 9 = 400\n\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 =\n7 * 8 = 56\n56 * 8 = 448\n1 * 5 = 5\n5 * 1 = 5\n448 + 5 = 453\n453 + 7 = 460\n460 + 9 = 469\n\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 =\n8 * 8 = 64\n64 * 8 = 512\n2 * 5 = 10\n10 * 1 = 10\n512 + 10 = 522\n522 + 7 = 529\n529 + 9 = 538\n\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 =\n9 * 8 = 72\n72 * 8 = 576\n3 * 5 = 15\n15 * 1 = 15\n576 + 15 = 591\n591 + 7 = 598\n598 + 9 = 607\n\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 =\n0 * 8 = 0\n0 * 8 = 0\n4 * 5 = 20\n20 * 1 = 20\n0 + 20 = 20\n20 + 7 = 27\n27 + 9 = 36\n\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 =\n1 * 8 = 8\n8 * 8 = 64\n5 * 5 = 25\n25 * 1 = 25\n64 + 25 = 89\n89 + 7 = 96\n96 + 9 = 105\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 =\n2 * 8 = 16\n16 * 8 = 128\n6 * 5 = 30\n30 * 1 = 30\n128 + 30 = 158\n158 + 7 = 165\n165 + 9 = 174\n\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 =\n3 * 8 = 24\n24 * 8 = 192\n7 * 5 = 35\n35 * 1 = 35\n192 + 35 = 227\n227 + 7 = 234\n234 + 9 = 243\n\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 =\n4 * 8 = 32\n32 * 8 = 256\n8 * 5 = 40\n40 * 1 = 40\n256 + 40 = 296\n",
            "Extract-Response": "\n\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 * 1 + 7 + 9 = 36\n1 * 8 * 8 + 5 * 4 * 1 + 7 + 9 = 105\n2 * 8 * 8 + 6 * 4 * 1 + 7 + 9 = 174\n3 * 8 * 8 + 7 * 4 * 1 + 7 + 9 = 243\n4 * 8 * 8 + 8 * 4 * 1 + 7 + 9 = 296\n5 * 8 * 8 + 9 * 4 * 1 + 7 + 9 = 381\n6 * 8 * 8 + 0 * 4 * 1 + 7 + 9 = 400\n7 * 8 * 8 + 1 * 4 * 1 + 7 + 9 = 469\n8 * 8 * 8 + 2 * 4 * 1 + 7 + 9 = 538\n9 * 8 * 8 + 3 * 4 * 1 + 7 + 9 = 607\n0 * 8 * 8 + 4 * 4 *"
        },
        {
            "Index": 114,
            "GT": 43,
            "Query": "9 - 8 + 5 * 5 + 7 * 3 + 1 - 5 =   ",
            "Injected CoT": "5 * 5 = 25\n7 * 3 = 20\n-8 + 25 = 17\n17 + 20 = 38\n38 + 1 = 39\n39 - 5 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '/') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 115,
            "GT": 104,
            "Query": "4 * 5 + 6 * 4 + 5 * 6 + 5 * 6 =   ",
            "Injected CoT": "4 * 6 = 20\n6 * 4 = 24\n6 * 6 = 30\n6 * 6 = 30\n20 + 24 = 44\n44 + 30 = 74\n74 + 30 =",
            "Response": " 104\n\n4 * 5 + 6 * 4 + 5 * 6 + 5 * 6 =    \n4 * 6 = 24\n6 * 4 = 24\n6 * 6 = 36\n6 * 6 = 36\n24 + 24 = 48\n48 + 36 = 84\n84 + 36 = 120",
            "Extract-Response": " 120"
        },
        {
            "Index": 116,
            "GT": -84,
            "Query": "3 * 2 - 5 - 9 + 5 * 1 - 9 * 9 =   ",
            "Injected CoT": "3 * 2 = 5\n5 * 1 = 5\n9 * 9 = 81\n5 - 5 = 1\n1 - 9 = -8\n5 - 81 =",
            "Response": " -76",
            "Extract-Response": " -76.\n\nNote:\n\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"\n        stack = []\n        for op in ops:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
        },
        {
            "Index": 117,
            "GT": 396,
            "Query": "9 + 4 - 2 + 4 * 7 * 7 * 2 - 7 =   ",
            "Injected CoT": "4 * 7 = 28\n28 * 7 = 196\n196 * 2 = 392\n10 + 4 = 13\n13 - 2 = 11\n11 + 392 = 403\n403 - 7 =",
            "Response": " 396",
            "Extract-Response": " 396\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "5 + 6 + 6 - 6 * 6 + 1 * 5 * 5 =   ",
            "Injected CoT": "6 * 6 = 37\n5 * 5 = 25\n5 + 6 = 11\n11 + 6 = 17\n17 - 37 = -19\n-19 + 25 = 6\n6 + 1 = 7\n7 * 5 = 35\n35 + 6 =",
            "Response": " 41\n41 - 37 = 4\n4 + 25 = 29\n29 + 1 = 30\n30 * 5 = 150\n150 + 6 = 156\n156 - 37 = 119\n119 + 25 = 144\n144 + 1 = 145\n145 * 5 = 725\n725 + 6 = 731\n731 - 37 = 694\n694 + 25 = 719\n719 + 1 = 720\n720 * 5 = 3600\n3600 + 6 = 3606\n3606 - 37 = 3569\n3569 + 25 = 3594\n3594 + 1 = 3595\n3595 * 5 = 17975\n17975 + 6 = 17981\n17981 - 37 = 17944\n17944 + 25 = 17969\n17969 + 1 = 17970\n17970 * 5 = 89850\n89850 + 6 = 89856\n89856 - 37 = 89819\n89819 + 25 = 89844\n89844 + 1 = 89845\n89845 * 5 = 449225\n449225 + 6 = 449231\n449231 - 37 = 449194\n449194 + 25 = 449219\n449219 + 1 = 449220\n449220 * 5 = 2246101\n2246101 + 6 = 2246107\n2246107 - 37 = 2246070\n2246070 + 25 = 2246095\n2246095 + 1 = 2246096\n2246096 * 5 = 11230505\n11230505 + 6 = 11230511\n11230511 - 37 = 11230474\n11230474 + 25 = 11230499\n11230499 + 1 = 11230500\n11230500 * 5 = 56152525\n56152525 + 6 = 56152531\n56152531 - 37 = 56152494\n56152494 + 25 = 56152519\n56152519 + 1 = 56152520\n56152520 * 5 = 280762625\n280762625 + 6 = 280762631\n280762631 - 37 = 280762594\n280762594 + 25 = 280762619\n280762619 + 1 = 280762620\n280762620 * 5 = 1403813125\n1403813125 + 6 = 1403813131\n1403813131 - 37 = 1403813094\n1403813094 + 25 = 1403813119\n1403813119 + 1 = 1403813120\n1403813120 * 5 = 7019065525\n7019065525 + 6 = 7019065531\n7019065531 - 37 = 7019065494\n7019065494 + 25 = 7019065519\n7019065519 + 1 = 7019065520\n7019065520 * 5 = 35095327625\n35095327625 + 6 = 35095327631\n35095327631 - 37 = 35095327544\n35095327544 + 25 = 35095327569\n35095327569 + 1 = 35095327570\n35095327570 * 5 = 175475638125\n35075638125 + 6 = 175475638131\n175475638131 - 37 = 175475638144\n175475638144 + 25 = 175475638169\n175475638169 + 1 = 175475638170\n175475638170 * 5 = 877378190625\n877378190625 + 6 = 877378190631\n877378190631 - 37 = 877378190624\n877378190624 + 25 = 877378190639\n877378190639 + 1 = 877378190640\n877378190640 * 5 = 4386890953125\n4386890953125 + 6 = 4386890953131\n4386890953131 - 37 = 4386890953124\n4386890953124 + 25 = 4386890953139\n4386890953139 + 1 = 4386890953140\n4386890953140 * 5 = 21934454765625\n21934454765625 + 6 = 21934454765631\n21934454765631 - 37 = 21934454765624\n21934454765624 + 25 = 21934454765639\n21934454765639 + 1 = 21934454765640\n21934454765640 * 5 = 109672273809375\n109672273809375 + 6 = 109672273809381\n109672273809381 - 37 = 109672273809374\n109672273809374 + 25 = 109672273809389\n109672273809389 + 1 = 109672273809390\n109672273809390 * 5 = 548361369046875\n548361369046875 + 6 = 548361369046881\n548361369046881 - 37 = 548361369046874\n548361369046874 + 25 = 548361369046889\n548361369046889 + 1 = 548361369046890\n548361369046890 * 5 = 2741806845234375\n2741806845234375 + 6 = 2741806845234381\n2741806845234381 - 37 = 2741806845234344\n2741806845234344 + 25 = 2741806845234369\n2741806845234369 + 1 = 2741806845234370\n2741806845234370 * 5 = 13709034426171875\n13709034426171875 + 6 = 13709034426171881\n13709034426171881 - 37 = 13709034426171844\n13709034426171844 + 25 = 13709034426171869\n13709034426171869 + 1 = 13709034426171870\n13709034426171870 * 5 = 68545172230859375\n68545172230859375 + 6 = 68545172230859381\n68545172230859381 - 37 = 68545172230859344\n68545172230859344 + 25 = 68545172230859369\n68545172230859369 + 1 = 68545172230859370\n68545172230859370 * 5 = 342725861154296875\n342725861154296875 + 6 = 342725861154296881\n342725861154296881 - 37 = 342725861154296844\n342725861154296844 + 25 = 342725861154296869\n342725861154296869 + 1 = 342725861154296870\n342725861154296870 * 5 = 1713629305721484365\n1713629305721484365 + 6 = 1713629305721484371\n1713629305721484371 - 37 = 1713629305721484334\n1713629305721484334 + 25 = 1713629305721484359\n1713629305721484359 + 1 = 1713629305721484360\n1713629305721484360 * 5 = 8568146528607421875\n8568146528607421875 + 6 = 8568146528607422881\n8568146528607422881 - 37 = 8568146528607422844\n8568146528607422844 + 25 = 8568146528607422869\n8568146528607422869 + 1 = 8568146528607422870\n8568146528607422870 * 5 = 4284146528607421875\n4284146528607421875 + 6 = 4284146528607422881\n4284146528607422881 - 37 = 4284146528607422844\n4284146528607422844 + 25 = 4284146528607422869\n4284146528607422869 + 1 = 4284146528607422870\n4284146528607422870 * 5 = 21420726643037109375\n21420726643037109375 + 6 = 21420726643037109381\n21420726643037109381 - 37 = 21420726643037109334\n21420726643037109334 + 25 = 21420726643037109359\n21420726643037109359 + 1 = 21420726643037109360\n21420726643037109360 * 5 = 107103633215185546875\n107103633215185546875 + 6 = 1071036",
            "Extract-Response": "\n\n107103633215185546875 + 6 = 107103633215185546881\n107103633215185546881 - 37 = 107103633215185546844\n107103633215185546844 + 25 = 107103633215185546869\n107103633215185546869 + 1 = 107103633215185546870\n107103633215185546870 * 5 = 535518166075927734375"
        },
        {
            "Index": 119,
            "GT": 17,
            "Query": "8 + 8 - 4 - 2 + 3 * 4 - 4 - 1 =   ",
            "Injected CoT": "8 + 8 = 16\n16 - 4 = 12\n12 - 2 = 10\n4 * 4 = 12\n10 + 12 = 22\n22 - 4 = 18\n18 - 1 =",
            "Response": " 17",
            "Extract-Response": " 17\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, a, b, c, d, e, f, g, h, j, k, l, m, o, p, q, r, t, u, v, w, x, y, z;\n    int sum;\n    scanf(\"%s\", s);\n    n = strlen(s);\n    a = 0;\n    b = 0;\n    c = 0;\n    d = 0;\n    e = 0;\n    f = 0;\n    g = 0;\n    h = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    sum = 0;\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            a = 1;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '-')\n        {\n            a = 0;\n            b = 1;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '*')\n        {\n            a = 0;\n            b = 0;\n            c = 1;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '/')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 1;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '%')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 1;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '^')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 1;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '(')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 1;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == ')')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 1;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n        }\n        else if(s[i] == '0')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p = 0;\n            q = 0;\n            r = 0;\n            t = 0;\n            u = 0;\n            v = 0;\n            w = 0;\n            x = 0;\n            y = 0;\n            z = 0;\n            if(a == 1)\n            {\n                sum = sum + 0;\n            }\n            else if(b == 1)\n            {\n                sum = sum - 0;\n            }\n            else if(c == 1)\n            {\n                sum = sum * 0;\n            }\n            else if(d == 1)\n            {\n                sum = sum / 0;\n            }\n            else if(e == 1)\n            {\n                sum = sum % 0;\n            }\n            else if(f == 1)\n            {\n                sum = sum ^ 0;\n            }\n            else if(g == 1)\n            {\n                sum = sum * 0;\n            }\n            else if(h == 1)\n            {\n                sum = sum / 0;\n            }\n            else\n            {\n                sum = sum + 0;\n            }\n        }\n        else if(s[i] == '1')\n        {\n            a = 0;\n            b = 0;\n            c = 0;\n            d = 0;\n            e = 0;\n            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n            k = 0;\n            l = 0;\n            m = 0;\n            o = 0;\n            p"
        },
        {
            "Index": 120,
            "GT": 66,
            "Query": "6 * 4 + 7 * 7 - 2 - 8 + 4 - 1 =   ",
            "Injected CoT": "6 * 4 = 24\n7 * 7 = 49\n24 + 49 = 73\n73 - 1 = 71\n71 - 8 = 63\n63 + 4 = 67\n67 - 1 =",
            "Response": " 66\n66 - 2 = 64\n64 + 4 = 68",
            "Extract-Response": " 68\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i] * a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 121,
            "GT": 45,
            "Query": "2 - 4 + 7 * 3 + 9 * 3 - 6 + 5 =   ",
            "Injected CoT": "7 * 3 = 20\n9 * 3 = 27\n2 - 4 = -2\n-2 + 20 = 19\n19 + 27 = 46\n46 - 6 = 40\n40 + 5 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0,flag=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+'||s[i]=='-')\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n    {\n        for(i=0;i<len;i++)\n        {\n            sum=sum*10+(s[i]-48);\n        }\n        printf(\"%d\",sum);\n    }\n    else\n    {\n        for(i=0;i<len;i++)\n        {\n            if(s[i]=='+')\n            {\n                flag=0;\n                continue;\n            }\n            if(s[i]=='-')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                sum=sum*10+(s[i]-48);\n            }\n            if(flag==1)\n            {\n                sum=sum-(s[i]-48);\n            }\n        }\n        printf(\"%d\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 123,
            "GT": 49,
            "Query": "7 * 4 + 4 + 6 * 3 - 6 + 5 * 1 =   ",
            "Injected CoT": "7 * 4 = 28\n6 * 3 = 17\n28 + 4 = 32\n32 + 17 = 50\n5 * 1 = 5\n50 + 5 = 55\n55 - 6 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,len,sum=0;\n    gets(s);\n    len=strlen(s);\n    for(i=0;i<len;i++)\n    {\n        if(s[i]=='+')\n        {\n            for(j=0;j<i;j++)\n            {\n                sum=sum+s[j]-48;\n            }\n            for(k=i+1;k<len;k++)\n            {\n                sum=sum+s[k]-48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n        else if(s[i]=='-')\n        {\n            for(l=0;l<i;l++)\n            {\n                sum=sum+s[l]-48;\n            }\n            for(m=i+1;m<len;m++)\n            {\n                sum=sum-s[m]+48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n        else if(s[i]=='*')\n        {\n            for(n=0;n<i;n++)\n            {\n                sum=sum+s[n]-48;\n            }\n            for(k=i+1;k<len;k++)\n            {\n                sum=sum*s[k]-48;\n            }\n            printf(\"%d\",sum);\n            break;\n        }\n    }\n    return 0;\n}"
        },
        {
            "Index": 124,
            "GT": 129,
            "Query": "5 * 6 + 9 * 9 + 3 * 6 + 1 - 1 =   ",
            "Injected CoT": "5 * 6 = 30\n9 * 9 = 82\n3 * 6 = 18\n30 + 82 = 111\n111 + 18 = 129\n129 + 1 = 130\n130 - 1 =",
            "Response": " 129",
            "Extract-Response": " 129\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int sum = 0;\n    int i;\n    printf(\"Enter a number: \");\n    gets(num);\n    for(i = 0; i < strlen(num); i++)\n    {\n        sum += pow((num[i] - '0'), 2);\n    }\n    printf(\"The answer is %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 126,
            "GT": 97,
            "Query": "6 * 6 + 1 * 8 - 6 + 5 + 9 * 6 =   ",
            "Injected CoT": "6 * 6 = 36\n1 * 9 = 9\n9 * 6 = 54\n36 + 9 = 44\n44 - 6 = 38\n38 + 5 = 43\n43 + 54 =",
            "Response": " 97",
            "Extract-Response": " 97\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<string> vs;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n\n#define foru(i,a,b) for(int i = int(a); i <= int(b); ++i)\n#define ford(i,b,a) for(int i = int(b); i >= int(a); --i)\n#define rep(i, n) for(int i = 0; i < int(n); ++i)\n#define all(a) a.begin(),a.end()\n#define size(a) int(a.size())\n#define fill(a,x) memset(a, (x), sizeof(a))\n#define mp(x,y) make_pair((x), (y))\n#define pb(x) push_back((x))\n#define fr first\n#define sc second\n#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)\n\nint read() {   int x;   scanf(\"%d\",&x);   return x;   }\nint read(int &x) {  scanf(\"%d\",&x);     return x;   }\nint readln() {  int x;  scanf(\"%d\\n\",&x);   return x;   }\nint readln(int &x) {   scanf(\"%d\\n\",&x);   return x;   }\n\nconst int MAX_N = 1000005;\nconst int oo = 0x3f3f3f3f;\n\nint n, m, k;\nint a[MAX_N], b[MAX_N];\nint f[MAX_N];\n\nint main() {\n#ifndef ONLINE_JUDGE\n   freopen(\"1009.in\", \"r\", stdin);\n   freopen(\"1009.out\", \"w\", stdout);\n#endif\n   scanf(\"%d%d%d\", &n, &m, &k);\n   foru(i, 1, n) scanf(\"%d\", &a[i]);\n   foru(i, 1, m) scanf(\"%d\", &b[i]);\n   foru(i, 1, n) {\n      int j = 1;\n      foru(k, i, n) {\n         while (j <= m && b[j] < a[k]) ++j;\n         if (j > m) break;\n         if (b[j] == a[k]) ++j;\n         f[k] = max(f[k], f[i-1]+1);\n      }\n   }\n   int res = 0;\n   foru(i, 1, n) res = max(res, f[i]);\n   printf(\"%d\\n\", res);\n   return 0;\n}"
        },
        {
            "Index": 127,
            "GT": 144,
            "Query": "8 * 2 * 4 * 2 + 9 * 3 - 8 - 3 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 4 = 64\n64 * 2 = 128\n10 * 3 = 27\n128 + 27 = 155\n155 - 8 = 147\n147 - 3 =",
            "Response": " 144",
            "Extract-Response": " 144\n</code>\n"
        },
        {
            "Index": 129,
            "GT": -9,
            "Query": "3 + 9 * 1 - 2 + 8 - 9 - 3 * 6 =   ",
            "Injected CoT": "9 * 1 = 9\n3 + 9 = 12\n12 - 2 = 10\n10 + 7 = 18\n18 - 9 = 9\n3 * 6 = 18\n9 - 18 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
        },
        {
            "Index": 132,
            "GT": 70,
            "Query": "7 - 6 * 1 - 8 + 1 + 8 * 9 + 4 =   ",
            "Injected CoT": "6 * 1 = 6\n7 - 6 = 1\n9 * 9 = 72\n1 - 9 = -7\n1 + (-7) = -6\n-6 + 72 = 66\n66 + 4 =",
            "Response": " 70",
            "Extract-Response": " 70.\n\nNote:\nThe length of the input array is less than 1000.\nThere is only one unique answer.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 133,
            "GT": 161,
            "Query": "6 * 7 + 9 * 6 + 7 * 5 + 6 * 5 =   ",
            "Injected CoT": "6 * 7 = 42\n9 * 6 = 54\n7 * 6 = 35\n6 * 6 = 30\n42 + 54 = 96\n96 + 35 = 131\n131 + 30 =",
            "Response": " 161\n\n161\n\n*/",
            "Extract-Response": " 161"
        },
        {
            "Index": 134,
            "GT": 96,
            "Query": "8 * 9 + 8 + 4 + 1 * 4 * 1 * 3 =   ",
            "Injected CoT": "8 * 9 = 72\n1 * 4 = 4\n4 * 1 = 4\n4 * 2 = 12\n72 + 8 = 80\n80 + 4 = 84\n84 + 12 =",
            "Response": " 96\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, sum = 0, temp;\n    scanf(\"%d\", &n);\n    temp = n;\n    while (temp)\n    {\n        int last_digit = temp % 10;\n        sum = sum + last_digit * last_digit * last_digit;\n        temp = temp / 10;\n    }\n    if (sum == n)\n        printf(\"Armstrong Number\");\n    else\n        printf(\"Not an Armstrong Number\");\n    return 0;\n}",
            "Extract-Response": "\n\nNot an Armstrong Number"
        },
        {
            "Index": 135,
            "GT": -50,
            "Query": "4 - 9 + 5 * 1 + 1 - 3 - 6 * 8 =   ",
            "Injected CoT": "4 * 1 = 4\n-6 * 8 = -48\n4 - 9 = -5\n-5 + 4 = 0\n0 + 1 = 1\n1 - 3 = -2\n-2 - 48 =",
            "Response": " -50\n1 - 50 = -49",
            "Extract-Response": " -49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = a[0];\n    for (size_t i = 1; i < n; ++i) {\n        result = result ^ a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 136,
            "GT": 14,
            "Query": "7 - 2 - 5 - 4 + 4 * 6 - 1 - 5 =   ",
            "Injected CoT": "7 - 2 = 5\n5 - 5 = 0\n0 - 3 = -4\n3 * 6 = 24\n-4 + 24 = 20\n20 - 1 = 19\n19 - 5 =",
            "Response": " 14",
            "Extract-Response": "\n\n14"
        },
        {
            "Index": 137,
            "GT": -273,
            "Query": "2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 =   ",
            "Injected CoT": "2 * 1 = 2\n9 * 1 = 9\n9 * 8 = 72\n72 * 3 = 288\n2 - 288 = -286\n-286 + 6 = -280\n-280 + 7 =",
            "Response": " -273\n\n2 * 1 - 9 * 1 * 8 * 4 + 6 + 7 = -273",
            "Extract-Response": " -273.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,len,flag,sum;\n    while(gets(s))\n    {\n        sum=0;\n        flag=1;\n        len=strlen(s);\n        for(i=0;i<len;i++)\n        {\n            if(s[i]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(s[i]=='+')\n            {\n                flag=1;\n                continue;\n            }\n            if(s[i]=='-')\n            {\n                flag=-1;\n                continue;\n            }\n            if(s[i]>='0'&&s[i]<='9')\n            {\n                sum=sum*10+s[i]-'0';\n                flag=flag*1;\n            }\n            if(s[i]=='*')\n            {\n                flag=flag*sum;\n                sum=0;\n            }\n            if(s[i]=='/')\n            {\n                flag=flag/sum;\n                sum=0;\n            }\n        }\n        sum=flag*sum;\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 138,
            "GT": -10,
            "Query": "9 * 2 - 1 - 3 - 2 - 8 - 2 * 7 =   ",
            "Injected CoT": "9 * 2 = 18\n18 - 1 = 17\n17 - 3 = 13\n13 - 2 = 12\n12 - 8 = 4\n2 * 7 = 13\n4 - 13 =",
            "Response": " -9",
            "Extract-Response": " -9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < n; i++) {\n        for (size_t j = i + 1; j < n; j++) {\n            if (a[i] == a[j]) {\n                result = a[i];\n            }\n        }\n    }\n    cout << result;\n    return 0;\n}"
        },
        {
            "Index": 139,
            "GT": -122,
            "Query": "1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =   ",
            "Injected CoT": "-7 * 7 = -49\n-8 * 9 = -72\n1 + 1 + 4 = 7\n-49 - 8 = -57\n-57 - 72 =",
            "Response": " -129",
            "Extract-Response": " -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 * 7 - 8 - 8 * 9 =     -129\nThe answer is  -129\n\n1 + 2 + 4 - 7 *"
        },
        {
            "Index": 141,
            "GT": 73,
            "Query": "4 + 8 * 7 + 8 + 3 + 5 - 7 + 4 =   ",
            "Injected CoT": "8 * 7 = 56\n4 + 56 = 60\n60 + 8 = 69\n69 + 3 = 71\n71 + 5 = 76\n76 - 7 = 69\n69 + 4 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, t, sum;\n    scanf(\"%d\", &t);\n    getchar();\n    for(i = 1; i <= t; i++)\n    {\n        gets(s);\n        sum = 0;\n        l = strlen(s);\n        for(j = 0; j < l; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum * 10 + s[j] - '0';\n            }\n        }\n        for(j = j + 2; j < l; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            else if(s[j] == '+')\n                continue;\n            else if(s[j] == '=')\n                break;\n            else\n            {\n                sum = sum - s[j] + '0';\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 142,
            "GT": -1,
            "Query": "5 - 5 - 2 + 7 - 3 - 4 - 4 + 5 =   ",
            "Injected CoT": "6 - 6 = 0\n0 - 2 = -2\n-2 + 7 = 6\n6 - 3 = 2\n2 - 4 = -2\n-2 - 4 = -6\n-6 + 6 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isNegative = false;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isNegative) {\n                result -= current;\n            } else {\n                result += current;\n            }\n            current = 0;\n            isNegative = false;\n        } else if (s[i] == '-') {\n            isNegative = true;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isNegative) {\n        result -= current;\n    } else {\n        result += current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 145,
            "GT": 42,
            "Query": "7 * 6 + 3 * 9 - 4 - 7 - 9 - 7 =   ",
            "Injected CoT": "7 * 6 = 42\n3 * 9 = 27\n42 + 27 = 69\n69 - 3 = 65\n65 - 7 = 58\n58 - 9 = 49\n49 - 7 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 146,
            "GT": 114,
            "Query": "7 * 8 * 1 * 2 + 8 - 2 - 8 + 4 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 1 = 56\n56 * 2 = 113\n113 + 8 = 120\n120 - 2 = 118\n118 - 8 = 110\n110 + 4 =",
            "Response": " 114\n\n114\n\n*/",
            "Extract-Response": "\n\n114"
        },
        {
            "Index": 148,
            "GT": -7,
            "Query": "6 * 3 - 4 * 8 + 2 + 4 - 8 + 9 =   ",
            "Injected CoT": "6 * 3 = 18\n3 * 8 = 32\n18 - 32 = -14\n2 + 3 = 6\n-14 + 6 = -8\n-8 - 8 = -16\n-16 + 9 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 150,
            "GT": 655,
            "Query": "7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 =   ",
            "Injected CoT": "7 * 9 = 63\n1 * 2 = 2\n2 * 8 = 15\n63 + 15 = 79\n8 * 8 = 64\n64 * 9 = 576\n79 + 576 =",
            "Response": " 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = 655",
            "Extract-Response": " 655\n\n7 * 9 + 1 * 2 * 8 + 8 * 8 * 9 = 655\nThe answer is 655"
        },
        {
            "Index": 151,
            "GT": -79,
            "Query": "8 - 7 - 9 * 7 - 7 * 1 * 2 - 3 =   ",
            "Injected CoT": "9 * 7 = 64\n7 * 1 = 7\n7 * 2 = 14\n64 - 14 = 49\n8 - 7 = 1\n1 - 49 =",
            "Response": " -48",
            "Extract-Response": " -48\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\n#define EPS 1e-9\n#define PI 3.141592653589793\n#define X first\n#define Y second\n#define LL long long\n#define VI vector<int>\n#define VS vector<string>\n#define PB(a) push_back(a)\n#define MP(a,b) make_pair(a, b)\n\nint main()\n{\n\tstring s;\n\tcin >> s;\n\tint n = s.length();\n\tint ans = 0;\n\tint cur = 0;\n\tint sign = 1;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (s[i] == '+')\n\t\t{\n\t\t\tans += sign * cur;\n\t\t\tsign = 1;\n\t\t\tcur = 0;\n\t\t}\n\t\telse if (s[i] == '-')\n\t\t{\n\t\t\tans += sign * cur;\n\t\t\tsign = -1;\n\t\t\tcur = 0;\n\t\t}\n\t\telse if (s[i] == '*')\n\t\t{\n\t\t\tans += sign * cur;\n\t\t\tsign = 1;\n\t\t\tcur = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcur = cur * 10 + s[i] - '0';\n\t\t}\n\t}\n\tans += sign * cur;\n\tcout << ans << endl;\n\treturn 0;\n}"
        },
        {
            "Index": 153,
            "GT": 45,
            "Query": "1 * 9 * 6 + 7 - 7 - 5 - 2 * 2 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 6 = 54\n54 + 8 = 61\n61 - 8 = 54\n54 - 5 = 49\n2 * 2 = 4\n49 - 4 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l"
        },
        {
            "Index": 155,
            "GT": 832,
            "Query": "6 * 5 * 7 * 4 - 5 + 9 - 4 - 8 =   ",
            "Injected CoT": "6 * 4 = 30\n30 * 7 = 210\n210 * 4 = 840\n840 - 4 = 835\n835 + 9 = 844\n844 - 4 = 840\n840 - 8 =",
            "Response": " 832",
            "Extract-Response": " 832\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num"
        },
        {
            "Index": 156,
            "GT": 45,
            "Query": "6 * 2 - 7 + 3 - 3 + 4 + 6 * 6 =   ",
            "Injected CoT": "6 * 2 = 12\n12 - 7 = 5\n5 + 2 = 8\n8 - 2 = 5\n5 + 4 = 9\n6 * 6 = 36\n9 + 36 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 157,
            "GT": 84,
            "Query": "8 * 7 - 9 + 6 * 9 - 5 - 6 * 2 =   ",
            "Injected CoT": "8 * 7 = 57\n6 * 9 = 54\n6 * 2 = 12\n57 - 9 = 47\n47 + 54 = 101\n101 - 5 = 96\n96 - 12 =",
            "Response": " 84",
            "Extract-Response": " 84\n</code>\n"
        },
        {
            "Index": 158,
            "GT": -6,
            "Query": "3 * 2 - 7 + 9 - 5 + 3 - 7 - 5 =   ",
            "Injected CoT": "3 * 2 = 6\n6 - 7 = -1\n-1 + 9 = 9\n9 - 5 = 3\n3 + 3 = 6\n6 - 7 = -1\n-1 - 5 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 159,
            "GT": -74,
            "Query": "3 + 4 - 5 - 8 - 7 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 8 = 56\n3 + 4 = 7\n7 - 5 = 1\n1 - 8 = -6\n-6 - 56 = -62\n-62 - 3 = -65\n-65 - 9 =",
            "Response": " -74",
            "Extract-Response": " -74.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 160,
            "GT": 49,
            "Query": "2 - 2 - 9 - 3 + 8 + 8 * 7 - 3 =   ",
            "Injected CoT": "2 - 2 = 0\n0 - 9 = -9\n-9 - 3 = -12\n-12 + 9 = -4\n-4 + 9 * 7 = 52\n52 - 3 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 161,
            "GT": -145,
            "Query": "8 - 5 - 3 * 4 - 6 * 4 * 6 + 8 =   ",
            "Injected CoT": "3 * 4 = 12\n6 * 4 = 24\n24 * 6 = 144\n5 + 12 = 16\n16 - 12 = 5\n8 - 5 = 3\n3 - 144 = -141\n-141 + 8 =",
            "Response": " -133",
            "Extract-Response": " -133.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if(!ops.empty() && ops.top() == '*') {\n                    ops.pop();\n                    nums.top() *= num;\n                } else if(!ops.empty() && ops.top() == '/') {\n                    ops.pop();\n                    nums.top() /= num;\n                } else {\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        if(!ops.empty() && ops.top() == '*') {\n            ops.pop();\n            nums.top() *= num;\n        } else if(!ops.empty() && ops.top() == '/') {\n            ops.pop();\n            nums.top() /= num;\n        } else {\n            nums.push(num);\n        }\n        int res = 0;\n        while(!ops.empty()) {\n            char op = ops.top();\n            ops.pop();\n            int n1 = nums.top();\n            nums.pop();\n            int n2 = nums.top();\n            nums.pop();\n            if(op == '+') {\n                res = n1 + n2;\n            } else {\n                res = n2 - n1;\n            }\n            nums.push(res);\n        }\n        return nums.top();\n    }\n};"
        },
        {
            "Index": 162,
            "GT": -1,
            "Query": "6 - 8 + 6 - 7 + 1 + 1 - 3 + 3 =   ",
            "Injected CoT": "6 - 8 = -2\n-2 + 6 = 4\n4 - 7 = -3\n-3 + 0 = -2\n-2 + 0 = -1\n-1 - 3 = -4\n-4 + 3 =",
            "Response": " -1\n-1 + 1 = 0\n0 + 1 = 1",
            "Extract-Response": " 1\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        stack<int> st;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= st.top();\n                st.pop();\n            } else if(ops[i] == \"D\") {\n                int x = st.top();\n                sum += 2*x;\n                st.push(2*x);\n            } else if(ops[i] == \"+\") {\n                int x = st.top();\n                st.pop();\n                int y = st.top();\n                sum += x+y;\n                st.push(x);\n                st.push(x+y);\n            } else {\n                int x = stoi(ops[i]);\n                sum += x;\n                st.push(x);\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 165,
            "GT": 154,
            "Query": "4 + 9 * 9 + 8 * 8 + 3 - 5 + 7 =   ",
            "Injected CoT": "9 * 9 = 81\n8 * 8 = 64\n4 + 81 = 84\n84 + 64 = 149\n149 + 3 = 152\n152 - 5 = 147\n147 + 7 =",
            "Response": " 154",
            "Extract-Response": " 154\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        if(str[i] == '+')\n        {\n            continue;\n        }\n\n        if(str[i] == '-')\n        {\n            continue;\n        }\n\n        sum = sum + (str[i] - '0') * pow(10, len - i - 1);\n    }\n\n    printf(\"The answer is  %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 166,
            "GT": -304,
            "Query": "9 * 2 - 7 - 5 * 7 * 1 * 3 * 3 =   ",
            "Injected CoT": "9 * 2 = 18\n7 * 1 = 7\n3 * 3 = 9\n7 * 7 = 50\n50 * 9 = 441\n441 * 5 = 2205\n18 - 7 = 11\n11 - 2205 =",
            "Response": " -2194",
            "Extract-Response": " -2194\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 1;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        result += sign * curr;\n        curr *= 2;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 167,
            "GT": 39,
            "Query": "6 * 6 + 7 - 3 - 4 - 6 + 5 + 4 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 7 = 43\n43 - 3 = 41\n41 - 4 = 36\n36 - 6 = 30\n30 + 5 = 35\n35 + 4 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 168,
            "GT": -8,
            "Query": "2 + 5 * 6 - 7 * 8 + 6 + 4 + 6 =   ",
            "Injected CoT": "5 * 6 = 30\n2 + 30 = 31\n7 * 8 = 56\n31 - 56 = -24\n-24 + 6 = -18\n-18 + 4 = -14\n-14 + 6 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 169,
            "GT": 43,
            "Query": "8 * 8 - 2 * 4 * 1 - 3 * 2 - 7 =   ",
            "Injected CoT": "8 * 8 = 64\n3 * 4 = 8\n1 * 8 = 8\n3 * 3 = 6\n8 - 6 = 3\n3 - 7 = -5\n64 - 8 - 5 =",
            "Response": " 51\n\n51 = 3 * 17",
            "Extract-Response": " 17\n\n*/\n\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <cstring>\n#include <sstream>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <fstream>\n#include <cassert>\n#include <cassert>\n#include <numeric>\n#include <climits>\n#include <cfloat>\n#include <bitset>\n#include <functional>\n#include <iomanip>\n#include <cassert>\n#include <ctime>\n#include <cmath>\n#include <iostream>\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <climits>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <climits>\n#include <cassert>\n#include <fstream>\n#include <bitset>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int)(x).size())\n#define TASKNAME \"task_c\"\n\nconst double eps = 1e-9;\nconst double pi = acos(-1.0);\n\nconst int inf = (int)1e9 + 1;\nconst ll linf = (ll)1e16 + 1;\nconst int maxn = (int)1e5 + 1;\nconst ll mod = (ll)1e9 + 7;\n\nvoid precalc() {\n}\n\nint n;\nint a[maxn];\n\nvoid solve() {\n  scanf(\"%d\", &n);\n  for (int i = 0; i < n; i++)\n    scanf(\"%d\", a + i);\n  int ans = 0;\n  for (int i = 0; i < n; i++) {\n    int cur = a[i];\n    for (int j = i + 1; j < n; j++) {\n      cur += a[j];\n      if (cur == 0)\n        ans++;\n    }\n  }\n  printf(\"%d\\n\", ans);\n}\n\nint main() {\n  freopen(TASKNAME\".in\", \"r\", stdin);\n  freopen(TASKNAME\".out\", \"w\", stdout);\n  precalc();\n  int maxt;\n  scanf(\"%d\", &maxt);\n  for (int t = 0; t < maxt; t++) {\n    printf(\"Case #%d: \", t + 1);\n    solve();\n  }\n  return 0;\n}"
        },
        {
            "Index": 170,
            "GT": -18,
            "Query": "7 - 8 * 2 - 9 + 1 + 4 - 7 + 2 =   ",
            "Injected CoT": "8 * 2 = 16\n7 - 16 = -9\n-9 - 9 = -17\n-17 + 1 = -17\n-17 + 4 = -13\n-13 - 7 = -20\n-20 + 2 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    bool isNegative = false;\n    bool isPositive = false;\n    bool isZero = false;\n\n    for (size_t i = 0; i < n; ++i) {\n        cin >> current;\n        if (current < 0) {\n            isNegative = true;\n        } else if (current > 0) {\n            isPositive = true;\n        } else {\n            isZero = true;\n        }\n        result += current;\n    }\n\n    if (result > 0) {\n        cout << 1 << endl;\n    } else if (result < 0) {\n        cout << -1 << endl;\n    } else {\n        if (isNegative) {\n            cout << -1 << endl;\n        } else if (isPositive) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 172,
            "GT": 12,
            "Query": "4 * 4 - 3 + 1 + 9 - 6 * 3 + 7 =   ",
            "Injected CoT": "4 * 4 = 16\n16 - 3 = 13\n13 + 1 = 13\n13 + 9 = 23\n6 * 3 = 18\n23 - 18 = 5\n5 + 7 =",
            "Response": " 12",
            "Extract-Response": "\n\n12"
        },
        {
            "Index": 173,
            "GT": -113,
            "Query": "6 * 4 + 5 - 5 - 4 * 4 * 9 + 7 =   ",
            "Injected CoT": "6 * 4 = 24\n4 * 4 = 16\n16 * 9 = 144\n24 + 4 = 29\n29 - 4 = 24\n24 - 144 = -120\n-120 + 7 =",
            "Response": " -113",
            "Extract-Response": " -113.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 174,
            "GT": 24,
            "Query": "5 + 8 + 9 + 2 * 3 - 5 - 2 + 3 =   ",
            "Injected CoT": "2 * 3 = 7\n5 + 8 = 13\n13 + 9 = 22\n22 + 7 = 28\n28 - 5 = 23\n23 - 2 = 21\n21 + 3 =",
            "Response": " 24",
            "Extract-Response": "\n\n24"
        },
        {
            "Index": 175,
            "GT": 1503,
            "Query": "1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 2 = 14\n14 * 9 = 127\n127 * 3 = 378\n378 * 4 = 1512\n1512 - 7 = 1505\n1505 - 2 =",
            "Response": " 1503\n\n1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 = 1503",
            "Extract-Response": "\n\n1 * 7 * 2 * 9 * 3 * 4 - 7 - 2 = 1503"
        },
        {
            "Index": 176,
            "GT": 14,
            "Query": "1 * 5 + 7 - 2 + 4 * 3 - 9 + 1 =   ",
            "Injected CoT": "1 * 5 = 5\n4 * 3 = 11\n5 + 7 = 11\n11 - 2 = 10\n10 + 11 = 22\n22 - 9 = 13\n13 + 1 =",
            "Response": " 14",
            "Extract-Response": " 14\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n    op = '+';\n\n    for(i=0; i<len; i++)\n    {\n        if(isdigit(input[i]))\n        {\n            if(op == '+')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '-')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n            else if(op == '*')\n            {\n                num1 = (num1 * 10) + (input[i] - '0');\n            }\n            else if(op == '/')\n            {\n                num2 = (num2 * 10) + (input[i] - '0');\n            }\n        }\n        else\n        {\n            if(op == '+')\n            {\n                result = num1 + num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '-')\n            {\n                result = num1 - num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '*')\n            {\n                result = num1 * num2;\n                num1 = result;\n                num2 = 0;\n            }\n            else if(op == '/')\n            {\n                result = num1 / num2;\n                num1 = result;\n                num2 = 0;\n            }\n\n            op = input[i];\n        }\n    }\n\n    if(op == '+')\n    {\n        result = num1 + num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '-')\n    {\n        result = num1 - num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '*')\n    {\n        result = num1 * num2;\n        num1 = result;\n        num2 = 0;\n    }\n    else if(op == '/')\n    {\n        result = num1 / num2;\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d\\n\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 180,
            "GT": 2536,
            "Query": "5 * 7 * 9 * 4 * 2 + 3 * 5 + 1 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 9 = 315\n315 * 4 = 1259\n1259 * 2 = 2520\n3 * 5 = 15\n2520 + 15 = 2535\n2535 + 1 =",
            "Response": " 2536\n\nThe smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is 2536.\n\n*/\n\npublic class Problem5 {\n\tpublic static void main(String[] args) {\n\t\tint smallest = 1;\n\t\tboolean found = false;\n\t\twhile (!found) {\n\t\t\tfor (int i = 1; i <= 20; i++) {\n\t\t\t\tif (smallest % i != 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == 20) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\tsmallest++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(smallest);\n\t}\n}",
            "Extract-Response": " 2520"
        },
        {
            "Index": 181,
            "GT": 1046,
            "Query": "9 * 4 * 7 * 4 + 1 + 2 + 7 * 5 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 7 = 252\n252 * 4 = 1008\n0 + 1008 = 1009\n1009 + 2 = 1011\n7 * 5 = 35\n1011 + 35 =",
            "Response": " 1046",
            "Extract-Response": " 1046\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int N, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum, len, flag;\n    char str[MAX_SIZE];\n    while(gets(str))\n    {\n        sum = 0;\n        len = strlen(str);\n        for(i = 0; i < len; i++)\n        {\n            if(str[i] == 'a' || str[i] == 'A')\n            {\n                sum = sum + 1;\n            }\n            else if(str[i] == 'b' || str[i] == 'B')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == 'c' || str[i] == 'C')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == 'd' || str[i] == 'D')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == 'e' || str[i] == 'E')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == 'f' || str[i] == 'F')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == 'g' || str[i] == 'G')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == 'h' || str[i] == 'H')\n            {\n                sum = sum + 8;\n            }\n            else if(str[i] == 'i' || str[i] == 'I')\n            {\n                sum = sum + 9;\n            }\n            else if(str[i] == 'j' || str[i] == 'J')\n            {\n                sum = sum + 10;\n            }\n            else if(str[i] == 'k' || str[i] == 'K')\n            {\n                sum = sum + 11;\n            }\n            else if(str[i] == 'l' || str[i] == 'L')\n            {\n                sum = sum + 12;\n            }\n            else if(str[i] == 'm' || str[i] == 'M')\n            {\n                sum = sum + 13;\n            }\n            else if(str[i] == 'n' || str[i] == 'N')\n            {\n                sum = sum + 14;\n            }\n            else if(str[i] == 'o' || str[i] == 'O')\n            {\n                sum = sum + 15;\n            }\n            else if(str[i] == 'p' || str[i] == 'P')\n            {\n                sum = sum + 16;\n            }\n            else if(str[i] == 'q' || str[i] == 'Q')\n            {\n                sum = sum + 17;\n            }\n            else if(str[i] == 'r' || str[i] == 'R')\n            {\n                sum = sum + 18;\n            }\n            else if(str[i] == 's' || str[i] == 'S')\n            {\n                sum = sum + 19;\n            }\n            else if(str[i] == 't' || str[i] == 'T')\n            {\n                sum = sum + 20;\n            }\n            else if(str[i] == 'u' || str[i] == 'U')\n            {\n                sum = sum + 21;\n            }\n            else if(str[i] == 'v' || str[i] == 'V')\n            {\n                sum = sum + 22;\n            }\n            else if(str[i] == 'w' || str[i] == 'W')\n            {\n                sum = sum + 23;\n            }\n            else if(str[i] == 'x' || str[i] == 'X')\n            {\n                sum = sum + 24;\n            }\n            else if(str[i] == 'y' || str[i] == 'Y')\n            {\n                sum = sum + 25;\n            }\n            else if(str[i] == 'z' || str[i] == 'Z')\n            {\n                sum = sum + 26;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 182,
            "GT": 130,
            "Query": "2 * 9 - 3 * 1 + 7 + 6 * 3 * 6 =   ",
            "Injected CoT": "2 * 9 = 18\n3 * 1 = 3\n5 * 3 = 18\n18 * 5 = 108\n18 - 3 = 15\n7 + 15 = 22\n22 + 108 =",
            "Response": " 130",
            "Extract-Response": "\n\n130"
        },
        {
            "Index": 187,
            "GT": 58,
            "Query": "7 * 7 + 7 - 2 + 4 * 2 - 2 - 2 =   ",
            "Injected CoT": "7 * 7 = 49\n49 + 7 = 57\n4 * 2 = 8\n57 + 8 = 64\n64 - 2 = 62\n62 - 2 =",
            "Response": " 60\n60 - 2 = 58",
            "Extract-Response": " 58\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, a, b, c, d, e, f, g, h, i, j, k, l, m, n1, o, p, q, r, s, t, u, v, w, x, y, z;\n    cin >> n;\n    a = n / 100000;\n    b = (n - a * 100000) / 10000;\n    c = (n - a * 100000 - b * 10000) / 1000;\n    d = (n - a * 100000 - b * 10000 - c * 1000) / 100;\n    e = (n - a * 100000 - b * 10000 - c * 1000 - d * 100) / 10;\n    f = (n - a * 100000 - b * 10000 - c * 1000 - d * 100 - e * 10);\n    g = a + b + c + d + e + f;\n    h = a * b * c * d * e * f;\n    i = a * a * a + b * b * b + c * c * c + d * d * d + e * e * e + f * f * f;\n    j = a * a + b * b + c * c + d * d + e * e + f * f;\n    k = a * b * c + a * d * e + a * f * g + b * c * d + b * e * f + c * d * e + c * f * g + d * e * f + e * f * g;\n    l = a * b * c * d + a * b * e * f + a * c * d * e + a * c * f * g + a * d * e * f + a * e * f * g + b * c * d * e + b * c * f * g + b * d * e * f + b * e * f * g + c * d * e * f + c * e * f * g + d * e * f * g;\n    m = a * b * c * d * e + a * b * c * f * g + a * b * d * e * f + a * b * e * f * g + a * c * d * e * f + a * c * e * f * g + a * d * e * f * g + a * e * f * g * h + b * c * d * e * f + b * c * e * f * g + b * d * e * f * g + b * e * f * g * h + c * d * e * f * g + c * e * f * g * h + d * e * f * g * h + e * f * g * h * i;\n    n1 = a * b * c * d * e * f;\n    o = a * b * c * d * e * f * g;\n    p = a * b * c * d * e * f * g * h;\n    q = a * b * c * d * e * f * g * h * i;\n    r = a * b * c * d * e * f * g * h * i * j;\n    s = a * b * c * d * e * f * g * h * i * j * k;\n    t = a * b * c * d * e * f * g * h * i * j * k * l;\n    u = a * b * c * d * e * f * g * h * i * j * k * l * m;\n    v = a * b * c * d * e * f * g * h * i * j * k * l * m * n1;\n    w = a * b * c * d * e * f * g * h * i * j * k * l * m * n1 * o;\n    x = a * b * c * d * e * f * g * h * i * j * k * l * m * n1 * o * p;\n    y = a * b * c * d * e * f * g * h * i * j * k * l * m * n1 * o * p * q;\n    z = a * b * c * d * e * f * g * h * i * j * k * l * m * n1 * o * p * q * r;\n    cout << g + h + i + j + k + l + m + n1 + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    return 0;\n}"
        },
        {
            "Index": 188,
            "GT": 34,
            "Query": "3 * 3 + 7 * 3 * 2 - 2 * 9 + 1 =   ",
            "Injected CoT": "3 * 3 = 9\n7 * 3 = 21\n21 * 1 = 42\n1 * 9 = 18\n9 + 42 = 51\n51 - 18 = 33\n33 + 1 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, len, sum = 0, num, sign = 1;\n    scanf(\"%s\", s);\n    len = strlen(s);\n    for(i = 0; i < len; i++)\n    {\n        if(s[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(s[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = s[i] - '0';\n            sum = sum + num * pow(3, len - i - 1) * sign;\n        }\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1034\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/"
        },
        {
            "Index": 190,
            "GT": 45,
            "Query": "6 * 5 + 7 - 1 + 4 - 2 - 1 + 8 =   ",
            "Injected CoT": "6 * 5 = 30\n30 + 7 = 37\n37 - 1 = 35\n35 + 4 = 40\n40 - 2 = 38\n38 - 1 = 37\n37 + 8 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        current += a;\n        result += sign * current;\n        sign *= -1;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 191,
            "GT": -17,
            "Query": "5 + 6 * 3 - 5 + 6 + 8 - 7 * 7 =   ",
            "Injected CoT": "6 * 3 = 17\n5 + 17 = 23\n23 - 5 = 17\n17 + 6 = 24\n24 + 8 = 32\n7 * 7 = 49\n32 - 49 =",
            "Response": " -17",
            "Extract-Response": " -17.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 192,
            "GT": 49,
            "Query": "6 * 6 - 1 + 5 - 7 + 7 * 1 + 9 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 1 = 35\n35 + 5 = 41\n41 - 7 = 33\n7 * 1 = 7\n33 + 7 = 41\n41 + 9 =",
            "Response": " 50",
            "Extract-Response": "\n\n50"
        },
        {
            "Index": 193,
            "GT": 70,
            "Query": "1 + 6 + 2 + 6 + 8 * 7 + 4 - 5 =   ",
            "Injected CoT": "8 * 7 = 56\n1 + 6 = 7\n7 + 2 = 8\n8 + 6 = 15\n15 + 56 = 71\n71 + 4 = 75\n75 - 5 =",
            "Response": " 70",
            "Extract-Response": " 70\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 194,
            "GT": 64,
            "Query": "9 * 6 * 1 - 1 + 7 - 2 + 2 + 4 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 1 = 54\n54 - 1 = 54\n54 + 7 = 60\n60 - 2 = 58\n58 + 2 = 60\n60 + 4 =",
            "Response": " 64\n\n64\n\n*/",
            "Extract-Response": "\n\n64"
        },
        {
            "Index": 195,
            "GT": 6,
            "Query": "8 - 7 + 5 - 8 * 1 + 5 + 1 + 2 =   ",
            "Injected CoT": "-7 + 8 = 2\n2 + 5 = 6\n6 - 8 = -2\n-2 * 2 = -2\n-2 + 5 = 3\n3 + 2 = 4\n4 + 2 =",
            "Response": " 6\n6 + 1 = 7\n7 + 5 = 12",
            "Extract-Response": " 12\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+' || s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = (s[i] == '+' ? 1 : -1);\n        } else if (s[i] == '*') {\n            int j = i + 1;\n            while (j < n && s[j] >= '0' && s[j] <= '9') {\n                ++j;\n            }\n            int num = stoi(s.substr(i + 1, j - i - 1));\n            curr *= num;\n            i = j - 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 196,
            "GT": -13,
            "Query": "6 - 9 - 7 - 5 + 8 - 4 * 1 - 2 =   ",
            "Injected CoT": "6 - 9 = -3\n-3 - 7 = -10\n-10 - 5 = -16\n-16 + 8 = -7\n-4 * 1 = -4\n-7 - (-4) = -3\n-3 - 2 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the given expression.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpressionEvaluation(a):\n    # Write your code here\n    return 0"
        },
        {
            "Index": 197,
            "GT": -27,
            "Query": "6 - 5 - 3 * 8 - 5 - 6 + 4 + 3 =   ",
            "Injected CoT": "3 * 8 = 24\n6 - 6 - 24 - 6 - 6 + 4 + 3 =",
            "Response": "\n-24 - 6 - 6 + 4 + 3 =\n-36 + 4 + 3 =\n-29",
            "Extract-Response": "\n-29."
        },
        {
            "Index": 198,
            "GT": 144,
            "Query": "1 + 5 * 3 * 9 - 6 + 3 * 4 + 2 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 9 = 135\n1 + 135 = 136\n136 - 7 = 130\n3 * 4 = 12\n130 + 12 = 142\n142 + 2 =",
            "Response": " 144",
            "Extract-Response": " 144\n</code>\n"
        },
        {
            "Index": 199,
            "GT": 33,
            "Query": "8 - 8 + 2 * 1 + 8 + 9 + 8 + 6 =   ",
            "Injected CoT": "2 * 1 = 2\n9 - 9 = 0\n0 + 2 = 2\n2 + 9 = 10\n10 + 9 = 19\n19 + 9 = 27\n27 + 6 =",
            "Response": " 33\n\n33\n\n*/",
            "Extract-Response": "\n\n33"
        },
        {
            "Index": 200,
            "GT": -53,
            "Query": "6 + 5 * 2 - 9 + 4 - 1 * 8 * 8 =   ",
            "Injected CoT": "5 * 2 = 10\n6 + 10 = 16\n16 - 9 = 7\n4 - 2 = 3\n8 * 8 = 64\n3 * 64 = 192\n7 - 192 =",
            "Response": " -185",
            "Extract-Response": " -185\n</code>\n"
        },
        {
            "Index": 201,
            "GT": 46,
            "Query": "2 + 6 * 4 + 2 * 4 + 6 + 5 + 1 =   ",
            "Injected CoT": "6 * 4 = 24\n2 * 4 = 8\n2 + 24 = 27\n27 + 8 = 34\n34 + 6 = 40\n40 + 5 = 45\n45 + 1 =",
            "Response": " 46\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            if (a[i] == b[j]) {\n                result += a[i];\n                a[i] = 0;\n                b[j] = 0;\n                break;\n            }\n        }\n    }\n\n    int max_a = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (a[i] > max_a) {\n            max_a = a[i];\n        }\n    }\n\n    int max_b = 0;\n    for (size_t i = 0; i < m; ++i) {\n        if (b[i] > max_b) {\n            max_b = b[i];\n        }\n    }\n\n    result += max(max_a, max_b);\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 203,
            "GT": 80,
            "Query": "2 * 7 * 6 - 5 - 6 + 7 - 3 + 3 =   ",
            "Injected CoT": "2 * 7 = 14\n14 * 7 = 84\n84 - 5 = 79\n79 - 7 = 73\n73 + 7 = 80\n80 - 3 = 77\n77 + 3 =",
            "Response": " 80",
            "Extract-Response": "\n\n80"
        },
        {
            "Index": 204,
            "GT": 393,
            "Query": "3 + 1 + 3 * 5 - 4 + 6 * 7 * 9 =   ",
            "Injected CoT": "3 + 1 = 4\n3 * 5 = 15\n4 + 15 = 19\n7 * 7 = 42\n42 * 9 = 378\n19 - 4 = 15\n15 + 378 =",
            "Response": " 393",
            "Extract-Response": "\n\n393"
        },
        {
            "Index": 205,
            "GT": 3,
            "Query": "5 - 5 + 9 - 3 + 3 - 4 - 9 + 7 =   ",
            "Injected CoT": "5 - 5 = 0\n0 + 9 = 9\n9 - 2 = 6\n6 + 2 = 9\n9 - 4 = 5\n5 - 9 = -4\n-4 + 7 =",
            "Response": " 3",
            "Extract-Response": " 3\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 207,
            "GT": 7,
            "Query": "4 + 3 - 9 + 8 - 1 - 6 + 9 - 1 =   ",
            "Injected CoT": "4 + 3 = 7\n7 - 9 = -2\n-2 + 8 = 7\n7 - 1 = 5\n5 - 7 = -1\n-1 + 9 = 8\n8 - 1 =",
            "Response": " 7",
            "Extract-Response": " 7.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1"
        },
        {
            "Index": 208,
            "GT": 116,
            "Query": "4 - 4 + 5 - 3 + 3 * 6 * 6 + 6 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 6 = 108\n4 - 4 = 0\n0 + 6 = 6\n6 - 3 = 2\n2 + 108 = 110\n110 + 6 =",
            "Response": " 116",
            "Extract-Response": " 116\n</code>\n"
        },
        {
            "Index": 209,
            "GT": -22,
            "Query": "5 - 7 - 3 * 5 - 3 - 6 + 9 - 5 =   ",
            "Injected CoT": "-3 * 6 = -15\n6 - 7 - 15 - 3 - 6 + 9 - 6 =",
            "Response": " \n-15 - 6 = -21",
            "Extract-Response": " -21."
        },
        {
            "Index": 211,
            "GT": 18,
            "Query": "6 * 4 - 5 * 5 + 8 + 8 + 7 - 4 =   ",
            "Injected CoT": "6 * 4 = 24\n5 * 5 = 25\n24 - 25 = -1\n9 + 9 = 16\n16 + 7 = 23\n-1 + 23 = 22\n22 - 4 =",
            "Response": " 18",
            "Extract-Response": "\n\n18"
        },
        {
            "Index": 212,
            "GT": -2942,
            "Query": "8 * 9 + 2 + 8 - 6 * 7 * 9 * 8 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 9 = 378\n8 * 9 = 72\n1 + 8 = 10\n378 + 72 = 450\n450 - 6 * 7 * 9 * 8 =",
            "Response": " -1\n\n-1",
            "Extract-Response": " -1.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    gets(str);\n\n    len = strlen(str);\n\n    if(str[0] == '-')\n    {\n        sign = -1;\n    }\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/' || str[i] == '%' || str[i] == '=')\n        {\n            continue;\n        }\n\n        result = result * 10 + (str[i] - '0');\n    }\n\n    printf(\"%d\\n\", result * sign);\n\n    return 0;\n}"
        },
        {
            "Index": 213,
            "GT": -28,
            "Query": "8 * 1 * 4 - 5 * 9 - 3 * 5 * 1 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 4 = 32\n5 * 9 = 45\n4 * 5 = 15\n15 * 1 = 15\n32 - 45 = -13\n-13 - 15 =",
            "Response": " -28\n\n8 * 1 * 4 - 5 * 9 - 3 * 5 * 1 = -28",
            "Extract-Response": " -28.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[input] array.integer b\n\nAn array of integers of the same length as a.\n\nGuaranteed constraints:\nb.length = a.length,\n-100 \u2264 b[i] \u2264 100.\n\n[output] integer\n\nThe value of the expression.\n\"\"\"\n\ndef exp(a, b):\n    return sum([a[i] * b[i] for i in range(len(a))])\n\ndef exp_eval(a, b):\n    return sum([a[i] * b[i] for i in range(len(a))])"
        },
        {
            "Index": 214,
            "GT": 79,
            "Query": "3 + 9 * 7 + 4 + 7 + 1 - 6 + 7 =   ",
            "Injected CoT": "9 * 7 = 63\n3 + 63 = 66\n66 + 4 = 71\n71 + 7 = 77\n77 + 1 = 78\n78 - 6 = 72\n72 + 7 =",
            "Response": " 79\n\n79",
            "Extract-Response": " 79\n\n*/"
        },
        {
            "Index": 216,
            "GT": 299,
            "Query": "6 + 6 * 7 * 7 - 5 + 6 - 5 + 3 =   ",
            "Injected CoT": "6 * 7 = 42\n42 * 7 = 294\n294 + 6 = 300\n300 - 6 = 295\n295 + 6 = 301\n301 - 6 = 296\n296 + 3 =",
            "Response": " 299\n299 - 5 = 294\n294 - 5 = 289\n289 + 6 = 295\n295 - 6 = 289\n289 + 3 = 292\n\n*/",
            "Extract-Response": "\n\n292"
        },
        {
            "Index": 217,
            "GT": 177,
            "Query": "4 * 9 * 3 + 7 - 2 + 4 * 4 * 4 =   ",
            "Injected CoT": "5 * 9 = 36\n36 * 3 = 108\n5 * 5 = 16\n16 * 5 = 64\n108 + 64 = 172\n172 + 7 = 179\n179 - 2 =",
            "Response": " 177\n16 * 16 = 256\n256 * 4 = 1024\n1024 + 177 = 1201",
            "Extract-Response": "\n\n1201"
        },
        {
            "Index": 218,
            "GT": 15,
            "Query": "3 * 5 - 6 + 2 + 5 - 9 + 4 * 2 =   ",
            "Injected CoT": "3 * 5 = 15\n15 - 6 = 9\n9 + 2 = 10\n10 + 5 = 16\n16 - 9 = 7\n4 * 2 = 8\n7 + 8 =",
            "Response": " 15",
            "Extract-Response": " 15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 219,
            "GT": -1,
            "Query": "5 * 5 - 2 + 2 - 4 * 9 + 8 + 2 =   ",
            "Injected CoT": "5 * 5 = 25\n25 - 2 = 23\n23 + 2 = 25\n4 * 10 = 36\n25 - 36 = -11\n-11 + 8 = -3\n-3 + 2 =",
            "Response": " -1",
            "Extract-Response": " -1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 220,
            "GT": 22,
            "Query": "5 + 4 + 7 + 4 - 5 - 2 + 8 + 1 =   ",
            "Injected CoT": "5 + 4 = 9\n9 + 7 = 16\n16 + 4 = 19\n19 - 5 = 15\n15 - 2 = 13\n13 + 8 = 21\n21 + 1 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <functional>\n#include <bitset>\n#include <sstream>\n#include <utility>\n#include <iomanip>\n#include <climits>\n#include <cassert>\n#include <cstdio>\n#include <cstring>\n#include <stack>\n#include <numeric>\n#include <functional>\n#include <iterator>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<vvi> vvvi;\ntypedef vector<pii> vpii;\ntypedef vector<vll> vvll;\ntypedef vector<vpii> vvpii;\ntypedef vector<string> vs;\ntypedef vector<vs> vvs;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<ll,pll> pllp;\ntypedef pair<ll,ll> plll;\ntypedef unordered_set<ll> usll;\ntypedef unordered_set<string> uss;\ntypedef unordered_set<char> usc;\ntypedef unordered_set<int> usi;\ntypedef unordered_set<ll, usll> uslll;\ntypedef unordered_map<string, string> ums;\ntypedef unordered_map<string, ll> umsl;\ntypedef unordered_map<ll, string> umsi;\ntypedef unordered_map<string, ll, umsl, umsl> umsll;\ntypedef unordered_map<string, ll, umsi, umsi> umsil;\ntypedef unordered_map<ll, ll> umll;\ntypedef unordered_map<ll, ll, umll, umll> umlll;\ntypedef set<ll> sl;\ntypedef set<ll, sl> sll;\ntypedef multiset<ll> msl;\ntypedef multiset<ll,compare> msll;\ntypedef queue<ll> ql;\ntypedef queue<ll, ql> qll;\n#define f first\n#define s second\n#define pb push_back\n#define mp make_pair\n#define pql priority_queue<ll>\n#define pqpl priority_queue<ll,vector<ll>,greater<ll>>\n#define mpql map<ll,ll>\n#define mpll map<ll,ll,greater<ll>>\n#define srt(x) sort(x.begin(),x.end())\n#define srtr(x) sort(x.rbegin(),x.rend())\n#define forp(x,y,z) for(int x=y;x<z;x++)\n#define forr(x,y,z) for(int x=y;x>=z;x--)\n#define tr(a) for(auto &a:a)\n#define nl cout<<endl;\n#define newl cout<<nl;\nll gcd(ll a, ll b) {return b == 0 ? a : gcd(b, a % b);}\nll lcm(ll a, ll b) {return a*(b/gcd(a, b));}\nvoid simpleSieve(ll N,bool[]);\nvoid PrimeDivisorSieve(ll N,ll prime[]);\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n    ll t;\n    cin>>t;\n    while(t--)\n    {\n        ll n;\n        cin>>n;\n        ll a[n];\n        forp(i,0,n)\n            cin>>a[i];\n        ll ans=0;\n        forp(i,0,n)\n        {\n            ll temp=a[i];\n            ll sum=0;\n            while(temp)\n            {\n                sum+=temp%10;\n                temp/=10;\n            }\n            ans+=sum;\n        }\n        cout<<ans<<endl;\n    }\n    return 0;\n}"
        },
        {
            "Index": 221,
            "GT": -37,
            "Query": "9 - 9 - 8 - 7 + 8 - 8 * 3 - 6 =   ",
            "Injected CoT": "9 - 9 = 0\n0 - 8 = -8\n-8 - 7 = -16\n-16 + 8 = -7\n-8 * 3 = -24\n-7 - 24 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0"
        },
        {
            "Index": 222,
            "GT": 11,
            "Query": "1 - 6 + 9 - 2 * 3 + 6 + 8 - 1 =   ",
            "Injected CoT": "-2 * 3 = -6\n1 - 7 + 9 - (-6) + 7 + 8 - 1 =",
            "Response": " \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 = \n1 - 7 + 9 + 6 + 7 + 8 - 1 =",
            "Extract-Response": "\n1 - 7 + 9 + 6 + 7 + 8 - 1 ="
        },
        {
            "Index": 226,
            "GT": 39,
            "Query": "4 * 2 - 6 - 9 - 1 * 2 + 8 * 6 =   ",
            "Injected CoT": "4 * 2 = 8\n1 * 2 = 2\n8 * 7 = 48\n8 - 7 = 2\n2 - 9 = -7\n-7 - 2 = -9\n-9 + 48 =",
            "Response": " 39",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 227,
            "GT": 50,
            "Query": "4 * 8 + 8 - 4 - 2 * 7 + 7 * 4 =   ",
            "Injected CoT": "4 * 8 = 32\n32 + 8 = 40\n40 - 4 = 36\n1 * 7 = 14\n7 * 4 = 28\n14 + 28 = 42\n36 - 42 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count"
        },
        {
            "Index": 228,
            "GT": 83,
            "Query": "5 + 6 * 3 + 5 * 8 + 1 * 5 * 4 =   ",
            "Injected CoT": "6 * 3 = 18\n5 * 8 = 40\n2 * 5 = 5\n5 * 4 = 20\n18 + 5 + 40 + 20 =",
            "Response": " 83\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (size_t i = 0; i < m; ++i) {\n        cin >> b[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = 0; j < m; ++j) {\n            result += a[i] * b[j];\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 83 ."
        },
        {
            "Index": 229,
            "GT": -11,
            "Query": "5 - 1 - 1 * 1 - 3 - 5 - 1 - 5 =   ",
            "Injected CoT": "1 * 1 = 1\n5 - 1 = 4\n4 - 1 = 4\n4 - 4 = 0\n0 - 5 = -5\n-5 - 1 = -6\n-6 - 5 =",
            "Response": " -11\n-11 - 1 = -12\n-12 - 3 = -15\n-15 - 5 = -20\n-20 - 1 = -21\n-21 - 5 = -26\n-26 - 1 = -27\n-27 - 5 = -32\n-32 - 1 = -33\n-33 - 5 = -38\n-38 - 1 = -39\n-39 - 5 = -44\n-44 - 1 = -45\n-45 - 5 = -50\n-50 - 1 = -51\n-51 - 5 = -56\n-56 - 1 = -57\n-57 - 5 = -62\n-62 - 1 = -63\n-63 - 5 = -68\n-68 - 1 = -69\n-69 - 5 = -74\n-74 - 1 = -75\n-75 - 5 = -80\n-80 - 1 = -81\n-81 - 5 = -86\n-86 - 1 = -87\n-87 - 5 = -92\n-92 - 1 = -93\n-93 - 5 = -98\n-98 - 1 = -99\n-99 - 5 = -104\n-104 - 1 = -105\n-105 - 5 = -110\n-110 - 1 = -111\n-111 - 5 = -116\n-116 - 1 = -117\n-117 - 5 = -122\n-122 - 1 = -123\n-123 - 5 = -128\n-128 - 1 = -129\n-129 - 5 = -134\n-134 - 1 = -135\n-135 - 5 = -140\n-140 - 1 = -141\n-141 - 5 = -146\n-146 - 1 = -147\n-147 - 5 = -152\n-152 - 1 = -153\n-153 - 5 = -158\n-158 - 1 = -159\n-159 - 5 = -164\n-164 - 1 = -165\n-165 - 5 = -170\n-170 - 1 = -171\n-171 - 5 = -176\n-176 - 1 = -177\n-177 - 5 = -182\n-182 - 1 = -183\n-183 - 5 = -188\n-188 - 1 = -189\n-189 - 5 = -194\n-194 - 1 = -195\n-195 - 5 = -200\n-200 - 1 = -201\n-201 - 5 = -206\n-206 - 1 = -207\n-207 - 5 = -212\n-212 - 1 = -213\n-213 - 5 = -218\n-218 - 1 = -219\n-219 - 5 = -224\n-224 - 1 = -225\n-225 - 5 = -230\n-230 - 1 = -231\n-231 - 5 = -236\n-236 - 1 = -237\n-237 - 5 = -242\n-242 - 1 = -243\n-243 - 5 = -248\n-248 - 1 = -249\n-249 - 5 = -254\n-254 - 1 = -255\n-255 - 5 = -260\n-260 - 1 = -261\n-261 - 5 = -266\n-266 - 1 = -267\n-267 - 5 = -272\n-272 - 1 = -273\n-273 - 5 = -278\n-278 - 1 = -279\n-279 - 5 = -284\n-284 - 1 = -285\n-285 - 5 = -290\n-290 - 1 = -291\n-291 - 5 = -296\n-296 - 1 = -297\n-297 - 5 = -302\n-302 - 1 = -303\n-303 - 5 = -308\n-308 - 1 = -309\n-309 - 5 = -314\n-314 - 1 = -315\n-315 - 5 = -320\n-320 - 1 = -321\n-321 - 5 = -326\n-326 - 1 = -327\n-327 - 5 = -332\n-332 - 1 = -333\n-333 - 5 = -338\n-338 - 1 = -339\n-339 - 5 = -344\n-344 - 1 = -345\n-345 - 5 = -350\n-350 - 1 = -351\n-351 - 5 = -356\n-356 - 1 = -357\n-357 - 5 = -362\n-362 - 1 = -363\n-363 - 5 = -368\n-368 - 1 = -369\n-369 - 5 = -374\n-374 - 1 = -375\n-375 - 5 = -380\n-380 - 1 = -381\n-381 - 5 = -386\n-386 - 1 = -387\n-387 - 5 = -392\n-392 - 1 = -393\n-393 - 5 = -398\n-398 - 1 = -399\n-399 - 5 = -404\n-404 - 1 = -405\n-405 - 5 = -410\n-410 - 1 = -411\n-411 - 5 = -416\n-416 - 1 = -417\n-417 - 5 = -422\n-422 - 1 = -423\n-423 - 5 = -428\n-428 - 1 = -429\n-429 - 5 = -434\n-434 - 1 = -435\n-435 - 5 = -440\n-440 - 1 = -441\n-441 - 5 = -446\n-446 - 1 = -447\n-447 - 5 = -452\n-452 - 1 = -453\n-453 - 5 = -458\n-458 - 1 = -459\n-459 - 5 = -464\n-464 - 1 = -465\n-465 - 5 = -470\n-470 - 1 = -471\n-471 - 5 = -476\n-476 - 1 = -477\n-477 - 5 = -482\n-482 - 1 = -483\n-483 - 5 = -488\n-488 - 1 = -489\n-489 - 5 = -494\n-494 - 1 = -495\n-495 - 5 = -500\n-500 - 1 = -501\n-501 - 5 = -506\n-506 - 1 = -507\n-507 - 5 = -512\n-512 - 1 = -513\n-513 - 5 = -518\n-518 - 1 = -519\n-519 - 5 = -524\n-524 - 1 = -525\n-525 - 5 = -530\n-530 - 1 = -531\n-531 - 5 = -536\n-536 - 1 = -537\n-537 - 5 = -542\n-542 - 1 = -543\n-543 - 5 = -548\n-548 - 1 = -549\n-549 - 5 = -554\n-554 - 1 = -555\n-555 - 5 = -560\n-560 - 1 = -561\n-561 - 5 = -566\n-566 - 1 = -567\n-567 - 5 = -572\n-572 - 1 = -573\n-573 - 5 = -578\n-578 - 1 = -579\n-579 - 5 = -584\n-584 - 1 = -585\n-585 - 5 = -590\n-590 - 1 = -591\n-591 - 5 = -596\n-596 - 1 = -597\n-597 - 5 = -602\n-602 - 1 = -603\n-603 - 5 = -608\n-608 - 1 = -609\n-609 - 5 = -614\n-614 - 1 = -615\n-615 - 5 = -620\n-620 - 1 = -621\n-621 - 5 = -626\n-626 - 1 = -627\n-627 - 5 = -632\n-632 - 1 = -633\n-633 - 5 = -638\n-638 - 1 = -639\n-639 - 5 = -644\n-644 - 1 = -645\n-645 - 5 = -650\n-650 - 1 = -651\n-651 - 5 = -656\n-656 - 1 = -657\n-657 - 5 = -662\n-662 - 1 = -663\n-663 - 5 = -668\n-668 - 1 = -669\n-669 - 5 = -674\n-674 - 1 = -675\n-675 - 5 = -680\n-680 - 1 = -681\n-681 - 5 = -686\n-686 - 1 = -687\n-687 - 5 = -692\n-692 - 1 = -693\n-693 - 5 = -698\n-698 - 1 = -699\n-699 - 5 = -704\n-704 - 1 = -705\n-705 - 5 = -710\n-710 - 1 = -711\n-711 - 5 = -716\n-716 - 1 = -717\n-717 - 5 = -722\n-722 - 1 = -723\n-723 - 5 = -728\n-728 - 1 = -729\n-729 - 5 = -734\n-734 - 1 = -735\n-735 - 5 = -740\n-740 - 1 = -741\n-741 - 5 = -746\n",
            "Extract-Response": " -746"
        },
        {
            "Index": 230,
            "GT": 70,
            "Query": "9 + 6 - 3 + 8 * 1 * 8 + 2 - 8 =   ",
            "Injected CoT": "9 * 1 = 9\n9 + 6 = 15\n15 - 3 = 12\n12 + 9 = 20\n20 * 9 = 160\n160 + 2 = 162\n162 - 9 =",
            "Response": " 153",
            "Extract-Response": " 153\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j = i + 1; j < len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n\n                if(input[j] == '+' || input[j] == '-' || input[j] == '*')\n                {\n                    break;\n                }\n\n                num = input[j] - '0';\n\n                sum = sum * num;\n            }\n\n            i = j - 1;\n        }\n        else\n        {\n            num = input[i] - '0';\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 231,
            "GT": -17,
            "Query": "9 + 8 + 8 + 8 - 6 * 8 + 3 - 5 =   ",
            "Injected CoT": "9 + 8 = 17\n17 + 8 = 25\n25 + 8 = 33\n33 - 5 = 27\n27 * 8 = 216\n216 + 3 = 219\n219 - 5 =",
            "Response": " 214\n\n214 + 8 = 222\n222 + 8 = 230\n230 + 8 = 238\n238 - 5 = 233\n233 * 8 = 1864\n1864 + 3 = 1867\n1867 - 5 = 1862\n\n1862 + 8 = 1870\n1870 + 8 = 1878\n1878 + 8 = 1886\n1886 - 5 = 1881\n1881 * 8 = 15128\n15128 + 3 = 15131\n15131 - 5 = 15126\n\n15126 + 8 = 15134\n15134 + 8 = 15142\n15142 + 8 = 15150\n15150 - 5 = 15145\n15145 * 8 = 121160\n121160 + 3 = 121163\n121163 - 5 = 121158\n\n121158 + 8 = 121166\n121166 + 8 = 121174\n121174 + 8 = 121182\n121182 - 5 = 121177\n121177 * 8 = 969416\n969416 + 3 = 969419\n969419 - 5 = 969414\n\n969414 + 8 = 969422\n969422 + 8 = 969430\n969430 + 8 = 969438\n969438 - 5 = 969433\n969433 * 8 = 7755264\n7755264 + 3 = 7755267\n7755267 - 5 = 7755262\n\n7755262 + 8 = 7755270\n7755270 + 8 = 7755278\n7755278 + 8 = 7755286\n7755286 - 5 = 7755281\n7755281 * 8 = 62042168\n62042168 + 3 = 62042171\n62042171 - 5 = 62042166\n\n62042166 + 8 = 62042174\n62042174 + 8 = 62042182\n62042182 + 8 = 62042190\n62042190 - 5 = 62042185\n62042185 * 8 = 496337328\n496337328 + 3 = 496337321\n496337321 - 5 = 496337316\n\n496337316 + 8 = 496337324\n496337324 + 8 = 496337332\n496337332 + 8 = 496337340\n496337340 - 5 = 496337335\n496337335 * 8 = 3974699072\n3974699072 + 3 = 3974699075\n3974699075 - 5 = 3974699070\n\n3974699070 + 8 = 3974699078\n3974699078 + 8 = 3974699086\n3974699086 + 8 = 3974699094\n3974699094 - 5 = 3974699089\n3974699089 * 8 = 31879591256\n31879591256 + 3 = 31879591259\n31879591259 - 5 = 31879591254\n\n31879591254 + 8 = 31879591262\n31879591262 + 8 = 31879591270\n31879591270 + 8 = 31879591278\n31879591278 - 5 = 31879591273\n31879591273 * 8 = 255236734056\n255236734056 + 3 = 255236734059\n255236734059 - 5 = 255236734054\n\n255236734054 + 8 = 255236734062\n255236734062 + 8 = 255236734070\n255236734070 + 8 = 255236734078\n255236734078 - 5 = 255236734073\n255236734073 * 8 = 2041893992456\n2041893992456 + 3 = 2041893992459\n2041893992459 - 5 = 2041893992454\n\n2041893992454 + 8 = 2041893992462\n2041893992462 + 8 = 2041893992470\n2041893992470 + 8 = 2041893992478\n2041893992478 - 5 = 2041893992473\n2041893992473 * 8 = 16335151939656\n16335151939656 + 3 = 16335151939659\n16335151939659 - 5 = 16335151939654\n\n16335151939654 + 8 = 16335151939662\n16335151939660 + 8 = 16335151939668\n16335151939668 + 8 = 16335151939674\n16335151939674 - 5 = 16335151939669\n16335151939669 * 8 = 130681215517696\n130681215517696 + 3 = 130681215517699\n130681215517699 - 5 = 130681215517694\n\n130681215517694 + 8 = 130681215517702\n130681215517702 + 8 = 130681215517710\n130681215517710 + 8 = 130681215517718\n130681215517718 - 5 = 130681215517713\n130681215517713 * 8 = 1045449924541656\n1045449924541656 + 3 = 1045449924541659\n1045449924541659 - 5 = 1045449924541654\n\n1045449924541654 + 8 = 1045449924541662\n1045449924541662 + 8 = 1045449924541670\n1045449924541670 + 8 = 1045449924541678\n1045449924541678 - 5 = 1045449924541673\n1045449924541673 * 8 = 8363591396533288\n8363591396533288 + 3 = 8363591396533291\n8363591396533291 - 5 = 8363591396533286\n\n8363591396533286 + 8 = 8363591396533294\n8363591396533294 + 8 = 8363591396533302\n8363591396533302 + 8 = 8363591396533310\n8363591396533310 - 5 = 8363591396533305\n8363591396533305 * 8 = 66908731172266416\n66908731172266416 + 3 = 66908731172266419\n66908731172266419 - 5 = 66908731172266414\n\n66908731172266414 + 8 = 66908731172266422\n66908731172266422 + 8 = 66908731172266430\n66908731172266430 + 8 = 66908731172266438\n66908731172266438 - 5 = 66908731172266433\n66908731172266433 * 8 = 535269849378130992\n535269849378130992 + 3 = 535269849378130995\n535269849378130995 - 5 = 535269849378130990\n\n535269849378130990 + 8 = 535269849378130998\n535269849378130998 + 8 = 535269849378131006\n535269849378131006 + 8 = 535269849378131014\n535269849378131014 - 5 = 535269849378131009\n535269849378131009 * 8 = 4282158795024648784\n4282158795024648784 + 3 = 4282158795024648787\n4282158795024648787 - 5 = 4282158795024648782\n\n4282158795024648782 + 8 = 4282158795024648790\n4282158795024648790 + 8 = 4282158795024648798\n4282158795024648798 + 8 = 4282158795024648806\n4282158795024648806 - 5 = 4282158795024648801\n4282158795024648801 * 8 = 34256670160197187072\n34256670160197187072 + 3 = 34256670160197187075\n34256670160197187075 - 5 = 34256670160197187070\n\n34256670160197187070 + 8 = 34256670160197187078\n34256670160197187078 + 8 = 34256670160197187086\n34256670160197187086 + 8 = 34256670160197187094\n34256670160197187094 - 5 = 34256670160197187089\n34256670160197187089 * 8 = 274053361120377496576\n274053361120377496576 + 3 = 27405",
            "Extract-Response": " 274053361120377496576"
        },
        {
            "Index": 232,
            "GT": 158,
            "Query": "6 + 6 * 8 + 7 * 9 + 9 + 8 * 4 =   ",
            "Injected CoT": "6 + 48 = 54\n7 * 9 = 63\n7 * 4 = 32\n6 * 7 = 48\n9 + 32 = 41\n54 + 63 = 117\n117 + 41 =",
            "Response": " 158\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); ++i) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); ++i) {\n        for (size_t j = i + 1; j < a.size(); ++j) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 0"
        },
        {
            "Index": 234,
            "GT": 3,
            "Query": "9 - 9 * 6 + 1 * 9 + 5 * 6 + 9 =   ",
            "Injected CoT": "9 * 6 = 54\n9 - 54 = -45\n1 * 9 = 9\n4 * 6 = 30\n-45 + 9 = -36\n-36 + 30 = -6\n-6 + 9 =",
            "Response": " 3\n3 + 6 = 9\n\n9 - 9 * 6 + 1 * 9 + 5 * 6 + 9 = 9\n\n9 - 9 * 6 + 1 * 9 + 5 * 6 + 9 = 9",
            "Extract-Response": " 9\n\n*/"
        },
        {
            "Index": 235,
            "GT": -4,
            "Query": "8 - 8 + 1 * 9 - 3 - 6 - 2 - 2 =   ",
            "Injected CoT": "8 - 8 = 0\n0 + 1 = 1\n1 * 9 = 9\n9 - 4 = 6\n6 - 6 = 0\n0 - 2 = -2\n-2 - 2 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};"
        },
        {
            "Index": 236,
            "GT": 41,
            "Query": "3 * 7 + 7 * 2 * 1 * 1 - 1 + 7 =   ",
            "Injected CoT": "3 * 7 = 21\n7 * 2 = 14\n14 * 0 = 14\n14 * 0 = 14\n21 + 14 = 35\n35 - 0 = 34\n34 + 7 =",
            "Response": " 41\n\n41 is the answer.",
            "Extract-Response": " 41.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, result = 0, sign = 1;\n\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n\n        if(str[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(str[i] == '*')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '/')\n        {\n            sign = -1;\n        }\n        else if(str[i] == '%')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '^')\n        {\n            sign = -1;\n        }\n        else if(str[i] == '=')\n        {\n            break;\n        }\n        else\n        {\n            result = (result * 10) + (str[i] - '0');\n        }\n    }\n\n    printf(\"The answer is %d.\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 238,
            "GT": 14,
            "Query": "1 * 3 + 8 + 8 + 2 - 5 + 3 - 5 =   ",
            "Injected CoT": "1 * 3 = 3\n3 + 8 = 11\n11 + 8 = 18\n18 + 2 = 21\n21 - 5 = 16\n16 + 3 = 18\n18 - 5 =",
            "Response": " 13",
            "Extract-Response": "\n\n13"
        },
        {
            "Index": 239,
            "GT": -13422,
            "Query": "9 + 9 - 7 * 8 * 6 * 2 * 5 * 4 =   ",
            "Injected CoT": "-7 * 8 = -56\n-56 * 6 = -336\n-336 * 2 = -671\n-671 * 5 = -3360\n-3360 * 4 = -13440\n9 + 9 = 18\n18 - 13440 =",
            "Response": " -13422",
            "Extract-Response": " -13422\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9;\n    int sum;\n\n    printf(\"Enter 9 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 240,
            "GT": 81,
            "Query": "7 * 9 - 1 + 4 - 3 + 8 + 6 + 4 =   ",
            "Injected CoT": "7 * 9 = 63\n63 - 1 = 62\n62 + 4 = 65\n65 - 3 = 63\n63 + 8 = 71\n71 + 6 = 77\n77 + 4 =",
            "Response": " 81",
            "Extract-Response": "\n\n81"
        },
        {
            "Index": 242,
            "GT": 62,
            "Query": "8 + 7 + 4 + 7 * 5 * 1 + 7 + 1 =   ",
            "Injected CoT": "5 * 1 = 5\n7 * 5 = 35\n8 + 7 = 15\n15 + 3 = 19\n19 + 35 = 54\n54 + 7 = 61\n61 + 1 =",
            "Response": " 62\n\n62\n\n*/",
            "Extract-Response": " 62."
        },
        {
            "Index": 243,
            "GT": 23,
            "Query": "7 + 8 + 4 - 4 + 1 - 2 + 1 + 8 =   ",
            "Injected CoT": "7 + 8 = 15\n15 + 4 = 19\n19 - 4 = 15\n15 + 0 = 16\n16 - 2 = 14\n14 + 0 = 15\n15 + 8 =",
            "Response": " 23\n\n23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 244,
            "GT": -35,
            "Query": "2 - 4 - 5 - 9 - 2 * 9 - 7 + 6 =   ",
            "Injected CoT": "2 * 9 = 18\n-4 - 5 = -8\n-8 - 9 = -18\n-18 - 7 = -25\n-25 + 6 =",
            "Response": " -19",
            "Extract-Response": " -19.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 245,
            "GT": 29,
            "Query": "5 + 6 - 5 + 5 + 9 + 4 + 3 + 2 =   ",
            "Injected CoT": "5 + 6 = 11\n11 - 5 = 6\n6 + 5 = 11\n11 + 8 = 20\n20 + 4 = 24\n24 + 3 = 27\n27 + 2 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n,i,j,k,l,m,a,b,c,d,e,f,g,h,s;\n    char ch[100];\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch);\n        s=0;\n        for(j=0;ch[j]!='\\0';j++)\n        {\n            if(ch[j]=='1')\n            {\n                s=s+2;\n            }\n            else if(ch[j]=='2')\n            {\n                s=s+5;\n            }\n            else if(ch[j]=='3')\n            {\n                s=s+5;\n            }\n            else if(ch[j]=='4')\n            {\n                s=s+4;\n            }\n            else if(ch[j]=='5')\n            {\n                s=s+5;\n            }\n            else if(ch[j]=='6')\n            {\n                s=s+6;\n            }\n            else if(ch[j]=='7')\n            {\n                s=s+3;\n            }\n            else if(ch[j]=='8')\n            {\n                s=s+7;\n            }\n            else if(ch[j]=='9')\n            {\n                s=s+6;\n            }\n            else if(ch[j]=='0')\n            {\n                s=s+6;\n            }\n        }\n        printf(\"%d leds\\n\",s);\n    }\n    return 0;\n}"
        },
        {
            "Index": 246,
            "GT": 68,
            "Query": "9 * 8 - 2 * 4 - 4 + 1 + 7 * 1 =   ",
            "Injected CoT": "9 * 8 = 72\n2 * 4 = 8\n6 * 1 = 6\n72 - 8 - 4 + 1 + 6 =",
            "Response": " 71",
            "Extract-Response": " 71.\n\nNote:\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n*/\n\nclass Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n        for (string str : strs) {\n            int zeros = 0, ones = 0;\n            for (char ch : str) {\n                if (ch == '0') zeros++;\n                else ones++;\n            }\n            for (int i = m; i >= zeros; i--) {\n                for (int j = n; j >= ones; j--) {\n                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};"
        },
        {
            "Index": 247,
            "GT": 66,
            "Query": "9 - 5 + 5 * 5 * 2 + 3 * 3 + 3 =   ",
            "Injected CoT": "4 * 4 = 25\n25 * 2 = 50\n3 * 3 = 9\n9 + 3 = 12\n9 - 4 = 4\n4 + 50 = 54\n54 + 12 = 66\n66 + 3 =",
            "Response": " 69\n69 + 4 = 73\n\n73\n\n*/",
            "Extract-Response": " 73."
        },
        {
            "Index": 248,
            "GT": 73,
            "Query": "8 * 5 + 4 - 7 + 7 * 6 - 2 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n40 + 4 = 45\n7 * 6 = 42\n45 + 42 = 86\n86 - 2 = 84\n84 - 4 =",
            "Response": " 80",
            "Extract-Response": " 80\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', add the previously stored number to result\n     * If current character is '-', subtract the previously stored number from result\n     * If current character is '*', multiply the previously stored number with result\n     * If current character is '/', divide the previously stored number with result\n     * If current character is '%', take modulus using the previously stored number and result\n     * If current character is '^', raise power using the previously stored number and result\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add the previously stored number to result */\n        if(str[i] == '+')\n        {\n            result = result + num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '-', subtract the previously stored number from result */\n        else if(str[i] == '-')\n        {\n            result = result + num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '*', multiply the previously stored number with result */\n        else if(str[i] == '*')\n        {\n            result = result * num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '/', divide the previously stored number with result */\n        else if(str[i] == '/')\n        {\n            result = result / num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '%', take modulus using the previously stored number and result */\n        else if(str[i] == '%')\n        {\n            result = result % num;\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is '^', raise power using the previously stored number and result */\n        else if(str[i] == '^')\n        {\n            result = pow(result, num);\n\n            /* If next character is '+', then update sign as 1 */\n            if(str[i+1] == '+')\n            {\n                sign = 1;\n            }\n            /* If next character is '-', then update sign as -1 */\n            else if(str[i+1] == '-')\n            {\n                sign = -1;\n            }\n            /* If next character is not any operator, then reset sign to 1 */\n            else\n            {\n                sign = 1;\n            }\n\n            /* Reset number to 0 */\n            num = 0;\n        }\n        /* If current character is a number */\n        else\n        {\n            /* Convert character to integer and store it in num */\n            num = num * 10 + (str[i] - '0');\n        }\n    }\n\n    /* If num is not equal to 0, then add it to result */\n    if(num != 0)\n    {\n        result = result + (sign * num);\n    }\n\n    printf(\"Result = %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 249,
            "GT": 69,
            "Query": "1 * 8 + 8 + 4 * 2 * 7 - 8 + 5 =   ",
            "Injected CoT": "1 * 7 = 7\n4 * 2 = 7\n7 * 7 = 56\n7 + 7 = 16\n56 + 16 = 72\n72 - 7 = 64\n64 + 5 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n\n    /*\n     * Reads and stores the string into an array\n     */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n    sum = 0;\n\n    for(i=0; i<len; i++)\n    {\n        /*\n         * If the current character is '+' or '-' sign,\n         * then simply add the next digit\n         */\n        if(str[i]=='+' || str[i]=='-')\n        {\n            sum = sum + (str[i+1] - '0');\n        }\n        else\n        {\n            /*\n             * If the current character is '*' or '/' sign,\n             * then multiply the next digit with the current sum\n             */\n            if(str[i]=='*' || str[i]=='/')\n            {\n                sum = sum * (str[i+1] - '0');\n            }\n            else\n            {\n                /*\n                 * If the current character is '^' sign,\n                 * then calculate the power with the next digit\n                 */\n                if(str[i]=='^')\n                {\n                    sum = pow(sum, (str[i+1] - '0'));\n                }\n            }\n        }\n    }\n\n    printf(\"The answer is %d\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 250,
            "GT": -13,
            "Query": "2 + 4 - 4 * 1 * 1 + 3 - 6 * 3 =   ",
            "Injected CoT": "4 * 1 = 4\n2 + 4 = 6\n6 - 4 = 2\n2 + 2 = 5\n6 * 2 = 18\n5 - 18 =",
            "Response": " -13\n-13 + 3 = -10\n-10 - 6 * 3 = -24\n\n-24 is the final answer.",
            "Extract-Response": " -24.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s"
        },
        {
            "Index": 251,
            "GT": 1023,
            "Query": "3 * 1 + 2 * 8 * 8 * 8 - 6 + 2 =   ",
            "Injected CoT": "3 * 1 = 3\n8 * 8 = 64\n64 * 8 = 511\n2 * 511 = 1024\n3 + 1024 = 1027\n1027 - 6 = 1021\n1021 + 2 =",
            "Response": " 1023\n\n1023\n*/",
            "Extract-Response": " 1023.\n\nNote:\n\nThe range of positive integers in the given input is [1, 10^6].\nThe answer will be in the range of 32-bit signed integer.\n\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n        int count = 0;\n        while(m != n){\n            m >>= 1;\n            n >>= 1;\n            count++;\n        }\n        return m << count;\n    }\n};"
        },
        {
            "Index": 252,
            "GT": -2,
            "Query": "3 - 5 * 6 + 2 * 8 + 7 - 1 + 3 =   ",
            "Injected CoT": "-5 * 6 = -30\n3 - (-30) = 33\n2 * 8 = 16\n8 + 16 = 23\n23 - 1 = 22\n22 + 3 =",
            "Response": " 25",
            "Extract-Response": "\n\n25"
        },
        {
            "Index": 253,
            "GT": -199,
            "Query": "8 + 7 * 2 - 9 * 6 * 4 * 1 - 5 =   ",
            "Injected CoT": "7 * 2 = 14\n9 * 6 = 54\n54 * 4 = 216\n216 * 0 = 216\n8 + 14 = 22\n22 - 216 = -194\n-194 - 5 =",
            "Response": " -199",
            "Extract-Response": " -199\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, j, n, sum = 0;\n    scanf(\"%s\", s);\n    n = strlen(s);\n    for (i = 0; i < n; i++)\n    {\n        if (s[i] == '+')\n        {\n            continue;\n        }\n        else if (s[i] == '-')\n        {\n            for (j = i + 1; j < n; j++)\n            {\n                sum = sum * 10 + s[j] - '0';\n            }\n            break;\n        }\n        else\n        {\n            sum = sum * 10 + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 254,
            "GT": 76,
            "Query": "7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 =   ",
            "Injected CoT": "7 * 3 = 21\n6 * 6 = 36\n6 * 1 = 6\n21 + 9 = 29\n29 + 36 = 65\n65 + 6 = 71\n71 + 5 =",
            "Response": " 76\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 76",
            "Extract-Response": "\n\n7 * 3 + 8 + 6 * 6 + 6 * 1 + 5 = 76"
        },
        {
            "Index": 255,
            "GT": 96,
            "Query": "6 * 4 + 8 - 1 * 8 + 4 * 3 * 6 =   ",
            "Injected CoT": "6 * 5 = 24\n24 + 8 = 32\n1 * 8 = 8\n5 * 3 = 12\n12 * 6 = 72\n32 - 8 = 24\n24 + 72 =",
            "Response": " 96\n\n96",
            "Extract-Response": "\n\n96"
        },
        {
            "Index": 258,
            "GT": 176,
            "Query": "6 + 1 + 3 * 7 * 7 + 9 + 8 + 5 =   ",
            "Injected CoT": "3 * 8 = 21\n8 * 21 = 147\n6 + 1 = 8\n147 + 8 = 154\n154 + 9 = 163\n163 + 8 = 171\n171 + 5 =",
            "Response": " 176\n\n3 * 8 = 24\n24 * 8 = 192\n6 + 1 = 7\n192 + 7 = 199\n199 + 8 = 207\n207 + 9 = 216\n216 + 8 = 224\n224 + 5 = 229\n\n3 * 8 = 24\n24 * 8 = 192\n6 + 1 = 7\n192 + 7 = 199\n199 + 8 = 207\n207 + 9 = 216\n216 + 8 = 224\n224 + 5 = 229\n\n3 * 8 = 24\n24 * 8 = 192\n6 + 1 = 7\n192 + 7 = 199\n199 + 8 = 207\n207 + 9 = 216\n216 + 8 = 224\n224 + 5 = 229\n\n3 * 8 = 24\n24 * 8 = 192\n6 + 1 = 7\n192 + 7 = 199\n199 + 8 = 207\n207 + 9 = 216\n216 + 8 = 224\n224 + 5 = 229\n\n3 * 8 = 24\n24 * 8 = 192\n6 + 1 = 7\n192 + 7 = 199\n199 + 8 = 207\n207 + 9 = 216\n216 + 8 = 224\n224 + 5 = 229",
            "Extract-Response": "\n\n3 * 8 = 24\n24 * 8 = 192\n6 + 1 = 7\n192 + 7 = 199\n199 + 8 = 207\n207 + 9 = 216\n216 + 8 = 224\n224 + 5 = 229"
        },
        {
            "Index": 259,
            "GT": -78,
            "Query": "8 * 4 + 6 - 5 - 5 * 8 * 3 + 9 =   ",
            "Injected CoT": "8 * 4 = 32\n32 + 6 = 38\n5 * 8 = 40\n40 * 2 = 120\n38 - 5 = 33\n33 - 120 = -87\n-87 + 9 =",
            "Response": " -78",
            "Extract-Response": " -78.\n\nNote:\n\nThe expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, cur = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c == ' ') continue;\n            if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * st.top() + st.top() * cur;\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};"
        },
        {
            "Index": 260,
            "GT": 1,
            "Query": "4 * 7 - 4 - 3 * 4 - 3 * 4 + 1 =   ",
            "Injected CoT": "3 * 7 = 28\n28 - 3 = 24\n3 * 3 = 12\n3 * 3 = 12\n12 + 12 = 24\n24 - 3 = 21\n21 + 1 =",
            "Response": " 22\n\n22",
            "Extract-Response": " 22."
        },
        {
            "Index": 261,
            "GT": 49,
            "Query": "8 + 7 * 2 * 1 + 1 * 5 * 4 + 7 =   ",
            "Injected CoT": "7 * 2 = 14\n14 * 0 = 14\n8 + 14 = 22\n0 * 5 = 5\n5 * 4 = 20\n14 + 20 = 34\n34 + 7 =",
            "Response": " 41\n\n41\n\n*/",
            "Extract-Response": "\n\n41"
        },
        {
            "Index": 262,
            "GT": 36,
            "Query": "8 * 2 - 6 - 3 + 8 + 4 * 5 + 1 =   ",
            "Injected CoT": "7 * 2 = 16\n16 - 6 = 10\n10 - 3 = 7\n7 + 7 = 15\n4 * 5 = 20\n15 + 20 = 35\n35 + 1 =",
            "Response": " 36",
            "Extract-Response": "\n36\n"
        },
        {
            "Index": 265,
            "GT": 29,
            "Query": "6 * 6 + 6 + 1 - 9 - 3 - 9 + 7 =   ",
            "Injected CoT": "6 * 6 = 36\n36 + 6 = 42\n42 + 1 = 43\n43 - 10 = 34\n34 - 3 = 31\n31 - 10 = 22\n22 + 7 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int sum;\n\n    a = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    b = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    c = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    d = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    e = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    f = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    g = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    h = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    i = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    j = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    k = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    l = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    m = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    n = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    o = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    p = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    q = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    r = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    s = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    t = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    u = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    v = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    w = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    x = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    y = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n    z = 6 * 6 + 6 + 1 - 9 - 3 - 9 + 7;\n\n    sum = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 266,
            "GT": 153,
            "Query": "3 * 4 * 2 * 8 - 4 * 3 - 3 * 9 =   ",
            "Injected CoT": "3 * 5 = 12\n12 * 2 = 24\n24 * 8 = 192\n5 * 3 = 12\n3 * 9 = 27\n12 - 12 = 0\n192 - 27 =",
            "Response": " 165",
            "Extract-Response": " 165\n</code>\n"
        },
        {
            "Index": 267,
            "GT": 85,
            "Query": "1 + 5 + 6 - 3 * 2 + 9 * 8 + 7 =   ",
            "Injected CoT": "1 + 5 = 6\n6 + 6 = 12\n3 * 2 = 6\n10 * 8 = 72\n12 - 6 = 6\n6 + 72 = 78\n78 + 7 =",
            "Response": " 85",
            "Extract-Response": "\n\n85"
        },
        {
            "Index": 268,
            "GT": -18,
            "Query": "4 - 9 - 3 * 3 + 4 - 6 + 7 - 9 =   ",
            "Injected CoT": "3 * 3 = 9\n4 - 9 = -5\n-5 - 9 = -13\n-13 + 4 = -10\n-10 - 6 = -16\n-16 + 7 = -9\n-9 - 9 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, sign = 1;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            continue;\n        }\n        if(s[i] == '+')\n        {\n            sign = 1;\n            continue;\n        }\n        if(s[i] == '-')\n        {\n            sign = -1;\n            continue;\n        }\n        sum = sum * 10 + s[i] - '0';\n    }\n    printf(\"The answer is %d\", sum * sign);\n    return 0;\n}"
        },
        {
            "Index": 269,
            "GT": 1144,
            "Query": "4 * 8 * 6 * 6 + 1 - 8 * 1 - 1 =   ",
            "Injected CoT": "4 * 8 = 32\n32 * 6 = 192\n192 * 6 = 1153\n1153 + 1 = 1153\n8 * 1 = 8\n1153 - 8 = 1145\n1145 - 1 =",
            "Response": " 1144\n\n1144\n\n*/",
            "Extract-Response": "\n\n1144"
        },
        {
            "Index": 273,
            "GT": -10,
            "Query": "2 - 5 * 8 - 5 + 8 - 5 + 5 * 6 =   ",
            "Injected CoT": "5 * 8 = 40\n2 - 40 = -38\n-38 - 5 = -43\n-43 + 8 = -36\n-36 - 5 = -40\n-40 + 5 = -36\n5 * 6 = 30\n-36 + 30 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleExpression(a):\n    # Write your code here\n    return sum(a) - sum(a[::2])"
        },
        {
            "Index": 274,
            "GT": 5,
            "Query": "4 - 1 + 1 + 8 - 5 - 2 * 2 + 2 =   ",
            "Injected CoT": "2 * 2 = 3\n3 - 1 = 3\n3 + 1 = 3\n3 + 8 = 12\n12 - 5 = 7\n7 - 3 = 3\n3 + 2 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 277,
            "GT": -638,
            "Query": "9 + 6 + 4 - 9 - 9 * 3 * 4 * 6 =   ",
            "Injected CoT": "9 + 6 = 15\n15 + 4 = 19\n9 * 3 = 28\n28 * 4 = 108\n108 * 6 = 648\n19 - 648 =",
            "Response": " -629",
            "Extract-Response": " -629\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20, a20, b20, c20, d20, e20, f20, g20, h20, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25,"
        },
        {
            "Index": 278,
            "GT": 47627,
            "Query": "3 * 6 * 3 * 6 * 7 * 3 * 7 - 1 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 3 = 54\n54 * 6 = 325\n325 * 7 = 2268\n2268 * 3 = 6804\n6804 * 7 = 47628\n47628 - 1 =",
            "Response": " 47627\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int n, i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24;\n   ",
            "Extract-Response": "\n\n}"
        },
        {
            "Index": 280,
            "GT": -16,
            "Query": "8 + 7 + 6 + 2 - 3 * 8 - 8 - 7 =   ",
            "Injected CoT": "3 * 8 = 24\n8 + 7 = 15\n15 + 6 = 20\n20 + 2 = 23\n24 - 23 = 1\n1 - 8 = -7\n-7 - 7 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between [3, 104].\nEvery integer in the input array will be between [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 283,
            "GT": 9,
            "Query": "7 + 7 + 6 - 5 - 4 * 4 + 6 + 4 =   ",
            "Injected CoT": "4 * 4 = 16\n7 + 7 = 14\n14 + 6 = 21\n21 - 5 = 15\n15 - 16 = -1\n-1 + 6 = 5\n5 + 4 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 285,
            "GT": 10,
            "Query": "4 * 9 - 5 - 7 + 2 * 1 - 8 - 8 =   ",
            "Injected CoT": "4 * 9 = 36\n36 - 5 = 31\n31 - 7 = 24\n3 * 1 = 3\n24 + 3 = 26\n26 - 8 = 18\n18 - 8 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 286,
            "GT": 1973,
            "Query": "4 * 9 * 7 * 8 - 8 * 2 - 3 * 9 =   ",
            "Injected CoT": "4 * 9 = 36\n36 * 7 = 252\n252 * 9 = 2016\n9 * 2 = 16\n3 * 9 = 27\n2016 - 16 = 2000\n2000 - 27 =",
            "Response": " 1973",
            "Extract-Response": " 1973\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char num[MAX_SIZE];\n    int len, i, j, temp, result;\n\n    while(1){\n        gets(num);\n        if(num[0] == '0')\n            break;\n\n        len = strlen(num);\n        result = 0;\n\n        for(i=0, j=len-1; i<len; i++, j--){\n            temp = num[i] - '0';\n            result += temp * (pow(2, j) - 1);\n        }\n\n        printf(\"%d\\n\", result);\n    }\n\n    return 0;\n}"
        },
        {
            "Index": 287,
            "GT": 23,
            "Query": "4 * 7 - 9 + 8 + 9 - 8 - 4 - 1 =   ",
            "Injected CoT": "4 * 7 = 28\n28 - 8 = 19\n19 + 8 = 27\n27 + 8 = 36\n36 - 8 = 28\n28 - 4 = 24\n24 - 1 =",
            "Response": " 23",
            "Extract-Response": "\n\n23"
        },
        {
            "Index": 288,
            "GT": 537,
            "Query": "7 * 3 * 7 * 4 + 9 - 6 * 9 - 6 =   ",
            "Injected CoT": "7 * 3 = 21\n21 * 7 = 147\n147 * 4 = 587\n587 + 9 = 597\n6 * 9 = 54\n597 - 54 = 543\n543 - 6 =",
            "Response": " 537",
            "Extract-Response": " 537\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int bracket = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '(') {\n            ++bracket;\n        } else if (s[i] == ')') {\n            --bracket;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            number = 0;\n            sign = -1;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 290,
            "GT": -18,
            "Query": "5 + 7 - 7 * 5 + 6 + 8 - 1 - 8 =   ",
            "Injected CoT": "7 * 5 = 35\n5 + 7 = 12\n12 - 35 = -22\n-22 + 6 = -17\n-17 + 8 = -9\n-9 - 1 = -10\n-10 - 8 =",
            "Response": " -18",
            "Extract-Response": " -18\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, n, a, b, c, d, e, f, g, h, j, k, l, m, o, p, q, r, t, u, v, w, x, y, z;\n    int sum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    int sum5 = 0;\n    int sum6 = 0;\n    int sum7 = 0;\n    int sum8 = 0;\n    int sum9 = 0;\n    int sum10 = 0;\n    int sum11 = 0;\n    int sum12 = 0;\n    int sum13 = 0;\n    int sum14 = 0;\n    int sum15 = 0;\n    int sum16 = 0;\n    int sum17 = 0;\n    int sum18 = 0;\n    int sum19 = 0;\n    int sum20 = 0;\n    int sum21 = 0;\n    int sum22 = 0;\n    int sum23 = 0;\n    int sum24 = 0;\n    int sum25 = 0;\n    int sum26 = 0;\n    int sum27 = 0;\n    int sum28 = 0;\n    int sum29 = 0;\n    int sum30 = 0;\n    int sum31 = 0;\n    int sum32 = 0;\n    int sum33 = 0;\n    int sum34 = 0;\n    int sum35 = 0;\n    int sum36 = 0;\n    int sum37 = 0;\n    int sum38 = 0;\n    int sum39 = 0;\n    int sum40 = 0;\n    int sum41 = 0;\n    int sum42 = 0;\n    int sum43 = 0;\n    int sum44 = 0;\n    int sum45 = 0;\n    int sum46 = 0;\n    int sum47 = 0;\n    int sum48 = 0;\n    int sum49 = 0;\n    int sum50 = 0;\n    int sum51 = 0;\n    int sum52 = 0;\n    int sum53 = 0;\n    int sum54 = 0;\n    int sum55 = 0;\n    int sum56 = 0;\n    int sum57 = 0;\n    int sum58 = 0;\n    int sum59 = 0;\n    int sum60 = 0;\n    int sum61 = 0;\n    int sum62 = 0;\n    int sum63 = 0;\n    int sum64 = 0;\n    int sum65 = 0;\n    int sum66 = 0;\n    int sum67 = 0;\n    int sum68 = 0;\n    int sum69 = 0;\n    int sum70 = 0;\n    int sum71 = 0;\n    int sum72 = 0;\n    int sum73 = 0;\n    int sum74 = 0;\n    int sum75 = 0;\n    int sum76 = 0;\n    int sum77 = 0;\n    int sum78 = 0;\n    int sum79 = 0;\n    int sum80 = 0;\n    int sum81 = 0;\n    int sum82 = 0;\n    int sum83 = 0;\n    int sum84 = 0;\n    int sum85 = 0;\n    int sum86 = 0;\n    int sum87 = 0;\n    int sum88 = 0;\n    int sum89 = 0;\n    int sum90 = 0;\n    int sum91 = 0;\n    int sum92 = 0;\n    int sum93 = 0;\n    int sum94 = 0;\n    int sum95 = 0;\n    int sum96 = 0;\n    int sum97 = 0;\n    int sum98 = 0;\n    int sum99 = 0;\n    int sum100 = 0;\n    int sum101 = 0;\n    int sum102 = 0;\n    int sum103 = 0;\n    int sum104 = 0;\n    int sum105 = 0;\n    int sum106 = 0;\n    int sum107 = 0;\n    int sum108 = 0;\n    int sum109 = 0;\n    int sum110 = 0;\n    int sum111 = 0;\n    int sum112 = 0;\n    int sum113 = 0;\n    int sum114 = 0;\n    int sum115 = 0;\n    int sum116 = 0;\n    int sum117 = 0;\n    int sum118 = 0;\n    int sum119 = 0;\n    int sum120 = 0;\n    int sum121 = 0;\n    int sum122 = 0;\n    int sum123 = 0;\n    int sum124 = 0;\n    int sum125 = 0;\n    int sum126 = 0;\n    int sum127 = 0;\n    int sum128 = 0;\n    int sum129 = 0;\n    int sum130 = 0;\n    int sum131 = 0;\n    int sum132 = 0;\n    int sum133 = 0;\n    int sum134 = 0;\n    int sum135 = 0;\n    int sum136 = 0;\n    int sum137 = 0;\n    int sum138 = 0;\n    int sum139 = 0;\n    int sum140 = 0;\n    int sum141 = 0;\n    int sum142 = 0;\n    int sum143 = 0;\n    int sum144 = 0;\n    int sum145 = 0;\n    int sum146 = 0;\n    int sum147 = 0;\n    int sum148 = 0;\n    int sum149 = 0;\n    int sum150 = 0;\n    int sum151 = 0;\n    int sum152 = 0;\n    int sum153 = 0;\n    int sum154 = 0;\n    int sum155 = 0;\n    int sum156 = 0;\n    int sum157 = 0;\n    int sum158 = 0;\n    int sum159 = 0;\n    int sum160 = 0;\n    int sum161 = 0;\n    int sum162 = 0;\n    int sum163 = 0;\n    int sum164 = 0;\n    int sum165 = 0;\n    int sum166 = 0;\n    int sum167 = 0;\n    int sum168 = 0;\n    int sum169 = 0;\n    int sum170 = 0;\n    int sum171 = 0;\n    int sum172 = 0;\n    int sum173 = 0;\n    int sum174 = 0;\n    int sum175 = 0;\n    int sum176 = 0;\n    int sum177 = 0;\n    int sum178 = 0;\n    int sum179 = 0;\n    int sum180 = 0;\n    int sum181 = 0;\n    int sum182 = 0;\n    int sum183 = 0;\n    int sum184 = 0;\n    int sum185 = 0;\n    int sum186 = 0;\n    int sum187 = 0;\n    int sum188 = 0;\n    int sum189 = 0;\n    int sum190 = 0;\n    int sum191 = 0;\n    int sum192 = 0;\n    int sum193 = 0;\n    int sum194 = 0;\n    int sum195 = 0;\n    int sum196 = 0;\n    int sum197 = 0;\n    int sum198 = 0;\n    int sum199 = 0;\n    int sum200 = 0;\n    int sum201 = 0;\n    int sum202 = 0;\n    int sum203 = 0;\n    int sum204 = 0;\n    int sum205 = 0;\n    int sum206 = 0;\n    int sum207 = 0;\n    int sum208 = 0;\n    int sum209 = 0;\n    int sum210 = 0;\n    int sum211 = 0;\n    int sum212 = 0;\n    int sum213 = 0;\n    int sum214 = 0;\n    int sum215 = 0;\n    int sum216 = 0;\n    int sum217 = 0;\n    int sum218 = 0;\n    int sum219 = 0;\n    int sum220 = 0;\n    int sum221 = 0;\n    int sum222 = 0;\n    int sum223 = 0;\n    int sum224 = 0;\n    int sum225 = 0;\n    int sum226 = 0;\n    int sum227 = 0;\n    int sum228 = 0;\n    int sum229 = 0;\n    int sum230 = 0;\n    int sum231 = 0;\n    int sum232 = 0;\n    int sum233 = 0;\n    int sum234 = 0;\n    int sum235 = 0;\n    int sum236 ="
        },
        {
            "Index": 292,
            "GT": 65,
            "Query": "9 * 6 - 9 + 9 + 1 + 5 - 4 + 9 =   ",
            "Injected CoT": "9 * 6 = 53\n53 - 9 = 45\n45 + 9 = 53\n53 + 1 = 55\n55 + 5 = 60\n60 - 4 = 56\n56 + 9 =",
            "Response": " 65",
            "Extract-Response": " 65\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 293,
            "GT": 32,
            "Query": "5 + 5 + 2 - 4 + 8 + 9 + 4 + 3 =   ",
            "Injected CoT": "5 + 5 = 10\n10 + 2 = 12\n12 - 4 = 7\n7 + 7 = 16\n16 + 9 = 25\n25 + 4 = 29\n29 + 3 =",
            "Response": " 32",
            "Extract-Response": " 32\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10;\n    int sum;\n\n    printf(\"Enter 10 integers: \");\n    scanf(\"%d %d %d %d %d %d %d %d %d %d\", &num1, &num2, &num3, &num4, &num5, &num6, &num7, &num8, &num9, &num10);\n\n    sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;\n\n    printf(\"Sum of all integers = %d\\n\", sum);\n\n    return 0;\n}"
        },
        {
            "Index": 294,
            "GT": -26,
            "Query": "3 - 5 * 6 - 9 - 3 + 2 + 7 + 4 =   ",
            "Injected CoT": "-5 * 6 = -30\n3 - (-30) = 33\n33 - 9 = 25\n25 - 3 = 21\n21 + 2 = 23\n23 + 7 = 30\n30 + 4 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n#define LL long long\n#define VI vector<int>\n#define VLL vector<long long>\n#define VDD vector<double>\n#define PB push_back\n#define sz(v) (int)v.size()\n#define INF 1000000000\n\nvoid print_vi(VI v) {\n    for (int i = 0; i < sz(v); ++i) {\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n}\n\nint N;\nstring s;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.precision(10);\n\n    cin >> s;\n    N = sz(s);\n\n    int ans = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < N; ++i) {\n        if (s[i] == '+') {\n            ans += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    ans += sign * curr;\n    cout << ans << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 295,
            "GT": 21,
            "Query": "2 - 9 + 3 - 9 + 8 * 4 + 8 - 6 =   ",
            "Injected CoT": "8 * 4 = 32\n-9 + 3 = -6\n-6 - 9 = -15\n-15 + 1 = -13\n-13 + 32 = 19\n19 + 8 = 27\n27 - 6 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int currentNumber = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 297,
            "GT": 33,
            "Query": "9 + 9 + 3 + 5 + 8 * 1 + 1 - 2 =   ",
            "Injected CoT": "8 * 1 = 8\n9 + 9 = 18\n18 + 3 = 22\n22 + 5 = 26\n26 + 8 = 34\n34 + 1 = 35\n35 - 2 =",
            "Response": " 33",
            "Extract-Response": " 33\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            continue;\n        }\n        else if(s[i] == '-')\n        {\n            continue;\n        }\n        else if(s[i] == '*')\n        {\n            continue;\n        }\n        else if(s[i] == '/')\n        {\n            continue;\n        }\n        else if(s[i] == '%')\n        {\n            continue;\n        }\n        else if(s[i] == '=')\n        {\n            continue;\n        }\n        else if(s[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + s[i] - '0';\n        }\n    }\n    printf(\"The answer is  %d\", sum);\n    return 0;\n}"
        },
        {
            "Index": 298,
            "GT": 73,
            "Query": "8 + 4 * 6 - 1 + 7 * 6 - 7 + 7 =   ",
            "Injected CoT": "4 * 6 = 24\n8 + 24 = 32\n8 * 6 = 42\n1 - 8 = -6\n42 + (-6) = 36\n36 + 8 = 43\n32 + 43 =",
            "Response": " 75\n\n75 + 7 = 82\n\n82 + 7 = 89\n\n89 + 6 = 95\n\n95 - 7 = 88\n\n88 - 7 = 81\n\n81 - 6 = 75\n\n75 - 7 = 68\n\n68 - 7 = 61\n\n61 - 6 = 55\n\n55 - 7 = 48\n\n48 - 7 = 41\n\n41 - 6 = 35\n\n35 - 7 = 28\n\n28 - 7 = 21\n\n21 - 6 = 15\n\n15 - 7 = 8\n\n8 - 7 = 1",
            "Extract-Response": " 1\n\n*/"
        },
        {
            "Index": 300,
            "GT": 1113,
            "Query": "6 + 6 * 6 - 9 + 4 * 9 * 5 * 6 =   ",
            "Injected CoT": "6 * 6 = 37\n37 + 6 = 42\n4 * 9 = 37\n37 * 5 = 180\n180 * 6 = 1080\n1080 + 42 = 1122\n1122 - 9 =",
            "Response": " 1113\n1113 + 4 = 1117",
            "Extract-Response": " 1117\n\n*/\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <set>\n#include <iomanip>\n#include <list>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <numeric>\n\n#include <cstdio>\n#include <cmath>\n#include <climits>\n#include <cstring>\n#include <cctype>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nconst int oo = (int)1e9;\nconst double eps = 1e-9;\n\n#define fill(a,x) memset(a, (x), sizeof(a))\n#define trace(x) cout << #x << \": \" << x << endl;\n#define trace2(x, y) cout << #x << \": \" << x << \" | \" << #y << \": \" << y << endl;\n\nint main() {\n  int n;\n  while(cin>>n && n) {\n    int sum = n;\n    while(n>9) {\n      int t = n;\n      n = 0;\n      while(t) {\n        n += t%10;\n        t /= 10;\n      }\n      sum += n;\n    }\n    cout<<sum<<endl;\n  }\n\treturn 0;\n}"
        },
        {
            "Index": 302,
            "GT": 39,
            "Query": "5 * 9 - 1 + 1 * 3 + 4 - 3 * 4 =   ",
            "Injected CoT": "5 * 9 = 45\n45 - 1 = 44\n1 * 2 = 2\n44 + 2 = 47\n4 - 2 = 1\n2 * 4 = 12\n47 - 12 =",
            "Response": " 35\n\n35",
            "Extract-Response": " 35"
        },
        {
            "Index": 303,
            "GT": 116,
            "Query": "2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 6 = 120\n2 + 120 = 121\n121 * 1 = 121\n121 + 9 = 131\n131 - 6 = 125\n125 - 9 =",
            "Response": " 116\n\n2 + 4 * 5 * 6 * 1 + 9 - 6 - 9 = 116",
            "Extract-Response": " 116"
        },
        {
            "Index": 304,
            "GT": -67,
            "Query": "6 - 1 + 1 - 7 + 1 - 8 * 8 - 3 =   ",
            "Injected CoT": "8 * 8 = 64\n-1 = -1\n0 = 0\n-7 = -7\n0 = 0\n-8 * 64 = -512\n-3 = -3\n6 + (-1) + 0 + (-7) + 0 + (-512) + (-3) =",
            "Response": " -517",
            "Extract-Response": " -517\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0, sign = 1;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            continue;\n        }\n        else if(str[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(str[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n            for(j = i; j < len; j++)\n            {\n                if(str[j] >= '0' && str[j] <= '9')\n                {\n                    num = num * 10 + (str[j] - '0');\n                    i++;\n                }\n                else\n                {\n                    break;\n                }\n            }\n            sum = sum + sign * num;\n        }\n    }\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/"
        },
        {
            "Index": 305,
            "GT": -63,
            "Query": "9 - 9 - 7 * 6 * 2 + 4 * 4 + 5 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 2 = 84\n9 - 9 = -1\n84 - -1 = 84\n4 * 4 = 16\n84 + 16 = 100\n100 + 5 =",
            "Response": " 105",
            "Extract-Response": "\n\n105"
        },
        {
            "Index": 306,
            "GT": 20,
            "Query": "9 * 4 - 8 + 1 - 6 - 8 + 1 + 4 =   ",
            "Injected CoT": "9 * 4 = 36\n36 - 8 = 28\n28 + 1 = 29\n29 - 5 = 23\n23 - 8 = 15\n15 + 1 = 16\n16 + 4 =",
            "Response": " 20\n\n20\n\n*/",
            "Extract-Response": "\n\n20"
        },
        {
            "Index": 307,
            "GT": 34,
            "Query": "6 * 9 - 4 + 9 + 7 - 2 * 2 * 8 =   ",
            "Injected CoT": "6 * 9 = 53\n2 * 2 = 4\n4 * 8 = 32\n53 - 4 = 50\n50 + 9 = 59\n59 + 7 = 66\n66 - 32 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define inf 1061109567\n#define infll 4000000000000000000LL\n#define eps 1e-9\n#define pi acos(-1)\n#define F first\n#define S second\n#define pb push_back\n\nint main(){\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    int sign = 1;\n    for (int i=0;i<n;++i){\n        if (s[i]=='+' || s[i]=='-'){\n            ans += sign*cur;\n            cur = 0;\n            sign = (s[i]=='+')?1:-1;\n        }\n        else if (s[i]=='*'){\n            int j = i+1;\n            while (j<n && s[j]>='0' && s[j]<='9')\n                ++j;\n            int num = atoi(s.substr(i+1,j-i-1).c_str());\n            cur *= num;\n            i = j-1;\n        }\n        else if (s[i]=='/'){\n            int j = i+1;\n            while (j<n && s[j]>='0' && s[j]<='9')\n                ++j;\n            int num = atoi(s.substr(i+1,j-i-1).c_str());\n            cur /= num;\n            i = j-1;\n        }\n        else{\n            cur = cur*10+s[i]-'0';\n        }\n    }\n    ans += sign*cur;\n    cout << ans;\n    return 0;\n}"
        },
        {
            "Index": 309,
            "GT": -16,
            "Query": "2 - 2 * 4 - 8 - 4 + 3 + 8 - 9 =   ",
            "Injected CoT": "2 * 4 = 8\n2 - 8 = -6\n-6 - 4 = -11\n-11 + 3 = -7\n-7 + 8 = 1\n1 - 9 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1"
        },
        {
            "Index": 311,
            "GT": 46,
            "Query": "9 + 4 + 3 * 1 + 8 + 9 + 9 + 4 =   ",
            "Injected CoT": "3 * 1 = 3\n9 + 4 = 13\n13 + 3 = 17\n17 + 8 = 24\n24 + 9 = 33\n33 + 9 = 42\n42 + 4 =",
            "Response": " 46\n\n46\n\n*/",
            "Extract-Response": "\n\n46"
        },
        {
            "Index": 312,
            "GT": -14,
            "Query": "2 - 8 - 2 - 7 + 2 + 5 - 2 - 4 =   ",
            "Injected CoT": "-8 - 2 = -10\n-10 - 7 = -17\n-17 + 2 = -16\n-16 + 5 = -10\n-10 - 2 = -12\n-12 - 4 =",
            "Response": " -16",
            "Extract-Response": " -16.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        sort(A.begin(), A.end());\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + A[i] * c - A[n - i - 1] * c) % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};"
        },
        {
            "Index": 313,
            "GT": 104,
            "Query": "8 * 2 * 3 * 3 + 7 + 9 - 7 * 8 =   ",
            "Injected CoT": "8 * 2 = 16\n16 * 3 = 48\n48 * 3 = 144\n8 + 9 = 16\n8 * 8 = 56\n144 - 56 = 88\n16 + 88 =",
            "Response": " 104",
            "Extract-Response": " 104\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650"
        },
        {
            "Index": 315,
            "GT": 269,
            "Query": "9 - 3 + 5 * 7 * 9 - 7 * 8 + 4 =   ",
            "Injected CoT": "5 * 7 = 35\n35 * 9 = 314\n7 * 8 = 56\n314 - 56 = 259\n9 - 3 = 6\n259 + 6 = 265\n265 + 4 =",
            "Response": " 269",
            "Extract-Response": " 269\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 316,
            "GT": 39,
            "Query": "1 + 8 * 5 * 1 + 9 + 5 - 8 - 8 =   ",
            "Injected CoT": "8 * 5 = 40\n1 + 40 = 42\n42 * 1 = 42\n42 + 9 = 50\n50 + 5 = 55\n55 - 8 = 47\n47 - 8 =",
            "Response": " 39\n\n39\n\n*/",
            "Extract-Response": "\n\n39"
        },
        {
            "Index": 317,
            "GT": -43,
            "Query": "4 - 2 * 1 - 4 - 7 - 7 * 4 - 6 =   ",
            "Injected CoT": "1 * 1 = 1\n4 - 1 = 1\n7 * 4 = 28\n1 - 4 = -2\n-2 - 7 = -9\n-9 - 28 = -37\n-37 - 6 =",
            "Response": " -43",
            "Extract-Response": " -43.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expressions is allowed.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n                num = 0;\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};"
        },
        {
            "Index": 318,
            "GT": 649,
            "Query": "3 + 8 - 2 * 1 + 8 * 4 * 5 * 4 =   ",
            "Injected CoT": "2 * 1 = 2\n8 * 5 = 32\n32 * 5 = 160\n160 * 5 = 640\n3 + 8 = 11\n11 - 2 = 9\n9 + 640 =",
            "Response": " 649\n\n2 * 1 = 2\n8 * 5 = 40\n40 * 5 = 200\n200 * 5 = 1000\n3 + 8 = 11\n11 - 2 = 9\n9 + 1000 = 1009",
            "Extract-Response": " 1009\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = max(result, (int) (j - i));\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 320,
            "GT": -32,
            "Query": "8 - 8 + 3 - 3 - 7 - 1 - 6 * 4 =   ",
            "Injected CoT": "6 * 4 = 24\n8 - 8 = 0\n0 + 2 = 2\n2 - 2 = 0\n0 - 7 = -7\n-7 - 1 = -8\n-8 - 24 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 10,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperators(a):\n    # your code here\n    return sum(a)"
        },
        {
            "Index": 321,
            "GT": -79,
            "Query": "2 * 7 - 5 - 9 * 9 + 4 - 3 - 8 =   ",
            "Injected CoT": "2 * 7 = 14\n9 * 9 = 82\n14 - 5 = 9\n82 - 9 = 72\n72 + 4 = 76\n76 - 3 = 73\n73 - 8 =",
            "Response": " 65",
            "Extract-Response": " 65.\n\nNote:\n\nThe number of operations is between 2 and 2000.\nThe answer is guaranteed to be less than 2 ^ 31 - 1.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};"
        },
        {
            "Index": 324,
            "GT": 15,
            "Query": "7 * 1 * 3 - 6 + 3 + 2 - 9 + 4 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 3 = 21\n21 - 6 = 14\n14 + 3 = 18\n18 + 2 = 20\n20 - 9 = 11\n11 + 4 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 325,
            "GT": -226,
            "Query": "1 + 7 + 5 - 3 - 6 * 8 * 5 + 4 =   ",
            "Injected CoT": "6 * 7 = 48\n48 * 5 = 240\n1 + 7 = 7\n7 + 5 = 13\n13 - 3 = 10\n10 - 240 = -230\n-230 + 4 =",
            "Response": " -226",
            "Extract-Response": " -226.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if(len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for(int i = 0; i < len; i++){\n            if(s[i] >= '0' && s[i] <= '9'){\n                num = num * 10 + s[i] - '0';\n            }\n            else{\n                nums.push(num);\n                num = 0;\n                if(!ops.empty() && ops.top() == '*'){\n                    ops.pop();\n                    int a = nums.top();\n                    nums.pop();\n                    int b = nums.top();\n                    nums.pop();\n                    nums.push(a * b);\n                }\n                if(!ops.empty() && ops.top() == '/'){\n                    ops.pop();\n                    int a = nums.top();\n                    nums.pop();\n                    int b = nums.top();\n                    nums.pop();\n                    nums.push(b / a);\n                }\n                ops.push(s[i]);\n            }\n        }\n        nums.push(num);\n        while(!ops.empty()){\n            char op = ops.top();\n            ops.pop();\n            int a = nums.top();\n            nums.pop();\n            int b = nums.top();\n            nums.pop();\n            if(op == '+') nums.push(a + b);\n            else nums.push(b - a);\n        }\n        return nums.top();\n    }\n};"
        },
        {
            "Index": 326,
            "GT": 2,
            "Query": "3 - 8 - 2 * 3 + 8 * 6 - 7 * 5 =   ",
            "Injected CoT": "-2 * 3 = -6\n8 * 6 = 49\n7 * 5 = 35\n-6 - 5 = -11\n-11 + 49 = 37\n3 - 8 = -5\n-5 - 2 = -7\n-7 + 37 =",
            "Response": " 30",
            "Extract-Response": "\n\n30"
        },
        {
            "Index": 328,
            "GT": -18,
            "Query": "1 + 4 + 7 - 9 * 3 - 4 + 7 - 6 =   ",
            "Injected CoT": "-9 * 3 = -27\n2 + 4 + 7 - 27 - 4 + 7 - 6 =",
            "Response": "\n2 + 4 + 7 - 31 + 7 - 6 =\n2 + 11 - 6 =\n7",
            "Extract-Response": " 7"
        },
        {
            "Index": 330,
            "GT": 80,
            "Query": "9 * 9 - 5 + 6 * 5 - 6 - 4 * 5 =   ",
            "Injected CoT": "9 * 9 = 81\n81 - 5 = 76\n6 * 5 = 29\n29 - 6 = 24\n4 * 5 = 20\n24 - 20 = 4\n76 + 4 =",
            "Response": " 80",
            "Extract-Response": "\n\n80"
        },
        {
            "Index": 331,
            "GT": 133,
            "Query": "7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 =   ",
            "Injected CoT": "6 * 5 = 35\n35 * 4 = 140\n1 * 6 = 6\n6 * 4 = 28\n140 - 28 = 112\n3 * 6 = 21\n112 + 21 =",
            "Response": " 133\n\n7 * 5 * 4 - 1 * 7 * 4 + 3 * 7 =    \n6 * 5 = 35\n35 * 4 = 140\n1 * 6 = 6\n6 * 4 = 28\n140 - 28 = 112\n3 * 6 = 21\n112 + 21 = 133",
            "Extract-Response": " 133"
        },
        {
            "Index": 332,
            "GT": 3,
            "Query": "7 * 1 - 6 - 6 + 9 - 1 - 8 + 8 =   ",
            "Injected CoT": "7 * 1 = 7\n7 - 6 = 1\n1 - 6 = -6\n-6 + 9 = 4\n4 - 1 = 3\n3 - 8 = -6\n-6 + 8 =",
            "Response": " 2\n2 + 7 = 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    cout << sum << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 334,
            "GT": 48,
            "Query": "8 + 8 * 4 + 5 - 5 + 7 - 3 + 4 =   ",
            "Injected CoT": "8 * 4 = 32\n32 + 8 = 40\n40 + 4 = 45\n45 - 4 = 40\n40 + 7 = 47\n47 - 3 = 44\n44 + 4 =",
            "Response": " 48",
            "Extract-Response": "\n\n48"
        },
        {
            "Index": 336,
            "GT": 10,
            "Query": "4 * 4 + 2 - 2 - 5 - 2 + 8 - 7 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 2 = 18\n18 - 2 = 16\n16 - 4 = 11\n11 - 2 = 9\n9 + 8 = 17\n17 - 7 =",
            "Response": " 10",
            "Extract-Response": " 10.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};"
        },
        {
            "Index": 341,
            "GT": 58,
            "Query": "4 * 2 - 3 * 4 + 6 * 5 * 2 + 2 =   ",
            "Injected CoT": "4 * 2 = 8\n3 * 4 = 12\n6 * 5 = 29\n29 * 2 = 60\n8 - 12 = -4\n-4 + 60 = 56\n56 + 2 =",
            "Response": " 58",
            "Extract-Response": " 58.\n\nNote:\n\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed.\n\nConsider extra cases:\n\nDid you consider the case of empty input string?\n\nFor the purpose of this problem, we define empty string as valid parentheses string.\n\n*/\n\nclass Solution {\n    public int calPoints(String[] ops) {\n        Stack<Integer> stack = new Stack<>();\n        for (String op : ops) {\n            if (op.equals(\"+\")) {\n                int top = stack.pop();\n                int newtop = top + stack.peek();\n                stack.push(top);\n                stack.push(newtop);\n            } else if (op.equals(\"C\")) {\n                stack.pop();\n            } else if (op.equals(\"D\")) {\n                stack.push(2 * stack.peek());\n            } else {\n                stack.push(Integer.valueOf(op));\n            }\n        }\n        int ans = 0;\n        for (int score : stack) {\n            ans += score;\n        }\n        return ans;\n    }\n}"
        },
        {
            "Index": 342,
            "GT": 164,
            "Query": "6 * 9 * 3 - 4 - 9 + 5 * 4 - 5 =   ",
            "Injected CoT": "6 * 10 = 54\n54 * 3 = 162\n162 - 4 = 158\n158 - 10 = 149\n5 * 4 = 20\n149 + 20 = 169\n169 - 5 =",
            "Response": " 164",
            "Extract-Response": " 164\n</code>\n"
        },
        {
            "Index": 343,
            "GT": 503,
            "Query": "3 - 9 + 2 + 4 + 8 * 9 * 7 - 1 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 7 = 504\n3 - 9 = -6\n-6 + 1 = -4\n-4 + 4 = 0\n0 + 504 = 504\n504 - 1 =",
            "Response": " 503",
            "Extract-Response": " 503\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, num = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            result += num * sign;\n            num = 0;\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            result += num * sign;\n            num = 0;\n            sign = 1;\n        }\n        else\n        {\n            num = num * 10 + (input[i] - '0');\n        }\n    }\n\n    result += num * sign;\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}"
        },
        {
            "Index": 344,
            "GT": 43,
            "Query": "9 + 9 * 3 + 9 + 3 + 4 - 1 * 9 =   ",
            "Injected CoT": "9 * 3 = 27\n9 + 27 = 36\n36 + 9 = 44\n44 + 3 = 48\n48 + 4 = 52\n1 * 9 = 9\n52 - 9 =",
            "Response": " 43",
            "Extract-Response": " 43\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    int n,i,j,k,l,m,len,sum;\n    char str[100];\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%s\",str);\n        len=strlen(str);\n        sum=0;\n        for(j=0;j<len;j++)\n        {\n            if(str[j]=='+')\n                continue;\n            else if(str[j]=='-')\n            {\n                sum=sum-1;\n                continue;\n            }\n            else\n            {\n                sum=sum+str[j]-48;\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}"
        },
        {
            "Index": 348,
            "GT": -20,
            "Query": "2 + 8 - 3 * 4 - 7 - 7 - 4 * 1 =   ",
            "Injected CoT": "3 * 4 = 12\n4 * 1 = 4\n2 + 8 = 9\n9 - 12 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 - 4 =",
            "Response": " -20\n\n-20",
            "Extract-Response": " -20\n\n*/"
        },
        {
            "Index": 349,
            "GT": -75,
            "Query": "9 - 9 * 7 - 9 * 1 - 6 - 4 - 2 =   ",
            "Injected CoT": "9 * 7 = 63\n9 * 1 = 9\n63 - 9 = 54\n6 + 5 = 10\n54 - 10 = 44\n44 - 2 =",
            "Response": " 42\n\n42\n\n*/",
            "Extract-Response": "\n\n42"
        },
        {
            "Index": 351,
            "GT": 23,
            "Query": "1 * 7 + 4 + 5 - 2 + 6 - 2 + 5 =   ",
            "Injected CoT": "1 * 7 = 7\n7 + 4 = 11\n11 + 5 = 15\n15 - 2 = 14\n14 + 6 = 20\n20 - 2 = 18\n18 + 5 =",
            "Response": " 23",
            "Extract-Response": " 23.\n\nNote:\nThe length of the given array is positive and will not exceed 10,000\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\n\n*/\n\nclass Solution {\npublic:\n    int cal(string s) {\n        int res = 0;\n        int sign = 1;\n        int num = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * num;\n                sign = 1;\n                num = 0;\n            } else if (s[i] == '-') {\n                res += sign * num;\n                sign = -1;\n                num = 0;\n            } else {\n                num = num * 10 + s[i] - '0';\n            }\n        }\n        res += sign * num;\n        return res;\n    }\n    int calculate(string s) {\n        int res = 0;\n        int sign = 1;\n        int num = 0;\n        int i = 0;\n        while (i < s.size()) {\n            if (s[i] == ' ') {\n                i++;\n                continue;\n            }\n            if (s[i] == '(') {\n                int j = i + 1;\n                int cnt = 1;\n                while (j < s.size() && cnt != 0) {\n                    if (s[j] == '(') cnt++;\n                    if (s[j] == ')') cnt--;\n                    j++;\n                }\n                res += sign * cal(s.substr(i + 1, j - i - 2));\n                i = j;\n            } else {\n                num = num * 10 + s[i] - '0';\n                i++;\n            }\n        }\n        res += sign * num;\n        return res;\n    }\n};"
        },
        {
            "Index": 352,
            "GT": 42,
            "Query": "1 * 7 * 5 + 4 + 5 * 2 * 1 - 7 =   ",
            "Injected CoT": "1 * 7 = 7\n7 * 5 = 35\n5 * 2 = 11\n1 * 11 = 11\n35 + 4 = 39\n39 + 11 = 49\n49 - 7 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}"
        },
        {
            "Index": 354,
            "GT": 43,
            "Query": "6 - 2 + 4 + 8 + 4 + 9 + 2 * 7 =   ",
            "Injected CoT": "2 * 7 = 14\n6 - 2 = 4\n4 + 4 = 9\n9 + 9 = 16\n16 + 9 = 25\n25 + 14 =",
            "Response": " 39",
            "Extract-Response": "\n\n39."
        },
        {
            "Index": 356,
            "GT": 390,
            "Query": "9 * 1 + 6 * 7 * 9 + 6 * 1 - 3 =   ",
            "Injected CoT": "9 * 1 = 9\n7 * 7 = 42\n42 * 9 = 378\n7 * 1 = 7\n378 + 7 = 384\n384 - 3 =",
            "Response": " 381\n\n*/\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int num = c - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    num = num * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sign * num;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int calculate(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        Stack<Integer> stack = new Stack<>();\n        int sign = 1;\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int num = c - '0';\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {\n                    num = num * 10 + s.charAt(i + 1) - '0';\n                    i++;\n                }\n                result += sign * num;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                stack.push(result);\n                stack.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                result = result * stack.pop() + stack.pop();\n            }\n        }\n        return result;\n    }\n}"
        },
        {
            "Index": 357,
            "GT": 22,
            "Query": "4 + 7 - 5 - 7 - 4 + 4 * 7 - 1 =   ",
            "Injected CoT": "4 = 4\n7 = 7\n5 = 5\n7 = 7\n4 = 4\n4 * 7 = 29\n29 = 29\n4 + 7 = 11\n11 - 5 = 6\n6 - 7 = -1\n-1 - 4 = -5\n-5 + 29 = 23\n23 - 1 =",
            "Response": " 22",
            "Extract-Response": " 22.\n\nNote: Do not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) res += sign * num;\n        return res;\n    }\n};"
        }
    ]
}