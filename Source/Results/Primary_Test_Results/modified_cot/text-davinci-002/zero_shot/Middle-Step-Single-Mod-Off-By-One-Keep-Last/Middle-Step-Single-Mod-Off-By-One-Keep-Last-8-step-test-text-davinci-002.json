{
    "Mode": "test",
    "Model": "text-davinci-002",
    "Model Index": 0,
    "Modality": "zero_shot",
    "Modality Index": 0,
    "Dataset": "Middle-Step-Single-Mod-Off-By-One-Keep-Last",
    "Steps": 8,
    "Extraction Type": "two-stage",
    "Simple Prompt": true,
    "Test Path": "Results\\Primary_Test_Results\\modified_cot\\text-davinci-002\\zero_shot\\Middle-Step-Single-Mod-Off-By-One-Keep-Last\\Middle-Step-Single-Mod-Off-By-One-Keep-Last-8-step-test-text-davinci-002.json",
    "Total": 250,
    "Total Accurate": 166,
    "Total Accuracy": 66.4,
    "Percent of Answers Containing CoT": 7.199999999999999,
    "CoT Accuracy": 5.555555555555555,
    "Non-CoT Accuracy": 71.12068965517241,
    "ci_radius": 5.855173187532543,
    "ci_upper": 72.25517318753255,
    "ci_lower": 60.54482681246746,
    "Trials": [
        {
            "Index": 0,
            "GT": 34,
            "Query": "9 + 3 + 6 - 1 + 5 * 9 + 4 - 4 * 8 =   ",
            "Injected CoT": "5 * 9 = 45\n4 * 8 = 32\n9 + 3 = 12\n12 + 6 = 19\n19 - 1 = 17\n17 + 45 = 62\n62 + 4 = 66\n66 - 32 =",
            "Response": " 34",
            "Extract-Response": " 34\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentOperation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] >= '0' && s[i] <= '9') {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        } else {\n            if (currentOperation == '+') {\n                result += currentNumber;\n            } else if (currentOperation == '-') {\n                result -= currentNumber;\n            } else if (currentOperation == '*') {\n                result *= currentNumber;\n            } else if (currentOperation == '/') {\n                result /= currentNumber;\n            }\n            currentNumber = 0;\n            currentOperation = s[i];\n        }\n    }\n\n    if (currentOperation == '+') {\n        result += currentNumber;\n    } else if (currentOperation == '-') {\n        result -= currentNumber;\n    } else if (currentOperation == '*') {\n        result *= currentNumber;\n    } else if (currentOperation == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 34.0,
            "Final Answer": 34.0
        },
        {
            "Index": 1,
            "GT": 50,
            "Query": "6 - 1 * 9 + 8 * 9 + 5 - 8 - 7 - 9 =   ",
            "Injected CoT": "1 * 9 = 9\n8 * 9 = 72\n6 - 9 = -3\n-3 + 72 = 69\n69 + 6 = 74\n74 - 8 = 66\n66 - 7 = 59\n59 - 9 =",
            "Response": " 50",
            "Extract-Response": "\n<code>50\n</code>\n",
            "Answer": 50.0,
            "Final Answer": 50.0
        },
        {
            "Index": 2,
            "GT": 94,
            "Query": "4 + 9 + 8 * 6 + 8 - 4 + 9 + 5 * 4 =   ",
            "Injected CoT": "8 * 6 = 48\n4 + 9 + 48 = 61\n61 + 8 = 68\n68 - 4 = 65\n5 * 4 = 20\n9 + 20 = 29\n65 + 29 =",
            "Response": " 94",
            "Extract-Response": " 94\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 94.0,
            "Final Answer": 94.0
        },
        {
            "Index": 3,
            "GT": -7,
            "Query": "9 - 5 + 7 - 2 * 7 * 1 - 4 * 1 * 1 =   ",
            "Injected CoT": "2 * 7 = 13\n4 * 1 = 4\n4 * 1 = 4\n13 - 13 = 0\n9 - 5 = 4\n4 + 7 = 11\n11 - 4 =",
            "Response": " 7\n7 - 4 = 3\n3 - 4 = -1\n\n-1",
            "Extract-Response": " -1\n\n*/",
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 6,
            "GT": 472,
            "Query": "3 - 7 + 8 * 4 * 5 * 3 + 6 - 9 - 1 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 5 = 160\n160 * 3 = 479\n3 - 7 = -4\n-4 + 479 = 476\n476 + 6 = 482\n482 - 9 = 473\n473 - 1 =",
            "Response": " 472",
            "Extract-Response": " 472\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 472.0,
            "Final Answer": 472.0
        },
        {
            "Index": 7,
            "GT": 16,
            "Query": "7 + 9 + 1 - 5 + 2 - 6 + 4 - 1 + 5 =   ",
            "Injected CoT": "7 + 9 = 16\n16 + 1 = 17\n17 - 5 = 12\n12 + 2 = 15\n15 - 6 = 8\n8 + 4 = 12\n12 - 1 = 11\n11 + 5 =",
            "Response": " 16",
            "Extract-Response": " 16.\n\nNote:\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 8,
            "GT": -121,
            "Query": "2 * 2 - 8 * 9 - 8 * 6 + 3 - 2 - 6 =   ",
            "Injected CoT": "2 * 2 = 4\n8 * 9 = 72\n72 + 8 * 6 = 119\n119 - 3 = 117\n117 - 2 = 115\n115 - 6 =",
            "Response": " 109",
            "Extract-Response": " 109\n</code>\n",
            "Answer": 109.0,
            "Final Answer": 109.0
        },
        {
            "Index": 9,
            "GT": -49,
            "Query": "3 - 2 - 4 - 8 * 5 - 8 * 1 - 3 + 5 =   ",
            "Injected CoT": "-8 * 5 = -40\n-8 * 1 = -8\n3 - 2 = 1\n1 - 4 = -2\n-2 - 40 = -43\n-43 - 8 = -51\n-51 - 3 = -54\n-54 + 5 =",
            "Response": " -49",
            "Extract-Response": " -49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -49.0,
            "Final Answer": -49.0
        },
        {
            "Index": 13,
            "GT": -55,
            "Query": "8 - 7 * 5 + 1 - 2 - 7 - 6 * 2 - 8 =   ",
            "Injected CoT": "7 * 5 = 35\n8 - 35 = -27\n-27 + 1 = -26\n-26 - 2 = -29\n-29 - 7 = -35\n6 * 2 = 12\n-35 - 12 = -47\n-47 - 8 =",
            "Response": " -55",
            "Extract-Response": " -55.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -55.0,
            "Final Answer": -55.0
        },
        {
            "Index": 14,
            "GT": 43,
            "Query": "6 * 5 - 3 + 8 + 5 * 4 - 9 + 4 - 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 - 3 = 27\n5 * 4 = 20\n8 + 20 = 29\n27 + 29 = 55\n4 - 7 = -3\n55 - 9 = 46\n46 - 3 =",
            "Response": " 43",
            "Extract-Response": " 43.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}",
            "Answer": 43.0,
            "Final Answer": 43.0
        },
        {
            "Index": 17,
            "GT": -3418,
            "Query": "5 * 5 - 9 * 4 * 3 * 4 * 8 + 7 + 6 =   ",
            "Injected CoT": "9 * 4 = 36\n36 * 3 = 108\n108 * 4 = 432\n432 * 8 = 3456\n4 * 4 = 25\n25 - 3456 = -3431\n-3431 + 7 = -3424\n-3424 + 6 =",
            "Response": " -3418\n\n-3418",
            "Extract-Response": " -3418",
            "Answer": -3418.0,
            "Final Answer": -3418.0
        },
        {
            "Index": 18,
            "GT": 150,
            "Query": "4 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 8 = 160\n2 * 5 = 10\n10 * 8 = 81\n160 - 81 = 81\n9 * 7 = 63\n81 + 63 = 143\n143 + 7 =",
            "Response": " 150",
            "Extract-Response": "\n\n3 * 5 * 8 - 2 * 5 * 8 + 9 * 7 + 7 = 150",
            "Answer": 3.0,
            "Final Answer": 3.0
        },
        {
            "Index": 19,
            "GT": 64,
            "Query": "9 - 1 * 7 + 1 * 6 * 3 + 6 * 8 - 4 =   ",
            "Injected CoT": "1 * 7 = 7\n6 * 3 = 19\n1 * 6 * 3 = 19\n9 - 7 = 2\n2 + 19 = 20\n6 * 8 = 48\n20 + 48 = 68\n68 - 4 =",
            "Response": " 64",
            "Extract-Response": "\n\n64",
            "Answer": 64.0,
            "Final Answer": 64.0
        },
        {
            "Index": 22,
            "GT": -4,
            "Query": "4 - 5 - 2 - 8 - 3 * 1 + 8 - 7 + 9 =   ",
            "Injected CoT": "4 - 5 = -1\n-1 - 2 = -3\n-3 - 8 = -10\n3 * 1 = 3\n-10 + 3 = -8\n-8 + 8 = 0\n0 - 7 = -7\n-7 + 9 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calc(vector<string>& tokens, int& i) {\n        int a = stoi(tokens[i]);\n        if (i == tokens.size()) return a;\n        i++;\n        if (tokens[i] == \"+\") return a + calc(tokens, i);\n        if (tokens[i] == \"-\") return a - calc(tokens, i);\n        if (tokens[i] == \"*\") return a * calc(tokens, i);\n        if (tokens[i] == \"/\") return a / calc(tokens, i);\n    }\n    int evalRPN(vector<string>& tokens) {\n        int i = 0;\n        return calc(tokens, i);\n    }\n};",
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 26,
            "GT": 3,
            "Query": "9 - 4 + 2 * 7 - 5 - 9 * 1 - 2 * 1 =   ",
            "Injected CoT": "2 * 7 = 14\n9 * 1 = 9\n2 * 1 = 2\n9 - 4 = 6\n6 + 14 = 19\n19 - 6 = 14\n14 - 9 = 6\n6 - 2 =",
            "Response": " 4",
            "Extract-Response": " 4\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 27,
            "GT": 40,
            "Query": "7 + 8 + 2 + 8 + 1 - 7 - 7 + 4 * 7 =   ",
            "Injected CoT": "4 * 7 = 28\n7 + 8 = 15\n15 + 2 = 17\n17 + 8 = 25\n25 + 0 = 26\n26 - 7 = 19\n19 - 7 = 12\n12 + 28 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 28,
            "GT": -51,
            "Query": "5 * 8 - 2 * 9 * 5 + 3 - 7 - 5 + 8 =   ",
            "Injected CoT": "9 * 5 = 45\n2 * 45 = 90\n5 * 8 = 40\n90 - 40 = 50\n2 - 7 = -4\n-4 - 5 = -9\n-9 + 8 = -1\n-1 + 50 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            number = 0;\n            sign = -1;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 49.0,
            "Final Answer": 49.0
        },
        {
            "Index": 30,
            "GT": -11,
            "Query": "7 + 8 + 3 - 3 * 8 + 1 * 4 - 3 * 3 =   ",
            "Injected CoT": "2 * 8 = 24\n1 * 4 = 4\n2 * 2 = 9\n7 + 8 = 15\n15 + 2 = 18\n18 - 24 = -6\n-6 + 4 = -2\n-2 - 9 =",
            "Response": " -11\n-11 + 15 = 4",
            "Extract-Response": " 4\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n        if (result < 0) {\n            result = 0;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 31,
            "GT": -34,
            "Query": "7 - 5 + 9 - 9 * 5 - 3 + 8 + 2 - 7 =   ",
            "Injected CoT": "9 * 5 = 45\n-5 + 45 = 40\n7 - 40 = -33\n-33 - 2 = -36\n-36 + 8 = -28\n-28 + 2 = -26\n-26 - 7 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, result = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            j = i;\n\n            while(input[j] != '+' && input[j] != '-' && input[j] != ' ' && j < len)\n            {\n                j++;\n            }\n\n            result += sign * atoi(input + i);\n\n            i = j - 1;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}",
            "Answer": -33.0,
            "Final Answer": -33.0
        },
        {
            "Index": 33,
            "GT": 609,
            "Query": "3 * 2 * 8 * 5 * 1 + 9 + 5 * 8 * 9 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 9 = 48\n48 * 5 = 240\n240 * 1 = 240\n5 * 9 = 40\n40 * 9 = 360\n240 + 9 = 249\n249 + 360 = 609\n609 + 40 =",
            "Response": " 649\n649 + 240 = 889\n889 + 360 = 1249\n1249 + 40 = 1289\n1289 + 360 = 1649\n1649 + 40 = 1689\n1689 + 360 = 2049\n2049 + 40 = 2089\n2089 + 360 = 2449\n2449 + 40 = 2489\n2489 + 360 = 2849\n2849 + 40 = 2889\n2889 + 360 = 3249\n3249 + 40 = 3289\n3289 + 360 = 3649\n3649 + 40 = 3689\n3689 + 360 = 4049\n4049 + 40 = 4089\n4089 + 360 = 4449\n4449 + 40 = 4489\n4489 + 360 = 4849\n4849 + 40 = 4889\n4889 + 360 = 5249\n5249 + 40 = 5289\n5289 + 360 = 5649\n5649 + 40 = 5689\n5689 + 360 = 6049\n6049 + 40 = 6089\n6089 + 360 = 6449\n6449 + 40 = 6489\n6489 + 360 = 6849\n6849 + 40 = 6889\n6889 + 360 = 7249\n7249 + 40 = 7289\n7289 + 360 = 7649\n7649 + 40 = 7689\n7689 + 360 = 8049\n8049 + 40 = 8089\n8089 + 360 = 8449\n8449 + 40 = 8489\n8489 + 360 = 8849\n8849 + 40 = 8889\n8889 + 360 = 9249\n9249 + 40 = 9289\n9289 + 360 = 9649\n9649 + 40 = 9689\n9689 + 360 = 10049\n10049 + 40 = 10089\n10089 + 360 = 10449\n10449 + 40 = 10489\n10489 + 360 = 10849\n10849 + 40 = 10889\n10889 + 360 = 11249\n11249 + 40 = 11289\n11289 + 360 = 11649\n11649 + 40 = 11689\n11689 + 360 = 12049\n12049 + 40 = 12089\n12089 + 360 = 12449\n12449 + 40 = 12489\n12489 + 360 = 12849\n12849 + 40 = 12889\n12889 + 360 = 13249\n13249 + 40 = 13289\n13289 + 360 = 13649\n13649 + 40 = 13689\n13689 + 360 = 14049\n14049 + 40 = 14089\n14089 + 360 = 14449\n14449 + 40 = 14489\n14489 + 360 = 14849\n14849 + 40 = 14889\n14889 + 360 = 15249\n15249 + 40 = 15289\n15289 + 360 = 15649\n15649 + 40 = 15689\n15689 + 360 = 16049\n16049 + 40 = 16089\n16089 + 360 = 16449\n16449 + 40 = 16489\n16489 + 360 = 16849\n16849 + 40 = 16889\n16889 + 360 = 17249\n17249 + 40 = 17289\n17289 + 360 = 17649\n17649 + 40 = 17689\n17689 + 360 = 18049\n18049 + 40 = 18089\n18089 + 360 = 18449\n18449 + 40 = 18489\n18489 + 360 = 18849\n18849 + 40 = 18889\n18889 + 360 = 19249\n19249 + 40 = 19289\n19289 + 360 = 19649\n19649 + 40 = 19689\n19689 + 360 = 20049\n20049 + 40 = 20089\n20089 + 360 = 20449\n20449 + 40 = 20489\n20489 + 360 = 20849\n20849 + 40 = 20889\n20889 + 360 = 21249\n21249 + 40 = 21289\n21289 + 360 = 21649\n21649 + 40 = 21689\n21689 + 360 = 22049\n22049 + 40 = 22089\n22089 + 360 = 22449\n22449 + 40 = 22489\n22489 + 360 = 22849\n22849 + 40 = 22889\n22889 + 360 = 23249\n23249 + 40 = 23289\n23289 + 360 = 23649\n23649 + 40 = 23689\n23689 + 360 = 24049\n24049 + 40 = 24089\n24089 + 360 = 24449\n24449 + 40 = 24489\n24489 + 360 = 24849\n24849 + 40 = 24889\n24889 + 360 = 25249\n25249 + 40 = 25289\n25289 + 360 = 25649\n25649 + 40 = 25689\n25689 + 360 = 26049\n26049 + 40 = 26089\n26089 + 360 = 26449\n26449 + 40 = 26489\n26489 + 360 = 26849\n26849 + 40 = 26889\n26889 + 360 = 27249\n27249 + 40 = 27289\n27289 + 360 = 27649\n27649 + 40 = 27689\n27689 + 360 = 28049\n28049 + 40 = 28089\n28089 + 360 = 28449\n28449 + 40 = 28489\n28489 + 360 = 28849\n28849 + 40 = 28889\n28889 + 360 = 29249\n29249 + 40 = 29289\n29289 + 360 = 29649\n29649 + 40 = 29689\n29689 + 360 = 30049\n30049 + 40 = 30089\n30089 + 360 = 30449\n30449 + 40 = 30489\n30489 + 360 = 30849\n30849 + 40 = 30889\n30889 + 360 = 31249\n31249 + 40 = 31289\n31289 + 360 = 31649\n31649 + 40 = 31689\n31689 + 360 = 32049\n32049 + 40 = 32089\n32089 + 360 = 32449\n32449 + 40 = 32489\n32489 + 360 = 32849\n32849 + 40 = 32889\n32889 + 360 = 33249\n33249 + 40 = 33289\n33289 + 360 = 33649\n33649 + 40 = 33689\n33689 + 360 = 34049\n34049 + 40 = 34089\n34089 + 360 =34449\n34449 + 40 =34489\n34489 + 360 = 34849\n34849 + 40 = 34889\n34889 + 360 = 35249\n35249 + 40 = 35289\n35289 + 360 = 35649\n35649 + 40 = 35689\n35689 + 360 = 36049\n36049 + 40 = 36089\n36089 + 360 = 36449\n36449 + 40 = 36489\n36489 + 360 = 36849\n36849 + 40 = 36889\n36889 + 360 = 37249\n37249 + 40 = 37289\n37289 + 360 = 37649\n37649 + 40 = 37689\n37689 + 360 = 38049\n38049 + 40 = 38089\n38089 + 360 = 38449\n38449 + 40 = 38489\n38489 + 360 = 38849\n38849 + 40 = 38889\n38889 + 360 = 39249\n39249 + 40 = 39289\n39289 + 360 = 39649\n39649 + 40 = 39689\n39689 + 360 = 40049\n40049 + 40 = 40089\n40089 + 360 = 40449\n40449 + 40 = 40489\n40489 + 360 = 40849\n40849 + 40 = 40889\n40889 + 360 = 41249\n41249 + 40 = 41289\n41289 + 360 = 41649\n41649 + 40 = 41689\n41689 + 360 = 42049\n42049 + 40 = 42089\n42089 + 360 = 42449\n42449 + 40 = 42489\n42489 + 360 = 42849\n42849 + 40 = 42889\n42889 + 360 = 43249\n43249 + 40 = 43289\n43289 + 360 = 43649\n43649 + 40 = 43689\n43689 + 360 = 44049\n44049 + 40 = 44089\n44089 + 360 = 44449\n44449 + 40 = 44489\n44489 + 360 = 44849\n44849 + 40 = 44889\n44889 + 360 = 45249\n45249 + 40 = 45289\n45289 + 360 = 45649\n45649 + 40 = 45689\n45689 + 360 = 46049\n46049 + 40 = 46089\n46089 + 360 = 46449\n46449 + 40 = 46489\n46489 + 360 = 46849\n46849 + 40 = 46889\n46889 + 360 = 47249\n47249 + 40 = 47289\n47289 + 360 = 47649\n47649 + 40 = 47689\n47689 + 360 = 48049\n48049 + 40 = 48089\n48089 + 360 = 48449\n48449 + 40 = 48489\n48489 + 360 = 48849\n48849 + 40 = 48889\n48889 + 360 = 49249\n49249 + 40 = 49289\n49289 + 360 = 49649\n49649 + 40 = 49689\n49689 + 360 = 50049\n50049 + 40 = 50089\n50089 + 360 = 50449\n50449 + 40 = 50489\n50",
            "Extract-Response": "\n\n50",
            "Answer": 50.0,
            "Final Answer": 50.0
        },
        {
            "Index": 34,
            "GT": -86,
            "Query": "3 - 5 - 7 - 7 + 5 + 9 - 3 - 9 * 9 =   ",
            "Injected CoT": "-9 * 9 = -81\n3 - 4 = -2\n-2 - 7 = -9\n-9 - 7 = -16\n-16 + 4 = -11\n-11 + 9 = -2\n-2 - 3 = -5\n-5 - (-81) =",
            "Response": " 76",
            "Extract-Response": " 76\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <utility>\n#include <climits>\n#include <numeric>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\n#define foreach(v,c) for(typeof(c.begin()) v=c.begin(); v!=c.end(); ++v)\n\nint main(){\n\tstring s;\n\tcin>>s;\n\n\tint n=s.size();\n\tint i=0;\n\tint res=0;\n\tint sign=1;\n\twhile(i<n){\n\t\tif(s[i]=='+'){\n\t\t\tsign=1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='-'){\n\t\t\tsign=-1;\n\t\t\t++i;\n\t\t}\n\t\telse if(s[i]=='*'){\n\t\t\tsign=2;\n\t\t\t++i;\n\t\t}\n\t\telse{\n\t\t\tint num=0;\n\t\t\twhile(i<n && s[i]>='0' && s[i]<='9'){\n\t\t\t\tnum=num*10+s[i]-'0';\n\t\t\t\t++i;\n\t\t\t}\n\t\t\tif(sign==1)\n\t\t\t\tres+=num;\n\t\t\telse if(sign==-1)\n\t\t\t\tres-=num;\n\t\t\telse\n\t\t\t\tres*=num;\n\t\t}\n\t}\n\n\tcout<<res<<endl;\n\n\treturn 0;\n}",
            "Answer": 76.0,
            "Final Answer": 76.0
        },
        {
            "Index": 35,
            "GT": 66,
            "Query": "2 + 2 - 2 + 6 * 9 - 2 + 3 + 3 + 6 =   ",
            "Injected CoT": "2 + 2 = 4\n4 - 2 = 2\n6 * 9 = 54\n2 + 54 = 55\n55 - 2 = 54\n54 + 3 = 57\n57 + 3 = 60\n60 + 6 =",
            "Response": " 66",
            "Extract-Response": " 66.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 10.\n\n[output] integer\n\nThe sum of the digits of the factorial of n.\n\"\"\"\n\ndef extraLongFactorials(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return sum(map(int, str(factorial)))",
            "Answer": 66.0,
            "Final Answer": 66.0
        },
        {
            "Index": 36,
            "GT": 16,
            "Query": "4 * 4 + 5 - 2 + 5 + 1 + 1 - 5 * 2 =   ",
            "Injected CoT": "4 * 4 = 16\n16 + 5 = 21\n21 - 2 = 20\n20 + 5 = 24\n24 + 1 = 25\n25 + 1 = 26\n26 - 5 * 2 =",
            "Response": " 26 - 10 = 16",
            "Extract-Response": " 16.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++curr;\n        } else {\n            --curr;\n        }\n        if (curr < 0) {\n            curr = 0;\n            ++result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 37,
            "GT": 28,
            "Query": "2 - 1 - 2 + 9 + 7 + 4 * 3 - 6 + 7 =   ",
            "Injected CoT": "4 * 3 = 12\n2 - 1 = 1\n1 - 2 = -1\n-1 + 9 = 8\n8 + 8 = 15\n15 + 12 = 27\n27 - 6 = 21\n21 + 8 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n            for(j=i+1; j<len; j++)\n            {\n                if(input[j] == ' ')\n                {\n                    continue;\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            num = 0;\n            for(; i<j; i++)\n            {\n                num = num * 10 + input[i] - '0';\n            }\n\n            sum = sum + num * sign;\n            sign = 1;\n            i--;\n        }\n        else\n        {\n            num = 0;\n            for(; i<len; i++)\n            {\n                if(input[i] == ' ')\n                {\n                    break;\n                }\n                else\n                {\n                    num = num * 10 + input[i] - '0';\n                }\n            }\n\n            sum = sum + num * sign;\n            sign = 1;\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 39,
            "GT": 144,
            "Query": "3 - 2 + 7 + 7 * 7 * 2 - 7 + 9 * 5 =   ",
            "Injected CoT": "6 * 6 = 49\n49 * 2 = 98\n9 * 5 = 45\n3 - 2 = 1\n1 + 6 = 8\n8 + 98 = 106\n106 - 6 = 99\n99 + 45 =",
            "Response": " 144\n144 + 1 = 145",
            "Extract-Response": " 145\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num, sum = 0, temp;\n    scanf(\"%d\", &num);\n    temp = num;\n    while(temp)\n    {\n        sum += temp % 10;\n        temp /= 10;\n    }\n    if(sum < 10)\n    {\n        printf(\"%d\\n\", sum);\n    }\n    else\n    {\n        num = sum;\n        sum = 0;\n        temp = num;\n        while(temp)\n        {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Answer": 145.0,
            "Final Answer": 145.0
        },
        {
            "Index": 40,
            "GT": 62,
            "Query": "2 + 6 - 3 * 6 + 1 * 9 * 8 - 8 + 8 =   ",
            "Injected CoT": "3 * 6 = 17\n1 * 9 = 9\n9 * 8 = 72\n2 + 6 = 8\n8 - 17 = -10\n-10 + 72 = 62\n62 - 8 = 54\n54 + 8 =",
            "Response": " 62",
            "Extract-Response": " 62\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * num;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 62.0,
            "Final Answer": 62.0
        },
        {
            "Index": 41,
            "GT": -50,
            "Query": "1 + 5 - 5 - 7 * 8 + 7 - 6 * 1 + 4 =   ",
            "Injected CoT": "1 + 5 = 6\n6 - 5 = 1\n8 * 8 = 56\n1 - 56 = -55\n-55 + 8 = -48\n6 * 1 = 6\n-48 + 6 = -42\n-42 + 4 =",
            "Response": " -38",
            "Extract-Response": " -38.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    char op = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (op == '+') {\n                result += curr;\n            } else if (op == '-') {\n                result -= curr;\n            } else if (op == '*') {\n                result *= curr;\n            }\n            curr = 0;\n            op = s[i];\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    if (op == '+') {\n        result += curr;\n    } else if (op == '-') {\n        result -= curr;\n    } else if (op == '*') {\n        result *= curr;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -38.0,
            "Final Answer": -38.0
        },
        {
            "Index": 42,
            "GT": 0,
            "Query": "3 * 6 + 5 - 1 * 5 + 9 - 6 * 3 - 9 =   ",
            "Injected CoT": "3 * 6 = 18\n18 + 5 = 23\n1 * 5 = 5\n23 - 5 = 18\n18 + 10 = 27\n6 * 3 = 18\n27 - 18 = 10\n10 - 10 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 45,
            "GT": 44,
            "Query": "2 * 1 + 8 * 2 * 3 - 2 - 2 - 3 + 1 =   ",
            "Injected CoT": "3 * 1 = 3\n8 * 3 = 16\n16 * 3 = 48\n3 + 48 = 50\n50 - 3 = 48\n48 - 3 = 46\n46 - 3 = 43\n43 + 1 =",
            "Response": " 44\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    sort(a.begin(), a.end());\n    int result = 0;\n    for (size_t i = 0; i < m; ++i) {\n        if (a[i] < 0) {\n            result += a[i];\n        }\n    }\n    cout << -result << endl;\n\n    return 0;\n}",
            "Extract-Response": " 44.",
            "Answer": 44.0,
            "Final Answer": 44.0
        },
        {
            "Index": 48,
            "GT": -9,
            "Query": "6 - 5 * 3 - 9 + 8 - 9 * 1 + 4 + 6 =   ",
            "Injected CoT": "5 * 3 = 15\n6 - 15 = -9\n-9 - 9 = -18\n-18 + 8 = -10\n9 * 0 = 9\n-10 + 9 = -1\n-1 + 4 = 3\n3 + 6 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 51,
            "GT": 73,
            "Query": "9 * 4 + 7 * 6 + 5 - 1 * 2 * 3 - 4 =   ",
            "Injected CoT": "9 * 4 = 36\n7 * 6 = 42\n36 + 42 = 78\n1 * 2 = 2\n2 * 2 = 6\n78 - 6 = 72\n72 - 4 = 68\n68 + 5 =",
            "Response": " 73",
            "Extract-Response": " 73\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 73.0,
            "Final Answer": 73.0
        },
        {
            "Index": 53,
            "GT": 437,
            "Query": "1 - 9 + 6 + 5 * 8 + 7 + 7 * 8 * 7 =   ",
            "Injected CoT": "5 * 8 = 40\n8 * 7 = 56\n56 * 7 = 392\n-2 + 6 = 5\n5 + 7 = 12\n12 + 40 = 52\n52 + 392 =",
            "Response": " 444",
            "Extract-Response": " 444\n</code>\n",
            "Answer": 444.0,
            "Final Answer": 444.0
        },
        {
            "Index": 54,
            "GT": -22,
            "Query": "6 * 6 - 6 * 6 + 8 - 7 - 5 - 2 * 9 =   ",
            "Injected CoT": "6 * 6 = 36\n6 * 6 = 36\n36 - 36 = 0\n2 * 8 = 18\n8 - 7 = 1\n1 - 5 = -4\n-4 - 18 =",
            "Response": " -22\n-22 + 9 = -13",
            "Extract-Response": " -13\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int a[n];\n    for (size_t i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        result += a[i];\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 55,
            "GT": 3825,
            "Query": "1 * 9 * 8 * 9 * 6 + 7 + 2 - 8 * 9 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 8 = 72\n72 * 9 = 648\n648 * 6 = 3887\n3887 + 7 = 3895\n3895 + 2 = 3897\n8 * 9 = 72\n3897 - 72 =",
            "Response": " 3825",
            "Extract-Response": " 3825\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num",
            "Answer": 3825.0,
            "Final Answer": 3825.0
        },
        {
            "Index": 57,
            "GT": 77,
            "Query": "4 - 4 + 8 - 6 - 1 + 3 * 8 * 3 + 4 =   ",
            "Injected CoT": "4 * 8 = 24\n4 - 4 = 0\n8 - 6 = 2\n2 - 1 = 1\n24 * 4 = 72\n72 + 1 = 73\n73 + 4 = 77\n0 + 77 =",
            "Response": " 77",
            "Extract-Response": " 77.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(input[i] >= '0' && input[i] <= '9')\n            {\n                num = (num * 10) + (input[i] - '0');\n\n                i++;\n            }\n\n            sum = sum + (num * sign);\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}",
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 59,
            "GT": 19,
            "Query": "1 * 4 + 6 + 3 + 4 * 5 - 5 - 3 * 3 =   ",
            "Injected CoT": "1 * 4 = 4\n4 + 6 = 10\n10 + 3 = 13\n4 * 5 = 21\n13 + 21 = 33\n5 - 5 = 0\n3 * 3 = 9\n33 - 9 =",
            "Response": " 24",
            "Extract-Response": "\n\n24",
            "Answer": 24.0,
            "Final Answer": 24.0
        },
        {
            "Index": 62,
            "GT": 1625,
            "Query": "4 * 5 * 5 * 8 * 2 + 7 + 4 + 9 + 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 * 5 = 100\n100 * 8 = 800\n800 * 2 = 1599\n1599 + 7 = 1607\n1607 + 4 = 1611\n1611 + 9 = 1620\n1620 + 5 =",
            "Response": " 1625",
            "Extract-Response": " 1625.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <time.h>\n\n#define SIZE 1000000\n\nint main()\n{\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum, max, count;\n\tchar str[SIZE];\n\tint arr[SIZE];\n\t\n\tclock_t start = clock();\n\t\n\tfor(i=0; i<SIZE; i++)\n\t\tarr[i] = 0;\n\t\n\tfor(i=2; i<SIZE; i++)\n\t{\n\t\tif(arr[i] == 0)\n\t\t{\n\t\t\tfor(j=i; j<SIZE; j+=i)\n\t\t\t\tarr[j] = 1;\n\t\t}\n\t}\n\t\n\tfor(i=2; i<SIZE; i++)\n\t{\n\t\tif(arr[i] == 0)\n\t\t{\n\t\t\tsprintf(str, \"%d\", i);\n\t\t\t\n\t\t\tcount = 0;\n\t\t\t\n\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t{\n\t\t\t\tif(str[j] == '0')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t{\n\t\t\t\t\tif(str[j] == '1')\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(count == 0)\n\t\t\t\t{\n\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(str[j] == '2')\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(count == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(str[j] == '3')\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(str[j] == '4')\n\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(str[j] == '5')\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(str[j] == '6')\n\t\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif(str[j] == '7')\n\t\t\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif(str[j] == '8')\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tfor(j=0; j<strlen(str); j++)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[j] == '9')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif(count == 0)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintf(\"%d\\n\", i);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tclock_t end = clock();\n\tdouble time_spent = (double)(end - start) / CLOCKS_PER_SEC;\n\t\n\tprintf(\"\\n\\nTime spent: %f\\n\", time_spent);\n\t\n\treturn 0;\n}",
            "Answer": 1625.0,
            "Final Answer": 1625.0
        },
        {
            "Index": 63,
            "GT": -15,
            "Query": "4 + 8 - 6 - 7 - 7 - 7 - 3 * 2 + 6 =   ",
            "Injected CoT": "3 * 2 = 6\n4 + 8 = 12\n12 - 6 = 6\n6 - 8 = -1\n-1 - 8 = -8\n-8 - 8 = -15\n-15 - 6 = -21\n-21 + 6 =",
            "Response": " -15",
            "Extract-Response": " -15.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -15.0,
            "Final Answer": -15.0
        },
        {
            "Index": 64,
            "GT": -4,
            "Query": "5 * 5 - 9 * 3 - 3 - 3 + 7 - 4 + 1 =   ",
            "Injected CoT": "5 * 5 = 25\n9 * 4 = 27\n25 - 27 = -2\n-2 - 4 = -5\n-5 - 4 = -8\n-8 + 7 = -1\n-1 - 4 = -5\n-5 + 1 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 65,
            "GT": -31,
            "Query": "2 - 2 * 3 - 9 - 4 * 2 - 2 - 1 * 8 =   ",
            "Injected CoT": "2 * 3 = 6\n2 - 6 = -4\n-4 - 9 = -13\n4 * 2 = 9\n-13 - 9 = -21\n2 - 2 = 0\n-1 * 9 = -8\n0 - 9 =",
            "Response": " -9",
            "Extract-Response": " -9.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -9.0,
            "Final Answer": -9.0
        },
        {
            "Index": 66,
            "GT": -4,
            "Query": "6 + 2 - 9 + 5 - 6 - 3 - 4 + 1 + 4 =   ",
            "Injected CoT": "6 + 2 = 8\n8 - 9 = -1\n-1 + 5 = 4\n4 - 6 = -1\n-1 - 3 = -5\n-5 - 4 = -9\n-9 + 1 = -8\n-8 + 4 =",
            "Response": " -4",
            "Extract-Response": " -4.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        sum_left = 0\n        sum_right = sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1",
            "Answer": -4.0,
            "Final Answer": -4.0
        },
        {
            "Index": 69,
            "GT": -31,
            "Query": "4 + 1 * 8 - 8 * 7 + 7 + 2 + 8 - 4 =   ",
            "Injected CoT": "1 * 8 = 8\n4 + 8 = 12\n8 * 7 = 56\n12 - 56 = -45\n-45 + 7 = -37\n-37 + 2 = -35\n-35 + 8 = -27\n-27 - 4 =",
            "Response": " -31",
            "Extract-Response": " -31.\n\nNote:\nThe length of the given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        sort(A.begin(), A.end());\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i, c = (c << 1) % mod) {\n            ans = (ans + (A[i] - A[n - i - 1]) * c) % mod;\n        }\n        return (int)ans;\n    }\n};",
            "Answer": -31.0,
            "Final Answer": -31.0
        },
        {
            "Index": 71,
            "GT": -11,
            "Query": "1 + 1 - 3 * 3 - 3 * 2 + 1 + 6 - 5 =   ",
            "Injected CoT": "3 * 3 = 9\n3 * 2 = 6\n1 + 1 = 2\n2 - 9 = -6\n-6 - 6 = -13\n-13 + 1 = -12\n-12 + 6 = -6\n-6 - 5 =",
            "Response": " -11",
            "Extract-Response": " -11.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -11.0,
            "Final Answer": -11.0
        },
        {
            "Index": 72,
            "GT": 9,
            "Query": "8 + 6 - 3 + 7 - 3 * 4 + 6 - 4 + 1 =   ",
            "Injected CoT": "8 + 6 = 14\n14 - 3 = 11\n11 + 7 = 18\n3 * 4 = 11\n18 - 11 = 6\n6 + 6 = 11\n11 - 4 = 8\n8 + 1 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 73,
            "GT": 109,
            "Query": "9 + 9 * 5 * 2 + 4 + 4 + 3 - 8 + 7 =   ",
            "Injected CoT": "9 * 5 = 45\n45 * 2 = 90\n9 + 90 = 99\n4 + 99 = 104\n104 + 4 = 107\n107 + 3 = 110\n110 - 8 = 102\n102 + 7 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s634",
            "Answer": 109.0,
            "Final Answer": 109.0
        },
        {
            "Index": 75,
            "GT": 63,
            "Query": "2 * 5 * 6 + 5 - 7 + 2 + 7 - 5 + 1 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 6 = 60\n60 + 5 = 65\n65 - 7 = 57\n57 + 2 = 60\n60 + 7 = 67\n67 - 5 = 62\n62 + 1 =",
            "Response": " 63",
            "Extract-Response": " 63\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n#include <bitset>\n#include <fstream>\n#include <regex>\n#include <stdlib.h>\n#include <math.h>\n#include <ctype.h>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == '+')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else if (s[i] == '-')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        }\n        else if (s[i] == '*')\n        {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        }\n        else\n        {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 63.0,
            "Final Answer": 63.0
        },
        {
            "Index": 78,
            "GT": 28,
            "Query": "1 * 1 + 7 + 2 - 5 + 9 - 1 + 3 * 5 =   ",
            "Injected CoT": "1 * 1 = 1\n1 + 7 = 8\n8 + 2 = 10\n10 - 5 = 5\n5 + 10 = 14\n14 - 1 = 13\n3 * 5 = 15\n13 + 15 =",
            "Response": " 28",
            "Extract-Response": "\n\n28",
            "Answer": 28.0,
            "Final Answer": 28.0
        },
        {
            "Index": 80,
            "GT": -31,
            "Query": "7 - 9 * 7 - 5 + 1 * 7 + 7 + 4 * 4 =   ",
            "Injected CoT": "9 * 7 = 63\n7 - 63 = -57\n1 * 7 = 7\n-57 + 7 = -49\n4 * 4 = 16\n-49 + 16 =",
            "Response": " -33",
            "Extract-Response": " -33.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -33.0,
            "Final Answer": -33.0
        },
        {
            "Index": 81,
            "GT": 428,
            "Query": "7 + 6 + 4 * 3 * 4 * 8 + 4 + 9 * 3 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 4 = 48\n48 * 8 = 384\n9 * 3 = 27\n6 + 6 = 13\n13 + 4 = 17\n17 + 384 = 401\n401 + 4 = 405\n405 + 27 =",
            "Response": " 432\n432 + 12 = 444\n\n444 is the answer.",
            "Extract-Response": " 444.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    for (size_t i = 1; i <= n; ++i) {\n        int num = i;\n        while (num) {\n            result += num % 10;\n            num /= 10;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 444.0,
            "Final Answer": 444.0
        },
        {
            "Index": 82,
            "GT": -10,
            "Query": "2 - 6 + 5 * 4 - 2 * 7 - 7 - 1 * 5 =   ",
            "Injected CoT": "5 * 4 = 20\n-6 + 20 = 15\n2 * 7 = 15\n15 - 15 = 0\n-7 - 5 = -12\n0 - 12 = -12\n-12 - 1 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 83,
            "GT": -12,
            "Query": "6 * 3 + 3 + 7 - 9 - 6 * 6 + 7 - 2 =   ",
            "Injected CoT": "7 * 3 = 18\n18 + 3 = 21\n21 + 7 = 28\n28 - 9 = 19\n7 * 7 = 36\n19 - 36 = -17\n-17 + 7 = -10\n-10 - 2 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 84,
            "GT": -21,
            "Query": "8 - 4 - 5 - 7 + 4 - 5 * 4 + 9 - 6 =   ",
            "Injected CoT": "8 - 4 = 4\n4 - 5 = -1\n-1 - 7 = -8\n-8 + 4 = -4\n-4 * 4 = -20\n-4 - 20 = -24\n-24 + 9 = -15\n-15 - 6 =",
            "Response": " -21",
            "Extract-Response": " -21.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[input] array.integer a\n\nArray of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 100,\n-100 \u2264 a[i] \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\"\"\"\n\ndef calculate(a):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(calculate([5, 3, 4, 5, 2, 6, 9, 1, 7, 4, 6, 8, 9, 3, 7, 1, 0, 5, 8, 7, 6, 8, 9, 4, 4, 1, 9, 9, 2, 0, 1, 1, 9, 6, 2, 4, 5, 5, 9, 4, 4, 9, 8, 9, 9, 1, 6, 8, 9, 2, 4, 8, 9, 5, 3, 4, 4, 6, 9, 2, 0, 0, 5, 5, 9, 3, 5, 8, 9, 5, 7, 9, 6, 8, 6, 9, 8, 4, 8, 9, 0, 1, 8, 4, 0, 3, 0, 5, 7, 2, 1, 1, 8, 5, 6, 7, 5, 5, 9, 3, 7, 8, 1, 9, 8, 4, 8, 0, 1, 9, 5, 7, 8, 9, 2, 8, 7, 8, 4, 9, 0, 8, 9, 2, 5, 4, 0, 7, 7, 5, 6, 7, 2, 1, 9, 9, 3, 5, 0, 7, 9, 1, 8, 3, 0, 4, 3, 7, 4, 6, 6, 9, 0, 6, 8, 5, 6, 4, 4, 9, 2, 9, 1, 7, 1, 4, 6, 0, 5, 9, 2, 4, 5, 5, 9, 8, 6, 2, 8, 9, 1, 9, 7, 7, 8, 8, 9, 7, 9, 8, 1, 2, 9, 0, 2, 1, 8, 8, 9, 8, 7, 9, 9, 2, 7, 2, 4, 4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 0, 0, 8, 9, 5, 2, 3, 1, 1, 7, 4, 8, 7, 5, 5, 0, 6, 9, 4, 6, 9, 4, 4, 5, 4, 0, 7, 2, 3, 9, 9, 7, 9, 5, 0, 2, 9, 7, 4, 9, 6, 3, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2, 1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6, 6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4, 0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4, 4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4, 9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7, 5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4, 8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2, 7, 5, 8, 8, 6, 6, 6, 8, 8, 1, 1, 6, 4, 2, 7, 1, 7, 1, 4, 7, 9, 9, 2, 4, 4, 4, 2, 9, 2, 8, 9, 3, 3, 8, 0, 3, 0, 8, 1, 3, 5, 3, 3, 6, 2, 7, 6, 6, 1, 4, 2, 8, 2, 8, 0, 6, 4, 4, 4, 4, 8, 6, 6, 4, 5, 2, 3, 8, 7, 4, 9, 3, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0, 4, 4, 0, 7, 7, 7, 9, 2, 3, 9, 1, 8, 0, 3, 3, 5, 1, 1, 0, 9, 8, 9, 0, 6, 9, 7, 9, 0, 7, 1, 4, 6, 8, 9, 2, 9, 1, 9, 9, 7, 7, 8, 8, 9, 8, 3, 1, 5, 2, 0, 0, 0, 5, 6, 9, 3, 2, 9, 0, 9, 6, 3, 2, 1, 5, 6, 8, 0, 4, 4, 9, 8, 8, 9, 9, 2, 5, 2, 0, 3, 5, 3, 9, 9, 3, 4, 0, 3, 6, 8, 0, 0, 6, 9, 7, 7, 7, 1, 0, 6, 5, 4, 3, 2, 4, 4, 0, 6, 5, 6, 6, 4, 5, 7, 2, 2, 3, 5, 5, 5, 3, 4, 9, 5, 6, 5, 8, 9, 5, 6, 4, 8, 9, 6, 6, 8, 8, 2, 2, 7, 8, 9, 5, 7, 5, 3, 1, 0, 5, 0, 7, 9, 2, 2, 7, 9, 6, 8, 9, 2, 5, 7, 5, 8, 8, 9, 4, 8, 8, 0, 1, 8, 7, 1, 8, 4, 9, 5, 7, 0, 7, 9, 5, 4, 1, 8, 7, 9, 2, 8, 3, 0, 7, 9, 5, 5, 0, 9, 5, 8, 2, 0, 9, 7, 4, 9, 6, 1, 9, 9, 7, 4, 0, 5, 6, 7, 5, 8, 5, 2, 5, 6, 3,",
            "Answer": -21.0,
            "Final Answer": -21.0
        },
        {
            "Index": 85,
            "GT": 249,
            "Query": "4 * 4 * 7 * 2 + 2 * 9 + 8 + 5 - 6 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 7 = 112\n112 * 2 = 223\n2 * 9 = 18\n223 + 18 = 242\n242 + 8 = 250\n250 + 5 = 255\n255 - 6 =",
            "Response": " 249",
            "Extract-Response": " 249\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char num[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", num) != EOF)\n    {\n        sum = 0;\n        l = strlen(num);\n        for(i = 0; i < l; i++)\n        {\n            if(num[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(num[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(num[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(num[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(num[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(num[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(num[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Answer": 249.0,
            "Final Answer": 249.0
        },
        {
            "Index": 86,
            "GT": -8,
            "Query": "7 + 1 + 3 - 2 * 2 * 5 + 6 + 4 - 9 =   ",
            "Injected CoT": "2 * 5 = 10\n7 + 0 + 3 - 10 = 0\n0 + 6 + 4 - 9 =",
            "Response": " -1\n\n-1\n\n*/",
            "Extract-Response": " -1",
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 88,
            "GT": 69,
            "Query": "6 * 8 + 7 - 3 * 4 + 8 + 6 + 9 + 3 =   ",
            "Injected CoT": "6 * 8 = 48\n3 * 4 = 12\n48 + 7 = 55\n55 - 12 = 42\n42 + 8 = 51\n51 + 6 = 57\n57 + 9 = 66\n66 + 3 =",
            "Response": " 69",
            "Extract-Response": " 69\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum;\n\n    while(scanf(\"%s\", str) != EOF)\n    {\n        sum = 0;\n        l = strlen(str);\n        for(i = 0; i < l; i++)\n        {\n            if(str[i] == '1')\n            {\n                sum = sum + 2;\n            }\n            else if(str[i] == '2')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '3')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '4')\n            {\n                sum = sum + 4;\n            }\n            else if(str[i] == '5')\n            {\n                sum = sum + 5;\n            }\n            else if(str[i] == '6')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '7')\n            {\n                sum = sum + 3;\n            }\n            else if(str[i] == '8')\n            {\n                sum = sum + 7;\n            }\n            else if(str[i] == '9')\n            {\n                sum = sum + 6;\n            }\n            else if(str[i] == '0')\n            {\n                sum = sum + 6;\n            }\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
            "Answer": 69.0,
            "Final Answer": 69.0
        },
        {
            "Index": 90,
            "GT": 109,
            "Query": "4 * 3 * 6 + 6 * 8 - 8 - 9 - 1 + 7 =   ",
            "Injected CoT": "4 * 3 = 12\n12 * 6 = 72\n6 * 9 = 48\n72 + 48 = 120\n120 - 9 = 112\n112 - 9 = 103\n103 - 1 = 102\n102 + 7 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 109.0,
            "Final Answer": 109.0
        },
        {
            "Index": 91,
            "GT": 75,
            "Query": "6 + 3 * 1 + 6 * 5 + 8 * 5 - 2 - 2 =   ",
            "Injected CoT": "2 * 1 = 2\n6 * 5 = 30\n8 * 5 = 40\n6 + 2 = 9\n9 + 2 = 12\n12 + 30 = 42\n42 + 40 = 82\n82 - 2 = 80\n80 - 2 =",
            "Response": " 78\n\n78\n\n*/",
            "Extract-Response": " 78",
            "Answer": 78.0,
            "Final Answer": 78.0
        },
        {
            "Index": 92,
            "GT": -69,
            "Query": "7 + 6 - 3 * 4 - 5 * 3 - 9 * 7 + 8 =   ",
            "Injected CoT": "3 * 4 = 11\n5 * 3 = 15\n9 * 7 = 63\n7 + 6 = 13\n13 - 11 = 1\n1 - 15 = -14\n-14 - 63 = -77\n-77 + 8 =",
            "Response": " -69",
            "Extract-Response": " -69.\n\nNote:\n\nThe number of operations is between 2 and 2000.\nThe answer is guaranteed to be fit in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int n = s.size();\n        int ans = 0;\n        int cur = 0;\n        int sign = 1;\n        stack<int> st;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == ' ') continue;\n            if(s[i] == '+') {\n                ans += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if(s[i] == '-') {\n                ans += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if(s[i] == '(') {\n                st.push(ans);\n                st.push(sign);\n                ans = 0;\n                sign = 1;\n            } else if(s[i] == ')') {\n                ans += sign * cur;\n                cur = 0;\n                ans *= st.top();\n                st.pop();\n                ans += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        if(cur) ans += sign * cur;\n        return ans;\n    }\n};",
            "Answer": -69.0,
            "Final Answer": -69.0
        },
        {
            "Index": 93,
            "GT": 15,
            "Query": "7 - 7 + 7 + 2 * 2 * 2 + 5 - 7 + 2 =   ",
            "Injected CoT": "2 * 2 = 4\n2 * 4 = 7\n7 - 7 = 0\n0 + 7 = 7\n7 + 7 = 15\n15 + 5 = 20\n20 - 7 = 13\n13 + 2 =",
            "Response": " 15",
            "Extract-Response": " 15\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 15.0,
            "Final Answer": 15.0
        },
        {
            "Index": 94,
            "GT": 48,
            "Query": "4 * 4 + 5 * 5 + 8 + 5 * 1 + 3 - 9 =   ",
            "Injected CoT": "4 * 4 = 16\n6 * 6 = 25\n16 + 25 = 41\n6 * 1 = 6\n8 + 6 = 13\n41 + 6 = 46\n46 + 3 = 49\n49 - 9 =",
            "Response": " 40",
            "Extract-Response": " 40.\n\nNote:\n\nThere are at least two nodes in this BST.\nWe define the depth of a node as the number of edges from the root to the node.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int cur = 0;\n        dfs(root, cur, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, int cur, int& sum) {\n        if (!root) return;\n        cur = cur * 10 + root->val;\n        if (!root->left && !root->right) {\n            sum += cur;\n            return;\n        }\n        dfs(root->left, cur, sum);\n        dfs(root->right, cur, sum);\n    }\n};",
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 96,
            "GT": 354,
            "Query": "1 - 4 + 6 * 7 - 9 + 6 * 3 * 2 * 9 =   ",
            "Injected CoT": "6 * 7 = 42\n-4 + 42 = 38\n6 * 3 = 18\n18 * 2 = 35\n35 * 9 = 324\n1 - 9 = -8\n38 + 324 = 362\n-8 + 362 =",
            "Response": " 354",
            "Extract-Response": " 354\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add\n     * If current character is '-', then subtract\n     * If current character is a number, then convert it to number\n     * and add to result\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', then add */\n        if(str[i] == '+')\n        {\n            /* Add result so far to final result */\n            result = result + num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Set sign as 1 for addition */\n            sign = 1;\n        }\n        /* If current character is '-', then subtract */\n        else if(str[i] == '-')\n        {\n            /* Add result so far to final result */\n            result = result + num;\n\n            /* Reset number to 0 */\n            num = 0;\n\n            /* Set sign as -1 for subtraction */\n            sign = -1;\n        }\n        /* If current character is a number, then convert it to number */\n        else\n        {\n            /* Forming number by multiplying 10 and adding current digit */\n            num = (num * 10) + (str[i] - '0');\n        }\n    }\n\n    /* Add last number to result */\n    result = result + num;\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Answer": 354.0,
            "Final Answer": 354.0
        },
        {
            "Index": 99,
            "GT": 408,
            "Query": "6 * 5 * 3 * 1 + 8 - 5 + 5 * 9 * 7 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 3 = 90\n90 * 1 = 90\n90 + 7 = 98\n5 * 9 = 45\n45 * 7 = 315\n98 + 315 =",
            "Response": " 413",
            "Extract-Response": " 413.\n\nNote:\n\nThe expression is always valid.\nEvaluate the expression to get the answer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, n = s.size();\n        stack<int> nums;\n        for (int i = 0; i < n; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                int num = 0;\n                while (i < n && s[i] >= '0') {\n                    num = num * 10 + s[i++] - '0';\n                }\n                res += sign * num;\n                --i;\n            } else if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                nums.push(res);\n                nums.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res = res * nums.top();\n                nums.pop();\n                res += nums.top();\n                nums.pop();\n            }\n        }\n        return res;\n    }\n};",
            "Answer": 413.0,
            "Final Answer": 413.0
        },
        {
            "Index": 101,
            "GT": -119,
            "Query": "4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =   ",
            "Injected CoT": "4 * 4 = 16\n16 * 1 = 16\n4 * 3 = 15\n15 * 6 = 90\n4 * 8 = 40\n90 + 40 = 130\n130 + 4 = 135\n16 - 135 =",
            "Response": " -119\n\n4 * 4 * 1 - 5 * 3 * 6 - 5 * 8 - 5 =    \n4 * 4 = 16\n16 * 1 = 16\n4 * 3 = 15\n15 * 6 = 90\n4 * 8 = 40\n90 + 40 = 130\n130 + 4 = 134\n16 - 134 = -118",
            "Extract-Response": " -118",
            "Answer": -118.0,
            "Final Answer": -118.0
        },
        {
            "Index": 102,
            "GT": 6,
            "Query": "6 - 3 - 3 - 3 + 5 - 9 + 1 + 8 + 4 =   ",
            "Injected CoT": "6 - 3 = 3\n3 - 3 = 0\n0 - 3 = -3\n-3 + 5 = 2\n2 - 10 = -7\n-7 + 1 = -6\n-6 + 8 = 2\n2 + 4 =",
            "Response": " 6",
            "Extract-Response": " 6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 103,
            "GT": -122,
            "Query": "9 * 9 - 8 * 1 * 1 * 7 - 7 * 3 * 7 =   ",
            "Injected CoT": "9 * 9 = 81\n8 * 1 = 8\n8 * 1 * 1 = 8\n8 * 1 * 1 * 6 = 56\n6 * 3 = 21\n6 * 3 * 6 = 147\n56 + 147 = 203\n81 - 203 =",
            "Response": " -122\n\n-122 is the answer.",
            "Extract-Response": " -122.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, sum, len;\n\n    while(1){\n        gets(input);\n\n        if(strcmp(input, \"0\") == 0){\n            break;\n        }\n\n        len = strlen(input);\n        sum = 0;\n\n        for(i = 0, j = len - 1; i < len; i++, j--){\n            sum = sum + (input[i] - '0') * pow(2, j);\n        }\n\n        printf(\"%d\\n\", sum);\n    }\n\n    return 0;\n}",
            "Answer": -122.0,
            "Final Answer": -122.0
        },
        {
            "Index": 104,
            "GT": 227,
            "Query": "3 * 8 * 1 * 9 + 8 - 9 - 6 + 9 + 9 =   ",
            "Injected CoT": "3 * 8 = 24\n24 * 1 = 24\n24 * 10 = 216\n216 + 8 = 224\n224 - 10 = 215\n215 - 6 = 209\n209 + 10 = 218\n218 + 10 =",
            "Response": " 228",
            "Extract-Response": "\n\n228.",
            "Answer": 228.0,
            "Final Answer": 228.0
        },
        {
            "Index": 106,
            "GT": 1005,
            "Query": "8 * 9 * 5 * 3 - 3 * 7 - 5 - 7 * 7 =   ",
            "Injected CoT": "8 * 9 = 72\n72 * 5 = 360\n360 * 3 = 1080\n3 * 6 = 21\n6 * 6 = 49\n21 + 5 = 26\n49 + 26 = 75\n1080 - 75 =",
            "Response": " 1005\n\n1005\n\n*/",
            "Extract-Response": " 1005\n\n*/",
            "Answer": 1005.0,
            "Final Answer": 1005.0
        },
        {
            "Index": 107,
            "GT": -23,
            "Query": "7 * 8 - 8 - 2 - 2 - 4 - 9 - 6 * 9 =   ",
            "Injected CoT": "7 * 8 = 56\n56 - 8 = 48\n48 - 2 = 46\n46 - 2 = 45\n45 - 4 = 40\n40 - 9 = 31\n6 * 9 = 54\n31 - 54 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = nums[0]\n        cur_max = cur_min = res\n        for i in range(1, len(nums)):\n            cur_max, cur_min = max(cur_max * nums[i], cur_min * nums[i], nums[i]), min(cur_max * nums[i], cur_min * nums[i], nums[i])\n            res = max(res, cur_max)\n        return res",
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 108,
            "GT": 2,
            "Query": "4 + 8 + 8 + 7 - 3 * 1 * 3 - 4 * 4 =   ",
            "Injected CoT": "3 * 1 = 3\n4 * 4 = 16\n4 + 8 = 12\n12 + 8 = 20\n20 + 6 = 27\n27 - 3 = 24\n24 - 16 = 8\n8 - 6 =",
            "Response": " 2\n2 + 3 = 5\n\n5",
            "Extract-Response": "\n5\n\n*/",
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 109,
            "GT": 112,
            "Query": "3 - 9 + 3 * 5 * 5 - 5 + 6 * 9 - 6 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 5 = 75\n3 - 8 = -6\n-6 + 75 = 69\n6 * 8 = 54\n69 + 54 = 123\n-5 - 6 = -11\n123 - 11 =",
            "Response": " 112",
            "Extract-Response": "\n\n112",
            "Answer": 112.0,
            "Final Answer": 112.0
        },
        {
            "Index": 110,
            "GT": -6,
            "Query": "3 + 1 - 5 + 1 - 6 - 3 * 6 + 2 * 9 =   ",
            "Injected CoT": "3 + 1 = 4\n4 - 5 = -1\n-1 + 1 = 0\n0 - 5 = -6\n3 * 5 = 18\n2 * 9 = 18\n-6 + 18 = 12\n12 + 18 =",
            "Response": " 30",
            "Extract-Response": "\n\n30",
            "Answer": 30.0,
            "Final Answer": 30.0
        },
        {
            "Index": 111,
            "GT": 16,
            "Query": "7 + 1 + 5 + 1 - 9 + 2 - 5 + 7 + 7 =   ",
            "Injected CoT": "7 + 1 = 8\n8 + 4 = 13\n13 + 1 = 14\n14 - 9 = 4\n4 + 2 = 7\n7 - 4 = 2\n2 + 7 = 9\n9 + 7 =",
            "Response": " 16\n16 - 5 = 11\n11 + 1 = 12\n12 - 9 = 3\n3 + 5 = 8\n8 + 7 = 15\n15 - 9 = 6\n6 + 1 = 7\n7 + 7 = 14\n14 - 5 = 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        sum += a;\n    }\n    cout << sum << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 115,
            "GT": -7,
            "Query": "3 * 1 + 7 - 6 * 6 + 1 + 2 * 1 * 9 =   ",
            "Injected CoT": "3 * 1 = 3\n6 * 6 = 36\n2 * 1 = 2\n2 * 9 = 18\n3 + 8 = 10\n10 - 36 = -26\n-26 + 1 = -25\n-25 + 18 =",
            "Response": " -7",
            "Extract-Response": " -7.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in range [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -7.0,
            "Final Answer": -7.0
        },
        {
            "Index": 117,
            "GT": -23,
            "Query": "3 + 7 + 8 - 3 + 2 * 8 - 5 - 7 * 7 =   ",
            "Injected CoT": "3 + 7 = 10\n10 + 8 = 18\n18 - 3 = 15\n2 * 8 = 15\n15 + 15 = 31\n31 - 5 = 26\n7 * 7 = 49\n26 - 49 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000000, 1000000].\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 118,
            "GT": 6,
            "Query": "3 * 3 + 8 - 9 * 1 + 9 - 3 + 1 - 9 =   ",
            "Injected CoT": "3 * 3 = 9\n9 + 9 = 17\n9 * 1 = 9\n17 - 9 = 9\n9 + 9 = 17\n17 - 3 = 14\n14 + 1 = 15\n15 - 9 =",
            "Response": " 6",
            "Extract-Response": " 6\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 6.0,
            "Final Answer": 6.0
        },
        {
            "Index": 119,
            "GT": -4,
            "Query": "2 * 1 * 1 + 6 + 7 + 8 - 6 * 5 + 3 =   ",
            "Injected CoT": "2 * 1 = 2\n2 * 1 = 2\n2 + 6 = 7\n7 + 7 = 15\n15 + 7 = 23\n23 - 6 = 17\n17 * 5 = 85\n85 + 3 =",
            "Response": " 88",
            "Extract-Response": "\n\n88",
            "Answer": 88.0,
            "Final Answer": 88.0
        },
        {
            "Index": 120,
            "GT": -128,
            "Query": "4 + 6 * 3 - 9 * 7 + 1 - 7 - 9 * 9 =   ",
            "Injected CoT": "6 * 3 = 18\n9 * 7 = 62\n9 * 9 = 81\n4 + 18 = 22\n22 - 62 = -41\n-41 + 1 = -40\n-40 - 7 = -47\n-47 - 81 =",
            "Response": " -128",
            "Extract-Response": " -128\n</code>\n",
            "Answer": -128.0,
            "Final Answer": -128.0
        },
        {
            "Index": 122,
            "GT": -14,
            "Query": "2 + 4 - 2 - 4 * 5 - 1 - 1 + 2 + 2 =   ",
            "Injected CoT": "4 * 5 = 20\n2 + 4 = 6\n6 - 2 = 4\n4 - 20 = -16\n-16 - 0 = -17\n-17 - 0 = -18\n-18 + 2 = -16\n-16 + 2 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -14.0,
            "Final Answer": -14.0
        },
        {
            "Index": 124,
            "GT": 11,
            "Query": "6 * 1 + 1 * 7 + 9 - 9 + 1 - 8 + 5 =   ",
            "Injected CoT": "6 * 1 = 6\n1 * 7 = 7\n6 + 7 = 13\n13 + 9 = 21\n21 - 9 = 13\n13 + 1 = 14\n14 - 8 = 6\n6 + 5 =",
            "Response": " 11\n\n11",
            "Extract-Response": "\n\n11",
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 125,
            "GT": -10,
            "Query": "2 * 8 + 1 + 3 + 2 - 5 - 3 * 9 * 1 =   ",
            "Injected CoT": "2 * 8 = 16\n16 + 0 = 17\n17 + 3 = 20\n20 + 2 = 22\n9 * 0 = 9\n3 * 9 = 27\n27 * 0 = 27\n22 - 5 = 17\n17 - 27 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nThere will only be one optimal division for the given array.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int ans = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int curr_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            max_product = curr_max;\n            min_product = curr_min;\n            ans = max(ans, max_product);\n        }\n        return ans;\n    }\n};",
            "Answer": -10.0,
            "Final Answer": -10.0
        },
        {
            "Index": 126,
            "GT": 20,
            "Query": "5 + 6 + 4 + 4 * 3 - 2 * 3 + 7 - 8 =   ",
            "Injected CoT": "4 * 3 = 12\n2 * 3 = 6\n5 + 6 = 11\n11 + 4 = 14\n14 + 12 = 27\n27 - 6 = 21\n21 + 7 = 28\n28 - 8 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < n; ++i) {\n        char c;\n        cin >> c;\n\n        if (c == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (c == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (c == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + (c - '0');\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 128,
            "GT": 51,
            "Query": "5 + 7 + 3 - 2 + 5 * 6 * 1 + 9 - 1 =   ",
            "Injected CoT": "5 + 7 = 12\n12 + 3 = 15\n15 - 2 = 13\n5 * 6 = 29\n29 * 1 = 29\n13 + 29 = 43\n43 + 9 = 52\n52 - 1 =",
            "Response": " 51",
            "Extract-Response": " 51.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 51.0,
            "Final Answer": 51.0
        },
        {
            "Index": 129,
            "GT": -34,
            "Query": "7 - 5 + 6 * 2 + 7 - 7 + 1 - 7 * 7 =   ",
            "Injected CoT": "6 * 2 = 12\n7 * 7 = 49\n-5 + 12 = 7\n7 + 6 = 14\n14 + 7 = 20\n20 + 1 = 21\n21 - 49 = -28\n-28 - 7 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nA positive integer.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe answer to the problem.\n\"\"\"\n\ndef digitSum(n):\n    return sum(int(i) for i in str(n))\n\ndef digitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1])\n\ndef digitSumSquared(n):\n    return sum(int(i)**2 for i in str(n))\n\ndef digitSumSquaredInverse(n):\n    return sum(int(i)**2 for i in str(n)[::-1])\n\ndef digitSumCubed(n):\n    return sum(int(i)**3 for i in str(n))\n\ndef digitSumCubedInverse(n):\n    return sum(int(i)**3 for i in str(n)[::-1])\n\ndef digitSumFactorial(n):\n    return sum(math.factorial(int(i)) for i in str(n))\n\ndef digitSumFactorialInverse(n):\n    return sum(math.factorial(int(i)) for i in str(n)[::-1])\n\ndef digitSumFibonacci(n):\n    return sum(fib(int(i)) for i in str(n))\n\ndef digitSumFibonacciInverse(n):\n    return sum(fib(int(i)) for i in str(n)[::-1])\n\ndef digitSumPrime(n):\n    return sum(is_prime(int(i)) for i in str(n))\n\ndef digitSumPrimeInverse(n):\n    return sum(is_prime(int(i)) for i in str(n)[::-1])\n\ndef digitSumOdd(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0)\n\ndef digitSumOddInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0)\n\ndef digitSumEven(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0)\n\ndef digitSumEvenInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0)\n\ndef digitSumOddDigit(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0)\n\ndef digitSumOddDigitInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0)\n\ndef digitSumEvenDigit(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0)\n\ndef digitSumEvenDigitInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0)\n\ndef digitSumOddDigitSum(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSum(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumSquared(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumSquared(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumSquaredInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumSquared(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumSquared(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumSquared(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumSquaredInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumSquared(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumCubed(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumCubed(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumCubedInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumCubed(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumCubed(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumCubed(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumCubedInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumCubed(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumFactorial(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumFactorial(int(i)) % 2 != 0)\n\ndef digitSumOddDigitSumFactorialInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 != 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 != 0 and digitSumFactorial(int(i)) % 2 != 0)\n\ndef digitSumEvenDigitSumFactorial(n):\n    return sum(int(i) for i in str(n) if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumFactorial(int(i)) % 2 == 0)\n\ndef digitSumEvenDigitSumFactorialInverse(n):\n    return sum(int(i) for i in str(n)[::-1] if int(i) % 2 == 0 and int(i) % 10 != 0 and digitSum(int(i)) % 2 == 0 and digitSumFactorial(int(i)) % 2 == 0)\n\ndef digitSumOddDigitSumFibon",
            "Answer": -35.0,
            "Final Answer": -35.0
        },
        {
            "Index": 131,
            "GT": -85,
            "Query": "3 - 2 - 9 + 2 - 8 - 2 - 6 - 9 * 7 =   ",
            "Injected CoT": "-9 * 7 = -63\n4 - 2 - 9 + 2 - 8 - 2 - 6 - (-63) =",
            "Response": "\n4 - 2 - 9 + 2 - 8 - 2 - 6 + 63 =\n4 - 2 - 9 + 2 - 8 - 2 + 57 =\n4 - 2 - 9 + 2 - 8 + 55 =\n4 - 2 - 9 + 47 =\n4 - 2 + 45 =\n4 + 43 =\n47",
            "Extract-Response": "\n\n47",
            "Answer": 47.0,
            "Final Answer": 47.0
        },
        {
            "Index": 132,
            "GT": 212,
            "Query": "8 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =   ",
            "Injected CoT": "8 * 9 = 72\n3 * 8 = 24\n24 * 5 = 120\n72 + 3 = 74\n120 + 74 = 194\n9 + 7 = 16\n194 + 16 =",
            "Response": " 210\n2 + 2 = 4\n210 + 4 = 214\n\n2.\n\n1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =    \n1 * 2 = 2\n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n40320 * 9 = 362880\n362880 + 2 = 362882\n3 * 8 = 24\n24 * 5 = 120\n120 + 24 = 144\n7 + 9 = 16\n144 + 16 = 160\n2 + 2 = 4\n160 + 4 = 164\n\n3.\n\n1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 + 2 + 3 * 8 * 5 + 7 + 9 + 2 =    \n1 * 2 = 2\n2 * 3 = 6\n6 * 4 = 24\n24 * 5 = 120\n120 * 6 = 720\n720 * 7 = 5040\n5040 * 8 = 40320\n40320 * 9 = 362880\n362880 + 2 = 362882\n3 * 8 = 24\n24 * 5 = 120\n120 + 24 = 144\n7 + 9 = 16\n144 + 16 = 160\n2 + 2 = 4\n160 + 4 = 164",
            "Extract-Response": " 164",
            "Answer": 164.0,
            "Final Answer": 164.0
        },
        {
            "Index": 134,
            "GT": -34,
            "Query": "7 * 6 + 8 - 3 - 2 - 7 * 9 - 2 * 8 =   ",
            "Injected CoT": "6 * 6 = 42\n42 + 8 = 50\n50 - 3 = 47\n47 - 2 = 45\n6 * 9 = 63\n2 * 8 = 16\n63 + 16 = 79\n45 - 79 =",
            "Response": " -34",
            "Extract-Response": " -34.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": -34.0,
            "Final Answer": -34.0
        },
        {
            "Index": 136,
            "GT": 5,
            "Query": "9 * 1 - 2 * 8 * 5 + 3 - 8 + 9 * 9 =   ",
            "Injected CoT": "9 * 1 = 9\n2 * 8 = 16\n16 * 5 = 80\n9 - 80 = -72\n-72 + 3 = -68\n-68 - 8 = -76\n9 * 9 = 81\n-76 + 81 =",
            "Response": " 5",
            "Extract-Response": " 5\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int number = 0;\n    int i = 0;\n\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '+') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '-') {\n            result += sign * number;\n            sign = -1;\n            number = 0;\n        } else if (s[i] == '*') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else if (s[i] == '/') {\n            result += sign * number;\n            sign = 1;\n            number = 0;\n        } else {\n            number = number * 10 + s[i] - '0';\n        }\n        ++i;\n    }\n\n    result += sign * number;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 138,
            "GT": 60,
            "Query": "4 * 8 - 3 - 6 - 2 - 6 + 3 + 6 * 7 =   ",
            "Injected CoT": "4 * 8 = 32\n32 - 3 = 29\n29 - 5 = 23\n23 - 2 = 21\n21 - 5 = 15\n15 + 3 = 18\n5 * 7 = 42\n18 + 42 =",
            "Response": " 60",
            "Extract-Response": " 60.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 60.0,
            "Final Answer": 60.0
        },
        {
            "Index": 140,
            "GT": -24,
            "Query": "2 * 4 + 7 - 7 * 3 - 3 + 9 - 8 * 3 =   ",
            "Injected CoT": "2 * 4 = 8\n8 + 7 = 15\n7 * 3 = 21\n15 - 21 = -5\n-5 - 3 = -9\n-9 + 9 = 0\n8 * 3 = 24\n0 - 24 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 141,
            "GT": 31,
            "Query": "4 + 9 + 9 - 6 + 3 + 3 + 9 + 3 - 3 =   ",
            "Injected CoT": "4 + 9 = 13\n13 + 9 = 22\n22 - 6 = 16\n16 + 3 = 18\n18 + 3 = 22\n22 + 9 = 31\n31 + 3 = 34\n34 - 3 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        int leftSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (leftSum == sum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 31.0,
            "Final Answer": 31.0
        },
        {
            "Index": 142,
            "GT": -7,
            "Query": "6 * 4 - 9 * 2 - 8 - 2 * 3 + 6 - 5 =   ",
            "Injected CoT": "6 * 4 = 24\n9 * 2 = 19\n2 * 3 = 6\n24 - 19 = 6\n6 - 8 = -2\n-2 + 6 = 4\n4 - 5 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nNote:\n\nThe length of the given array is positive and will not exceed 10,000\nThe answer is guaranteed to fit in a 32-bit signed integer\n\n*/\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int sum = 0;\n        int maxSum = INT_MIN;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            maxSum = max(maxSum, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return maxSum;\n    }\n};",
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 145,
            "GT": -23,
            "Query": "7 + 9 * 8 + 1 * 3 + 3 - 9 * 3 * 4 =   ",
            "Injected CoT": "9 * 8 = 71\n1 * 3 = 3\n9 * 3 = 27\n27 * 4 = 108\n7 + 71 = 79\n79 + 3 = 82\n82 + 3 = 85\n85 - 108 =",
            "Response": " -23",
            "Extract-Response": " -23.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array can be negative or non-negative integers.\n\n\"\"\"\n\nclass Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        # DFS\n        # Time O(E + Q * E) E is the number of equations, Q is the number of queries\n        # Space O(E)\n        def dfs(start, end, visited):\n            if start == end:\n                return 1.0\n            visited.add(start)\n            for next in graph[start]:\n                if next in visited:\n                    continue\n                visited.add(next)\n                d = dfs(next, end, visited)\n                if d > 0:\n                    return d * graph[start][next]\n            return -1.0\n\n        graph = collections.defaultdict(dict)\n        for i, (x, y) in enumerate(equations):\n            graph[x][y] = values[i]\n            graph[y][x] = 1 / values[i]\n\n        res = []\n        for x, y in queries:\n            visited = set()\n            d = dfs(x, y, visited)\n            res.append(d)\n        return res",
            "Answer": -23.0,
            "Final Answer": -23.0
        },
        {
            "Index": 146,
            "GT": -22,
            "Query": "2 + 6 - 8 - 6 + 9 * 1 - 7 * 3 - 4 =   ",
            "Injected CoT": "9 * 1 = 9\n7 * 3 = 21\n2 + 7 = 8\n8 - 8 = 0\n0 - 7 = -6\n-6 + 9 = 3\n3 - 21 = -18\n-18 - 4 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simpleOperations(a):\n    # Write your code here\n    return sum(a)",
            "Answer": -22.0,
            "Final Answer": -22.0
        },
        {
            "Index": 147,
            "GT": 130,
            "Query": "8 + 7 + 3 + 9 * 5 - 6 + 9 + 8 * 8 =   ",
            "Injected CoT": "9 * 5 = 45\n7 + 7 = 15\n15 + 3 = 18\n18 + 45 = 63\n7 * 7 = 64\n9 + 64 = 73\n73 - 6 = 67\n67 + 9 =",
            "Response": " 76\n8 * 8 = 64\n76 + 64 = 140",
            "Extract-Response": " 140\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 0;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n        if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n            continue;\n        }\n        if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n            continue;\n        }\n        if (s[i] == '*') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n            continue;\n        }\n        if (s[i] == '=') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n            continue;\n        }\n        if (operation == 0) {\n            current = current * 10 + s[i] - '0';\n        } else {\n            current = current * (s[i] - '0');\n            operation = 0;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 140.0,
            "Final Answer": 140.0
        },
        {
            "Index": 148,
            "GT": 10,
            "Query": "9 + 4 + 2 - 5 * 1 - 4 + 7 + 5 - 8 =   ",
            "Injected CoT": "9 + 5 = 13\n13 + 2 = 15\n15 - 5 = 10\n10 - 1 = 9\n9 - 5 = 5\n5 + 7 = 12\n12 + 5 = 17\n17 - 8 =",
            "Response": " 9",
            "Extract-Response": " 9\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 9.0,
            "Final Answer": 9.0
        },
        {
            "Index": 149,
            "GT": -35,
            "Query": "2 * 1 - 4 * 7 - 5 - 4 - 6 + 3 * 2 =   ",
            "Injected CoT": "2 * 1 = 2\n4 * 7 = 28\n3 * 2 = 6\n2 - 28 = -26\n-26 - 6 = -31\n-31 - 4 = -35\n-35 - 6 = -41\n-41 + 6 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\nNote:\nThe space between two operators and numbers should be a single space.\nEach test case has  lines.\nThe answer for each test case would be printed in a separate line.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[1000];\n    int i,j,k,l,m,n,t,x,y,flag,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(i=1;i<=t;i++)\n    {\n        gets(s);\n        l=strlen(s);\n        flag=0;\n        sum=0;\n        for(j=0;j<l;j++)\n        {\n            if(s[j]==' ')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                x=s[j]-'0';\n                flag=1;\n            }\n            else\n            {\n                y=s[j]-'0';\n                flag=0;\n                if(x==1)\n                {\n                    sum=sum+y;\n                }\n                else if(x==2)\n                {\n                    sum=sum-y;\n                }\n                else if(x==3)\n                {\n                    sum=sum*y;\n                }\n                else if(x==4)\n                {\n                    sum=sum/y;\n                }\n            }\n        }\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}",
            "Answer": -35.0,
            "Final Answer": -35.0
        },
        {
            "Index": 150,
            "GT": -32,
            "Query": "3 * 5 - 2 - 8 * 8 + 9 + 4 + 2 * 3 =   ",
            "Injected CoT": "3 * 5 = 15\n8 * 8 = 64\n15 - 2 = 13\n13 - 64 = -51\n8 + 4 = 13\n2 * 3 = 6\n-51 + 13 = -38\n-38 + 6 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};",
            "Answer": -32.0,
            "Final Answer": -32.0
        },
        {
            "Index": 151,
            "GT": 0,
            "Query": "1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =   ",
            "Injected CoT": "5 * 1 = 5\n1 - 4 = -3\n-3 + 9 = 6\n6 + 4 = 11\n11 - 5 = 5\n5 - 7 = -2\n-2 - 3 = -5\n-5 + 5 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5 - 7 - 3 + 5 * 1 =     0\nThe answer is  0\n\n1 - 4 + 9 + 4 - 5",
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 152,
            "GT": -109,
            "Query": "6 + 3 - 2 * 8 - 4 * 5 * 5 + 3 - 5 =   ",
            "Injected CoT": "2 * 8 = 16\n4 * 5 = 20\n20 * 5 = 100\n6 + 3 = 8\n8 - 16 = -7\n-7 - 100 = -107\n-107 + 3 = -104\n-104 - 5 =",
            "Response": " -109",
            "Extract-Response": " -109.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -109.0,
            "Final Answer": -109.0
        },
        {
            "Index": 153,
            "GT": 42,
            "Query": "6 * 6 - 4 * 2 + 2 * 9 - 5 - 5 + 6 =   ",
            "Injected CoT": "6 * 6 = 36\n4 * 2 = 8\n2 * 9 = 17\n36 - 8 = 28\n28 + 17 = 46\n5 + 5 = 10\n46 - 10 = 36\n36 + 6 =",
            "Response": " 42",
            "Extract-Response": " 42\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 42.0,
            "Final Answer": 42.0
        },
        {
            "Index": 156,
            "GT": -3,
            "Query": "4 * 5 + 2 + 8 - 1 * 4 - 4 * 6 - 5 =   ",
            "Injected CoT": "4 * 5 = 20\n20 + 2 = 22\n22 + 8 = 30\n1 * 4 = 4\n4 * 7 = 24\n30 - 4 = 26\n26 - 24 = 2\n2 - 5 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\n\nThe length of the input array is between [1, 10,000].\nElements in the given array will be in range [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -3.0,
            "Final Answer": -3.0
        },
        {
            "Index": 159,
            "GT": 22,
            "Query": "6 + 4 * 2 * 2 + 1 * 3 - 7 + 1 + 3 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 2 = 16\n1 * 3 = 3\n6 + 16 = 21\n21 + 3 = 25\n25 - 7 = 18\n18 + 1 = 19\n19 + 3 =",
            "Response": " 22\n\n22",
            "Extract-Response": " 22\n\n*/",
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 162,
            "GT": 84,
            "Query": "3 - 3 + 9 * 8 + 6 - 9 + 9 - 3 + 9 =   ",
            "Injected CoT": "10 * 8 = 72\n3 - 3 = 0\n0 + 72 = 72\n72 + 6 = 78\n78 - 10 = 69\n69 + 10 = 78\n78 - 3 = 75\n75 + 10 =",
            "Response": " 85\n85 - 9 = 76\n76 + 10 = 86\n86 - 9 = 77\n77 + 10 = 87\n87 - 9 = 78\n78 + 10 = 88\n88 - 9 = 79\n79 + 10 = 89\n89 - 9 = 80\n80 + 10 = 90\n90 - 9 = 81\n81 + 10 = 91\n91 - 9 = 82\n82 + 10 = 92\n92 - 9 = 83\n83 + 10 = 93\n93 - 9 = 84\n84 + 10 = 94\n94 - 9 = 85\n85 + 10 = 95\n95 - 9 = 86\n86 + 10 = 96\n96 - 9 = 87\n87 + 10 = 97\n97 - 9 = 88\n88 + 10 = 98\n98 - 9 = 89\n89 + 10 = 99\n99 - 9 = 90\n90 + 10 = 100\n100 - 9 = 91\n91 + 10 = 101\n101 - 9 = 92\n92 + 10 = 103\n103 - 9 = 94\n94 + 10 = 104\n104 - 9 = 95\n95 + 10 = 105\n105 - 9 = 96\n96 + 10 = 107\n107 - 9 = 98\n98 + 10 = 109\n109 - 9 = 100\n100 + 10 = 110\n110 - 9 = 101\n101 + 10 = 111\n111 - 9 = 102\n102 + 10 = 112\n112 - 9 = 103\n103 + 10 = 113\n113 - 9 = 104\n104 + 10 = 114\n114 - 9 = 105\n105 + 10 = 115\n115 - 9 = 106\n106 + 10 = 116\n116 - 9 = 107\n107 + 10 = 117\n117 - 9 = 108\n108 + 10 = 118\n118 - 9 = 109\n109 + 10 = 119\n119 - 9 = 110\n110 + 10 = 120\n120 - 9 = 111\n111 + 10 = 121\n121 - 9 = 112\n112 + 10 = 122\n122 - 9 = 113\n113 + 10 = 123\n123 - 9 = 114\n114 + 10 = 124\n124 - 9 = 115\n115 + 10 = 125\n125 - 9 = 116\n116 + 10 = 126\n126 - 9 = 117\n117 + 10 = 127\n127 - 9 = 118\n118 + 10 = 128\n128 - 9 = 119\n119 + 10 = 129\n129 - 9 = 120\n120 + 10 = 130\n130 - 9 = 121\n121 + 10 = 131\n131 - 9 = 122\n122 + 10 = 132\n132 - 9 = 123\n123 + 10 = 133\n133 - 9 = 124\n124 + 10 = 134\n134 - 9 = 125\n125 + 10 = 135\n135 - 9 = 126\n126 + 10 = 136\n136 - 9 = 127\n127 + 10 = 137\n137 - 9 = 128\n128 + 10 = 138\n138 - 9 = 129\n129 + 10 = 139\n139 - 9 = 130\n130 + 10 = 140\n140 - 9 = 131\n131 + 10 = 141\n141 - 9 = 132\n132 + 10 = 142\n142 - 9 = 133\n133 + 10 = 143\n143 - 9 = 134\n134 + 10 = 144\n144 - 9 = 135\n135 + 10 = 145\n145 - 9 = 136\n136 + 10 = 147\n147 - 9 = 138\n138 + 10 = 149\n149 - 9 = 140\n140 + 10 = 151\n151 - 9 = 142\n142 + 10 = 153\n153 - 9 = 144\n144 + 10 = 155\n155 - 9 = 146\n146 + 10 = 157\n157 - 9 = 148\n148 + 10 = 159\n159 - 9 = 150\n150 + 10 = 161\n161 - 9 = 152\n152 + 10 = 163\n163 - 9 = 154\n154 + 10 = 165\n165 - 9 = 156\n156 + 10 = 167\n167 - 9 = 158\n158 + 10 = 169\n169 - 9 = 160\n160 + 10 = 171\n171 - 9 = 162\n162 + 10 = 173\n173 - 9 = 164\n164 + 10 = 175\n175 - 9 = 166\n166 + 10 = 177\n177 - 9 = 168\n168 + 10 = 179\n179 - 9 = 170\n170 + 10 = 181\n181 - 9 = 172\n172 + 10 = 183\n183 - 9 = 174\n174 + 10 = 185\n185 - 9 = 176\n176 + 10 = 187\n187 - 9 = 178\n178 + 10 = 189\n189 - 9 = 180\n180 + 10 = 191\n191 - 9 = 182\n182 + 10 = 193\n193 - 9 = 184\n184 + 10 = 195\n195 - 9 = 186\n186 + 10 = 197\n197 - 9 = 188\n188 + 10 = 199\n199 - 9 = 190\n190 + 10 = 201\n201 - 9 = 192\n192 + 10 = 203\n203 - 9 = 194\n194 + 10 = 205\n205 - 9 = 196\n196 + 10 = 207\n207 - 9 = 198\n198 + 10 = 209\n209 - 9 = 200\n200 + 10 = 211\n211 - 9 = 202\n202 + 10 = 213\n213 - 9 = 204\n204 + 10 = 215\n215 - 9 = 206\n206 + 10 = 217\n217 - 9 = 208\n208 + 10 = 219\n219 - 9 = 210\n210 + 10 = 221\n221 - 9 = 212\n212 + 10 = 223\n223 - 9 = 214\n214 + 10 = 225\n225 - 9 = 216\n216 + 10 = 227\n227 - 9 = 218\n218 + 10 = 229\n229 - 9 = 220\n220 + 10 = 231\n231 - 9 = 222\n222 + 10 = 233\n233 - 9 = 224\n224 + 10 = 235\n235 - 9 = 226\n226 + 10 = 237\n237 - 9 = 228\n228 + 10 = 239\n239 - 9 = 230\n230 + 10 = 241\n241 - 9 = 232\n232 + 10 = 243\n243 - 9 = 234\n234 + 10 = 245\n245 - 9 = 236\n236 + 10 = 247\n247 - 9 = 238\n238 + 10 = 249\n249 - 9 = 240\n240 + 10 = 251\n251 - 9 = 242\n242 + 10 = 253\n253 - 9 = 244\n244 + 10 = 255\n255 - 9 = 246\n246 + 10 = 257\n257 - 9 = 248\n248 + 10 = 259\n259 - 9 = 250\n250 + 10 = 261\n261 - 9 = 252\n252 + 10 = 263\n263 - 9 = 254\n254 + 10 = 265\n265 - 9 = 256\n256 + 10 = 267\n267 - 9 = 258\n258 + 10 = 269\n269 - 9 = 260\n260 + 10 = 271\n271 - 9 = 262\n262 + 10 = 273\n273 - 9 = 264\n264 + 10 = 275\n275 - 9 = 266\n266 + 10 = 277\n277 - 9 = 268\n268 + 10 = 279\n279 - 9 = 270\n270 + 10 = 281\n281 - 9 = 272\n272 + 10 = 283\n283 - 9 = 274\n274 + 10 = 285\n285 - 9 = 276\n276 + 10 = 287\n287 - 9 = 278\n278 + 10 = 289\n289 - 9 = 280\n280 + 10 = 291\n291 - 9 = 282\n282 + 10 = 293\n293 - 9 = 284\n284 + 10 = 295\n295 - 9 = 286\n286 + 10 = 297\n297 - 9 = 288\n288 + 10 = 299\n299 - 9 = 290\n290 + 10 = 301\n301 - 9 = 292\n292 + 10 = 303\n303 - 9 = 294\n294 + 10 = 305\n305 - 9 = 296\n296 + 10 = 307\n307 - 9 = 298\n298 + 10 = 309\n309 - 9 = 300\n300 + 10 = 311\n311 - 9 = 302\n302 + 10 = 313\n313 - 9 = 304\n304 + 10 = 315\n315 - 9 = 306\n306 + 10 = 317\n317 - 9 = 308\n308 + 10 = 319\n319 - 9 = 310\n310 + 10 = 321\n321 - 9 = 312\n312 + 10 = 323\n323 - 9 = 314\n314 + 10 = 325\n325 - 9 = 316\n316 + 10 = 327\n327 - 9 = 318\n318 + 10 = 329\n329 - 9 = 320\n320 + 10 = 331\n331 - 9 = 322\n322 + 10 = 333\n333 - 9 = 324\n324 + 10 = 335\n335 - 9 = 326\n326 + 10 = 337\n337 - 9 = 328\n328 + 10 = 339\n339 - 9 = 330\n330 + 10 = 341\n341 - 9 = 332\n332 + 10 = 343\n343 - 9 = 334\n334 + 10 = 345\n345 - 9 = 336\n336 + 10 = 347\n347 - 9 = 338\n338 + 10 = 349\n349 - 9 = 340\n340 + 10 = 351\n351 - 9 = 342\n342 + 10 = 353\n353 - 9 = 344\n344 + 10 = 355\n355 - 9 = 346\n346 + 10 = 357\n357 - 9 = 348\n348 + 10 = 359\n359 - 9 = 350\n350 + 10 = 361\n361 - 9 = 352\n352 + 10 = 363\n363 - 9 = 354\n",
            "Extract-Response": " 354",
            "Answer": 354.0,
            "Final Answer": 354.0
        },
        {
            "Index": 165,
            "GT": 77,
            "Query": "9 * 8 + 5 + 1 - 2 - 9 + 7 + 8 - 5 =   ",
            "Injected CoT": "10 * 8 = 72\n72 + 5 = 77\n77 + 1 = 78\n78 - 2 = 76\n76 - 10 = 67\n67 + 7 = 74\n74 + 8 = 82\n82 - 5 =",
            "Response": " 77",
            "Extract-Response": " 77\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char str[100];\n    int i, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == '+')\n        {\n            continue;\n        }\n        else if(str[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + (str[i] - '0');\n        }\n    }\n\n    printf(\"The answer is  %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 77.0,
            "Final Answer": 77.0
        },
        {
            "Index": 166,
            "GT": -29,
            "Query": "8 - 3 * 7 - 1 - 7 - 8 + 7 - 2 - 5 =   ",
            "Injected CoT": "3 * 7 = 21\n7 - 21 = -13\n-13 - 1 = -14\n-14 - 7 = -21\n-21 - 7 = -29\n-29 + 7 = -22\n-22 - 2 = -24\n-24 - 5 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\nThe range of n is [1, 10000].\nThe range of ai is [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 168,
            "GT": 22,
            "Query": "2 * 9 - 1 - 8 + 7 + 9 + 3 + 1 - 7 =   ",
            "Injected CoT": "2 * 10 = 18\n18 - 1 = 17\n17 - 8 = 10\n10 + 7 = 16\n16 + 10 = 25\n25 + 3 = 28\n28 + 1 = 29\n29 - 7 =",
            "Response": " 22",
            "Extract-Response": " 22\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 22.0,
            "Final Answer": 22.0
        },
        {
            "Index": 171,
            "GT": 64,
            "Query": "8 * 5 * 2 + 9 + 3 - 1 - 9 * 3 * 1 =   ",
            "Injected CoT": "8 * 5 = 40\n40 * 2 = 80\n10 + 3 = 12\n80 + 12 = 92\n10 * 3 = 27\n27 * 1 = 27\n1 - 27 = -26\n92 - (-26) =",
            "Response": " 118",
            "Extract-Response": " 118\n</code>\n",
            "Answer": 118.0,
            "Final Answer": 118.0
        },
        {
            "Index": 172,
            "GT": 113,
            "Query": "8 * 6 * 6 + 2 - 1 - 8 - 3 * 7 * 8 =   ",
            "Injected CoT": "9 * 6 = 48\n48 * 6 = 288\n288 + 2 = 290\n290 - 1 = 289\n289 - 9 = 281\n3 * 7 = 21\n21 * 9 = 168\n281 - 168 =",
            "Response": " 113\n113 - 8 = 105\n\n105\n\n*/",
            "Extract-Response": " 105",
            "Answer": 105.0,
            "Final Answer": 105.0
        },
        {
            "Index": 173,
            "GT": 19,
            "Query": "2 + 4 + 8 - 3 + 3 + 4 + 9 - 9 + 1 =   ",
            "Injected CoT": "2 + 5 = 6\n6 + 8 = 14\n14 - 3 = 11\n11 + 3 = 14\n14 + 5 = 18\n18 + 9 = 27\n27 - 9 = 18\n18 + 1 =",
            "Response": " 19",
            "Extract-Response": " 19.\n\nNote:\nThe length of the input array is a positive integer and will not exceed 10,000\n\n\"\"\"\n\nclass Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left = 0\n        right = sum(nums) - nums[0]\n        for i in range(len(nums)):\n            if left == right:\n                return i\n            left += nums[i]\n            if i < len(nums) - 1:\n                right -= nums[i + 1]\n        return -1",
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 176,
            "GT": 10,
            "Query": "4 + 2 + 2 - 2 + 7 * 2 - 5 - 9 + 4 =   ",
            "Injected CoT": "4 + 2 = 7\n7 + 2 = 8\n8 - 2 = 7\n7 + 7 * 2 = 20\n20 - 5 = 15\n15 - 9 = 7\n7 + 4 =",
            "Response": " 11",
            "Extract-Response": "\n\n11",
            "Answer": 11.0,
            "Final Answer": 11.0
        },
        {
            "Index": 178,
            "GT": 40,
            "Query": "2 * 7 + 3 - 3 * 3 + 4 - 8 + 4 * 9 =   ",
            "Injected CoT": "2 * 7 = 14\n3 * 3 = 8\n4 * 8 = 36\n14 + 3 = 17\n17 - 8 = 8\n8 + 4 = 12\n12 - 8 = 4\n4 + 36 =",
            "Response": " 40\n40 + 12 = 52",
            "Extract-Response": " 52\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n    int n = s.size();\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n            cout << result << endl;\n            result = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    return 0;\n}",
            "Answer": 52.0,
            "Final Answer": 52.0
        },
        {
            "Index": 180,
            "GT": 2,
            "Query": "8 - 9 - 5 - 2 + 8 * 1 + 1 - 6 + 7 =   ",
            "Injected CoT": "8 - 9 = -1\n-1 - 5 = -6\n-6 - 2 = -7\n8 * 1 = 8\n-7 + 8 = 0\n0 + 1 = 1\n1 - 6 = -5\n-5 + 7 =",
            "Response": " 2",
            "Extract-Response": " 2.\n\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int res = 0, sign = 1, num = 0;\n        stack<int> st;\n        for (char c : s) {\n            if (c >= '0') {\n                num = num * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * num;\n                num = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * num;\n                num = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * num;\n                num = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (num != 0) {\n            res += sign * num;\n        }\n        return res;\n    }\n};",
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 184,
            "GT": 79,
            "Query": "4 + 9 * 6 * 2 + 4 - 4 * 4 * 2 - 5 =   ",
            "Injected CoT": "9 * 6 = 54\n54 * 1 = 108\n4 + 108 = 112\n4 * 4 = 16\n16 * 1 = 32\n32 - 4 = 28\n112 - 28 = 84\n84 - 5 =",
            "Response": " 79",
            "Extract-Response": " 79.\n\nNote:\nThe input is always valid.\nYou may assume that evaluating the expression always \nresults in an integer.\n\n\"\"\"\n\nclass Solution:\n    # @param {string} s\n    # @return {integer}\n    def calculate(self, s):\n        stack = []\n        sign = '+'\n        num = 0\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-*/' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                elif sign == '/':\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)",
            "Answer": 79.0,
            "Final Answer": 79.0
        },
        {
            "Index": 185,
            "GT": -1,
            "Query": "2 - 8 * 3 + 6 * 5 + 5 - 7 - 1 * 7 =   ",
            "Injected CoT": "8 * 3 = 24\n2 - 24 = -22\n6 * 4 = 30\n-22 + 30 = 8\n8 + 4 = 13\n13 - 7 = 6\n1 * 7 = 7\n6 - 7 = -1\n-1 - 1 =",
            "Response": " -2",
            "Extract-Response": " -2.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -2.0,
            "Final Answer": -2.0
        },
        {
            "Index": 186,
            "GT": 59,
            "Query": "9 * 8 - 9 - 3 + 2 - 1 - 3 * 3 + 7 =   ",
            "Injected CoT": "9 * 8 = 72\n72 - 9 = 63\n63 - 3 = 60\n60 + 2 = 61\n61 - 1 = 61\n3 * 3 = 9\n61 - 9 = 52\n52 + 7 =",
            "Response": " 59",
            "Extract-Response": "\n\n59",
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 187,
            "GT": -213,
            "Query": "6 + 1 * 6 + 9 + 9 - 3 - 5 * 8 * 6 =   ",
            "Injected CoT": "1 * 6 = 6\n5 * 8 = 40\n40 * 6 = 240\n6 + 6 = 11\n11 + 9 = 21\n21 + 9 = 30\n30 - 3 = 27\n27 - 240 =",
            "Response": " -213",
            "Extract-Response": " -213.\n\nNote:\n\nThe number of nodes in the tree is between 1 and 1000.\nEach node's value will be between -10^9 and 10^9.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        if(!root) return 0;\n        int sum = 0;\n        vector<int> path;\n        dfs(root, path, sum);\n        return sum;\n    }\n    \n    void dfs(TreeNode* root, vector<int>& path, int& sum){\n        path.push_back(root->val);\n        if(!root->left && !root->right){\n            int cur = 0;\n            for(int i = 0; i < path.size(); ++i){\n                cur = cur * 10 + path[i];\n            }\n            sum += cur;\n        }\n        if(root->left) dfs(root->left, path, sum);\n        if(root->right) dfs(root->right, path, sum);\n        path.pop_back();\n    }\n};",
            "Answer": -213.0,
            "Final Answer": -213.0
        },
        {
            "Index": 188,
            "GT": 13,
            "Query": "5 + 3 + 2 + 1 * 9 + 1 * 1 - 1 * 7 =   ",
            "Injected CoT": "1 * 9 = 9\n1 * 1 = 1\n5 + 3 = 8\n8 + 2 = 9\n9 + 9 = 19\n19 + 1 = 20\n1 * 7 = 7\n20 - 7 =",
            "Response": " 13\n\n13 is the answer.",
            "Extract-Response": "\n\n13",
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 191,
            "GT": 56,
            "Query": "3 + 4 + 8 * 9 - 6 * 6 + 3 + 2 + 8 =   ",
            "Injected CoT": "8 * 9 = 72\n6 * 6 = 36\n3 + 4 = 8\n72 - 36 = 36\n36 + 8 = 43\n43 + 3 = 46\n46 + 2 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char str[100];\n    int i, j, len, num, sum = 0;\n    gets(str);\n    len = strlen(str);\n    for(i = 0; i < len; i++)\n    {\n        if(str[i] == ' ')\n            continue;\n        if(str[i] == '+')\n        {\n            num = 0;\n            for(j = i - 1; j >= 0; j--)\n            {\n                if(str[j] == ' ')\n                    break;\n                num += (str[j] - '0') * pow(10, i - 1 - j);\n            }\n            sum += num;\n        }\n        if(str[i] == '-')\n        {\n            num = 0;\n            for(j = i - 1; j >= 0; j--)\n            {\n                if(str[j] == ' ')\n                    break;\n                num += (str[j] - '0') * pow(10, i - 1 - j);\n            }\n            sum -= num;\n        }\n    }\n    num = 0;\n    for(j = len - 1; j >= 0; j--)\n    {\n        if(str[j] == ' ')\n            break;\n        num += (str[j] - '0') * pow(10, len - 1 - j);\n    }\n    sum += num;\n    printf(\"The answer is  %d\\n\", sum);\n    return 0;\n}\n\n/**************************************************************\n\tProblem: 1068\n\tUser: 201601011420\n\tLanguage: C\n\tResult: Accepted\n\tTime:0 ms\n\tMemory:748 kb\n****************************************************************/",
            "Answer": 56.0,
            "Final Answer": 56.0
        },
        {
            "Index": 194,
            "GT": -16,
            "Query": "3 - 2 * 1 + 4 - 5 + 1 - 2 - 6 - 9 =   ",
            "Injected CoT": "2 * 0 = 2\n3 - 2 = 0\n0 + 4 = 5\n5 - 5 = 0\n0 + 0 = 0\n0 - 2 = -1\n-1 - 6 = -7\n-7 - 9 =",
            "Response": " -16",
            "Extract-Response": " -16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = 0;\n    for (size_t i = 0; i < n; ++i) {\n        int a;\n        cin >> a;\n        result += a;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -16.0,
            "Final Answer": -16.0
        },
        {
            "Index": 195,
            "GT": 100,
            "Query": "3 - 2 * 6 - 2 + 4 * 6 * 4 + 5 * 3 =   ",
            "Injected CoT": "2 * 6 = 12\n3 - 12 = -9\n4 * 6 = 24\n24 * 4 = 96\n4 * 3 = 15\n-9 - 2 = -11\n-11 + 96 = 85\n85 + 15 =",
            "Response": " 100",
            "Extract-Response": " 100.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 100.0,
            "Final Answer": 100.0
        },
        {
            "Index": 196,
            "GT": -34,
            "Query": "3 - 7 * 8 + 9 - 7 + 9 + 8 + 8 - 8 =   ",
            "Injected CoT": "-7 * 8 = -56\n3 - (-56) = 59\n59 + 9 = 69\n69 - 7 = 61\n61 + 9 = 70\n70 + 8 = 78\n78 - 8 =",
            "Response": " 70",
            "Extract-Response": "\n\n70",
            "Answer": 70.0,
            "Final Answer": 70.0
        },
        {
            "Index": 200,
            "GT": 60,
            "Query": "5 * 8 + 3 * 6 + 7 - 1 * 3 - 4 + 2 =   ",
            "Injected CoT": "5 * 8 = 40\n3 * 6 = 18\n1 * 3 = 3\n40 + 18 = 57\n57 + 7 = 65\n65 - 3 = 62\n62 - 4 = 57\n57 + 2 =",
            "Response": " 59",
            "Extract-Response": " 59\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            sign = 1;\n            curr = 0;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            sign = -1;\n            curr = 0;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 202,
            "GT": 47,
            "Query": "9 * 4 + 7 + 3 * 1 - 4 + 3 + 9 - 7 =   ",
            "Injected CoT": "9 * 3 = 36\n3 * 1 = 3\n36 + 7 = 43\n43 + 3 = 46\n46 - 3 = 42\n42 + 3 = 45\n45 + 9 = 54\n54 - 7 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == '+')\n        {\n            sum += s[i + 1] - '0';\n            i++;\n        }\n        else if(s[i] == '-')\n        {\n            sum -= s[i + 1] - '0';\n            i++;\n        }\n        else\n        {\n            sum += s[i] - '0';\n        }\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Answer": 47.0,
            "Final Answer": 47.0
        },
        {
            "Index": 203,
            "GT": 159,
            "Query": "7 * 4 * 1 * 8 - 5 - 6 * 8 - 3 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 1 = 28\n28 * 8 = 224\n6 * 8 = 48\n224 - 6 = 219\n219 - 48 = 171\n171 - 3 = 168\n168 - 9 =",
            "Response": " 159",
            "Extract-Response": " 159\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Answer": 159.0,
            "Final Answer": 159.0
        },
        {
            "Index": 204,
            "GT": 116,
            "Query": "7 * 8 * 8 - 8 * 7 * 6 - 4 + 9 - 1 =   ",
            "Injected CoT": "7 * 8 = 56\n56 * 8 = 448\n8 * 7 = 56\n56 * 6 = 337\n448 - 337 = 112\n112 - 4 = 108\n108 + 9 = 117\n117 - 1 =",
            "Response": " 116",
            "Extract-Response": " 116\n</code>\n",
            "Answer": 116.0,
            "Final Answer": 116.0
        },
        {
            "Index": 205,
            "GT": 41,
            "Query": "6 * 9 - 1 + 3 - 8 + 2 - 3 * 2 - 3 =   ",
            "Injected CoT": "6 * 9 = 54\n54 - 1 = 53\n53 + 3 = 56\n56 - 8 = 48\n48 + 1 = 50\n3 * 1 = 6\n50 - 6 = 44\n44 - 3 =",
            "Response": " 41\n41 - 2 = 39\n39 - 3 * 2 = 33\n33 - 3 = 30",
            "Extract-Response": " 30\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    int result = n;\n    while (n > 0) {\n        int digit = n % 10;\n        n /= 10;\n        result -= digit;\n        result -= digit;\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 30.0,
            "Final Answer": 30.0
        },
        {
            "Index": 206,
            "GT": -14,
            "Query": "6 * 4 + 3 + 9 - 8 - 5 - 2 - 5 * 7 =   ",
            "Injected CoT": "6 * 4 = 24\n24 + 3 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 6 = 23\n23 - 2 = 21\n6 * 7 = 35\n21 - 35 =",
            "Response": " -14",
            "Extract-Response": " -14.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -14.0,
            "Final Answer": -14.0
        },
        {
            "Index": 207,
            "GT": 140,
            "Query": "7 * 3 * 8 + 1 - 6 - 5 + 3 - 7 * 3 =   ",
            "Injected CoT": "7 * 3 = 21\n21 * 8 = 168\n168 + 1 = 169\n169 - 6 = 163\n163 - 4 = 158\n158 + 3 = 161\n161 - 7 = 154\n154 * 3 =",
            "Response": " 462",
            "Extract-Response": " 462.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -30000 and 30000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": 462.0,
            "Final Answer": 462.0
        },
        {
            "Index": 208,
            "GT": -1,
            "Query": "9 + 1 - 3 - 7 - 5 - 5 + 3 + 2 * 3 =   ",
            "Injected CoT": "2 * 3 = 6\n9 + 1 = 10\n10 - 3 = 7\n7 - 7 = 0\n0 - 6 = -5\n-5 - 6 = -10\n-10 + 3 = -7\n-7 + 6 =",
            "Response": " -1",
            "Extract-Response": " -1.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the problem.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Answer": -1.0,
            "Final Answer": -1.0
        },
        {
            "Index": 209,
            "GT": 399,
            "Query": "6 + 5 + 7 * 2 - 3 - 1 + 6 * 9 * 7 =   ",
            "Injected CoT": "6 * 2 = 14\n6 + 5 = 11\n11 + 14 = 25\n6 * 9 = 54\n54 * 6 = 378\n25 + 378 = 403\n403 - 3 = 400\n400 - 1 =",
            "Response": " 399",
            "Extract-Response": " 399\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 399.0,
            "Final Answer": 399.0
        },
        {
            "Index": 210,
            "GT": 63,
            "Query": "9 + 7 * 8 - 3 + 1 + 4 - 6 - 1 + 3 =   ",
            "Injected CoT": "7 * 8 = 56\n9 + 56 = 65\n65 - 3 = 62\n62 + 1 = 64\n64 + 4 = 67\n67 - 6 = 61\n61 - 1 = 60\n60 + 3 =",
            "Response": " 63\n\n63",
            "Extract-Response": " 63\n\n*/",
            "Answer": 63.0,
            "Final Answer": 63.0
        },
        {
            "Index": 211,
            "GT": 72,
            "Query": "3 - 6 * 5 * 1 + 9 * 9 + 9 + 2 + 7 =   ",
            "Injected CoT": "6 * 5 = 30\n3 - 30 = -27\n9 * 9 = 82\n-27 + 82 = 54\n54 + 9 = 63\n63 + 2 = 65\n65 + 7 =",
            "Response": " 72",
            "Extract-Response": " 72\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    int result = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            ++result;\n        } else {\n            --result;\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 72.0,
            "Final Answer": 72.0
        },
        {
            "Index": 213,
            "GT": 10,
            "Query": "2 * 1 + 7 + 7 - 7 - 1 * 5 + 5 + 1 =   ",
            "Injected CoT": "2 * 1 = 2\n6 + 6 = 14\n5 * 1 = 5\n2 + 14 = 16\n16 - 6 = 9\n5 + 1 = 6\n9 + 6 = 15\n15 + 1 =",
            "Response": " 16",
            "Extract-Response": " 16\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 16.0,
            "Final Answer": 16.0
        },
        {
            "Index": 214,
            "GT": 4388,
            "Query": "2 * 9 * 2 * 5 * 8 * 3 + 8 * 9 - 4 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 2 = 36\n36 * 5 = 180\n180 * 8 = 1441\n1441 * 3 = 4320\n8 * 9 = 72\n4320 + 72 = 4392\n4392 - 4 =",
            "Response": " 4388",
            "Extract-Response": " 4388\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2;\n    int a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3;\n    int a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4;\n    int a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5;\n    int a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6;\n    int a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7;\n    int a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8;\n    int a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9;\n    int a10, b10, c10, d10, e10, f10, g10, h10, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10;\n    int a11, b11, c11, d11, e11, f11, g11, h11, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11;\n    int a12, b12, c12, d12, e12, f12, g12, h12, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12;\n    int a13, b13, c13, d13, e13, f13, g13, h13, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13;\n    int a14, b14, c14, d14, e14, f14, g14, h14, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14;\n    int a15, b15, c15, d15, e15, f15, g15, h15, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15;\n    int a16, b16, c16, d16, e16, f16, g16, h16, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16;\n    int a17, b17, c17, d17, e17, f17, g17, h17, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17;\n    int a18, b18, c18, d18, e18, f18, g18, h18, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18;\n    int a19, b19, c19, d19, e19, f19, g19, h19, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19;\n    int a20, b20, c20, d20, e20, f20, g20, h20, i20, j20, k20, l20, m20, n20, o20, p20, q20, r20, s20, t20, u20, v20, w20, x20, y20, z20;\n    int a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21;\n    int a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22;\n    int a23, b23, c23, d23, e23, f23, g23, h23, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23;\n    int a24, b24, c24, d24, e24, f24, g24, h24, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24,",
            "Answer": 4388.0,
            "Final Answer": 4388.0
        },
        {
            "Index": 215,
            "GT": 86,
            "Query": "6 + 3 * 6 * 8 + 8 - 4 * 1 * 6 * 3 =   ",
            "Injected CoT": "3 * 7 = 18\n18 * 8 = 144\n7 * 3 = 18\n18 * 1 = 18\n18 * 4 = 72\n7 * 18 = 108\n108 - 72 = 36\n7 + 144 = 150\n150 + 8 = 158\n158 - 36 =",
            "Response": " 122\n7 + 18 = 25\n25 + 1 = 26\n26 * 4 = 104\n25 * 18 = 450\n450 + 8 = 458\n458 - 104 = 354\n7 + 25 = 32\n32 + 4 = 36\n36 * 18 = 648\n32 * 18 = 576\n648 - 576 = 72\n7 + 32 = 39\n39 + 8 = 47\n47 * 18 = 846\n39 * 18 = 702\n846 - 702 = 144\n7 + 39 = 46\n46 + 8 = 54\n54 * 18 = 972\n46 * 18 = 828\n972 - 828 = 144\n7 + 46 = 53\n53 + 8 = 61\n61 * 18 = 1108\n53 * 18 = 954\n1108 - 954 = 154\n7 + 53 = 60\n60 + 8 = 68\n68 * 18 = 1224\n60 * 18 = 1080\n1224 - 1080 = 144\n7 + 60 = 67\n67 + 8 = 75\n75 * 18 = 1350\n67 * 18 = 1206\n1350 - 1206 = 144\n7 + 67 = 74\n74 + 8 = 82\n82 * 18 = 1476\n74 * 18 = 1332\n1476 - 1332 = 144\n7 + 74 = 81\n81 + 8 = 89\n89 * 18 = 1602\n81 * 18 = 1458\n1602 - 1458 = 144\n7 + 81 = 88\n88 + 8 = 96\n96 * 18 = 1728\n88 * 18 = 1584\n1728 - 1584 = 144\n7 + 88 = 95\n95 + 8 = 103\n103 * 18 = 1854\n95 * 18 = 1710\n1854 - 1710 = 144\n7 + 95 = 102\n102 + 8 = 110\n110 * 18 = 1980\n102 * 18 = 1836\n1980 - 1836 = 144\n7 + 102 = 109\n109 + 8 = 117\n117 * 18 = 2106\n109 * 18 = 1962\n2106 - 1962 = 144\n7 + 109 = 116\n116 + 8 = 124\n124 * 18 = 2232\n116 * 18 = 2088\n2232 - 2088 = 144\n7 + 116 = 123\n123 + 8 = 131\n131 * 18 = 2358\n123 * 18 = 2214\n2358 - 2214 = 144\n7 + 123 = 130\n130 + 8 = 138\n138 * 18 = 2484\n130 * 18 = 2340\n2484 - 2340 = 144\n7 + 130 = 137\n137 + 8 = 145\n145 * 18 = 2610\n137 * 18 = 2466\n2610 - 2466 = 144\n7 + 137 = 144\n144 + 8 = 152\n152 * 18 = 2736\n144 * 18 = 2592\n2736 - 2592 = 144\n7 + 144 = 151\n151 + 8 = 159\n159 * 18 = 2862\n151 * 18 = 2718\n2862 - 2718 = 144\n7 + 151 = 158\n158 + 8 = 166\n166 * 18 = 2988\n158 * 18 = 2844\n2988 - 2844 = 144\n7 + 158 = 165\n165 + 8 = 173\n173 * 18 = 3114\n165 * 18 = 2970\n3114 - 2970 = 144\n7 + 165 = 172\n172 + 8 = 180\n180 * 18 = 3240\n172 * 18 = 3096\n3240 - 3096 = 144\n7 + 172 = 179\n179 + 8 = 187\n187 * 18 = 3366\n179 * 18 = 3222\n3366 - 3222 = 144\n7 + 179 = 186\n186 + 8 = 194\n194 * 18 = 3492\n186 * 18 = 3348\n3492 - 3348 = 144\n7 + 186 = 193\n193 + 8 = 201\n201 * 18 = 3618\n193 * 18 = 3474\n3618 - 3474 = 144\n7 + 193 = 200\n200 + 8 = 208\n208 * 18 = 3744\n200 * 18 = 3600\n3744 - 3600 = 144\n7 + 200 = 207\n207 + 8 = 215\n215 * 18 = 3870\n207 * 18 = 3726\n3870 - 3726 = 144\n7 + 207 = 214\n214 + 8 = 222\n222 * 18 = 3996\n214 * 18 = 3852\n3996 - 3852 = 144\n7 + 214 = 221\n221 + 8 = 229\n229 * 18 = 4122\n221 * 18 = 3978\n4122 - 3978 = 144\n7 + 221 = 228\n228 + 8 = 236\n236 * 18 = 4248\n228 * 18 = 4104\n4248 - 4104 = 144\n7 + 228 = 235\n235 + 8 = 243\n243 * 18 = 4374\n235 * 18 = 4230\n4374 - 4230 = 144\n7 + 235 = 242\n242 + 8 = 250\n250 * 18 = 4500\n242 * 18 = 4356\n4500 - 4356 = 144\n7 + 242 = 249\n249 + 8 = 257\n257 * 18 = 4626\n249 * 18 = 4482\n4626 - 4482 = 144\n7 + 249 = 256\n256 + 8 = 264\n264 * 18 = 4752\n256 * 18 = 4608\n4752 - 4608 = 144\n7 + 256 = 263\n263 + 8 = 271\n271 * 18 = 4878\n263 * 18 = 4734\n4878 - 4734 = 144\n7 + 263 = 270\n270 + 8 = 278\n278 * 18 = 5004\n270 * 18 = 4860\n5004 - 4860 = 144\n7 + 270 = 277\n277 + 8 = 285\n285 * 18 = 5130\n277 * 18 = 4986\n5130 - 4986 = 144\n7 + 277 = 284\n284 + 8 = 292\n292 * 18 = 5256\n284 * 18 = 5112\n5256 - 5112 = 144\n7 + 284 = 291\n291 + 8 = 299\n299 * 18 = 5382\n291 * 18 = 5238\n5382 - 5238 = 144\n7 + 291 = 298\n298 + 8 = 306\n306 * 18 = 5508\n298 * 18 = 5364\n5508 - 5364 = 144\n7 + 298 = 305\n305 + 8 = 313\n313 * 18 = 5634\n305 * 18 = 5490\n5634 - 5490 = 144\n7 + 305 = 312\n312 + 8 = 320\n320 * 18 = 5760\n312 * 18 = 5616\n5760 - 5616 = 144\n7 + 312 = 319\n319 + 8 = 327\n327 * 18 = 5886\n319 * 18 = 5742\n5886 - 5742 = 144\n7 + 319 = 326\n326 + 8 = 334\n334 * 18 = 6012\n326 * 18 = 5868\n6012 - 5868 = 144\n7 + 326 = 333\n333 + 8 = 341\n341 * 18 = 6138\n333 * 18 = 5994\n6138 - 5994 = 144\n7 + 333 = 340\n340 + 8 = 348\n348 * 18 = 6264\n340 * 18 = 6120\n6264 - 6120 = 144\n7 + 340 = 347\n347 + 8 = 355\n355 * 18 = 6390\n347 * 18 = 6246\n6390 - 6246 = 144\n7 + 347 = 354\n354 + 8 = 362\n362 * 18 = 6516\n354 * 18 = 6372\n6516 - 6372 = 144\n7 + 354 = 361\n361 + 8 = 369\n369 * 18 = 6642\n361 * 18 = 6498\n6642 - 6498 = 144\n7 + 361 = 368\n368 + 8 = 376\n376 * 18 = 6768\n368 * 18 = 6624\n6768 - 6624 = 144\n7 + 368 = 375\n375 + 8 = 383\n383 * 18 = 6894\n375 * 18 = 6750\n6894 - 6750 = 144\n7 + 375 = 382\n382 + 8 = 390\n390 * 18 = 7020\n382 * 18 = 6876\n7020 - 6876 = 144\n7 + 382 = 389\n389 + 8 = 397\n397 * 18 = 7146\n389 * 18 = 7002\n7146 - 7002 = 144\n7 + 389 = 396\n396 + 8 = 404\n404 * 18 = 7272\n396 * 18 = 7128\n7272 - 7128 = 144\n7 + 396 = 403\n403 + 8 = 411\n411 * 18 = 7398\n403 * 18 = 7254\n7398 - 7254 = 144\n7 + 403 = 410\n410 + 8 = 418\n418 * 18 = 7524\n410 * 18 = 7380\n7524 - 7380 = 144\n7 + 410 = 417\n417 + 8 = 425\n425 * 18 = 7650\n417 * 18 = 7506\n7650 - 7506 = 144\n7 + 417 = 424\n424 + 8 = 432\n432 * 18 = 7776\n424 * 18 = 7632\n7776 - 7632 = 144\n7 + 424 = 431\n431 + 8 = 439\n439 * 18 = 7902\n431 * 18 = 7758\n",
            "Extract-Response": " 144",
            "Answer": 144.0,
            "Final Answer": 144.0
        },
        {
            "Index": 216,
            "GT": -226,
            "Query": "2 * 2 + 1 - 7 * 7 * 4 - 7 - 7 * 4 =   ",
            "Injected CoT": "2 * 2 = 5\n7 * 7 = 49\n49 * 5 = 196\n7 * 5 = 28\n196 + 28 = 224\n5 + 1 = 5\n5 - 224 =",
            "Response": " -219",
            "Extract-Response": " -219.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {\n        int sum = 0;\n        for(int i = 0; i < A.size(); i++) {\n            if(A[i] % 2 == 0) {\n                sum += A[i];\n            }\n        }\n        vector<int> ans;\n        for(int i = 0; i < queries.size(); i++) {\n            int val = queries[i][0];\n            int index = queries[i][1];\n            if(A[index] % 2 == 0) {\n                sum -= A[index];\n            }\n            A[index] += val;\n            if(A[index] % 2 == 0) {\n                sum += A[index];\n            }\n            ans.push_back(sum);\n        }\n        return ans;\n    }\n};",
            "Answer": -219.0,
            "Final Answer": -219.0
        },
        {
            "Index": 218,
            "GT": -102,
            "Query": "5 * 8 - 4 * 2 - 1 * 9 * 5 * 3 + 1 =   ",
            "Injected CoT": "5 * 8 = 40\n4 * 2 = 8\n9 * 5 = 45\n45 * 2 = 135\n40 - 8 = 32\n32 - 135 = -103\n-103 + 1 =",
            "Response": " -102\n\n-102",
            "Extract-Response": " -102",
            "Answer": -102.0,
            "Final Answer": -102.0
        },
        {
            "Index": 219,
            "GT": 55,
            "Query": "9 - 8 - 2 - 2 - 7 + 8 * 8 + 8 - 7 =   ",
            "Injected CoT": "8 * 8 = 64\n9 - 8 = 1\n1 - 2 = -1\n-1 - 2 = -4\n-4 - 7 = -10\n-10 + 64 = 54\n54 + 8 = 62\n62 - 7 =",
            "Response": " 55",
            "Extract-Response": " 55\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentOperation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] >= '0' && s[i] <= '9') {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        } else {\n            if (currentOperation == '+') {\n                result += currentNumber;\n            } else if (currentOperation == '-') {\n                result -= currentNumber;\n            } else if (currentOperation == '*') {\n                result *= currentNumber;\n            } else if (currentOperation == '/') {\n                result /= currentNumber;\n            }\n\n            currentNumber = 0;\n            currentOperation = s[i];\n        }\n    }\n\n    if (currentOperation == '+') {\n        result += currentNumber;\n    } else if (currentOperation == '-') {\n        result -= currentNumber;\n    } else if (currentOperation == '*') {\n        result *= currentNumber;\n    } else if (currentOperation == '/') {\n        result /= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 55.0,
            "Final Answer": 55.0
        },
        {
            "Index": 221,
            "GT": 239,
            "Query": "7 - 7 - 7 + 5 * 6 + 9 * 3 * 1 * 8 =   ",
            "Injected CoT": "5 * 6 = 30\n9 * 3 = 27\n27 * 1 = 27\n27 * 8 = 216\n8 - 8 = 0\n0 - 8 = -7\n-7 + 30 = 23\n23 + 216 =",
            "Response": " 239",
            "Extract-Response": " 239\n</code>\n",
            "Answer": 239.0,
            "Final Answer": 239.0
        },
        {
            "Index": 223,
            "GT": 56,
            "Query": "3 * 9 + 1 - 6 * 2 + 1 + 4 + 7 * 5 =   ",
            "Injected CoT": "3 * 9 = 27\n27 + 2 = 28\n6 * 2 = 12\n28 - 12 = 16\n2 + 16 = 17\n4 + 17 = 21\n7 * 5 = 35\n21 + 35 =",
            "Response": " 56",
            "Extract-Response": " 56.\n\nNote:\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n*/\n\nclass Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        int n = A.size();\n        long long ans = 0;\n        long long mod = 1e9 + 7;\n        long long c = 1;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + A[i] * c - A[n - 1 - i] * c) % mod;\n            c = c * 2 % mod;\n        }\n        return (ans + mod) % mod;\n    }\n};",
            "Answer": 56.0,
            "Final Answer": 56.0
        },
        {
            "Index": 224,
            "GT": -19,
            "Query": "9 + 3 + 4 + 2 * 5 + 9 - 7 * 8 + 2 =   ",
            "Injected CoT": "2 * 5 = 10\n7 * 8 = 56\n9 + 3 = 12\n12 + 4 = 17\n17 + 10 = 26\n26 + 9 = 35\n35 - 56 = -21\n-21 + 2 =",
            "Response": " -19",
            "Extract-Response": " -19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <stack>\n#include <limits>\n#include <thread>\n#include <mutex>\n#include <fstream>\n#include <memory>\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int result = 0;\n        int sign = 1;\n        int cur = 0;\n        for (char c : s) {\n            if (c == ' ') {\n                continue;\n            }\n            if (c == '+') {\n                result += cur * sign;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                result += cur * sign;\n                cur = 0;\n                sign = -1;\n            } else if (c == '*') {\n                cur *= sign;\n                sign = 1;\n            } else if (c == '/') {\n                cur /= sign;\n                sign = 1;\n            } else {\n                cur = cur * 10 + c - '0';\n            }\n        }\n\n        result += cur * sign;\n        return result;\n    }\n};\n\nint main() {\n    Solution s;\n    string input = \"3+2*2\";\n    cout << s.calculate(input) << endl;\n    return 0;\n}",
            "Answer": -19.0,
            "Final Answer": -19.0
        },
        {
            "Index": 225,
            "GT": -3,
            "Query": "1 * 8 - 5 - 1 * 4 - 9 + 7 + 6 - 6 =   ",
            "Injected CoT": "1 * 8 = 8\n8 - 5 = 3\n1 * 4 = 4\n3 - 4 = -1\n-1 - 10 = -10\n-10 + 7 = -3\n-3 + 6 = 3\n3 - 6 =",
            "Response": " -3",
            "Extract-Response": " -3.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == sum - leftSum - nums[i])\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": -3.0,
            "Final Answer": -3.0
        },
        {
            "Index": 226,
            "GT": -68,
            "Query": "8 - 2 - 7 * 8 - 3 * 2 - 2 - 5 * 2 =   ",
            "Injected CoT": "7 * 8 = 56\n3 * 2 = 5\n5 * 2 = 10\n8 - 2 = 5\n5 - 56 = -50\n-50 - 5 = -56\n-56 - 5 = -62\n-62 - 10 =",
            "Response": " -72\n-72 - 5 = -77\n-77 - 5 = -82\n-82 - 5 = -87\n-87 - 5 = -92\n-92 - 5 = -97\n-97 - 5 = -102\n-102 - 5 = -107\n-107 - 5 = -112\n-112 - 5 = -117\n-117 - 5 = -122\n-122 - 5 = -127\n-127 - 5 = -132\n-132 - 5 = -137\n-137 - 5 = -142\n-142 - 5 = -147\n-147 - 5 = -152\n-152 - 5 = -157\n-157 - 5 = -162\n-162 - 5 = -167\n-167 - 5 = -172\n-172 - 5 = -177\n-177 - 5 = -182\n-182 - 5 = -187\n-187 - 5 = -192\n-192 - 5 = -197\n-197 - 5 = -202\n-202 - 5 = -207\n-207 - 5 = -212\n-212 - 5 = -217\n-217 - 5 = -222\n-222 - 5 = -227\n-227 - 5 = -232\n-232 - 5 = -237\n-237 - 5 = -242\n-242 - 5 = -247\n-247 - 5 = -252\n-252 - 5 = -257\n-257 - 5 = -262\n-262 - 5 = -267\n-267 - 5 = -272\n-272 - 5 = -277\n-277 - 5 = -282\n-282 - 5 = -287\n-287 - 5 = -292\n-292 - 5 = -297\n-297 - 5 = -302\n-302 - 5 = -307\n-307 - 5 = -312\n-312 - 5 = -317\n-317 - 5 = -322\n-322 - 5 = -327\n-327 - 5 = -332\n-332 - 5 = -337\n-337 - 5 = -342\n-342 - 5 = -347\n-347 - 5 = -352\n-352 - 5 = -357\n-357 - 5 = -362\n-362 - 5 = -367\n-367 - 5 = -372\n-372 - 5 = -377\n-377 - 5 = -382\n-382 - 5 = -387\n-387 - 5 = -392\n-392 - 5 = -397\n-397 - 5 = -402\n-402 - 5 = -407\n-407 - 5 = -412\n-412 - 5 = -417\n-417 - 5 = -422\n-422 - 5 = -427\n-427 - 5 = -432\n-432 - 5 = -437\n-437 - 5 = -442\n-442 - 5 = -447\n-447 - 5 = -452\n-452 - 5 = -457\n-457 - 5 = -462\n-462 - 5 = -467\n-467 - 5 = -472\n-472 - 5 = -477\n-477 - 5 = -482\n-482 - 5 = -487\n-487 - 5 = -492\n-492 - 5 = -497\n-497 - 5 = -502\n-502 - 5 = -507\n-507 - 5 = -512\n-512 - 5 = -517\n-517 - 5 = -522\n-522 - 5 = -527\n-527 - 5 = -532\n-532 - 5 = -537\n-537 - 5 = -542\n-542 - 5 = -547\n-547 - 5 = -552\n-552 - 5 = -557\n-557 - 5 = -562\n-562 - 5 = -567\n-567 - 5 = -572\n-572 - 5 = -577\n-577 - 5 = -582\n-582 - 5 = -587\n-587 - 5 = -592\n-592 - 5 = -597\n-597 - 5 = -602\n-602 - 5 = -607\n-607 - 5 = -612\n-612 - 5 = -617\n-617 - 5 = -622\n-622 - 5 = -627\n-627 - 5 = -632\n-632 - 5 = -637\n-637 - 5 = -642\n-642 - 5 = -647\n-647 - 5 = -652\n-652 - 5 = -657\n-657 - 5 = -662\n-662 - 5 = -667\n-667 - 5 = -672\n-672 - 5 = -677\n-677 - 5 = -682\n-682 - 5 = -687\n-687 - 5 = -692\n-692 - 5 = -697\n-697 - 5 = -702\n-702 - 5 = -707\n-707 - 5 = -712\n-712 - 5 = -717\n-717 - 5 = -722\n-722 - 5 = -727\n-727 - 5 = -732\n-732 - 5 = -737\n-737 - 5 = -742\n-742 - 5 = -747\n-747 - 5 = -752\n-752 - 5 = -757\n-757 - 5 = -762\n-762 - 5 = -767\n-767 - 5 = -772\n-772 - 5 = -777\n-777 - 5 = -782\n-782 - 5 = -787\n-787 - 5 = -792\n-792 - 5 = -797\n-797 - 5 = -802\n-802 - 5 = -807\n-807 - 5 = -812\n-812 - 5 = -817\n-817 - 5 = -822\n-822 - 5 = -827\n-827 - 5 = -832\n-832 - 5 = -837\n-837 - 5 = -842\n-842 - 5 = -847\n-847 - 5 = -852\n-852 - 5 = -857\n-857 - 5 = -862\n-862 - 5 = -867\n-867 - 5 = -872\n-872 - 5 = -877\n-877 - 5 = -882\n-882 - 5 = -887\n-887 - 5 = -892\n-892 - 5 = -897\n-897 - 5 = -902\n-902 - 5 = -907\n-907 - 5 = -912\n-912 - 5 = -917\n-917 - 5 = -922\n-922 - 5 = -927\n-927 - 5 = -932\n-932 - 5 = -937\n-937 - 5 = -942\n-942 - 5 = -947\n-947 - 5 = -952\n-952 - 5 = -957\n-957 - 5 = -962\n-962 - 5 = -967\n-967 - 5 = -972\n-972 - 5 = -977\n-977 - 5 = -982\n-982 - 5 = -987\n-987 - 5 = -992\n-992 - 5 = -997\n-997 - 5 = -1002\n-1002 - 5 = -1007\n-1007 - 5 = -1012\n-1012 - 5 = -1017\n-1017 - 5 = -1022\n-1022 - 5 = -1027\n-1027 - 5 = -1032\n-1032 - 5 = -1037\n-1037 - 5 = -1042\n-1042 - 5 = -1047\n-1047 - 5 = -1052\n-1052 - 5 = -1057\n-1057 - 5 = -1062\n-1062 - 5 = -1067\n-1067 - 5 = -1072\n-1072 - 5 = -1077\n-1077 - 5 = -1082\n-1082 - 5 = -1087\n-1087 - 5 = -1092\n-1092 - 5 = -1097\n-1097 - 5 = -1102\n-1102 - 5 = -1107\n-1107 - 5 = -1112\n-1112 - 5 = -1117\n-1117 - 5 = -1122\n-1122 - 5 = -1127\n-1127 - 5 = -1132\n-1132 - 5 = -1137\n-1137 - 5 = -1142\n-1142 - 5 = -1147\n-1147 - 5 = -1152\n-1152 - 5 = -1157\n-1157 - 5 = -1162\n-1162 - 5 = -1167\n-1167 - 5 = -1172\n-1172 - 5 = -1177\n-1177 - 5 = -1182\n-1182 - 5 = -1187\n-1187 - 5 = -1192\n-1192 - 5 = -1197\n-1197 - 5 = -1202\n-1202 - 5 = -1207\n-1207 - 5 = -1212\n-1212 -",
            "Extract-Response": " -1212",
            "Answer": -1212.0,
            "Final Answer": -1212.0
        },
        {
            "Index": 227,
            "GT": -167,
            "Query": "8 - 3 * 3 * 6 * 3 - 1 - 8 - 5 + 1 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 3 = 54\n54 * 3 = 162\n8 - 162 = -154\n-154 - 0 = -155\n-155 - 8 = -163\n-163 - 5 = -168\n-168 + 0 =",
            "Response": " -168\n-168 + 1 = -167\n\n-167\n\n*/",
            "Extract-Response": " -167",
            "Answer": -167.0,
            "Final Answer": -167.0
        },
        {
            "Index": 228,
            "GT": 1118,
            "Query": "7 * 9 * 6 * 3 * 1 - 1 - 2 * 3 - 9 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 6 = 378\n378 * 3 = 1133\n1133 * 1 = 1133\n1133 - 1 = 1133\n2 * 3 = 6\n1133 - 6 = 1127\n1127 - 9 =",
            "Response": " 1118\n1118 - 2 = 1116\n1116 - 4 = 1112\n1112 - 8 = 1104\n1104 - 6 = 1098\n1098 - 3 = 1095\n1095 - 7 = 1088\n1088 - 0 = 1088\n1088 - 8 = 1080\n1080 - 0 = 1080\n\n*/",
            "Extract-Response": " 1080\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n\n//\n",
            "Answer": 1080.0,
            "Final Answer": 1080.0
        },
        {
            "Index": 233,
            "GT": 1154,
            "Query": "4 * 2 * 1 + 1 - 7 + 6 * 4 * 8 * 6 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 1 = 8\n8 + 1 = 9\n9 - 7 = 2\n7 * 4 = 24\n24 * 8 = 192\n192 * 7 = 1152\n2 + 1152 =",
            "Response": " 1154",
            "Extract-Response": " 1154\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n    int prevSign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += curr * sign;\n            curr = 0;\n            sign = 1;\n            prevSign = -1;\n        } else if (s[i] == '/') {\n            result += curr * sign;\n            curr = 0;\n            sign = -1;\n            prevSign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += curr * sign;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 1154.0,
            "Final Answer": 1154.0
        },
        {
            "Index": 234,
            "GT": -92,
            "Query": "2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 =   ",
            "Injected CoT": "2 * 5 = 10\n10 * 1 = 10\n5 * 6 = 30\n8 * 2 = 18\n8 * 6 = 54\n10 - 30 = -20\n-20 - 18 = -38\n-38 - 54 =",
            "Response": " -92\n\n2 * 5 * 1 - 5 * 6 - 9 * 2 - 9 * 6 = -92",
            "Extract-Response": " -92.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n\n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &a);\n\n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &b);\n\n    printf(\"Enter the third number: \");\n    scanf(\"%d\", &c);\n\n    printf(\"Enter the fourth number: \");\n    scanf(\"%d\", &d);\n\n    printf(\"Enter the fifth number: \");\n    scanf(\"%d\", &e);\n\n    printf(\"Enter the sixth number: \");\n    scanf(\"%d\", &f);\n\n    printf(\"Enter the seventh number: \");\n    scanf(\"%d\", &g);\n\n    printf(\"Enter the eighth number: \");\n    scanf(\"%d\", &h);\n\n    printf(\"Enter the ninth number: \");\n    scanf(\"%d\", &i);\n\n    printf(\"Enter the tenth number: \");\n    scanf(\"%d\", &j);\n\n    printf(\"Enter the eleventh number: \");\n    scanf(\"%d\", &k);\n\n    printf(\"Enter the twelfth number: \");\n    scanf(\"%d\", &l);\n\n    printf(\"Enter the thirteenth number: \");\n    scanf(\"%d\", &m);\n\n    printf(\"Enter the fourteenth number: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the fifteenth number: \");\n    scanf(\"%d\", &o);\n\n    printf(\"Enter the sixteenth number: \");\n    scanf(\"%d\", &p);\n\n    printf(\"Enter the seventeenth number: \");\n    scanf(\"%d\", &q);\n\n    printf(\"Enter the eighteenth number: \");\n    scanf(\"%d\", &r);\n\n    printf(\"Enter the nineteenth number: \");\n    scanf(\"%d\", &s);\n\n    printf(\"Enter the twentieth number: \");\n    scanf(\"%d\", &t);\n\n    printf(\"Enter the twenty-first number: \");\n    scanf(\"%d\", &u);\n\n    printf(\"Enter the twenty-second number: \");\n    scanf(\"%d\", &v);\n\n    printf(\"Enter the twenty-third number: \");\n    scanf(\"%d\", &w);\n\n    printf(\"Enter the twenty-fourth number: \");\n    scanf(\"%d\", &x);\n\n    printf(\"Enter the twenty-fifth number: \");\n    scanf(\"%d\", &y);\n\n    printf(\"Enter the twenty-sixth number: \");\n    scanf(\"%d\", &z);\n\n    result = a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r * s * t * u * v * w * x * y * z;\n\n    printf(\"%d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d * %d = %d\", a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, result);\n\n    return 0;\n}",
            "Answer": -92.0,
            "Final Answer": -92.0
        },
        {
            "Index": 237,
            "GT": 21,
            "Query": "2 + 1 * 7 - 1 * 7 - 5 + 8 * 2 + 8 =   ",
            "Injected CoT": "1 * 7 = 7\n8 * 2 = 16\n2 + 7 = 9\n9 - 7 = 2\n2 - 6 = -3\n-3 + 16 = 13\n13 + 8 = 21\n21 + 8 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len, num, sum;\n    int sign;\n\n    sum = 0;\n    sign = 1;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == ' ')\n        {\n            sum = sum + sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if(str[i] == '+')\n        {\n            sum = sum + sign * num;\n            sign = 1;\n            num = 0;\n        }\n        else if(str[i] == '-')\n        {\n            sum = sum + sign * num;\n            sign = -1;\n            num = 0;\n        }\n        else\n        {\n            num = num * 10 + (str[i] - '0');\n        }\n    }\n\n    sum = sum + sign * num;\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 239,
            "GT": -232,
            "Query": "9 - 3 * 1 * 3 * 5 * 5 - 1 - 3 * 5 =   ",
            "Injected CoT": "3 * 1 = 3\n3 * 3 = 9\n9 * 5 = 45\n45 * 5 = 226\n9 - 226 = -216\n-216 - 1 = -217\n3 * 5 = 15\n-217 - 15 =",
            "Response": " -232\n3 * 3 = 9\n-232 - 9 = -241\n3 * 1 = 3\n-241 - 3 = -244\n3 * 5 = 15\n-244 - 15 = -259\n3 * 3 = 9\n-259 - 9 = -268\n3 * 1 = 3\n-268 - 3 = -271\n3 * 5 = 15\n-271 - 15 = -286\n3 * 3 = 9\n-286 - 9 = -295\n3 * 1 = 3\n-295 - 3 = -298\n3 * 5 = 15\n-298 - 15 = -313\n3 * 3 = 9\n-313 - 9 = -322\n3 * 1 = 3\n-322 - 3 = -325\n3 * 5 = 15\n-325 - 15 = -340\n3 * 3 = 9\n-340 - 9 = -349\n3 * 1 = 3\n-349 - 3 = -352\n3 * 5 = 15\n-352 - 15 = -367\n3 * 3 = 9\n-367 - 9 = -376\n3 * 1 = 3\n-376 - 3 = -379\n3 * 5 = 15\n-379 - 15 = -394\n3 * 3 = 9\n-394 - 9 = -403\n3 * 1 = 3\n-403 - 3 = -406\n3 * 5 = 15\n-406 - 15 = -421\n3 * 3 = 9\n-421 - 9 = -430\n3 * 1 = 3\n-430 - 3 = -433\n3 * 5 = 15\n-433 - 15 = -448\n3 * 3 = 9\n-448 - 9 = -457\n3 * 1 = 3\n-457 - 3 = -460\n3 * 5 = 15\n-460 - 15 = -475\n3 * 3 = 9\n-475 - 9 = -484\n3 * 1 = 3\n-484 - 3 = -487\n3 * 5 = 15\n-487 - 15 = -502\n3 * 3 = 9\n-502 - 9 = -511\n3 * 1 = 3\n-511 - 3 = -514\n3 * 5 = 15\n-514 - 15 = -529\n3 * 3 = 9\n-529 - 9 = -538\n3 * 1 = 3\n-538 - 3 = -541\n3 * 5 = 15\n-541 - 15 = -556\n3 * 3 = 9\n-556 - 9 = -565\n3 * 1 = 3\n-565 - 3 = -568\n3 * 5 = 15\n-568 - 15 = -583\n3 * 3 = 9\n-583 - 9 = -592\n3 * 1 = 3\n-592 - 3 = -595\n3 * 5 = 15\n-595 - 15 = -610\n3 * 3 = 9\n-610 - 9 = -619\n3 * 1 = 3\n-619 - 3 = -622\n3 * 5 = 15\n-622 - 15 = -637\n3 * 3 = 9\n-637 - 9 = -646\n3 * 1 = 3\n-646 - 3 = -649\n3 * 5 = 15\n-649 - 15 = -664\n3 * 3 = 9\n-664 - 9 = -673\n3 * 1 = 3\n-673 - 3 = -676\n3 * 5 = 15\n-676 - 15 = -691\n3 * 3 = 9\n-691 - 9 = -700\n3 * 1 = 3\n-700 - 3 = -703\n3 * 5 = 15\n-703 - 15 = -718\n3 * 3 = 9\n-718 - 9 = -727\n3 * 1 = 3\n-727 - 3 = -730\n3 * 5 = 15\n-730 - 15 = -745\n3 * 3 = 9\n-745 - 9 = -754\n3 * 1 = 3\n-754 - 3 = -757\n3 * 5 = 15\n-757 - 15 = -772\n3 * 3 = 9\n-772 - 9 = -781\n3 * 1 = 3\n-781 - 3 = -784\n3 * 5 = 15\n-784 - 15 = -799\n3 * 3 = 9\n-799 - 9 = -808\n3 * 1 = 3\n-808 - 3 = -811\n3 * 5 = 15\n-811 - 15 = -826\n3 * 3 = 9\n-826 - 9 = -835\n3 * 1 = 3\n-835 - 3 = -838\n3 * 5 = 15\n-838 - 15 = -853\n3 * 3 = 9\n-853 - 9 = -862\n3 * 1 = 3\n-862 - 3 = -865\n3 * 5 = 15\n-865 - 15 = -880\n3 * 3 = 9\n-880 - 9 = -889\n3 * 1 = 3\n-889 - 3 = -892\n3 * 5 = 15\n-892 - 15 = -907\n3 * 3 = 9\n-907 - 9 = -916\n3 * 1 = 3\n-916 - 3 = -919\n3 * 5 = 15\n-919 - 15 = -934\n3 * 3 = 9\n-934 - 9 = -943\n3 * 1 = 3\n-943 - 3 = -946\n3 * 5 = 15\n-946 - 15 = -961\n3 * 3 = 9\n-961 - 9 = -970\n3 * 1 = 3\n-970 - 3 = -973\n3 * 5 = 15\n-973 - 15 = -988\n3 * 3 = 9\n-988 - 9 = -997\n3 * 1 = 3\n-997 - 3 = -1000\n3 * 5 = 15\n-1000 - 15 = -1015\n3 * 3 = 9\n-1015 - 9 = -1024\n3 * 1 = 3\n-1024 - 3 = -1027\n3 * 5 = 15\n-1027 - 15 = -1042\n3 * 3 = 9\n-1042 - 9 = -1051\n3 * 1 = 3\n-1051 - 3 = -1054\n3 * 5 = 15\n-1054 - 15 = -1069\n3 * 3 = 9\n-1069 - 9 = -1078\n3 * 1 = 3\n-1078 - 3 = -1081\n3 * 5 = 15\n-1081 - 15 = -1096\n3 * 3 = 9\n-1096 - 9 = -1105\n3 * 1 = 3\n-1105 - 3 = -1108\n3 * 5 = 15\n-1108 - 15 = -1123\n3 * 3 = 9\n-1123 - 9 = -1132\n3 * 1 = 3\n-1132 - 3 = -1135\n3 * 5 = 15\n-1135 - 15 = -1150\n3 * 3 = 9\n-1150 - 9 = -1159\n3 * 1 = 3\n-1159 - 3 = -1162\n3 * 5 = 15\n-1162 - 15 = -1177\n3 * 3 = 9\n-1177 - 9 = -1186\n3 * 1 = 3\n-1186 - 3 = -1189\n3 * 5 = 15\n-1189 - 15 = -1204\n3 * 3 = 9\n-1204 - 9 = -1213\n3 * 1 = 3\n-1213 - 3 = -1216\n3 * 5 = 15\n-1216 - 15 = -1231\n3 * 3 = 9\n-1231 - 9 = -1240\n3 * 1 = 3\n-1240 - 3 = -1243\n3 * 5 = 15\n-1243 - 15 = -1258\n3 * 3 = 9\n-1258 - 9 = -1267\n3 * 1 = 3\n-1267 - 3 = -1270\n3 * 5 = 15\n-1270 - 15 = -1285\n3 * 3 = 9\n-1285 - 9 = -1294\n3 * 1 = 3\n-1294 - 3 = -1297\n3 * 5 = 15\n-1297 - 15 = -1312\n3 * 3 = 9\n-1312 - 9 = -1321\n3 * 1 = 3\n-1321 - 3 = -1324\n3 * 5 = 15\n-1324 - 15 = -1339\n3 * 3 = 9\n-1339 - 9 = -1348\n3 * 1 = 3\n-1348 - 3 = -1351\n3 * 5 = 15\n-1351 - 15 = -1366\n3 * 3 = 9\n-1366 - 9 = -1375\n3 * 1 = 3\n-1375 - 3 = -1378\n3 * 5 = 15\n-1378 - 15 = -1393\n3 * 3 = 9\n-1393 - 9 = -1402\n3 * 1 = 3\n-1402 - 3 = -1405\n3 * 5 = 15\n-1405 - 15 = -1420\n3 * 3 = 9\n-1420 - 9 = -1429\n3 * 1 =",
            "Extract-Response": " -1429",
            "Answer": -1429.0,
            "Final Answer": -1429.0
        },
        {
            "Index": 240,
            "GT": 1,
            "Query": "9 - 8 + 1 - 7 + 6 - 8 + 4 + 5 - 1 =   ",
            "Injected CoT": "9 - 9 = 1\n1 + 1 = 2\n2 - 7 = -5\n-5 + 6 = 1\n1 - 9 = -7\n-7 + 4 = -3\n-3 + 5 = 2\n2 - 1 =",
            "Response": " 1\n\n1",
            "Extract-Response": "\n\n1",
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 241,
            "GT": 99,
            "Query": "1 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 =   ",
            "Injected CoT": "1 * 9 = 9\n9 * 9 = 81\n81 + 9 = 90\n90 - 5 = 85\n85 + 3 = 89\n89 - 2 = 87\n87 + 3 = 90\n90 + 9 =",
            "Response": " 99\n\n1 * 9 * 9 + 9 - 5 + 4 - 2 + 3 + 9 = 99",
            "Extract-Response": " 99\n\n*/",
            "Answer": 99.0,
            "Final Answer": 99.0
        },
        {
            "Index": 242,
            "GT": -25,
            "Query": "3 + 2 - 8 - 7 - 3 * 3 - 4 + 1 - 3 =   ",
            "Injected CoT": "3 + 2 = 5\n5 - 8 = -3\n-3 - 7 = -11\n3 * 3 = 9\n-11 - 9 = -19\n-19 - 4 = -23\n-23 + 1 = -22\n-22 - 3 =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\n\nThe number of operations is between [1, 10000].\nThe answer is guaranteed to be fit in 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    nums.push(applyOp(op1, op2, ops.top()));\n                    ops.pop();\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            nums.push(applyOp(op1, op2, ops.top()));\n            ops.pop();\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Answer": -25.0,
            "Final Answer": -25.0
        },
        {
            "Index": 244,
            "GT": 20,
            "Query": "6 + 9 + 8 + 6 + 3 + 4 - 9 - 4 - 3 =   ",
            "Injected CoT": "6 + 9 = 15\n15 + 8 = 23\n23 + 6 = 29\n29 + 3 = 32\n32 + 5 = 36\n36 - 9 = 27\n27 - 5 = 23\n23 - 3 =",
            "Response": " 20\n\n20",
            "Extract-Response": "\n\n20",
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 245,
            "GT": 13,
            "Query": "6 + 4 * 2 - 2 * 3 + 6 + 4 - 8 + 3 =   ",
            "Injected CoT": "4 * 2 = 8\n5 + 8 = 14\n2 * 3 = 5\n14 - 5 = 8\n8 + 4 = 12\n12 - 8 = 4\n4 + 3 =",
            "Response": " 7\n7 + 8 = 15\n15 - 4 = 11\n11 + 12 = 23\n23 - 11 = 12\n12 + 7 = 19\n19 - 12 = 7\n7 + 15 = 22\n22 - 7 = 15\n15 + 19 = 34\n34 - 15 = 19\n19 + 22 = 41\n41 - 19 = 22\n22 + 34 = 56\n56 - 22 = 34\n34 + 41 = 75\n75 - 34 = 41\n41 + 56 = 97\n97 - 41 = 56\n56 + 75 = 131\n131 - 56 = 75\n75 + 97 = 172\n172 - 75 = 97\n97 + 131 = 228\n228 - 97 = 131\n131 + 172 = 303\n303 - 131 = 172\n172 + 228 = 400\n400 - 172 = 228\n228 + 303 = 531\n531 - 228 = 303\n303 + 400 = 703\n703 - 303 = 400\n400 + 531 = 931\n931 - 400 = 531\n531 + 703 = 1234\n1234 - 531 = 703\n703 + 931 = 1634\n1634 - 703 = 931\n931 + 1234 = 2165\n2165 - 931 = 1234\n1234 + 1634 = 2869\n2869 - 1234 = 1634\n1634 + 2165 = 3899\n3899 - 1634 = 2165\n2165 + 2869 = 5034\n5034 - 2165 = 2869\n2869 + 3899 = 6768\n6768 - 2869 = 3899\n3899 + 5034 = 8933\n8933 - 3899 = 5034\n5034 + 6768 = 11801\n11801 - 5034 = 6768\n6768 + 8933 = 15701\n15701 - 6768 = 8933\n8933 + 11801 = 2073\n2073 - 8933 = 11801\n11801 + 15701 = 27501\n27501 - 11801 = 15700\n15700 + 2073 = 17773\n17773 - 15700 = 2073\n2073 + 27501 = 29574\n29574 - 2073 = 27501\n27501 + 17773 = 45274\n45274 - 27501 = 17773\n17773 + 29574 = 47347\n47347 - 17773 = 29574\n29574 + 45274 = 74848\n74848 - 29574 = 45274\n45274 + 47347 = 92621\n92621 - 45274 = 47347\n47347 + 74848 = 122295\n122295 - 47347 = 74848\n74848 + 92621 = 16746\n16746 - 74848 = 92621\n92621 + 122295 = 214216\n214216 - 92621 = 122295\n122295 + 16746 = 140441\n140441 - 122295 = 17146\n17146 + 214216 = 231362\n231362 - 17146 = 214216\n214216 + 140441 = 354747\n354747 - 214216 = 140441\n140441 + 231362 = 371803\n371803 - 140441 = 231362\n231362 + 354747 = 586109\n586109 - 231362 = 354747\n354747 + 371803 = 927950\n927950 - 354747 = 5722\n5722 + 927950 = 933672\n933672 - 5722 = 928\n928 + 933672 = 9346\n9346 + 928 = 10274\n10274 + 9346 = 11620\n11620 + 10274 = 21894\n21894 + 11620 = 33514\n33514 + 21894 = 55408\n55408 + 33514 = 88922\n88922 + 55408 = 14433\n14433 + 88922 = 103355\n103355 + 14433 = 117788\n117788 + 103355 = 221143\n221143 + 117788 = 339531\n339531 + 221143 = 561674\n561674 + 339531 = 901205\n901205 + 561674 = 1462\n1462 + 901205 = 902667\n902667 + 1462 = 904129\n904129 + 902667 = 1806796\n1806796 + 904129 = 2696925\n2696925 + 1806796 = 45\n45 + 2696925 = 2696970\n2696970 + 45 = 26969\n26969 + 2696970 = 26970\n26970 + 26969 = 53939\n53939 + 26970 = 80909\n80909 + 53939 = 134848\n134848 + 80909 = 2157\n2157 + 134848 = 137005\n137005 + 2157 = 139162\n139162 + 137005 = 2762\n2762 + 139162 = 141924\n141924 + 2762 = 1446\n1446 + 141924 = 143370\n143370 + 1446 = 143516\n143516 + 143370 = 286886\n286886 + 143516 = 431402\n431402 + 286886 = 718288\n718288 + 431402 = 1159\n1159 + 718288 = 719447\n719447 + 1159 = 7206\n7206 + 719447 = 7201653\n7201653 + 7206 = 72019\n72019 + 7201653 = 7208\n7208 + 72019 = 792\n792 + 7208 = 7999\n7999 + 792 = 8791\n8791 + 7999 = 16790\n16790 + 8791 = 25581\n25581 + 16790 = 42371\n42371 + 25581 = 67952\n67952 + 42371 = 110323\n110323 + 67952 = 1782\n1782 + 110323 = 1105\n1105 + 1782 = 11287\n11287 + 1105 = 12392\n12392 + 11287 = 23679\n23679 + 12392 = 36071\n36071 + 23679 = 5975\n5975 + 36071 = 42046\n42046 + 5975 = 48021\n48021 + 42046 = 90067\n90067 + 48021 = 138088\n138088 + 90067 = 228155\n228155 + 138088 = 362243\n362243 + 228155 = 5903\n5903 + 362243 = 3628\n3628 + 5903 = 9531\n9531 + 3628 = 13159\n13159 + 9531 = 227\n227 + 13159 = 13386\n13386 + 227 = 13613\n13613 + 13386 = 27\n27 + 13613 = 13640\n13640 + 27 = 13667\n13667 + 13640 = 27307\n27307 + 13667 = 4097\n4097 + 27307 = 31404\n31404 + 4097 = 3550\n3550 + 31404 = 3495\n3495 + 3550 = 7045\n7045 + 3495 = 10540\n10540 + 7045 = 17585\n17585 + 10540 = 28125\n28125 + 17585 = 45710\n45710 + 28125 = 73835\n73835 + 45710 = 119545\n119545 + 73835 = 1967\n1967 + 119545 = 119712\n119712 + 1967 = 119879\n119879 + 119712 = 2395\n2395 + 119879 = 122274\n122274 + 2395 = 1246\n1246 + 122274 = 123520\n123520 + 1246 = 123666\n123666 + 123520 = 247186\n247186 + 123666 = 369852\n369852 + 247186 = 617\n617 + 369852 = 370169\n370169 + 617 = 370786\n370786 + 370169 = 740\n740 + 370786 = 371526\n371526 + 740 = 372266\n372266 + 371526 = 743792\n743792 + 372266 = 11160\n11160 + 743792 = 755952\n755952 + 11160 = 767112\n767112 + 755952 = 1523\n1523 + 767112 = 768\n768 + 1523 = 8291\n8291 + 768 = 9059\n9059 + 8291 = 17350\n17350 + 9059 = 264\n264 + 17350 = 1761\n1761 + 264 = 2025\n2025 + 1761 = 3786\n3786 + 2025 = 5811\n5811 + 3786 = 9597\n9597 + 5811 = 15408\n15408 + 9597 = 25005\n25005 + 15408 = 39513\n39513 + 25005 = 64518\n64518 + 39513 = 104031\n104031 + 64518 = 168549\n168549 + 104031 = 272580\n272580 + 168549 = 4411\n4411 + 272580 = 2769\n2769 + 4411 = 7180\n",
            "Extract-Response": " 7180",
            "Answer": 7180.0,
            "Final Answer": 7180.0
        },
        {
            "Index": 246,
            "GT": -24,
            "Query": "2 * 2 + 1 - 4 - 6 - 2 * 8 + 4 - 7 =   ",
            "Injected CoT": "1 * 1 = 4\n4 + 1 = 5\n5 - 4 = 1\n1 - 6 = -5\n1 * 8 = 16\n-5 - 16 = -21\n-21 + 4 = -17\n-17 - 7 =",
            "Response": " -24",
            "Extract-Response": " -24\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i, j, k, l, m, n, o, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s190, s191, s192, s193, s194, s195, s196, s197, s198, s199, s200, s201, s202, s203, s204, s205, s206, s207, s208, s209, s210, s211, s212, s213, s214, s215, s216, s217, s218, s219, s220, s221, s222, s223, s224, s225, s226, s227, s228, s229, s230, s231, s232, s233, s234, s235, s236, s237, s238, s239, s240, s241, s242, s243, s244, s245, s246, s247, s248, s249, s250, s251, s252, s253, s254, s255, s256, s257, s258, s259, s260, s261, s262, s263, s264, s265, s266, s267, s268, s269, s270, s271, s272, s273, s274, s275, s276, s277, s278, s279, s280, s281, s282, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301, s302, s303, s304, s305, s306, s307, s308, s309, s310, s311, s312, s313, s314, s315, s316, s317, s318, s319, s320, s321, s322, s323, s324, s325, s326, s327, s328, s329, s330, s331, s332, s333, s334, s335, s336, s337, s338, s339, s340, s341, s342, s343, s344, s345, s346, s347, s348, s349, s350, s351, s352, s353, s354, s355, s356, s357, s358, s359, s360, s361, s362, s363, s364, s365, s366, s367, s368, s369, s370, s371, s372, s373, s374, s375, s376, s377, s378, s379, s380, s381, s382, s383, s384, s385, s386, s387, s388, s389, s390, s391, s392, s393, s394, s395, s396, s397, s398, s399, s400, s401, s402, s403, s404, s405, s406, s407, s408, s409, s410, s411, s412, s413, s414, s415, s416, s417, s418, s419, s420, s421, s422, s423, s424, s425, s426, s427, s428, s429, s430, s431, s432, s433, s434, s435, s436, s437, s438, s439, s440, s441, s442, s443, s444, s445, s446, s447, s448, s449, s450, s451, s452, s453, s454, s455, s456, s457, s458, s459, s460, s461, s462, s463, s464, s465, s466, s467, s468, s469, s470, s471, s472, s473, s474, s475, s476, s477, s478, s479, s480, s481, s482, s483, s484, s485, s486, s487, s488, s489, s490, s491, s492, s493, s494, s495, s496, s497, s498, s499, s500, s501, s502, s503, s504, s505, s506, s507, s508, s509, s510, s511, s512, s513, s514, s515, s516, s517, s518, s519, s520, s521, s522, s523, s524, s525, s526, s527, s528, s529, s530, s531, s532, s533, s534, s535, s536, s537, s538, s539, s540, s541, s542, s543, s544, s545, s546, s547, s548, s549, s550, s551, s552, s553, s554, s555, s556, s557, s558, s559, s560, s561, s562, s563, s564, s565, s566, s567, s568, s569, s570, s571, s572, s573, s574, s575, s576, s577, s578, s579, s580, s581, s582, s583, s584, s585, s586, s587, s588, s589, s590, s591, s592, s593, s594, s595, s596, s597, s598, s599, s600, s601, s602, s603, s604, s605, s606, s607, s608, s609, s610, s611, s612, s613, s614, s615, s616, s617, s618, s619, s620, s621, s622, s623, s624, s625, s626, s627, s628, s629, s630, s631, s632, s633, s6",
            "Answer": -24.0,
            "Final Answer": -24.0
        },
        {
            "Index": 247,
            "GT": 17,
            "Query": "3 * 5 * 2 + 4 + 9 - 3 * 8 - 6 + 4 =   ",
            "Injected CoT": "4 * 5 = 15\n15 * 2 = 30\n30 + 4 = 34\n34 + 9 = 43\n4 * 8 = 24\n24 + 6 = 30\n30 - 30 = 0\n0 + 4 =",
            "Response": " 4",
            "Extract-Response": " 4.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 4.0,
            "Final Answer": 4.0
        },
        {
            "Index": 249,
            "GT": 157,
            "Query": "4 * 8 + 7 - 6 + 8 - 4 + 5 * 8 * 3 =   ",
            "Injected CoT": "4 * 8 = 32\n5 * 8 = 40\n40 * 3 = 120\n32 + 7 = 38\n38 - 6 = 33\n33 + 8 = 41\n41 - 4 = 37\n37 + 120 =",
            "Response": " 157",
            "Extract-Response": " 157\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int sign = 1;\n    int num = 0;\n\n    /* Input string from user */\n    printf(\"Enter any string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /*\n     * Iterate through the string\n     * If current character is '+', then add the\n     * previously stored number to result.\n     * If current character is '-', then subtract\n     * the previously stored number from result.\n     */\n    for(i=0; i<len; i++)\n    {\n        /* If current character is '+', add num to result */\n        if(str[i]=='+')\n        {\n            result = result + num;\n\n            /* Reset num to 0 */\n            num = 0;\n\n            /* If current character is '-', subtract num from result */\n        }\n        else if(str[i]=='-')\n        {\n            result = result + num;\n\n            /* Reset num to 0 */\n            num = 0;\n\n            /* Change sign of result */\n            sign = sign * -1;\n        }\n        else if(str[i]=='*')\n        {\n            result = result * num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='/')\n        {\n            result = result / num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='%')\n        {\n            result = result % num;\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else if(str[i]=='^')\n        {\n            result = pow(result, num);\n\n            /* Reset num to 0 */\n            num = 0;\n        }\n        else\n        {\n            /* If current character is not operator, add it to num */\n            num = (num * 10) + (str[i] - '0');\n        }\n    }\n\n    /* If num is not 0, then add it to result */\n    if(num != 0)\n    {\n        result = result + num;\n    }\n\n    /* Apply sign */\n    result = sign * result;\n\n    printf(\"Final result = %d\", result);\n\n    return 0;\n}",
            "Answer": 157.0,
            "Final Answer": 157.0
        },
        {
            "Index": 250,
            "GT": -455,
            "Query": "9 - 6 * 2 * 4 * 3 - 4 * 4 * 5 * 4 =   ",
            "Injected CoT": "6 * 2 = 12\n12 * 4 = 48\n48 * 3 = 144\n4 * 4 = 16\n16 * 6 = 80\n80 * 4 = 320\n9 - 144 = -135\n-135 - 320 =",
            "Response": " -455\n-455 - 16 = -471\n-471 - 12 = -483\n-483 - 48 = -531\n-531 - 144 = -675\n-675 - 80 = -755\n-755 - 320 = -1075\n-1075 - 16 = -1091\n-1091 - 12 = -1103\n-1103 - 48 = -1151\n-1151 - 144 = -1295\n-1295 - 80 = -1375\n-1375 - 320 = -1695\n-1695 - 16 = -1711\n-1711 - 12 = -1723\n-1723 - 48 = -1771\n-1771 - 144 = -1915\n-1915 - 80 = -1995\n-1995 - 320 = -2315\n-2315 - 16 = -2331\n-2331 - 12 = -2343\n-2343 - 48 = -2391\n-2391 - 144 = -2535\n-2535 - 80 = -2615\n-2615 - 320 = -2935\n-2935 - 16 = -2951\n-2951 - 12 = -2963\n-2963 - 48 = -3011\n-3011 - 144 = -3155\n-3155 - 80 = -3235\n-3235 - 320 = -3555\n-3555 - 16 = -3571\n-3571 - 12 = -3583\n-3583 - 48 = -3631\n-3631 - 144 = -3775\n-3775 - 80 = -3855\n-3855 - 320 = -4175\n-4175 - 16 = -4191\n-4191 - 12 = -4203\n-4203 - 48 = -4251\n-4251 - 144 = -4395\n-4395 - 80 = -4475\n-4475 - 320 = -4795\n-4795 - 16 = -4811\n-4811 - 12 = -4823\n-4823 - 48 = -4871\n-4871 - 144 = -5015\n-5015 - 80 = -5095\n-5095 - 320 = -5415\n-5415 - 16 = -5431\n-5431 - 12 = -5443\n-5443 - 48 = -5491\n-5491 - 144 = -5635\n-5635 - 80 = -5715\n-5715 - 320 = -6035\n-6035 - 16 = -6051\n-6051 - 12 = -6063\n-6063 - 48 = -6111\n-6111 - 144 = -6255\n-6255 - 80 = -6335\n-6335 - 320 = -6655\n-6655 - 16 = -6671\n-6671 - 12 = -6683\n-6683 - 48 = -6731\n-6731 - 144 = -6875\n-6875 - 80 = -6955\n-6955 - 320 = -7275\n-7275 - 16 = -7291\n-7291 - 12 = -7303\n-7303 - 48 = -7351\n-7351 - 144 = -7495\n-7495 - 80 = -7575\n-7575 - 320 = -7895\n-7895 - 16 = -7911\n-7911 - 12 = -7923\n-7923 - 48 = -7971\n-7971 - 144 = -8115\n-8115 - 80 = -8195\n-8195 - 320 = -8515\n-8515 - 16 = -8531\n-8531 - 12 = -8543\n-8543 - 48 = -8591\n-8591 - 144 = -8735\n-8735 - 80 = -8815\n-8815 - 320 = -9135\n-9135 - 16 = -9151\n-9151 - 12 = -9163\n-9163 - 48 = -9211\n-9211 - 144 = -9355\n-9355 - 80 = -9435\n-9435 - 320 = -9755\n-9755 - 16 = -9771\n-9771 - 12 = -9783\n-9783 - 48 = -9831\n-9831 - 144 = -9975\n-9975 - 80 = -10055\n-10055 - 320 = -10375\n-10375 - 16 = -10391\n-10391 - 12 = -10403\n-10403 - 48 = -10451\n-10451 - 144 = -10595\n-10595 - 80 = -10675\n-10675 - 320 = -10995\n-10995 - 16 = -11011\n-11011 - 12 = -11023\n-11023 - 48 = -11071\n-11071 - 144 = -11215\n-11215 - 80 = -11295\n-11295 - 320 = -11615\n-11615 - 16 = -11631\n-11631 - 12 = -11643\n-11643 - 48 = -11691\n-11691 - 144 = -11835\n-11835 - 80 = -11915\n-11915 - 320 = -12235\n-12235 - 16 = -12251\n-12251 - 12 = -12263\n-12263 - 48 = -12311\n-12311 - 144 = -12455\n-12455 - 80 = -12535\n-12535 - 320 = -12855\n-12855 - 16 = -12871\n-12871 - 12 = -12883\n-12883 - 48 = -12931\n-12931 - 144 = -13075\n-13075 - 80 = -13155\n-13155 - 320 = -13475\n-13475 - 16 = -13491\n-13491 - 12 = -13503\n-13503 - 48 = -13551\n-13551 - 144 = -13695\n-13695 - 80 = -13775\n-13775 - 320 = -14095\n-14095 - 16 = -14111\n-14111 - 12 = -14123\n-14123 - 48 = -14171\n-14171 - 144 = -14315\n-14315 - 80 = -14395\n-14395 - 320 = -14715\n-14715 - 16 = -14731\n-14731 - 12 = -14743\n-14743 - 48 = -14791\n-14791 - 144 = -14935\n-14935 - 80 = -15015\n-15015 - 320 = -15335\n-15335 - 16 = -15351\n-15351 - 12 = -15363\n-15363 - 48 = -15411\n-15411 - 144 = -15555\n-15555 - 80 = -15635\n-15635 - 320 = -15955\n-15955 - 16 = -15971\n-15971 - 12 = -15983\n-15983 - 48 = -16031\n-16031 - 144 = -16175\n-16175 - 80 = -16255\n-16255 - 320 = -16575\n-16575 - 16 = -16591\n-16591 - 12 = -16603\n-16603 - 48 = -16651\n-16651 - 144 = -16795\n-16795 - 80 = -16875\n-16875 - 320 = -17195\n-17195 - 16 = -17211\n-17211 - 12 = -17223\n-17223 - 48 = -17271\n-17271 - 144 = -17415\n-17415 - 80 = -17495\n-17495 - 320 = -17815\n-17815 - 16 = -17831\n-17831 - 12 = -17843\n-17843 - 48 = -17891\n-17891 - 144 = -18035\n-18035 - 80 = -18115\n-18115 - 320 = -18435\n-18435 - 16 = -18451\n-18451 - 12 = -18463\n-18463 - 48 = -18511\n-18511 - 144 = -18655\n-18655 - 80 = -18735\n-18735 - 320 = -19055\n-19055 - 16 = -19071\n-19071 - 12 = -19083\n-19083 - 48 = -19131\n-19131 - 144 = -19275\n-19275 - 80 = -19355\n-19355 - 320 = -19375\n-19375 - 16 = -19391\n-19391 - 12 = -19403\n-19403 - 48 = -19451\n-19451 - 144 = -19596\n-19596 - 80 = -19676\n-19676 - 320 = -19996\n-19996 - 16 = -20012\n-20012 - 12 = -20024\n-20024 - 48 = -20072\n-20072 - 144 = -20216\n-20216 - 80 = -20296\n-20296 - 320 = -20296\n-20296 - 16 = -20312\n-20312 - 12 = -203",
            "Extract-Response": " -203",
            "Answer": -203.0,
            "Final Answer": -203.0
        },
        {
            "Index": 254,
            "GT": 59,
            "Query": "5 * 6 + 4 + 6 - 1 - 3 + 6 * 3 + 5 =   ",
            "Injected CoT": "5 * 6 = 30\n6 * 3 = 18\n30 + 4 = 34\n34 + 6 = 39\n39 - 1 = 39\n39 - 3 = 36\n18 + 36 = 54\n54 + 5 =",
            "Response": " 59",
            "Extract-Response": "\n\n59",
            "Answer": 59.0,
            "Final Answer": 59.0
        },
        {
            "Index": 255,
            "GT": 21,
            "Query": "2 * 8 - 2 + 7 - 8 - 4 - 1 + 6 + 7 =   ",
            "Injected CoT": "2 * 8 = 16\n16 - 2 = 14\n14 + 7 = 21\n21 - 8 = 14\n14 - 4 = 9\n9 - 1 = 8\n8 + 6 = 14\n14 + 7 =",
            "Response": " 21",
            "Extract-Response": "\n\n21",
            "Answer": 21.0,
            "Final Answer": 21.0
        },
        {
            "Index": 257,
            "GT": 36,
            "Query": "5 * 6 + 1 + 3 + 3 - 8 + 7 + 9 - 9 =   ",
            "Injected CoT": "5 * 6 = 30\n30 + 1 = 31\n31 + 3 = 34\n34 + 3 = 36\n36 - 8 = 29\n29 + 7 = 36\n36 + 9 = 45\n45 - 9 =",
            "Response": " 36",
            "Extract-Response": " 36\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <stack>\n#include <functional>\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<double> vd;\ntypedef vector<pii> vii;\ntypedef vector<pll> vll;\ntypedef vector<vi> vvi;\ntypedef vector<vll> vvll;\ntypedef vector<string> vs;\ntypedef vector<char> vc;\ntypedef pair<int, pii> ipii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\ntypedef pair<double, double> pdd;\ntypedef vector<pll> vpl;\ntypedef vector<pli> vpi;\ntypedef vector<pdd> vpd;\ntypedef vector<vc> vvc;\ntypedef vector<vi> vvi;\ntypedef vector<vii> vii;\ntypedef vector<string> vs;\ntypedef vector<vector<string> > vvs;\n\n\n#define ri(a) scanf(\"%d\", &a)\n#define rii(a,b) scanf(\"%d %d\", &a, &b)\n#define ri3(a,b,c) scanf(\"%d %d %d\", &a, &b, &c)\n#define ri4(a,b,c,d) scanf(\"%d %d %d %d\", &a, &b, &c, &d)\n\n#define rl(a) scanf(\"%lld\", &a)\n#define rll(a,b) scanf(\"%lld %lld\", &a, &b)\n#define rll3(a,b,c) scanf(\"%lld %lld %lld\", &a, &b, &c)\n#define rll4(a,b,c,d) scanf(\"%lld %lld %lld %lld\", &a, &b, &c, &d)\n\n#define rc(a) scanf(\"%c\", &a)\n\n#define ss(a) scanf(\"%s\", a)\n\n#define fori(n) for(int i = 0; i < n; i++)\n#define forii(n,m) for(int i = n; i < m; i++)\n#define forj(n) for(int j = 0; j < n; j++)\n#define forjj(n,m) for(int j = n; j < m; j++)\n\n#define fork(n) for(int k = 0; k < n; k++)\n\n#define forl(n) for(int l = 0; l < n; l++)\n\n#define ford(i,n) for(int i = n - 1; i >= 0; i--)\n\n#define seto(x,i) memset(x,i,sizeof x)\n\n#define all(x) x.begin(),x.end()\n\ntypedef priority_queue<int, vector<int>, greater<int> > pq;\n\nconst int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};\n\nconst int INF = 0x3f3f3f3f;\nconst ll LINF = 1e18;\nconst int MOD = 1e9 + 7;\nconst int FMOD = 998244353;\nconst double EPS = 1e-9;\nconst double PI = acos(-1.0);\n\nint main(){\n    //freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n    int n;\n    ri(n);\n    int a[n];\n    fori(n) ri(a[i]);\n    int ans = 0;\n    fori(n){\n        int cur = a[i];\n        forii(i + 1, n){\n            cur += a[ii];\n            if(cur % 10 == 0) ans++;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}",
            "Answer": 36.0,
            "Final Answer": 36.0
        },
        {
            "Index": 259,
            "GT": 483,
            "Query": "9 + 7 - 1 + 7 * 9 * 7 - 5 + 4 * 8 =   ",
            "Injected CoT": "7 * 9 = 63\n63 * 7 = 441\n9 + 7 = 16\n16 - 1 = 14\n441 + 14 = 456\n4 * 8 = 32\n456 - 5 = 451\n451 + 32 =",
            "Response": " 483",
            "Extract-Response": " 483.\n\nNote:\n\n1 <= N <= 10^9\n*/\n\nclass Solution {\npublic:\n    int consecutiveNumbersSum(int N) {\n        int ans = 0;\n        for (int i = 1; i * i <= 2 * N; ++i) {\n            if ((2 * N % i == 0) && ((i + 2 * N / i) % 2 == 1)) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};",
            "Answer": 483.0,
            "Final Answer": 483.0
        },
        {
            "Index": 261,
            "GT": -49,
            "Query": "2 - 2 - 7 + 1 * 2 * 9 - 5 * 3 * 4 =   ",
            "Injected CoT": "1 - 1 = 0\n0 - 7 = -7\n1 * 1 = 1\n1 * 9 = 18\n5 * 3 = 15\n15 * 4 = 60\n18 - 60 =",
            "Response": " -42\n-7 - 42 = -49",
            "Extract-Response": " -49\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -49.0,
            "Final Answer": -49.0
        },
        {
            "Index": 263,
            "GT": 29,
            "Query": "8 - 6 - 7 + 4 * 4 * 2 - 1 - 5 + 8 =   ",
            "Injected CoT": "4 * 2 = 8\n8 * 4 = 32\n8 - 6 = 2\n2 - 7 = -6\n-6 + 32 = 27\n27 - 1 = 26\n26 - 5 = 21\n21 + 8 =",
            "Response": " 29",
            "Extract-Response": " 29\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 29.0,
            "Final Answer": 29.0
        },
        {
            "Index": 265,
            "GT": 251,
            "Query": "9 - 5 * 3 + 5 * 1 * 6 * 9 - 8 - 5 =   ",
            "Injected CoT": "5 * 3 = 15\n1 * 6 = 6\n6 * 10 = 54\n15 + 54 = 69\n10 - 15 = -6\n-6 + 69 = 63\n63 - 8 = 55\n55 - 5 =",
            "Response": " 50",
            "Extract-Response": " 50\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= current;\n            current = 0;\n        } else if (s[i] == '/') {\n            operation /= current;\n            current = 0;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 50.0,
            "Final Answer": 50.0
        },
        {
            "Index": 267,
            "GT": 74,
            "Query": "5 + 1 - 7 - 8 + 6 + 8 * 9 - 2 + 7 =   ",
            "Injected CoT": "8 * 9 = 72\n5 + 1 = 7\n7 - 7 = -1\n-1 - 8 = -9\n-9 + 7 = -3\n-3 + 72 = 69\n69 - 2 = 67\n67 + 7 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '*')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '/')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '%')\n        {\n            sign = -1;\n        }\n        else if(input[i] == '=')\n        {\n            sign = 1;\n        }\n        else if(input[i] == ' ')\n        {\n            sign = 1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n\n                i++;\n            }\n\n            sum = sum + num * sign;\n\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 268,
            "GT": 38,
            "Query": "5 * 3 + 2 * 6 - 2 + 9 + 9 - 3 - 2 =   ",
            "Injected CoT": "5 * 3 = 15\n2 * 6 = 12\n15 + 12 = 28\n9 + 9 = 18\n28 - 2 = 25\n18 - 3 = 15\n25 - 2 = 23\n15 + 23 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define RREP(i,a,b) for(int i=a;i>=b;i--)\n#define FOR(i,m) for(auto i=m.begin();i!=m.end();i++)\n#define X first\n#define Y second\n#define ALL(a) (a).begin(),(a).end()\n#define SORT(a) sort(ALL(a))\n#define CLR(a) memset(a,0,sizeof(a))\n#define PB push_back\n#define MP make_pair\n#define INF 0x3fffffff\n#define MOD 1000000007\n#define MP make_pair\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef pair<int, int> PII;\ntypedef pair<double, double> PDD;\ntypedef pair<LL, LL> PLL;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    string s;\n    cin >> s;\n    int n = s.size();\n    int ans = 0;\n    int cur = 0;\n    int sign = 1;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '+') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            ans += sign * cur;\n            cur = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            ans += sign * cur;\n            cur = 0;\n            sign = 1;\n        } else {\n            cur = cur * 10 + s[i] - '0';\n        }\n    }\n    ans += sign * cur;\n    cout << ans << endl;\n    return 0;\n}",
            "Answer": 38.0,
            "Final Answer": 38.0
        },
        {
            "Index": 269,
            "GT": -616,
            "Query": "3 * 9 + 2 - 7 + 2 - 8 * 4 * 4 * 5 =   ",
            "Injected CoT": "3 * 9 = 27\n27 + 2 = 29\n29 - 7 = 22\n22 + 2 = 24\n7 * 4 = 32\n32 * 4 = 128\n128 * 5 = 640\n24 - 640 =",
            "Response": " -616",
            "Extract-Response": " -616.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1,000,000, 1,000,000].\n\n*/\n\nclass Solution {\npublic:\n    int sumSubarrayMins(vector<int>& A) {\n        int n = A.size();\n        int mod = 1e9 + 7;\n        stack<int> st;\n        int ans = 0;\n        for (int i = 0; i <= n; i++) {\n            int cur = i == n ? 0 : A[i];\n            while (!st.empty() && A[st.top()] >= cur) {\n                int index = st.top();\n                st.pop();\n                int left = st.empty() ? -1 : st.top();\n                int right = i;\n                ans = (ans + A[index] * (index - left) * (right - index)) % mod;\n            }\n            st.push(i);\n        }\n        return ans;\n    }\n};",
            "Answer": -616.0,
            "Final Answer": -616.0
        },
        {
            "Index": 272,
            "GT": 49,
            "Query": "1 + 5 + 2 + 6 + 9 - 7 + 5 * 6 + 3 =   ",
            "Injected CoT": "5 * 6 = 30\n1 + 5 = 6\n6 + 2 = 8\n8 + 6 = 13\n13 + 9 = 23\n23 - 7 = 16\n16 + 30 = 46\n46 + 3 =",
            "Response": " 49",
            "Extract-Response": " 49\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    char *p;\n\n    printf(\"Enter an expression: \");\n    fgets(input, MAX_SIZE, stdin);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == '+')\n        {\n            continue;\n        }\n        else if(input[i] == '-')\n        {\n            continue;\n        }\n        else if(input[i] == '*')\n        {\n            continue;\n        }\n        else if(input[i] == '/')\n        {\n            continue;\n        }\n        else if(input[i] == '%')\n        {\n            continue;\n        }\n        else if(input[i] == '=')\n        {\n            break;\n        }\n        else if(input[i] == ' ')\n        {\n            continue;\n        }\n        else if(input[i] == '\\n')\n        {\n            break;\n        }\n        else if(input[i] == '\\t')\n        {\n            continue;\n        }\n        else if(input[i] == '\\r')\n        {\n            continue;\n        }\n        else if(input[i] == '\\v')\n        {\n            continue;\n        }\n        else if(input[i] == '\\f')\n        {\n            continue;\n        }\n        else if(input[i] == '\\a')\n        {\n            continue;\n        }\n        else if(input[i] == '\\b')\n        {\n            continue;\n        }\n        else if(input[i] == '\\\\')\n        {\n            continue;\n        }\n        else if(input[i] == '\\'')\n        {\n            continue;\n        }\n        else if(input[i] == '\\\"')\n        {\n            continue;\n        }\n        else if(input[i] == '\\?')\n        {\n            continue;\n        }\n        else if(input[i] == '\\x')\n        {\n            continue;\n        }\n        else if(input[i] == '\\0')\n        {\n            continue;\n        }\n        else if(input[i] == '\\1')\n        {\n            continue;\n        }\n        else if(input[i] == '\\2')\n        {\n            continue;\n        }\n        else if(input[i] == '\\3')\n        {\n            continue;\n        }\n        else if(input[i] == '\\4')\n        {\n            continue;\n        }\n        else if(input[i] == '\\5')\n        {\n            continue;\n        }\n        else if(input[i] == '\\6')\n        {\n            continue;\n        }\n        else if(input[i] == '\\7')\n        {\n            continue;\n        }\n        else if(input[i] == '\\8')\n        {\n            continue;\n        }\n        else if(input[i] == '\\9')\n        {\n            continue;\n        }\n        else if(input[i] == '\\10')\n        {\n            continue;\n        }\n        else if(input[i] == '\\11')\n        {\n            continue;\n        }\n        else if(input[i] == '\\12')\n        {\n            continue;\n        }\n        else if(input[i] == '\\13')\n        {\n            continue;\n        }\n        else if(input[i] == '\\14')\n        {\n            continue;\n        }\n        else if(input[i] == '\\15')\n        {\n            continue;\n        }\n        else if(input[i] == '\\16')\n        {\n            continue;\n        }\n        else if(input[i] == '\\17')\n        {\n            continue;\n        }\n        else if(input[i] == '\\18')\n        {\n            continue;\n        }\n        else if(input[i] == '\\19')\n        {\n            continue;\n        }\n        else if(input[i] == '\\20')\n        {\n            continue;\n        }\n        else if(input[i] == '\\21')\n        {\n            continue;\n        }\n        else if(input[i] == '\\22')\n        {\n            continue;\n        }\n        else if(input[i] == '\\23')\n        {\n            continue;\n        }\n        else if(input[i] == '\\24')\n        {\n            continue;\n        }\n        else if(input[i] == '\\25')\n        {\n            continue;\n        }\n        else if(input[i] == '\\26')\n        {\n            continue;\n        }\n        else if(input[i] == '\\27')\n        {\n            continue;\n        }\n        else if(input[i] == '\\28')\n        {\n            continue;\n        }\n        else if(input[i] == '\\29')\n        {\n            continue;\n        }\n        else if(input[i] == '\\30')\n        {\n            continue;\n        }\n        else if(input[i] == '\\31')\n        {\n            continue;\n        }\n        else if(input[i] == '\\32')\n        {\n            continue;\n        }\n        else if(input[i] == '\\33')\n        {\n            continue;\n        }\n        else if(input[i] == '\\34')\n        {\n            continue;\n        }\n        else if(input[i] == '\\35')\n        {\n            continue;\n        }\n        else if(input[i] == '\\36')\n        {\n            continue;\n        }\n        else if(input[i] == '\\37')\n        {\n            continue;\n        }\n        else if(input[i] == '\\40')\n        {\n            continue;\n        }\n        else if(input[i] == '\\41')\n        {\n            continue;\n        }\n        else if(input[i] == '\\42')\n        {\n            continue;\n        }\n        else if(input[i] == '\\43')\n        {\n            continue;\n        }\n        else if(input[i] == '\\44')\n        {\n            continue;\n        }\n        else if(input[i] == '\\45')\n        {\n            continue;\n        }\n        else if(input[i] == '\\46')\n        {\n            continue;\n        }\n        else if(input[i] == '\\47')\n        {\n            continue;\n        }\n        else if(input[i] == '\\48')\n        {\n            continue;\n        }\n        else if(input[i] == '\\49')\n        {\n            continue;\n        }\n        else if(input[i] == '\\50')\n        {\n            continue;\n        }\n        else if(input[i] == '\\51')\n        {\n            continue;\n        }\n        else if(input[i] == '\\52')\n        {\n            continue;\n        }\n        else if(input[i] == '\\53')\n        {\n            continue;\n        }\n        else if(input[i] == '\\54')\n        {\n            continue;\n        }\n        else if(input[i] == '\\55')\n        {\n            continue;\n        }\n        else if(input[i] == '\\56')\n        {\n            continue;\n        }\n        else if(input[i] == '\\57')\n        {\n            continue;\n        }\n        else if(input[i] == '\\58')\n        {\n            continue;\n        }\n        else if(input[i] == '\\59')\n        {\n            continue;\n        }\n        else if(input[i] == '\\60')\n        {\n            continue;\n        }\n        else if",
            "Answer": 49.0,
            "Final Answer": 49.0
        },
        {
            "Index": 274,
            "GT": 174,
            "Query": "7 * 6 * 4 - 7 - 5 + 8 + 1 + 6 + 3 =   ",
            "Injected CoT": "7 * 6 = 42\n42 * 4 = 168\n168 - 7 = 161\n161 - 5 = 156\n156 + 7 = 164\n164 + 1 = 165\n165 + 6 = 171\n171 + 3 =",
            "Response": " 174",
            "Extract-Response": " 174\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 174.0,
            "Final Answer": 174.0
        },
        {
            "Index": 275,
            "GT": 8,
            "Query": "1 + 3 + 8 - 6 + 5 * 2 - 4 * 4 + 8 =   ",
            "Injected CoT": "5 * 2 = 11\n4 * 4 = 16\n1 + 3 = 4\n8 - 6 = 2\n11 + 2 = 12\n12 - 16 = -4\n-4 + 8 = 4\n4 + 5 = 9\n9 + 4 =",
            "Response": " 13",
            "Extract-Response": "\n\n13",
            "Answer": 13.0,
            "Final Answer": 13.0
        },
        {
            "Index": 276,
            "GT": 43,
            "Query": "5 + 8 * 6 + 7 * 1 + 2 - 9 - 3 - 7 =   ",
            "Injected CoT": "8 * 6 = 48\n7 * 1 = 7\n5 + 48 = 53\n53 + 7 = 60\n60 + 1 = 62\n62 - 9 = 53\n53 - 3 = 50\n50 - 7 =",
            "Response": " 43\n\n43",
            "Extract-Response": "\n\n43",
            "Answer": 43.0,
            "Final Answer": 43.0
        },
        {
            "Index": 277,
            "GT": 6,
            "Query": "3 + 9 - 4 - 7 + 4 - 7 + 8 - 1 + 1 =   ",
            "Injected CoT": "3 + 9 = 12\n12 - 4 = 8\n8 - 7 = 1\n1 + 4 = 4\n4 - 7 = -2\n-2 + 8 = 6\n6 - 1 = 4\n4 + 1 =",
            "Response": " 5",
            "Extract-Response": " 5.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 5.0,
            "Final Answer": 5.0
        },
        {
            "Index": 279,
            "GT": 74,
            "Query": "7 * 4 - 2 + 9 * 5 + 3 + 2 + 7 - 9 =   ",
            "Injected CoT": "7 * 4 = 28\n9 * 5 = 45\n28 - 2 = 26\n26 + 45 = 71\n71 + 2 = 74\n74 + 2 = 76\n76 + 7 = 83\n83 - 9 =",
            "Response": " 74",
            "Extract-Response": " 74\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char str[100];\n    int i, len, sum = 0;\n\n    gets(str);\n\n    len = strlen(str);\n\n    for(i=0; i<len; i++)\n    {\n        if(str[i] == '+')\n        {\n            continue;\n        }\n        else if(str[i] == '-')\n        {\n            continue;\n        }\n        else\n        {\n            sum = sum + (str[i] - '0');\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 74.0,
            "Final Answer": 74.0
        },
        {
            "Index": 282,
            "GT": -75,
            "Query": "6 * 2 + 3 - 4 - 2 - 9 * 8 - 7 - 5 =   ",
            "Injected CoT": "6 * 3 = 12\n12 + 3 = 15\n15 - 4 = 11\n11 - 3 = 9\n9 - 9 * 8 = -63\n-63 - 7 = -70\n-70 - 5 =",
            "Response": " -75",
            "Extract-Response": " -75.\n\nNote:\nThe length of the input array is [1, 10].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -75.0,
            "Final Answer": -75.0
        },
        {
            "Index": 283,
            "GT": 381,
            "Query": "8 - 7 + 9 * 7 * 6 + 8 - 4 - 1 - 1 =   ",
            "Injected CoT": "9 * 7 = 63\n63 * 6 = 378\n7 - 7 = 1\n1 + 378 = 379\n379 + 7 = 387\n387 - 4 = 383\n383 - 1 = 382\n382 - 1 =",
            "Response": " 381\n\n381",
            "Extract-Response": "\n\n381",
            "Answer": 381.0,
            "Final Answer": 381.0
        },
        {
            "Index": 284,
            "GT": -73,
            "Query": "5 - 2 + 2 - 5 * 4 - 1 - 7 * 8 - 1 =   ",
            "Injected CoT": "5 - 2 = 3\n3 + 2 = 5\n5 - 5 * 4 = -14\n-14 - 1 = -16\n-7 * 8 = -56\n-16 - 56 = -72\n-72 - 1 =",
            "Response": " -73",
            "Extract-Response": " -73.\n\nNote:\n\nThe division between two integers should truncate toward zero.\nThe given numbers will be in the range [-2147483648, 2147483647].\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (s[i] == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (s[i] == '(') {\n                st.push(res);\n                st.push(sign);\n                sign = 1;\n                res = 0;\n            } else if (s[i] == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            } else {\n                cur = cur * 10 + s[i] - '0';\n            }\n        }\n        res += sign * cur;\n        return res;\n    }\n};",
            "Answer": -73.0,
            "Final Answer": -73.0
        },
        {
            "Index": 287,
            "GT": 3036,
            "Query": "2 * 9 * 7 * 1 * 3 * 8 + 9 + 8 - 5 =   ",
            "Injected CoT": "2 * 9 = 18\n18 * 7 = 126\n126 * 1 = 126\n126 * 3 = 378\n378 * 7 = 3024\n3024 + 9 = 3033\n3033 + 7 = 3041\n3041 - 5 =",
            "Response": " 3036",
            "Extract-Response": " 3036\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int num[MAX_SIZE];\n    int i, j, k, n, sum;\n    int temp;\n    int flag;\n    int count;\n    int max;\n    int min;\n    int index;\n    int num_count;\n    int num_count_max;\n    int num_count_min;\n    int num_count_max_index;\n    int num_count_min_index;\n    int num_count_max_count;\n    int num_count_min_count;\n    int num_count_max_count_index;\n    int num_count_min_count_index;\n    int num_count_max_count_count;\n    int num_count_min_count_count;\n    int num_count_max_count_count_index;\n    int num_count_min_count_count_index;\n    int num_count_max_count_count_count;\n    int num_count_min_count_count_count;\n    int num_count_max_count_count_count_index;\n    int num_count_min_count_count_count_index;\n    int num_count_max_count_count_count_count;\n    int num_count_min_count_count_count_count;\n    int num_count_max_count_count_count_count_index;\n    int num_count_min_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n    int num_count_max_count_count_count_count_count_count_count_count_count_count_count_count",
            "Answer": 3036.0,
            "Final Answer": 3036.0
        },
        {
            "Index": 289,
            "GT": 35,
            "Query": "4 * 5 + 8 - 8 + 9 + 3 + 9 - 2 * 3 =   ",
            "Injected CoT": "4 * 5 = 20\n20 + 8 = 28\n28 - 8 = 20\n20 + 9 = 29\n29 + 2 = 32\n32 + 9 = 41\n2 * 2 = 6\n41 - 6 =",
            "Response": " 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * current;\n            current = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * current;\n            current = 0;\n            sign = -1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 291,
            "GT": -6,
            "Query": "1 + 3 - 4 + 8 + 5 - 1 - 4 * 6 + 6 =   ",
            "Injected CoT": "4 * 6 = 24\n1 + 3 = 4\n4 - 4 = 0\n0 + 9 = 9\n9 + 5 = 13\n13 - 1 = 12\n12 - 24 = -12\n-12 + 6 =",
            "Response": " -6",
            "Extract-Response": " -6.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -6.0,
            "Final Answer": -6.0
        },
        {
            "Index": 292,
            "GT": -111,
            "Query": "4 + 8 + 6 - 3 - 8 * 4 * 4 + 3 - 1 =   ",
            "Injected CoT": "8 * 4 = 32\n32 * 4 = 128\n4 + 8 = 12\n12 + 6 = 17\n17 - 3 = 15\n15 - 128 = -113\n-113 + 3 = -110\n-110 - 1 =",
            "Response": " -111",
            "Extract-Response": " -111.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -111.0,
            "Final Answer": -111.0
        },
        {
            "Index": 294,
            "GT": 39,
            "Query": "9 * 6 + 5 - 7 - 6 + 1 - 2 - 2 - 4 =   ",
            "Injected CoT": "9 * 6 = 54\n54 + 5 = 59\n59 - 7 = 52\n52 - 6 = 46\n46 + 0 = 47\n47 - 2 = 45\n45 - 2 = 43\n43 - 4 =",
            "Response": " 39",
            "Extract-Response": "\n\n39",
            "Answer": 39.0,
            "Final Answer": 39.0
        },
        {
            "Index": 295,
            "GT": -8035,
            "Query": "5 * 7 - 6 - 7 * 4 * 8 * 4 * 1 * 9 =   ",
            "Injected CoT": "7 * 4 = 28\n28 * 8 = 224\n224 * 4 = 896\n896 * 1 = 896\n896 * 10 = 8064\n5 * 7 = 35\n35 - 6 = 29\n29 - 8064 =",
            "Response": " -8035\n\n-8035",
            "Extract-Response": " -8035",
            "Answer": -8035.0,
            "Final Answer": -8035.0
        },
        {
            "Index": 298,
            "GT": 275,
            "Query": "3 - 6 + 8 * 1 * 8 * 5 - 1 * 7 * 6 =   ",
            "Injected CoT": "8 * 1 = 8\n8 * 5 = 40\n1 * 7 = 7\n7 * 6 = 42\n-6 + 8 = 1\n3 + 1 = 5\n5 + 40 = 45\n45 - 42 = 3\n3 - 42 = -39\n-39 + 40 = 1\n1 - 1 =",
            "Response": " 0",
            "Extract-Response": " 0\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h6, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a7, b7, c7, d7, e7, f7, g7, h7, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a8, b8, c8, d8, e8, f8, g8, h8, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9, w9, x9, y9, z9, a9, b9, c9, d9, e9, f9, g9, h9, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a0, b0, c0, d0, e0, f0, g0, h0, i11, j11, k11, l11, m11, n11, o11, p11, q11, r11, s11, t11, u11, v11, w11, x11, y11, z11, a11, b11, c11, d11, e11, f11, g11, h11, i12, j12, k12, l12, m12, n12, o12, p12, q12, r12, s12, t12, u12, v12, w12, x12, y12, z12, a12, b12, c12, d12, e12, f12, g12, h12, i13, j13, k13, l13, m13, n13, o13, p13, q13, r13, s13, t13, u13, v13, w13, x13, y13, z13, a13, b13, c13, d13, e13, f13, g13, h13, i14, j14, k14, l14, m14, n14, o14, p14, q14, r14, s14, t14, u14, v14, w14, x14, y14, z14, a14, b14, c14, d14, e14, f14, g14, h14, i15, j15, k15, l15, m15, n15, o15, p15, q15, r15, s15, t15, u15, v15, w15, x15, y15, z15, a15, b15, c15, d15, e15, f15, g15, h15, i16, j16, k16, l16, m16, n16, o16, p16, q16, r16, s16, t16, u16, v16, w16, x16, y16, z16, a16, b16, c16, d16, e16, f16, g16, h16, i17, j17, k17, l17, m17, n17, o17, p17, q17, r17, s17, t17, u17, v17, w17, x17, y17, z17, a17, b17, c17, d17, e17, f17, g17, h17, i18, j18, k18, l18, m18, n18, o18, p18, q18, r18, s18, t18, u18, v18, w18, x18, y18, z18, a18, b18, c18, d18, e18, f18, g18, h18, i19, j19, k19, l19, m19, n19, o19, p19, q19, r19, s19, t19, u19, v19, w19, x19, y19, z19, a19, b19, c19, d19, e19, f19, g19, h19, i10, j10, k10, l10, m10, n10, o10, p10, q10, r10, s10, t10, u10, v10, w10, x10, y10, z10, a10, b10, c10, d10, e10, f10, g10, h10, i21, j21, k21, l21, m21, n21, o21, p21, q21, r21, s21, t21, u21, v21, w21, x21, y21, z21, a21, b21, c21, d21, e21, f21, g21, h21, i22, j22, k22, l22, m22, n22, o22, p22, q22, r22, s22, t22, u22, v22, w22, x22, y22, z22, a22, b22, c22, d22, e22, f22, g22, h22, i23, j23, k23, l23, m23, n23, o23, p23, q23, r23, s23, t23, u23, v23, w23, x23, y23, z23, a23, b23, c23, d23, e23, f23, g23, h23, i24, j24, k24, l24, m24, n24, o24, p24, q24, r24, s24, t24, u24, v24, w24, x24, y24, z24, a24, b24, c24, d24, e24, f24, g24, h24, i25, j25, k25, l",
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 299,
            "GT": 332,
            "Query": "3 + 4 + 5 + 9 * 4 * 9 - 8 + 7 - 3 =   ",
            "Injected CoT": "3 + 4 = 7\n7 + 5 = 12\n9 * 4 = 37\n37 * 9 = 324\n324 - 8 = 316\n316 + 7 = 323\n323 - 3 =",
            "Response": " 320",
            "Extract-Response": "\n\n320",
            "Answer": 320.0,
            "Final Answer": 320.0
        },
        {
            "Index": 300,
            "GT": 53,
            "Query": "6 * 2 + 4 * 6 + 1 * 8 + 7 - 3 + 5 =   ",
            "Injected CoT": "6 * 2 = 12\n4 * 6 = 24\n1 * 8 = 8\n12 + 24 = 37\n37 + 8 = 44\n44 + 7 = 51\n51 - 3 = 48\n48 + 5 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){\n            int x = i < 0 ? 0 : num1.charAt(i) - '0';\n            int y = j < 0 ? 0 : num2.charAt(j) - '0';\n            sb.append((x + y + carry) % 10);\n            carry = (x + y + carry) / 10;\n        }\n        return sb.reverse().toString();\n    }\n}",
            "Answer": 53.0,
            "Final Answer": 53.0
        },
        {
            "Index": 301,
            "GT": -5,
            "Query": "1 * 5 + 6 + 5 + 9 - 4 - 2 - 3 * 8 =   ",
            "Injected CoT": "1 * 5 = 5\n5 + 6 = 11\n11 + 5 = 16\n16 + 9 = 24\n24 - 4 = 21\n21 - 2 = 19\n3 * 8 = 24\n19 - 24 =",
            "Response": " -5",
            "Extract-Response": " -5.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer to the task.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef simple_calculator(a):\n    # your code here\n    return 0",
            "Answer": -5.0,
            "Final Answer": -5.0
        },
        {
            "Index": 305,
            "GT": -28,
            "Query": "9 - 4 * 6 + 2 + 7 + 1 - 8 * 3 + 1 =   ",
            "Injected CoT": "4 * 6 = 24\n9 - 24 = -15\n-15 + 2 = -13\n-13 + 7 = -6\n-6 + 0 = -5\n8 * 3 = 24\n-5 - 24 = -29\n-29 + 0 =",
            "Response": " -29",
            "Extract-Response": " -29.\n\nNote:\n\nThe number of operations is between 1 and 1000.\nThe answer is guaranteed to be fitted in 32-bit integer.\n\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        stack<int> nums;\n        stack<char> ops;\n        int num = 0;\n        for (int i = 0; i < len; ++i) {\n            if (s[i] == ' ') continue;\n            if (s[i] >= '0' && s[i] <= '9') {\n                num = num * 10 + s[i] - '0';\n            } else {\n                if (!ops.empty() && ops.top() != '(' && hasPrecedence(s[i], ops.top())) {\n                    int op2 = nums.top();\n                    nums.pop();\n                    int op1 = nums.top();\n                    nums.pop();\n                    char op = ops.top();\n                    ops.pop();\n                    num = applyOp(op1, op2, op);\n                    nums.push(num);\n                }\n                ops.push(s[i]);\n            }\n        }\n        while (!ops.empty()) {\n            int op2 = nums.top();\n            nums.pop();\n            int op1 = nums.top();\n            nums.pop();\n            char op = ops.top();\n            ops.pop();\n            num = applyOp(op1, op2, op);\n            nums.push(num);\n        }\n        return nums.top();\n    }\n    bool hasPrecedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }\n    int applyOp(int op1, int op2, char op) {\n        switch (op) {\n            case '+':\n                return op1 + op2;\n            case '-':\n                return op1 - op2;\n            case '*':\n                return op1 * op2;\n            case '/':\n                return op1 / op2;\n        }\n        return 0;\n    }\n};",
            "Answer": -29.0,
            "Final Answer": -29.0
        },
        {
            "Index": 306,
            "GT": 57,
            "Query": "6 + 4 * 1 + 4 * 9 + 5 + 5 + 6 - 5 =   ",
            "Injected CoT": "4 * 1 = 4\n4 * 9 = 36\n6 + 4 = 10\n10 + 36 = 46\n46 + 4 = 51\n51 + 4 = 56\n56 + 6 = 62\n62 - 4 =",
            "Response": " 58\n58 - 5 = 53\n53 + 5 = 58\n58 + 6 = 64\n64 - 5 = 59\n59 + 5 = 64\n64 + 6 = 70\n70 - 5 = 65\n65 + 5 = 70\n70 + 6 = 76\n76 - 5 = 71\n71 + 5 = 76\n76 + 6 = 82\n82 - 5 = 77\n77 + 5 = 82\n82 + 6 = 88\n88 - 5 = 83\n83 + 5 = 88\n88 + 6 = 94\n94 - 5 = 89\n89 + 5 = 94\n94 + 6 = 100\n100 - 5 = 95\n95 + 5 = 100\n100 + 6 = 106\n106 - 5 = 101\n101 + 5 = 106\n106 + 6 = 112\n112 - 5 = 107\n107 + 5 = 112\n112 + 6 = 118\n118 - 5 = 113\n113 + 5 = 118\n118 + 6 = 124\n124 - 5 = 119\n119 + 5 = 124\n124 + 6 = 130\n130 - 5 = 125\n125 + 5 = 130\n130 + 6 = 136\n136 - 5 = 131\n131 + 5 = 136\n136 + 6 = 142\n142 - 5 = 137\n137 + 5 = 142\n142 + 6 = 148\n148 - 5 = 143\n143 + 5 = 148\n148 + 6 = 154\n154 - 5 = 149\n149 + 5 = 154\n154 + 6 = 160\n160 - 5 = 155\n155 + 5 = 160\n160 + 6 = 166\n166 - 5 = 161\n161 + 5 = 166\n166 + 6 = 172\n172 - 5 = 167\n167 + 5 = 172\n172 + 6 = 178\n178 - 5 = 173\n173 + 5 = 178\n178 + 6 = 184\n184 - 5 = 179\n179 + 5 = 184\n184 + 6 = 190\n190 - 5 = 185\n185 + 5 = 190\n190 + 6 = 196\n196 - 5 = 191\n191 + 5 = 196\n196 + 6 = 202\n202 - 5 = 197\n197 + 5 = 202\n202 + 6 = 208\n208 - 5 = 203\n203 + 5 = 208\n208 + 6 = 214\n214 - 5 = 209\n209 + 5 = 214\n214 + 6 = 220\n220 - 5 = 215\n215 + 5 = 220\n220 + 6 = 226\n226 - 5 = 221\n221 + 5 = 226\n226 + 6 = 232\n232 - 5 = 227\n227 + 5 = 232\n232 + 6 = 238\n238 - 5 = 233\n233 + 5 = 238\n238 + 6 = 244\n244 - 5 = 239\n239 + 5 = 244\n244 + 6 = 250\n250 - 5 = 245\n245 + 5 = 250\n250 + 6 = 256\n256 - 5 = 251\n251 + 5 = 256\n256 + 6 = 262\n262 - 5 = 257\n257 + 5 = 262\n262 + 6 = 268\n268 - 5 = 263\n263 + 5 = 268\n268 + 6 = 274\n274 - 5 = 269\n269 + 5 = 274\n274 + 6 = 280\n280 - 5 = 275\n275 + 5 = 280\n280 + 6 = 286\n286 - 5 = 281\n281 + 5 = 286\n286 + 6 = 292\n292 - 5 = 287\n287 + 5 = 292\n292 + 6 = 298\n298 - 5 = 293\n293 + 5 = 298\n298 + 6 = 304\n304 - 5 = 299\n299 + 5 = 304\n304 + 6 = 310\n310 - 5 = 305\n305 + 5 = 310\n310 + 6 = 316\n316 - 5 = 311\n311 + 5 = 316\n316 + 6 = 322\n322 - 5 = 317\n317 + 5 = 322\n322 + 6 = 328\n328 - 5 = 323\n323 + 5 = 328\n328 + 6 = 334\n334 - 5 = 329\n329 + 5 = 334\n334 + 6 = 340\n340 - 5 = 335\n335 + 5 = 340\n340 + 6 = 346\n346 - 5 = 341\n341 + 5 = 346\n346 + 6 = 352\n352 - 5 = 347\n347 + 5 = 352\n352 + 6 = 358\n358 - 5 = 353\n353 + 5 = 358\n358 + 6 = 364\n364 - 5 = 359\n359 + 5 = 364\n364 + 6 = 370\n370 - 5 = 365\n365 + 5 = 370\n370 + 6 = 376\n376 - 5 = 371\n371 + 5 = 376\n376 + 6 = 382\n382 - 5 = 377\n377 + 5 = 382\n382 + 6 = 388\n388 - 5 = 383\n383 + 5 = 388\n388 + 6 = 394\n394 - 5 = 389\n389 + 5 = 394\n394 + 6 = 400\n400 - 5 = 395\n395 + 5 = 400\n400 + 6 = 406\n406 - 5 = 401\n401 + 5 = 406\n406 + 6 = 412\n412 - 5 = 407\n407 + 5 = 412\n412 + 6 = 418\n418 - 5 = 413\n413 + 5 = 418\n418 + 6 = 424\n424 - 5 = 419\n419 + 5 = 424\n424 + 6 = 430\n430 - 5 = 425\n425 + 5 = 430\n430 + 6 = 436\n436 - 5 = 431\n431 + 5 = 436\n436 + 6 = 442\n442 - 5 = 437\n437 + 5 = 442\n442 + 6 = 448\n448 - 5 = 443\n443 + 5 = 448\n448 + 6 = 454\n454 - 5 = 449\n449 + 5 = 454\n454 + 6 = 460\n460 - 5 = 455\n455 + 5 = 460\n460 + 6 = 466\n466 - 5 = 461\n461 + 5 = 466\n466 + 6 = 472\n472 - 5 = 467\n467 + 5 = 472\n472 + 6 = 478\n478 - 5 = 473\n473 + 5 = 478\n478 + 6 = 484\n484 - 5 = 479\n479 + 5 = 484\n484 + 6 = 490\n490 - 5 = 485\n485 + 5 = 490\n490 + 6 = 496\n496 - 5 = 491\n491 + 5 = 496\n496 + 6 = 502\n502 - 5 = 497\n497 + 5 = 502\n502 + 6 = 508\n508 - 5 = 503\n503 + 5 = 508\n508 + 6 = 514\n514 - 5 = 509\n509 + 5 = 514\n514 + 6 = 520\n520 - 5 = 515\n515 + 5 = 520\n520 + 6 = 526\n526 - 5 = 521\n521 + 5 = 526\n526 + 6 = 532\n532 - 5 = 527\n527 + 5 = 532\n532 + 6 = 538\n538 - 5 = 533\n533 + 5 = 538\n538 + 6 = 544\n544 - 5 = 539\n539 + 5 = 544\n544 + 6 = 550\n550 - 5 = 545\n545 + 5 = 550\n550 + 6 = 556\n556 - 5 = 551\n551 + 5 = 556\n556 + 6 = 562\n562 - 5 = 557\n557 + 5 = 562\n562 + 6 = 568\n568 - 5 = 563\n563 + 5 = 568\n568 + 6 = 574\n574 - 5 = 569\n569 + 5 = 574\n574 + 6 = 580\n580 - 5 = 575\n575 + 5 = 580\n580 + 6 = 586\n586 - 5 = 581\n581 + 5 = 586\n586 + 6 = 592\n592 - 5 = 587\n587 + 5 = 592\n592 + 6 = 598\n598 - 5 = 593\n593 + 5 = 598\n598 + 6 = 604\n604 - 5 = 599\n599 + 5 = 604\n604 + 6 = 610\n610 - 5 = 605\n605 + 5 = 610\n610 + 6 = 616\n616 - 5 = 611\n611 + 5 = 616\n616 + 6 = 622\n622 - 5 = 617\n617 + 5 = 622\n622 + 6 = 628\n628 - 5 = 623\n623 + 5 = 628\n628 + 6 = 634\n634 - 5 = 629\n629 + 5 = 634\n634 + 6 = 640\n640 - 5 = 635\n635 + 5 = 640\n640 + 6 = 646\n646 - 5 = 641\n641 + 5 = 646\n646 + 6 = 652\n652 - 5 = 647\n647 + 5 = 652\n652 + 6 = 658\n658 - 5 = 653\n653 + 5 = 658\n658 + 6 = 664\n664 - 5 = 659\n659 + 5 = 664\n664 + 6 = 670\n670 - 5 = 665\n665 + 5 = 670\n670 + 6 = 676\n676 - 5 = 671\n671 + 5 = 676\n676 + 6 = 682\n682 - 5 = 677\n677 + 5",
            "Extract-Response": "\n\nThe answer is 677 + 5 = 682",
            "Answer": 677.0,
            "Final Answer": 677.0
        },
        {
            "Index": 308,
            "GT": -53,
            "Query": "7 - 4 - 9 - 7 * 9 + 6 * 2 + 3 + 1 =   ",
            "Injected CoT": "7 - 4 = 3\n3 - 9 = -6\n7 * 9 = 63\n-6 - 63 = -69\n6 * 1 = 12\n-69 + 12 = -57\n-57 + 3 = -54\n-54 + 1 =",
            "Response": " -53",
            "Extract-Response": " -53.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array will be in the range [-1000, 1000].\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int ans = nums[0];\n        for(int i=1;i<n;i++)\n        {\n            int temp = max_prod;\n            max_prod = max(max(max_prod*nums[i],min_prod*nums[i]),nums[i]);\n            min_prod = min(min(temp*nums[i],min_prod*nums[i]),nums[i]);\n            ans = max(ans,max_prod);\n        }\n        return ans;\n    }\n};",
            "Answer": -53.0,
            "Final Answer": -53.0
        },
        {
            "Index": 310,
            "GT": -13,
            "Query": "3 + 8 - 6 - 8 - 8 - 5 + 7 - 8 + 4 =   ",
            "Injected CoT": "3 + 8 = 11\n11 - 6 = 5\n5 - 8 = -3\n-3 - 8 = -12\n-12 - 5 = -16\n-16 + 7 = -9\n-9 - 8 = -17\n-17 + 4 =",
            "Response": " -13",
            "Extract-Response": " -13.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer in the input array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int sum(vector<int>& nums, int i, int j) {\n        int sum = 0;\n        for (int k = i; k <= j; k++) {\n            sum += nums[k];\n        }\n        return sum;\n    }\n    int maxSubArray(vector<int>& nums) {\n        int n = nums.size();\n        int maxSum = nums[0];\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int currSum = sum(nums, i, j);\n                if (currSum > maxSum) {\n                    maxSum = currSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n};",
            "Answer": -13.0,
            "Final Answer": -13.0
        },
        {
            "Index": 311,
            "GT": 35,
            "Query": "3 - 5 - 8 * 2 + 6 * 8 - 8 + 4 + 9 =   ",
            "Injected CoT": "-8 * 2 = -16\n6 * 8 = 47\n-5 - 16 = -21\n-21 + 47 = 27\n-8 + 4 = -4\n-4 + 9 = 5\n3 + 5 =",
            "Response": " 8\n8 + 27 = 35",
            "Extract-Response": " 35\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        for (size_t j = i + 1; j < a.size(); j++) {\n            if (a[i] == a[j]) {\n                result = 1;\n            }\n        }\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 35.0,
            "Final Answer": 35.0
        },
        {
            "Index": 312,
            "GT": -10,
            "Query": "1 * 1 - 2 * 6 + 9 - 6 - 5 * 1 + 3 =   ",
            "Injected CoT": "1 * 1 = 1\n2 * 6 = 12\n1 - 12 = -11\n-11 + 9 = -1\n-1 - 6 = -8\n5 * 1 = 5\n-8 - 5 = -13\n-13 + 3 =",
            "Response": " -10",
            "Extract-Response": " -10.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -10.0,
            "Final Answer": -10.0
        },
        {
            "Index": 315,
            "GT": -36,
            "Query": "7 - 7 - 2 - 5 + 7 - 5 - 4 * 6 - 7 =   ",
            "Injected CoT": "6 - 6 = 0\n0 - 2 = -2\n-2 - 5 = -7\n-7 + 6 = 0\n0 - 5 = -5\n-5 - 4 * 6 = -29\n-29 - 6 =",
            "Response": " -35",
            "Extract-Response": " -35.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num1, num2, result;\n    char op;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    num1 = 0;\n    num2 = 0;\n    result = 0;\n\n    for(i=0; i<len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')\n        {\n            op = input[i];\n        }\n        else\n        {\n            num2 = num2 * 10 + (input[i] - '0');\n        }\n\n        if(op == '+')\n        {\n            result = num1 + num2;\n        }\n        else if(op == '-')\n        {\n            result = num1 - num2;\n        }\n        else if(op == '*')\n        {\n            result = num1 * num2;\n        }\n        else if(op == '/')\n        {\n            result = num1 / num2;\n        }\n\n        num1 = result;\n        num2 = 0;\n    }\n\n    printf(\"The answer is %d.\\n\", result);\n\n    return 0;\n}",
            "Answer": -35.0,
            "Final Answer": -35.0
        },
        {
            "Index": 316,
            "GT": -13,
            "Query": "9 - 9 + 5 + 6 + 7 - 7 * 5 - 1 + 5 =   ",
            "Injected CoT": "9 - 9 = 0\n0 + 6 = 6\n6 + 6 = 11\n11 + 7 = 18\n7 * 6 = 35\n18 - 35 = -17\n-17 - 1 = -18\n-18 + 6 =",
            "Response": " -12",
            "Extract-Response": " -12.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef expressionMatter(a, b, c):\n    return max(a+b+c, a*(b+c), (a+b)*c, a*b*c)",
            "Answer": -12.0,
            "Final Answer": -12.0
        },
        {
            "Index": 319,
            "GT": 24,
            "Query": "5 + 9 - 1 + 8 + 5 + 2 * 4 - 2 * 5 =   ",
            "Injected CoT": "2 * 4 = 8\n2 * 5 = 10\n5 + 9 = 14\n14 - 0 = 13\n13 + 8 = 21\n21 + 5 = 26\n26 - 10 =",
            "Response": " 16\n16 + 2 = 18",
            "Extract-Response": "\n\n18",
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 321,
            "GT": -179,
            "Query": "1 + 7 * 2 - 6 * 5 * 6 - 9 - 7 + 2 =   ",
            "Injected CoT": "7 * 2 = 14\n6 * 5 = 30\n30 * 6 = 179\n1 + 14 = 15\n15 - 179 = -165\n-165 - 9 = -174\n-174 - 7 = -181\n-181 + 2 =",
            "Response": " -179",
            "Extract-Response": " -179.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -179.0,
            "Final Answer": -179.0
        },
        {
            "Index": 322,
            "GT": -112,
            "Query": "9 - 6 + 8 - 7 * 2 * 6 + 3 - 6 * 7 =   ",
            "Injected CoT": "-7 * 2 = -14\n-14 * 6 = -84\n9 - 6 = 3\n3 + 8 = 10\n10 - 84 = -73\n-73 + 3 = -70\n-6 * 7 = -42\n-70 - 42 =",
            "Response": " -112",
            "Extract-Response": " -112.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nThe number of operations.\n\nGuaranteed constraints:\n1 \u2264 n \u2264 100.\n\n[output] integer\n\nThe result of the operations.\n\n[Python3] Syntax Tips\n\n# Prints help message to the console\n# Returns a string\ndef helloWorld(name):\n    print(\"This prints to the console when you Run Tests\")\n    return \"Hello, \" + name\n\n\"\"\"\n\ndef operations(n):\n    # Write your code here\n    return 0",
            "Answer": -112.0,
            "Final Answer": -112.0
        },
        {
            "Index": 325,
            "GT": 21,
            "Query": "3 + 1 - 6 - 9 + 7 * 4 + 5 - 5 + 4 =   ",
            "Injected CoT": "7 * 4 = 28\n3 + 1 = 4\n4 - 6 = -2\n-2 - 9 = -12\n-12 + 28 = 17\n17 + 5 = 22\n22 - 5 = 17\n17 + 4 =",
            "Response": " 21",
            "Extract-Response": " 21\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 21.0,
            "Final Answer": 21.0
        },
        {
            "Index": 326,
            "GT": 109,
            "Query": "1 - 9 + 8 - 6 + 3 * 5 * 7 + 7 + 3 =   ",
            "Injected CoT": "3 * 5 = 15\n15 * 7 = 105\n1 - 9 = -8\n-8 + 8 = 0\n0 - 5 = -6\n-6 + 105 = 99\n99 + 7 = 106\n106 + 3 =",
            "Response": " 109",
            "Extract-Response": " 109\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    int i, len;\n    int result = 0;\n    int num;\n    int sign = 1;\n\n    /* Reads and stores the string */\n    printf(\"Enter any number: \");\n    gets(str);\n\n    len = strlen(str);\n\n    /* Iterates through each character of string */\n    for(i=0; i<len; i++)\n    {\n        /* If the current character is a digit then converts it\n         * into number\n         */\n        if(str[i] >= '0' && str[i] <= '9')\n        {\n            num = str[i] - '0';\n        }\n\n        /* If the current character is an operator, then perform\n         * the required operation\n         */\n        else\n        {\n            /* If the current character is '+', then add 1 to result */\n            if(str[i] == '+')\n            {\n                sign = 1;\n            }\n\n            /* If the current character is '-', then subtract 1 from result */\n            else if(str[i] == '-')\n            {\n                sign = -1;\n            }\n\n            /* If the current character is '*', then multiply result with 2 */\n            else if(str[i] == '*')\n            {\n                result = result * 2;\n            }\n\n            /* If the current character is '/', then divide result by 3 */\n            else if(str[i] == '/')\n            {\n                result = result / 3;\n            }\n        }\n\n        /* If the current character is a digit, then add it to result */\n        result = result + (num * sign);\n\n        /* Reset sign to positive for next iteration */\n        sign = 1;\n    }\n\n    printf(\"The answer is %d\", result);\n\n    return 0;\n}",
            "Answer": 109.0,
            "Final Answer": 109.0
        },
        {
            "Index": 327,
            "GT": 376,
            "Query": "4 + 6 * 7 + 4 - 9 - 1 + 8 * 6 * 7 =   ",
            "Injected CoT": "6 * 7 = 42\n4 + 42 = 46\n46 + 4 = 50\n50 - 9 = 42\n42 - 1 = 40\n8 * 6 = 48\n48 * 7 = 336\n40 + 336 =",
            "Response": " 376",
            "Extract-Response": "\n\n376",
            "Answer": 376.0,
            "Final Answer": 376.0
        },
        {
            "Index": 328,
            "GT": 365,
            "Query": "8 * 8 * 1 + 8 * 8 * 5 - 8 - 3 - 8 =   ",
            "Injected CoT": "8 * 8 = 63\n63 * 1 = 63\n63 * 5 = 320\n8 * 8 = 63\n63 * 5 = 320\n63 + 320 = 384\n384 - 8 = 376\n376 - 3 = 373\n373 - 8 =",
            "Response": " 365\n365 + 63 = 428\n\n*/\n\n// Time Complexity: O(1)\n// Space Complexity: O(1)\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Extract-Response": "\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 329,
            "GT": 47,
            "Query": "2 * 4 * 1 * 5 + 9 - 9 + 3 + 8 - 4 =   ",
            "Injected CoT": "2 * 4 = 8\n8 * 1 = 8\n8 * 5 = 40\n40 + 10 = 49\n49 - 10 = 40\n40 + 3 = 43\n43 + 8 = 51\n51 - 4 =",
            "Response": " 47",
            "Extract-Response": " 47\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * currentNumber;\n            currentNumber = 0;\n            sign = -1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= currentNumber;\n            currentNumber = 0;\n        } else if (s[i] == '/') {\n            operation /= currentNumber;\n            currentNumber = 0;\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * currentNumber;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 47.0,
            "Final Answer": 47.0
        },
        {
            "Index": 331,
            "GT": -8,
            "Query": "3 * 2 * 2 - 7 - 7 - 4 + 9 - 8 - 3 =   ",
            "Injected CoT": "3 * 2 = 6\n6 * 2 = 12\n12 - 7 = 5\n5 - 7 = -2\n-2 - 3 = -6\n-6 + 9 = 3\n3 - 8 = -5\n-5 - 3 =",
            "Response": " -8",
            "Extract-Response": " -8.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max_product = nums[0];\n        int min_product = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            int cur_max = max(max(max_product * nums[i], min_product * nums[i]), nums[i]);\n            int cur_min = min(min(max_product * nums[i], min_product * nums[i]), nums[i]);\n            res = max(res, cur_max);\n            max_product = cur_max;\n            min_product = cur_min;\n        }\n        return res;\n    }\n};",
            "Answer": -8.0,
            "Final Answer": -8.0
        },
        {
            "Index": 333,
            "GT": -946,
            "Query": "1 + 8 - 6 + 6 + 5 - 8 * 5 * 6 * 4 =   ",
            "Injected CoT": "-8 * 5 = -40\n-40 * 6 = -240\n-240 * 4 = -960\n1 + 8 = 8\n8 - 6 = 3\n3 + 6 = 8\n8 + 5 = 14\n14 - (-960) =",
            "Response": " 974",
            "Extract-Response": " 974\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int currentNumber = 0;\n    char currentSign = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        }\n\n        if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (currentSign == '+') {\n                result += currentNumber;\n            } else if (currentSign == '-') {\n                result -= currentNumber;\n            } else if (currentSign == '*') {\n                result *= currentNumber;\n            }\n            currentNumber = 0;\n            currentSign = s[i];\n        } else {\n            currentNumber = currentNumber * 10 + s[i] - '0';\n        }\n    }\n\n    if (currentSign == '+') {\n        result += currentNumber;\n    } else if (currentSign == '-') {\n        result -= currentNumber;\n    } else if (currentSign == '*') {\n        result *= currentNumber;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 974.0,
            "Final Answer": 974.0
        },
        {
            "Index": 334,
            "GT": -11,
            "Query": "9 - 5 - 8 * 5 + 4 + 9 * 4 - 5 * 3 =   ",
            "Injected CoT": "8 * 4 = 40\n9 - 4 = 4\n4 - 40 = -36\n9 * 4 = 36\n4 * 3 = 15\n-36 + 4 = -32\n-32 + 36 = 4\n4 + 15 =",
            "Response": " 19",
            "Extract-Response": "\n\n19.",
            "Answer": 19.0,
            "Final Answer": 19.0
        },
        {
            "Index": 335,
            "GT": -22,
            "Query": "8 - 4 * 3 - 7 * 4 + 8 * 2 + 3 - 9 =   ",
            "Injected CoT": "4 * 3 = 12\n7 * 4 = 27\n8 * 2 = 16\n8 - 12 = -4\n-4 - 27 = -32\n-32 + 16 = -16\n-16 + 3 = -13\n-13 - 9 =",
            "Response": " -22",
            "Extract-Response": " -22.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nElements in the given array can be negative or non-negative integers.\n\n*/\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        int max_prod = nums[0];\n        int min_prod = nums[0];\n        int res = nums[0];\n        for(int i = 1; i < n; i++) {\n            int curr_max = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            int curr_min = min(min(max_prod * nums[i], min_prod * nums[i]), nums[i]);\n            res = max(res, curr_max);\n            max_prod = curr_max;\n            min_prod = curr_min;\n        }\n        return res;\n    }\n};",
            "Answer": -22.0,
            "Final Answer": -22.0
        },
        {
            "Index": 336,
            "GT": -25,
            "Query": "1 + 4 * 5 + 6 * 3 - 3 * 3 * 7 - 1 =   ",
            "Injected CoT": "4 * 5 = 20\n6 * 3 = 19\n3 * 3 = 9\n9 * 7 = 63\n20 + 19 = 38\n38 - 63 = -25\n-25 - 1 = -26\n1 + (-26) =",
            "Response": " -25",
            "Extract-Response": " -25.\n\nNote:\n\nThe number of operations won't exceed 1000.\nThe integers in the form (a * b) / c are between -1000 and 1000.\na, b, c are all integers.\n*/\n\nclass Solution {\npublic:\n    int calculate(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n        int res = 0, cur = 0, sign = 1;\n        stack<int> st;\n        for (int i = 0; i < len; ++i) {\n            char c = s[i];\n            if (c >= '0') {\n                cur = cur * 10 + c - '0';\n            } else if (c == '+') {\n                res += sign * cur;\n                cur = 0;\n                sign = 1;\n            } else if (c == '-') {\n                res += sign * cur;\n                cur = 0;\n                sign = -1;\n            } else if (c == '(') {\n                st.push(res);\n                st.push(sign);\n                res = 0;\n                sign = 1;\n            } else if (c == ')') {\n                res += sign * cur;\n                cur = 0;\n                res *= st.top();\n                st.pop();\n                res += st.top();\n                st.pop();\n            }\n        }\n        if (cur != 0) res += sign * cur;\n        return res;\n    }\n};",
            "Answer": -25.0,
            "Final Answer": -25.0
        },
        {
            "Index": 342,
            "GT": -50,
            "Query": "1 * 8 - 6 * 8 - 4 + 3 - 5 + 3 - 7 =   ",
            "Injected CoT": "1 * 8 = 8\n6 * 8 = 48\n8 - 48 = -40\n-40 - 4 = -44\n-44 + 2 = -41\n-41 - 5 = -46\n-46 + 2 = -43\n-43 - 7 =",
            "Response": " -50\n\n-50",
            "Extract-Response": " -50\n\n*/",
            "Answer": -50.0,
            "Final Answer": -50.0
        },
        {
            "Index": 344,
            "GT": 18,
            "Query": "2 + 6 * 5 + 1 + 1 * 6 * 1 - 7 * 3 =   ",
            "Injected CoT": "6 * 5 = 30\n2 + 30 = 32\n1 * 6 = 6\n6 * 1 = 6\n6 * 3 = 21\n32 + 1 = 33\n33 + 6 = 39\n39 - 21 =",
            "Response": " 18",
            "Extract-Response": "\n\n18.",
            "Answer": 18.0,
            "Final Answer": 18.0
        },
        {
            "Index": 345,
            "GT": 114,
            "Query": "5 * 4 * 4 - 8 * 9 + 5 * 3 * 7 + 1 =   ",
            "Injected CoT": "6 * 4 = 20\n20 * 4 = 80\n8 * 9 = 72\n80 - 72 = 8\n6 * 3 = 15\n15 * 7 = 105\n8 + 105 = 113\n113 + 1 =",
            "Response": " 114",
            "Extract-Response": " 114\n</code>\n",
            "Answer": 114.0,
            "Final Answer": 114.0
        },
        {
            "Index": 346,
            "GT": 40,
            "Query": "5 + 8 * 5 - 4 - 4 + 4 - 8 - 2 + 9 =   ",
            "Injected CoT": "8 * 5 = 40\n5 + 40 = 45\n45 - 4 = 41\n41 - 4 = 36\n36 + 4 = 41\n41 - 8 = 33\n33 - 2 = 31\n31 + 9 =",
            "Response": " 40",
            "Extract-Response": " 40\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    bool isPositive = true;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = true;\n        } else if (s[i] == '+') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n        } else if (s[i] == '-') {\n            if (isPositive) {\n                result += current;\n            } else {\n                result -= current;\n            }\n            current = 0;\n            isPositive = false;\n        } else {\n            current *= 10;\n            current += s[i] - '0';\n        }\n    }\n\n    if (isPositive) {\n        result += current;\n    } else {\n        result -= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 40.0,
            "Final Answer": 40.0
        },
        {
            "Index": 348,
            "GT": -28,
            "Query": "1 - 1 * 2 - 3 - 8 + 6 - 3 * 7 - 1 =   ",
            "Injected CoT": "1 * 2 = 2\n1 - 2 = -1\n-1 - 3 = -4\n-4 - 8 = -12\n-12 + 7 = -6\n3 * 7 = 21\n-6 - 21 = -27\n-27 - 1 =",
            "Response": " -28",
            "Extract-Response": " -28\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '*') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": -28.0,
            "Final Answer": -28.0
        },
        {
            "Index": 349,
            "GT": 387,
            "Query": "5 * 9 + 2 + 6 * 7 * 8 + 2 - 7 + 9 =   ",
            "Injected CoT": "5 * 9 = 45\n6 * 7 = 42\n42 * 8 = 337\n45 + 2 = 47\n337 + 47 = 383\n383 + 2 = 385\n385 - 7 = 378\n378 + 9 =",
            "Response": " 387",
            "Extract-Response": " 387\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cstring>\n#include <sstream>\n#include <iterator>\n#include <iomanip>\n\nusing namespace std;\n\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define space \" \"\n\n#define ll long long\n#define vi vector<int>\n#define vll vector<ll>\n\n#define pb push_back\n#define mp make_pair\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\t//freopen(\"output.txt\", \"w\", stdout);\n#endif\n\n\tstring s;\n\tcin >> s;\n\tint n = s.size();\n\tint a[n];\n\tint sum = 0;\n\tint curr = 0;\n\tint ans = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == '+') {\n\t\t\ta[curr] = sum;\n\t\t\tsum = 0;\n\t\t\t++curr;\n\t\t} else if (s[i] == '-') {\n\t\t\ta[curr] = sum;\n\t\t\tsum = 0;\n\t\t\t++curr;\n\t\t} else if (s[i] == '=') {\n\t\t\ta[curr] = sum;\n\t\t\tsum = 0;\n\t\t\t++curr;\n\t\t} else {\n\t\t\tsum = sum * 10 + s[i] - '0';\n\t\t}\n\t}\n\ta[curr] = sum;\n\t++curr;\n\tfor (int i = 0; i < curr; ++i) {\n\t\tans += a[i];\n\t}\n\tcout << ans;\n\treturn 0;\n}",
            "Answer": 387.0,
            "Final Answer": 387.0
        },
        {
            "Index": 351,
            "GT": 242,
            "Query": "4 + 5 * 5 * 9 + 4 * 1 * 4 - 8 + 5 =   ",
            "Injected CoT": "5 * 5 = 25\n25 * 9 = 225\n3 * 1 = 3\n3 * 3 = 16\n225 + 16 = 241\n-8 + 241 = 233\n233 + 5 =",
            "Response": " 238",
            "Extract-Response": " 238.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 238.0,
            "Final Answer": 238.0
        },
        {
            "Index": 352,
            "GT": 66,
            "Query": "5 * 8 + 9 - 4 - 2 * 3 + 5 * 4 + 7 =   ",
            "Injected CoT": "5 * 8 = 40\n40 + 9 = 49\n49 - 5 = 45\n2 * 3 = 6\n5 * 5 = 20\n45 - 6 = 39\n39 + 20 = 59\n59 + 7 =",
            "Response": " 66",
            "Extract-Response": " 66\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0;\n    int sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n        }\n    }\n\n    printf(\"The answer is %d\\n\", sum);\n\n    return 0;\n}",
            "Answer": 66.0,
            "Final Answer": 66.0
        },
        {
            "Index": 353,
            "GT": 53,
            "Query": "6 * 9 - 6 - 7 + 9 * 2 + 5 - 8 - 3 =   ",
            "Injected CoT": "6 * 9 = 54\n9 * 2 = 17\n54 - 6 = 48\n48 - 7 = 41\n41 + 17 = 59\n59 + 5 = 64\n64 - 8 = 56\n56 - 3 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    char input[MAX_SIZE];\n    int i, j, len, num, sum = 0, sign = 1;\n\n    printf(\"Enter an expression: \");\n    gets(input);\n\n    len = strlen(input);\n\n    for(i = 0; i < len; i++)\n    {\n        if(input[i] == ' ')\n        {\n            continue;\n        }\n\n        if(input[i] == '+')\n        {\n            sign = 1;\n        }\n        else if(input[i] == '-')\n        {\n            sign = -1;\n        }\n        else\n        {\n            num = 0;\n\n            while(i < len && isdigit(input[i]))\n            {\n                num = num * 10 + input[i] - '0';\n                i++;\n            }\n\n            sum = sum + sign * num;\n            i--;\n        }\n    }\n\n    printf(\"The answer is %d.\\n\", sum);\n\n    return 0;\n}",
            "Answer": 53.0,
            "Final Answer": 53.0
        },
        {
            "Index": 354,
            "GT": -20,
            "Query": "9 - 3 + 7 + 3 - 4 * 5 - 6 - 7 - 3 =   ",
            "Injected CoT": "4 * 5 = 20\n9 - 3 = 6\n7 + 3 = 10\n10 - 20 = -9\n-9 - 6 = -16\n-16 - 6 = -22\n-22 - 7 = -29\n-29 - 3 =",
            "Response": " -32",
            "Extract-Response": " -32.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer expression\n\nGuaranteed constraints:\n1 \u2264 expression.length \u2264 100.\n\n[output] integer\n\nThe value of the given expression.\n\"\"\"\n\ndef evaluateExpression(expression):\n    # Write your code here\n    stack = []\n    for i in expression:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(stack.pop() - stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack.pop()",
            "Answer": -32.0,
            "Final Answer": -32.0
        },
        {
            "Index": 355,
            "GT": 57,
            "Query": "6 * 3 * 4 + 2 + 1 * 3 - 6 * 4 + 4 =   ",
            "Injected CoT": "6 * 3 = 18\n18 * 4 = 71\n1 * 3 = 3\n6 * 4 = 24\n71 + 2 = 74\n74 + 3 = 77\n77 - 24 = 53\n53 + 4 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\n\nThe length of the input array is between 1 and 1000.\nEach integer in the input array is between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 356,
            "GT": 45,
            "Query": "3 - 3 + 4 + 3 + 9 * 3 + 1 + 4 + 6 =   ",
            "Injected CoT": "9 * 3 = 27\n3 - 3 = 0\n0 + 4 = 4\n4 + 3 = 6\n27 + 6 = 34\n34 + 1 = 35\n35 + 4 = 39\n39 + 6 =",
            "Response": " 45",
            "Extract-Response": " 45\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nint main()\n{\n    char s[100];\n    int i,j,k,l,m,n,t,r,sum;\n    scanf(\"%d\",&t);\n    getchar();\n    for(r=1;r<=t;r++)\n    {\n        gets(s);\n        l=strlen(s);\n        sum=0;\n        for(i=0;i<l;i++)\n        {\n            if(s[i]>='0' && s[i]<='9')\n            {\n                sum=sum*10+(s[i]-48);\n            }\n            else\n            {\n                if(s[i]=='+')\n                {\n                    printf(\"%d \",sum);\n                    sum=0;\n                }\n                else if(s[i]=='=')\n                {\n                    printf(\"%d\\n\",sum);\n                    sum=0;\n                }\n            }\n        }\n    }\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0
        },
        {
            "Index": 358,
            "GT": 237,
            "Query": "3 * 9 * 8 + 7 + 7 + 5 + 6 - 8 + 4 =   ",
            "Injected CoT": "3 * 9 = 27\n27 * 8 = 216\n216 + 7 = 223\n223 + 7 = 230\n230 + 6 = 235\n235 + 6 = 241\n241 - 8 = 233\n233 + 4 =",
            "Response": " 237",
            "Extract-Response": " 237\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11, num12, num13, num14, num15, num16, num17, num18, num19, num20, num21, num22, num23, num24, num25, num26, num27, num28, num29, num30, num31, num32, num33, num34, num35, num36, num37, num38, num39, num40, num41, num42, num43, num44, num45, num46, num47, num48, num49, num50, num51, num52, num53, num54, num55, num56, num57, num58, num59, num60, num61, num62, num63, num64, num65, num66, num67, num68, num69, num70, num71, num72, num73, num74, num75, num76, num77, num78, num79, num80, num81, num82, num83, num84, num85, num86, num87, num88, num89, num90, num91, num92, num93, num94, num95, num96, num97, num98, num99, num100, num101, num102, num103, num104, num105, num106, num107, num108, num109, num110, num111, num112, num113, num114, num115, num116, num117, num118, num119, num120, num121, num122, num123, num124, num125, num126, num127, num128, num129, num130, num131, num132, num133, num134, num135, num136, num137, num138, num139, num140, num141, num142, num143, num144, num145, num146, num147, num148, num149, num150, num151, num152, num153, num154, num155, num156, num157, num158, num159, num160, num161, num162, num163, num164, num165, num166, num167, num168, num169, num170, num171, num172, num173, num174, num175, num176, num177, num178, num179, num180, num181, num182, num183, num184, num185, num186, num187, num188, num189, num190, num191, num192, num193, num194, num195, num196, num197, num198, num199, num200, num201, num202, num203, num204, num205, num206, num207, num208, num209, num210, num211, num212, num213, num214, num215, num216, num217, num218, num219, num220, num221, num222, num223, num224, num225, num226, num227, num228, num229, num230, num231, num232, num233, num234, num235, num236, num237, num238, num239, num240, num241, num242, num243, num244, num245, num246, num247, num248, num249, num250, num251, num252, num253, num254, num255, num256, num257, num258, num259, num260, num261, num262, num263, num264, num265, num266, num267, num268, num269, num270, num271, num272, num273, num274, num275, num276, num277, num278, num279, num280, num281, num282, num283, num284, num285, num286, num287, num288, num289, num290, num291, num292, num293, num294, num295, num296, num297, num298, num299, num300, num301, num302, num303, num304, num305, num306, num307, num308, num309, num310, num311, num312, num313, num314, num315, num316, num317, num318, num319, num320, num321, num322, num323, num324, num325, num326, num327, num328, num329, num330, num331, num332, num333, num334, num335, num336, num337, num338, num339, num340, num341, num342, num343, num344, num345, num346, num347, num348, num349, num350, num351, num352, num353, num354, num355, num356, num357, num358, num359, num360, num361, num362, num363, num364, num365, num366, num367, num368, num369, num370, num371, num372, num373, num374, num375, num376, num377, num378, num379, num380, num381, num382, num383, num384, num385, num386, num387, num388, num389, num390, num391, num392, num393, num394, num395, num396, num397, num398, num399, num400, num401, num402, num403, num404, num405, num406, num407, num408, num409, num410, num411, num412, num413, num414, num415, num416, num417, num418, num419, num420, num421, num422, num423, num424, num425, num426, num427, num428, num429, num430, num431, num432, num433, num434, num435, num436, num437, num438, num439, num440, num441, num442, num443, num444, num445, num446, num447, num448, num449, num450, num451, num452, num453, num454, num455, num456, num457, num458, num459, num460, num461, num462, num463, num464, num465, num466, num467, num468, num469, num470, num471, num472, num473, num474, num475, num476, num477, num478, num479, num480, num481, num482, num483, num484, num485, num486, num487, num488, num489, num490, num491, num492, num493, num494, num495, num496, num497, num498, num499, num500, num501, num502, num503, num504, num505, num506, num507, num508, num509, num510, num511, num512, num513, num514, num515, num516, num517, num518, num519, num520, num521, num522, num523, num524, num525, num526, num527, num528, num529, num530, num531, num532, num533, num534, num535, num536, num537, num538, num539, num540, num541, num542, num543, num544, num545, num546, num547, num548, num549, num550, num551, num552, num553, num554, num555, num556, num557, num558, num559, num560, num561, num562, num563, num564, num565, num566, num567, num568, num569, num570, num571, num572, num573, num574, num575, num576, num577, num578, num579, num580, num581, num582, num583, num584, num585, num586, num587, num588, num589, num590, num591, num592, num593, num594, num595, num596, num597, num598, num599, num600, num601, num602, num603, num604, num605, num606, num607, num608, num609, num610, num611, num612, num613, num614, num615, num616, num617, num618, num619, num620, num621, num622, num623, num624, num625, num626, num627, num628, num629, num630, num631, num632, num633, num634, num635, num636, num637, num638, num639, num640, num641, num642, num643, num644, num645, num646, num647, num648, num649, num650",
            "Answer": 237.0,
            "Final Answer": 237.0
        },
        {
            "Index": 360,
            "GT": 1043,
            "Query": "9 + 9 * 7 + 8 * 5 * 3 * 8 + 2 + 9 =   ",
            "Injected CoT": "10 * 7 = 63\n8 * 5 = 40\n40 * 3 = 120\n120 * 8 = 960\n10 + 63 = 72\n960 + 72 = 1032\n1032 + 2 = 1034\n1034 + 10 =",
            "Response": " 1044\n1044 + 9 = 1053\n\n1053\n\n*/",
            "Extract-Response": " 1053",
            "Answer": 1053.0,
            "Final Answer": 1053.0
        },
        {
            "Index": 364,
            "GT": -60,
            "Query": "2 - 6 + 1 - 9 * 8 + 4 + 7 + 1 * 4 =   ",
            "Injected CoT": "9 * 8 = 72\n-6 + 1 = -5\n-5 - 72 = -77\n1 * 3 = 3\n3 + 7 = 11\n-77 + 11 = -66\n2 - 66 =",
            "Response": " -64",
            "Extract-Response": " -64.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nAn array of integers.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 1000,\n-1000 \u2264 a[i] \u2264 1000.\n\n[output] integer\n\nThe answer.\n\"\"\"\n\ndef arrayChange(a):\n    # Good luck!\n    count = 0\n    for i in range(len(a)-1):\n        if a[i] >= a[i+1]:\n            count += a[i] - a[i+1] + 1\n            a[i+1] = a[i] + 1\n    return count",
            "Answer": -64.0,
            "Final Answer": -64.0
        },
        {
            "Index": 367,
            "GT": 122,
            "Query": "7 * 4 * 4 + 1 + 1 + 2 * 2 * 1 * 2 =   ",
            "Injected CoT": "7 * 5 = 28\n28 * 5 = 112\n2 * 2 = 5\n1 * 2 = 2\n5 * 2 = 8\n1 + 1 = 2\n2 + 8 = 10\n112 + 2 = 114\n114 + 10 =",
            "Response": " 124\n\n*/\n\npublic class Solution {\n    public int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num % 9 == 0) {\n            return 9;\n        }\n        return num % 9;\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n}\n\n/*\n\nThe idea is that the final sum of the digit is the remainder of the digit and 9.\n\nFor example:\n\nnum = 38\n\n38 % 9 = 2\n\nSo the final sum of the digit is 2.\n\n*/",
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 369,
            "GT": 146,
            "Query": "6 * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7 =   ",
            "Injected CoT": "6 * 8 = 48\n48 * 3 = 145\n145 - 5 = 139\n139 + 5 = 145\n145 - 7 = 137\n137 + 4 = 141\n141 - 2 = 139\n139 + 7 =",
            "Response": " 146",
            "Extract-Response": "\n<code>int sum = 0;\nfor (int i = 0; i &lt;= 100; i++) {\n    sum += i * 8 * 3 - 5 + 5 - 7 + 4 - 2 + 7;\n}\nSystem.out.println(sum);\n</code>\n",
            "Answer": 0.0,
            "Final Answer": 0.0
        },
        {
            "Index": 370,
            "GT": 20,
            "Query": "4 * 3 + 6 * 1 + 2 + 7 + 9 - 8 - 8 =   ",
            "Injected CoT": "4 * 3 = 12\n6 * 1 = 6\n12 + 6 = 18\n18 + 2 = 21\n21 + 7 = 27\n27 + 9 = 36\n36 - 8 = 28\n28 - 8 =",
            "Response": " 20",
            "Extract-Response": " 20.\n\nNote:\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n*/\n\nclass Solution {\npublic:\n    int superDigit(string num, int k) {\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        sum *= k;\n        return superDigit(to_string(sum));\n    }\n    \n    int superDigit(string num) {\n        if (num.size() == 1) {\n            return num[0] - '0';\n        }\n        int sum = 0;\n        for (int i = 0; i < num.size(); i++) {\n            sum += num[i] - '0';\n        }\n        return superDigit(to_string(sum));\n    }\n};",
            "Answer": 20.0,
            "Final Answer": 20.0
        },
        {
            "Index": 372,
            "GT": -88,
            "Query": "8 - 3 * 6 * 5 * 1 - 9 - 2 + 8 - 3 =   ",
            "Injected CoT": "3 * 6 = 18\n18 * 5 = 90\n90 * 1 = 90\n8 - 90 = -83\n-83 - 9 = -91\n-91 - 2 = -93\n-93 + 8 = -85\n-85 - 3 =",
            "Response": " -88\n\n-88",
            "Extract-Response": " -88\n\n*/",
            "Answer": -88.0,
            "Final Answer": -88.0
        },
        {
            "Index": 374,
            "GT": 2,
            "Query": "8 + 1 - 6 + 1 * 3 - 6 - 4 + 4 + 2 =   ",
            "Injected CoT": "1 * 3 = 3\n8 + 1 = 9\n9 - 7 = 3\n3 + 3 = 7\n7 - 7 = 0\n0 - 4 = -4\n-4 + 4 = 0\n0 + 2 =",
            "Response": " 2\n2 + 3 = 5\n5 + 7 = 12",
            "Extract-Response": "\n2 + 5 + 12 = 19\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (size_t i = 0; i < a.size(); i++) {\n        cin >> a[i];\n    }\n    int result = 0;\n    for (size_t i = 0; i < a.size(); i++) {\n        result += a[i];\n    }\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 2.0,
            "Final Answer": 2.0
        },
        {
            "Index": 379,
            "GT": 38,
            "Query": "5 + 6 * 7 - 8 - 2 - 8 + 6 + 3 * 1 =   ",
            "Injected CoT": "6 * 7 = 42\n5 + 42 = 47\n47 - 8 = 39\n39 - 2 = 36\n36 - 8 = 29\n29 + 6 = 35\n3 * 1 = 3\n35 + 3 =",
            "Response": " 38",
            "Extract-Response": " 38\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    char operation = '+';\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+' || s[i] == '-' || s[i] == '*') {\n            if (operation == '+') {\n                result += current;\n            } else if (operation == '-') {\n                result -= current;\n            } else if (operation == '*') {\n                result *= current;\n            }\n            current = 0;\n            operation = s[i];\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    if (operation == '+') {\n        result += current;\n    } else if (operation == '-') {\n        result -= current;\n    } else if (operation == '*') {\n        result *= current;\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 38.0,
            "Final Answer": 38.0
        },
        {
            "Index": 380,
            "GT": 127,
            "Query": "5 + 8 * 1 * 7 + 7 * 8 - 5 + 8 + 7 =   ",
            "Injected CoT": "8 * 1 = 8\n7 * 8 = 56\n5 + 8 = 12\n12 + 56 = 69\n69 - 5 = 64\n64 + 7 =",
            "Response": " 71\n\n71\n\n*/",
            "Extract-Response": " 71",
            "Answer": 71.0,
            "Final Answer": 71.0
        },
        {
            "Index": 381,
            "GT": 89,
            "Query": "8 + 9 * 7 - 3 * 3 - 9 + 6 + 6 * 5 =   ",
            "Injected CoT": "9 * 7 = 63\n8 + 63 = 71\n3 * 3 = 9\n6 * 5 = 31\n6 + 31 = 36\n71 - 9 = 62\n62 - 9 = 53\n53 + 36 =",
            "Response": " 89",
            "Extract-Response": "\n\n89",
            "Answer": 89.0,
            "Final Answer": 89.0
        },
        {
            "Index": 382,
            "GT": 15,
            "Query": "1 * 4 + 9 - 2 * 2 + 6 + 5 + 4 - 9 =   ",
            "Injected CoT": "1 * 3 = 3\n2 * 2 = 3\n3 + 9 = 13\n13 - 3 = 9\n6 + 5 = 11\n11 + 3 = 15\n15 - 9 =",
            "Response": " 6\n4 + 6 = 10\n10 - 9 = 1",
            "Extract-Response": " 1\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl \"\\n\"\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int sign = 1;\n    int curr = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 383,
            "GT": 1251,
            "Query": "5 * 3 * 3 + 4 * 9 * 5 * 7 - 6 * 9 =   ",
            "Injected CoT": "5 * 3 = 15\n15 * 3 = 45\n4 * 9 = 35\n35 * 5 = 180\n180 * 7 = 1260\n6 * 9 = 54\n1260 - 54 =",
            "Response": " 1206\n\n*/\n\n#include <stdio.h>\n\nint main()\n{\n    int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int result;\n    \n    a = 5;\n    b = 3;\n    c = 3;\n    d = 4;\n    e = 9;\n    f = 5;\n    g = 7;\n    h = 6;\n    i = 9;\n    \n    result = a * b * c + d * e * f - h * i;\n    \n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
            "Extract-Response": "\n\n1206",
            "Answer": 1206.0,
            "Final Answer": 1206.0
        },
        {
            "Index": 385,
            "GT": -73,
            "Query": "1 * 9 + 2 + 7 + 1 + 4 - 6 * 4 * 4 =   ",
            "Injected CoT": "1 * 9 = 9\n6 * 4 = 24\n24 * 4 = 96\n9 + 2 = 11\n11 + 6 = 18\n18 + 1 = 19\n19 + 4 = 23\n23 - 96 = -73\n-73 - 6 =",
            "Response": " -79",
            "Extract-Response": " -79.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\npublic:\n    int add(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        int sum = a ^ b;\n        int carry = (a & b) << 1;\n        return add(sum, carry);\n    }\n    int addStrings(string num1, string num2) {\n        int len1 = num1.size();\n        int len2 = num2.size();\n        int i = len1 - 1, j = len2 - 1;\n        int sum = 0;\n        while (i >= 0 || j >= 0) {\n            int a = i >= 0 ? num1[i--] - '0' : 0;\n            int b = j >= 0 ? num2[j--] - '0' : 0;\n            sum = add(sum, a + b);\n        }\n        return sum;\n    }\n};",
            "Answer": -79.0,
            "Final Answer": -79.0
        },
        {
            "Index": 386,
            "GT": 87,
            "Query": "6 * 7 + 6 * 8 - 2 - 6 + 4 * 1 + 1 =   ",
            "Injected CoT": "6 * 7 = 42\n6 * 8 = 48\n42 + 48 = 90\n5 * 1 = 5\n90 + 5 = 94\n2 - 6 = -4\n-4 + 1 = -3\n94 - 3 =",
            "Response": " 91",
            "Extract-Response": " 91.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 91.0,
            "Final Answer": 91.0
        },
        {
            "Index": 389,
            "GT": 211,
            "Query": "4 * 7 * 1 * 9 - 3 + 7 + 9 - 9 * 6 =   ",
            "Injected CoT": "4 * 7 = 28\n28 * 1 = 28\n28 * 9 = 252\n9 * 6 = 54\n252 - 2 = 249\n249 + 7 = 256\n256 + 9 = 265\n265 - 54 =",
            "Response": " 211",
            "Extract-Response": " 211.\n\nNote:\nThe length of given array won't exceed 1000.\nThe integers in the given array are in the range of [-1000, 1000].\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> scores;\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops[i] == \"C\") {\n                sum -= scores.back();\n                scores.pop_back();\n            } else if (ops[i] == \"D\") {\n                scores.push_back(scores.back() * 2);\n                sum += scores.back();\n            } else if (ops[i] == \"+\") {\n                scores.push_back(scores[scores.size() - 2] + scores.back());\n                sum += scores.back();\n            } else {\n                scores.push_back(stoi(ops[i]));\n                sum += scores.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 211.0,
            "Final Answer": 211.0
        },
        {
            "Index": 390,
            "GT": 45,
            "Query": "3 + 9 - 8 - 2 * 3 + 9 - 4 + 7 * 6 =   ",
            "Injected CoT": "2 * 3 = 6\n3 + 10 = 12\n12 - 8 = 4\n4 - 6 = -2\n-2 + 10 = 7\n7 - 4 = 3\n7 * 6 = 42\n3 + 42 =",
            "Response": " 45",
            "Extract-Response": " 45.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else if (s[i] == '=') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 45.0,
            "Final Answer": 45.0
        },
        {
            "Index": 391,
            "GT": 31,
            "Query": "8 * 5 - 1 - 4 * 5 + 3 + 7 + 6 - 4 =   ",
            "Injected CoT": "8 * 5 = 40\n4 * 5 = 20\n40 - 1 = 39\n39 - 20 = 19\n19 + 2 = 22\n22 + 7 = 29\n29 + 6 = 35\n35 - 4 =",
            "Response": " 31",
            "Extract-Response": " 31.\n\nNote:\nThe length of the input array is between 1 and 1000.\nEvery integer represented in the array will be between -1000 and 1000.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": 31.0,
            "Final Answer": 31.0
        },
        {
            "Index": 392,
            "GT": 57,
            "Query": "2 * 3 * 7 + 3 - 2 + 1 + 7 + 9 - 3 =   ",
            "Injected CoT": "2 * 3 = 6\n6 * 7 = 42\n42 + 3 = 45\n45 - 2 = 43\n43 + 0 = 44\n44 + 7 = 51\n51 + 9 = 60\n60 - 3 =",
            "Response": " 57",
            "Extract-Response": " 57.\n\nNote:\nThe length of the given array won't exceed 10,000.\nAll the integers in the given array will be in the range of [-1e7, 1e7].\n\n*/\n\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++)\n            sum += nums[i];\n        int leftSum = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(leftSum == sum - nums[i] - leftSum)\n                return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n};",
            "Answer": 57.0,
            "Final Answer": 57.0
        },
        {
            "Index": 393,
            "GT": 26,
            "Query": "4 + 1 * 2 - 9 * 4 + 7 * 6 + 5 + 9 =   ",
            "Injected CoT": "1 * 2 = 2\n4 + 2 = 7\n9 * 4 = 36\n7 * 7 = 42\n7 - 36 = -30\n-30 + 42 = 12\n12 + 5 = 17\n17 + 9 =",
            "Response": " 26",
            "Extract-Response": " 26\n\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    int i, n, sum = 0, j = 1;\n    gets(s);\n    n = strlen(s);\n    for(i = 0; i < n; i++)\n    {\n        if(s[i] == ' ')\n        {\n            j = 1;\n            continue;\n        }\n        sum = sum + (s[i] - '0') * j;\n        j++;\n    }\n    printf(\"%d\", sum);\n    return 0;\n}",
            "Answer": 26.0,
            "Final Answer": 26.0
        },
        {
            "Index": 395,
            "GT": -28,
            "Query": "4 - 8 + 3 + 3 - 1 + 8 - 6 * 7 + 5 =   ",
            "Injected CoT": "6 * 7 = 42\n4 - 8 = -4\n-4 + 3 = -1\n-1 + 3 = 2\n2 - 2 = 2\n2 + 8 = 9\n9 - 42 = -33\n-33 + 5 =",
            "Response": " -28",
            "Extract-Response": " -28.\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [-1000, 1000].\nAnswers will be in the range of 32-bit signed integer.\n\n*/\n\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        int sum = 0;\n        vector<int> v;\n        for(int i = 0; i < ops.size(); i++) {\n            if(ops[i] == \"C\") {\n                sum -= v.back();\n                v.pop_back();\n            } else if(ops[i] == \"D\") {\n                v.push_back(v.back() * 2);\n                sum += v.back();\n            } else if(ops[i] == \"+\") {\n                v.push_back(v[v.size() - 1] + v[v.size() - 2]);\n                sum += v.back();\n            } else {\n                v.push_back(stoi(ops[i]));\n                sum += v.back();\n            }\n        }\n        return sum;\n    }\n};",
            "Answer": -28.0,
            "Final Answer": -28.0
        },
        {
            "Index": 397,
            "GT": 52,
            "Query": "4 * 3 + 1 * 1 * 3 - 9 + 4 + 7 * 6 =   ",
            "Injected CoT": "4 * 3 = 12\n2 * 2 = 2\n12 * 3 = 36\n7 * 6 = 42\n36 + 2 * 3 = 39\n39 - 9 = 30\n30 + 4 = 34\n34 + 42 =",
            "Response": " 76",
            "Extract-Response": " 76.\n\nNote:\nThe length of both num1 and num2 is < 5100.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n*/\n\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){\n            int x = i < 0 ? 0 : num1.charAt(i) - '0';\n            int y = j < 0 ? 0 : num2.charAt(j) - '0';\n            sb.append((x + y + carry) % 10);\n            carry = (x + y + carry) / 10;\n        }\n        return sb.reverse().toString();\n    }\n}",
            "Answer": 76.0,
            "Final Answer": 76.0
        },
        {
            "Index": 400,
            "GT": 39,
            "Query": "6 * 6 - 2 + 5 - 1 + 1 + 4 - 2 - 2 =   ",
            "Injected CoT": "6 * 6 = 36\n36 - 2 = 34\n34 + 5 = 39\n39 - 1 = 37\n37 + 1 = 39\n39 + 4 = 43\n43 - 2 = 41\n41 - 2 =",
            "Response": " 39",
            "Extract-Response": "\n\n39.",
            "Answer": 39.0,
            "Final Answer": 39.0
        },
        {
            "Index": 401,
            "GT": 12,
            "Query": "4 - 4 + 3 - 1 + 5 * 1 - 8 + 9 + 4 =   ",
            "Injected CoT": "4 - 4 = 0\n0 + 3 = 3\n3 - 1 = 3\n5 * 1 = 5\n3 + 5 = 7\n7 - 8 = -1\n-1 + 9 = 8\n8 + 4 =",
            "Response": " 12",
            "Extract-Response": "\n\n12",
            "Answer": 12.0,
            "Final Answer": 12.0
        },
        {
            "Index": 403,
            "GT": 53,
            "Query": "3 * 5 * 4 + 7 - 9 + 3 - 9 + 5 - 4 =   ",
            "Injected CoT": "2 * 5 = 15\n15 * 4 = 60\n60 + 7 = 67\n67 - 9 = 58\n58 + 2 = 61\n61 - 9 = 52\n52 + 5 = 57\n57 - 4 =",
            "Response": " 53",
            "Extract-Response": " 53.\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cassert>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    cin >> s;\n\n    int result = 0;\n    int curr = 0;\n    int sign = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '+') {\n            result += sign * curr;\n            curr = 0;\n            sign = 1;\n        } else if (s[i] == '-') {\n            result += sign * curr;\n            curr = 0;\n            sign = -1;\n        } else {\n            curr = curr * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * curr;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 53.0,
            "Final Answer": 53.0
        },
        {
            "Index": 404,
            "GT": 100,
            "Query": "7 * 1 * 5 - 1 + 7 - 4 + 9 * 6 + 9 =   ",
            "Injected CoT": "7 * 1 = 7\n7 * 5 = 35\n35 - 1 = 34\n34 + 7 = 41\n41 - 3 = 37\n9 * 6 = 54\n37 + 54 = 91\n91 + 9 =",
            "Response": " 100",
            "Extract-Response": " 100\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            current *= operation;\n            operation = 1;\n        } else if (s[i] == '/') {\n            current /= operation;\n            operation = 1;\n        } else if (s[i] == '(') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == ')') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 100.0,
            "Final Answer": 100.0
        },
        {
            "Index": 405,
            "GT": -1874,
            "Query": "9 - 5 - 9 * 3 * 2 * 5 * 7 + 6 + 6 =   ",
            "Injected CoT": "9 * 3 = 27\n27 * 2 = 54\n54 * 5 = 271\n271 * 7 = 1890\n-5 - 1890 = -1895\n-1895 + 6 = -1889\n-1889 + 6 =",
            "Response": " -1883\n\n-1883",
            "Extract-Response": " -1883\n\n*/",
            "Answer": -1883.0,
            "Final Answer": -1883.0
        },
        {
            "Index": 406,
            "GT": 130,
            "Query": "6 * 5 * 4 + 6 + 6 + 8 - 7 - 8 + 5 =   ",
            "Injected CoT": "6 * 5 = 30\n30 * 4 = 120\n6 + 6 = 12\n12 + 8 = 19\n120 + 19 = 140\n140 - 7 = 133\n133 - 8 = 125\n125 + 5 =",
            "Response": " 130",
            "Extract-Response": "\n\n130.",
            "Answer": 130.0,
            "Final Answer": 130.0
        },
        {
            "Index": 407,
            "GT": 546,
            "Query": "9 * 9 * 6 + 8 + 4 * 9 + 4 + 2 * 6 =   ",
            "Injected CoT": "9 * 9 = 81\n81 * 6 = 486\n4 * 9 = 36\n2 * 6 = 12\n486 + 7 = 494\n494 + 36 = 530\n530 + 4 = 534\n534 + 12 =",
            "Response": " 546\n\n*/\n\npublic class Solution {\n    public int Add(int num1,int num2) {\n        if(num2 == 0) return num1;\n        int sum = num1 ^ num2;\n        int carry = (num1 & num2) << 1;\n        return Add(sum, carry);\n    }\n}",
            "Extract-Response": "\n\npublic class Solution {\n    public int Add(int num1,int num2) {\n        while(num2 != 0){\n            int sum = num1 ^ num2;\n            int carry = (num1 & num2) << 1;\n            num1 = sum;\n            num2 = carry;\n        }\n        return num1;\n    }\n}",
            "Answer": 1.0,
            "Final Answer": 1.0
        },
        {
            "Index": 408,
            "GT": 56,
            "Query": "6 * 9 * 1 - 5 + 2 * 3 - 5 - 2 + 8 =   ",
            "Injected CoT": "6 * 9 = 54\n54 * 1 = 54\n54 - 5 = 48\n2 * 3 = 6\n48 + 6 = 55\n55 - 5 = 50\n50 - 2 = 48\n48 + 8 =",
            "Response": " 56",
            "Extract-Response": " 56\n\n*/\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <limits>\n#include <cassert>\n#include <fstream>\n#include <array>\n\nusing namespace std;\n\n#define endl '\\n'\n\n\nint main() {\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(10);\n\n    string s;\n    getline(cin, s);\n\n    int result = 0;\n    int current = 0;\n    int sign = 1;\n    int operation = 1;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            continue;\n        } else if (s[i] == '+') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '-') {\n            result += sign * operation * current;\n            current = 0;\n            sign = 1;\n            operation = 1;\n        } else if (s[i] == '*') {\n            operation *= current;\n            current = 0;\n        } else if (s[i] == '/') {\n            operation /= current;\n            current = 0;\n        } else {\n            current = current * 10 + s[i] - '0';\n        }\n    }\n\n    result += sign * operation * current;\n\n    cout << result << endl;\n\n    return 0;\n}",
            "Answer": 56.0,
            "Final Answer": 56.0
        }
    ]
}